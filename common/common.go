//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains wrapper types and utilities common to all of the
// OOXML document formats.
//
// Package common contains common properties used by the subpackages.
package common ;import (_dfc "archive/zip";_efb "bytes";_ee "encoding/xml";_ab "fmt";_geg "github.com/unidoc/unioffice";_bgb "github.com/unidoc/unioffice/measurement";_cded "github.com/unidoc/unioffice/schema/soo/dml";_accb "github.com/unidoc/unioffice/schema/soo/ofc/custom_properties";_fabb "github.com/unidoc/unioffice/schema/soo/ofc/docPropsVTypes";_cgf "github.com/unidoc/unioffice/schema/soo/ofc/extended_properties";_cdg "github.com/unidoc/unioffice/schema/soo/pkg/content_types";_b "github.com/unidoc/unioffice/schema/soo/pkg/metadata/core_properties";_edef "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_ecbf "github.com/unidoc/unioffice/zippkg";_cgd "image";_ "image/gif";_ "image/jpeg";_ "image/png";_ede "os";_gec "regexp";_acb "strconv";_fda "strings";_ae "time";);

// RelID returns the relationship ID.
func (_eed ImageRef )RelID ()string {return _eed ._affc };

// SetAuthor records the author of the document.
func (_fb CoreProperties )SetAuthor (s string ){if _fb ._dbg .Creator ==nil {_fb ._dbg .Creator =&_geg .XSDAny {XMLName :_ee .Name {Local :"\u0064\u0063\u003a\u0063\u0072\u0065\u0061\u0074\u006f\u0072"}};};_fb ._dbg .Creator .Data =[]byte (s );};func (_adgg CustomProperties )SetPropertyAsOblob (name ,oblob string ){_ebd :=_adgg .getNewProperty (name );_ebd .Oblob =&oblob ;_adgg .setProperty (_ebd );};

// SetCreated sets the time that the document was created.
func (_afb CoreProperties )SetCreated (t _ae .Time ){_afb ._dbg .Created =_afgb (t ,"\u0064c\u0074e\u0072\u006d\u0073\u003a\u0063\u0072\u0065\u0061\u0074\u0065\u0064");};func (_aeb *ImageRef )SetRelID (id string ){_aeb ._affc =id };func (_ggc CustomProperties )SetPropertyAsI2 (name string ,i2 int16 ){_gebf :=_ggc .getNewProperty (name );_gebf .I2 =&i2 ;_ggc .setProperty (_gebf );};

// AddRelationship adds a relationship.
func (_bbb Relationships )AddRelationship (target ,ctype string )Relationship {if !_fda .HasPrefix (ctype ,"\u0068t\u0074\u0070\u003a\u002f\u002f"){_geg .Log ("\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006es\u0068\u0069\u0070 t\u0079\u0070\u0065\u0020\u0025\u0073 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069t\u0068\u0020\u0027\u0068\u0074\u0074\u0070\u003a/\u002f\u0027",ctype );};_fgf :=_edef .NewRelationship ();_fdag :=len (_bbb ._cga .Relationship )+1;_gd :=map[string ]struct{}{};for _ ,_a :=range _bbb ._cga .Relationship {_gd [_a .IdAttr ]=struct{}{};};for _ ,_gge :=_gd [_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_fdag )];_gge ;_ ,_gge =_gd [_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_fdag )]{_fdag ++;};_fgf .IdAttr =_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_fdag );_fgf .TargetAttr =target ;_fgf .TypeAttr =ctype ;_bbb ._cga .Relationship =append (_bbb ._cga .Relationship ,_fgf );return Relationship {_fgf };};

// AddAutoRelationship adds a relationship with an automatically generated
// filename based off of the type. It should be preferred over AddRelationship
// to ensure consistent filenames are maintained.
func (_ceca Relationships )AddAutoRelationship (dt _geg .DocType ,src string ,idx int ,ctype string )Relationship {return _ceca .AddRelationship (_geg .RelativeFilename (dt ,src ,ctype ,idx ),ctype );};func (_bed CustomProperties )setProperty (_gb *_accb .CT_Property ){_ffbb :=_bed .getPropertyByName (*_gb .NameAttr );if _ffbb ==nil {_bed ._ebe .Property =append (_bed ._ebe .Property ,_gb );}else {_gb .FmtidAttr =_ffbb .FmtidAttr ;if _ffbb .PidAttr ==0{_gb .PidAttr =_ffbb .PidAttr ;};_gb .LinkTargetAttr =_ffbb .LinkTargetAttr ;*_ffbb =*_gb ;};};

// Title returns the Title of the document
func (_faa CoreProperties )Title ()string {if _faa ._dbg .Title !=nil {return string (_faa ._dbg .Title .Data );};return "";};func (_adcf CustomProperties )SetPropertyAsBstr (name string ,bstr string ){_dfa :=_adcf .getNewProperty (name );_dfa .Bstr =&bstr ;_adcf .setProperty (_dfa );};

// X returns the underlying raw XML data.
func (_faac Relationships )X ()*_edef .Relationships {return _faac ._cga };func (_efe CustomProperties )getPropertyByName (_afg string )*_accb .CT_Property {_af :=_efe ._ebe .Property ;for _ ,_dad :=range _af {if *_dad .NameAttr ==_afg {return _dad ;};};return nil ;};

// LastModifiedBy returns the name of the last person to modify the document
func (_fbg CoreProperties )LastModifiedBy ()string {if _fbg ._dbg .LastModifiedBy !=nil {return *_fbg ._dbg .LastModifiedBy ;};return "";};var ReleasedAt =_ae .Date (_bfb ,_gda ,_fdc ,_fee ,_ed ,0,0,_ae .UTC );

// RemoveOverrideByIndex removes an override given a path and override index.
func (_caf ContentTypes )RemoveOverrideByIndex (path string ,indexToFind int )error {_feec :=path [0:len (path )-5];if !_fda .HasPrefix (_feec ,"\u002f"){_feec ="\u002f"+_feec ;};_bgbfa ,_fefd :=_gec .Compile (_feec +"\u0028\u005b\u0030-\u0039\u005d\u002b\u0029\u002e\u0078\u006d\u006c");if _fefd !=nil {return _fefd ;};_edd :=0;_aaea :=-1;for _eaa ,_feg :=range _caf ._gf .Override {if _bbc :=_bgbfa .FindStringSubmatch (_feg .PartNameAttr );len (_bbc )> 1{if _edd ==indexToFind {_aaea =_eaa ;}else if _edd > indexToFind {_g ,_ :=_acb .Atoi (_bbc [1]);_g --;_feg .PartNameAttr =_ab .Sprintf ("\u0025\u0073\u0025\u0064\u002e\u0078\u006d\u006c",_feec ,_g );};_edd ++;};};if _aaea > -1{copy (_caf ._gf .Override [_aaea :],_caf ._gf .Override [_aaea +1:]);_caf ._gf .Override =_caf ._gf .Override [0:len (_caf ._gf .Override )-1];};return nil ;};

// Format returns the format of the underlying image
func (_gebg ImageRef )Format ()string {return _gebg ._adggd .Format };

// Category returns the category of the document
func (_cbc CoreProperties )Category ()string {if _cbc ._dbg .Category !=nil {return *_cbc ._dbg .Category ;};return "";};

// ImageFromBytes returns an Image struct for an in-memory image. You can also
// construct an Image directly if the file and size are known.
func ImageFromBytes (data []byte )(Image ,error ){_ec :=Image {};_ad ,_def ,_e :=_cgd .Decode (_efb .NewReader (data ));if _e !=nil {return _ec ,_ab .Errorf ("\u0075n\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0070\u0061r\u0073e\u0020i\u006d\u0061\u0067\u0065\u003a\u0020\u0025s",_e );};_ec .Data =&data ;_ec .Format =_def ;_ec .Size =_ad .Bounds ().Size ();return _ec ,nil ;};

// SetContentStatus records the content status of the document.
func (_da CoreProperties )SetContentStatus (s string ){_da ._dbg .ContentStatus =&s };

// NewCoreProperties constructs a new CoreProperties.
func NewCoreProperties ()CoreProperties {return CoreProperties {_dbg :_b .NewCoreProperties ()}};

// AddExtraFileFromZip is used when reading an unsupported file from an OOXML
// file. This ensures that unsupported file content will at least round-trip
// correctly.
func (_cdb *DocBase )AddExtraFileFromZip (f *_dfc .File )error {_gde ,_cecf :=_ecbf .ExtractToDiskTmp (f ,_cdb .TmpPath );if _cecf !=nil {return _ab .Errorf ("\u0065\u0072r\u006f\u0072\u0020\u0065x\u0074\u0072a\u0063\u0074\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u0069\u006ce\u003a\u0020\u0025\u0073",_cecf );};_cdb .ExtraFiles =append (_cdb .ExtraFiles ,ExtraFile {ZipPath :f .Name ,DiskPath :_gde });return nil ;};

// Clear removes any existing relationships.
func (_eb Relationships )Clear (){_eb ._cga .Relationship =nil };

// SetApplication sets the name of the application that created the document.
func (_bdc AppProperties )SetApplication (s string ){_bdc ._bfc .Application =&s };

// Author returns the author of the document
func (_adf CoreProperties )Author ()string {if _adf ._dbg .Creator !=nil {return string (_adf ._dbg .Creator .Data );};return "";};

// SetApplicationVersion sets the version of the application that created the
// document.  Per MS, the verison string mut be in the form 'XX.YYYY'.
func (_ba AppProperties )SetApplicationVersion (s string ){_ba ._bfc .AppVersion =&s };

// RemoveOverride removes an override given a path.
func (_aeda ContentTypes )RemoveOverride (path string ){if !_fda .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};for _bg ,_ddg :=range _aeda ._gf .Override {if _ddg .PartNameAttr ==path {copy (_aeda ._gf .Override [_bg :],_aeda ._gf .Override [_bg +1:]);_aeda ._gf .Override =_aeda ._gf .Override [0:len (_aeda ._gf .Override )-1];};};};

// X returns the inner wrapped XML type.
func (_bgg AppProperties )X ()*_cgf .Properties {return _bgg ._bfc };

// NewTheme constructs a new theme.
func NewTheme ()Theme {return Theme {_cded .NewTheme ()}};

// Application returns the name of the application that created the document.
// For gooxml created documents, it defaults to github.com/unidoc/unioffice
func (_aedf AppProperties )Application ()string {if _aedf ._bfc .Application !=nil {return *_aedf ._bfc .Application ;};return "";};

// CoreProperties contains document specific properties.
type CoreProperties struct{_dbg *_b .CoreProperties };

// Size returns the size of an image
func (_bfa ImageRef )Size ()_cgd .Point {return _bfa ._adggd .Size };func UtcTimeFormat (t _ae .Time )string {return t .Format (_bd )+"\u0020\u0055\u0054\u0043"};

// SetTarget set the target (path) of a relationship.
func (_fea Relationship )SetTarget (s string ){_fea ._aaa .TargetAttr =s };func (_egac CustomProperties )SetPropertyAsVstream (name string ,vstream *_fabb .Vstream ){_bgcd :=_egac .getNewProperty (name );_bgcd .Vstream =vstream ;_egac .setProperty (_bgcd );};

// SetLastModifiedBy records the last person to modify the document.
func (_cd CoreProperties )SetLastModifiedBy (s string ){_cd ._dbg .LastModifiedBy =&s };func (_cbb CustomProperties )PropertiesList ()[]*_accb .CT_Property {return _cbb ._ebe .Property };

// SetLanguage records the language of the document.
func (_deff CoreProperties )SetLanguage (s string ){_deff ._dbg .Language =&_geg .XSDAny {XMLName :_ee .Name {Local :"d\u0063\u003a\u006c\u0061\u006e\u0067\u0075\u0061\u0067\u0065"}};_deff ._dbg .Language .Data =[]byte (s );};const _bfb =2020;

// TblStyle returns the TblStyle property.
func (_cbg TableStyles )TblStyle ()[]*_cded .CT_TableStyle {return _cbg ._egdc .TblStyle };

// ApplicationVersion returns the version of the application that created the
// document.
func (_df AppProperties )ApplicationVersion ()string {if _df ._bfc .AppVersion !=nil {return *_df ._bfc .AppVersion ;};return "";};

// X returns the inner wrapped XML type.
func (_gbfg Relationship )X ()*_edef .Relationship {return _gbfg ._aaa };func (_cde CustomProperties )SetPropertyAsOstorage (name string ,ostorage string ){_cab :=_cde .getNewProperty (name );_cab .Ostorage =&ostorage ;_cde .setProperty (_cab );};

// MakeImageRef constructs an image reference which is a reference to a
// particular image file inside a document.  The same image can be used multiple
// times in a document by re-use the ImageRef.
func MakeImageRef (img Image ,d *DocBase ,rels Relationships )ImageRef {return ImageRef {_adggd :img ,_fd :d ,_bgc :rels };};

// SetDocSecurity sets the document security flag.
func (_gdd AppProperties )SetDocSecurity (v int32 ){_gdd ._bfc .DocSecurity =_geg .Int32 (v )};

// TableStyles contains document specific properties.
type TableStyles struct{_egdc *_cded .TblStyleLst };func (_cbf CustomProperties )SetPropertyAsLpwstr (name string ,lpwstr string ){_fgde :=_cbf .getNewProperty (name );_fgde .Lpwstr =&lpwstr ;_cbf .setProperty (_fgde );};

// FindRIDForN returns the relationship ID for the i'th relationship of type t.
func (_cgb Relationships )FindRIDForN (i int ,t string )string {for _ ,_aad :=range _cgb ._cga .CT_Relationships .Relationship {if _aad .TypeAttr ==t {if i ==0{return _aad .IdAttr ;};i --;};};return "";};func _dccb (_cbbe *_geg .XSDAny )_ae .Time {if _cbbe ==nil {return _ae .Time {};};_ca ,_edgg :=_ae .Parse (_bab ,string (_cbbe .Data ));if _edgg !=nil {_geg .Log ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0074\u0069\u006d\u0065 \u0066\u0072\u006f\u006d\u0020\u0025\u0073\u003a\u0020\u0025\u0073",string (_cbbe .Data ),_edgg );};return _ca ;};const Version ="\u0031\u002e\u0034.\u0030";func (_agb CustomProperties )SetPropertyAsVector (name string ,vector *_fabb .Vector ){_gca :=_agb .getNewProperty (name );_gca .Vector =vector ;_agb .setProperty (_gca );};func (_gaf CustomProperties )SetPropertyAsUint (name string ,ui uint ){_cf :=_gaf .getNewProperty (name );_cdf :=uint32 (ui );_cf .Uint =&_cdf ;_gaf .setProperty (_cf );};

// X returns the inner wrapped XML type.
func (_aff TableStyles )X ()*_cded .TblStyleLst {return _aff ._egdc };func (_cfb CustomProperties )SetPropertyAsUi2 (name string ,ui2 uint16 ){_ced :=_cfb .getNewProperty (name );_ced .Ui2 =&ui2 ;_cfb .setProperty (_ced );};

// NewTableStyles constructs a new TableStyles.
func NewTableStyles ()TableStyles {return TableStyles {_egdc :_cded .NewTblStyleLst ()}};func (_adc CustomProperties )SetPropertyAsClsid (name string ,clsid string ){_acba :=_adc .getNewProperty (name );_acba .Clsid =&clsid ;_adc .setProperty (_acba );};

// EnsureOverride ensures that an override for the given path exists, adding it if necessary
func (_ggdg ContentTypes )EnsureOverride (path ,contentType string ){for _ ,_fgc :=range _ggdg ._gf .Override {if _fgc .PartNameAttr ==path {if _fda .HasPrefix (contentType ,"\u0068\u0074\u0074\u0070"){_geg .Log ("\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u0074\u0079p\u0065\u0020\u0027%\u0073\u0027\u0020\u0069\u0073\u0020\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u002c m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0068\u0074\u0074\u0070",contentType );};_fgc .ContentTypeAttr =contentType ;return ;};};_ggdg .AddOverride (path ,contentType );};

// Remove removes an existing relationship.
func (_be Relationships )Remove (rel Relationship )bool {for _ac ,_degc :=range _be ._cga .Relationship {if _degc ==rel ._aaa {copy (_be ._cga .Relationship [_ac :],_be ._cga .Relationship [_ac +1:]);_be ._cga .Relationship =_be ._cga .Relationship [0:len (_be ._cga .Relationship )-1];return true ;};};return false ;};

// NewCustomProperties constructs a new CustomProperties.
func NewCustomProperties ()CustomProperties {return CustomProperties {_ebe :_accb .NewProperties ()}};

// ImageFromFile reads an image from a file on disk. It doesn't keep the image
// in memory and only reads it to determine the format and size.  You can also
// construct an Image directly if the file and size are known.
func ImageFromFile (path string )(Image ,error ){_abd ,_ace :=_ede .Open (path );_ggdd :=Image {};if _ace !=nil {return _ggdd ,_ab .Errorf ("\u0065\u0072\u0072or\u0020\u0072\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ace );};defer _abd .Close ();_ffe ,_gee ,_ace :=_cgd .Decode (_abd );if _ace !=nil {return _ggdd ,_ab .Errorf ("\u0075n\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0070\u0061r\u0073e\u0020i\u006d\u0061\u0067\u0065\u003a\u0020\u0025s",_ace );};_ggdd .Path =path ;_ggdd .Format =_gee ;_ggdd .Size =_ffe .Bounds ().Size ();return _ggdd ,nil ;};

// EnsureDefault esnures that an extension and default content type exist,
// adding it if necessary.
func (_bb ContentTypes )EnsureDefault (ext ,contentType string ){for _ ,_bae :=range _bb ._gf .Default {if _bae .ExtensionAttr ==ext {_bae .ContentTypeAttr =contentType ;return ;};};_cec :=&_cdg .Default {};_cec .ContentTypeAttr =contentType ;_cec .ExtensionAttr =ext ;_bb ._gf .Default =append (_bb ._gf .Default ,_cec );};

// Type returns the type of a relationship.
func (_ggd Relationship )Type ()string {return _ggd ._aaa .TypeAttr };const _ed =10;func (_fg CustomProperties )SetPropertyAsUi1 (name string ,ui1 uint8 ){_bgf :=_fg .getNewProperty (name );_bgf .Ui1 =&ui1 ;_fg .setProperty (_bgf );};const _fdc =30;

// DefAttr returns the DefAttr property.
func (_bac TableStyles )DefAttr ()string {return _bac ._egdc .DefAttr };const _gda =6;

// CopyOverride copies override content type for a given `path` and puts it with a path `newPath`.
func (_dabd ContentTypes )CopyOverride (path ,newPath string ){if !_fda .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};if !_fda .HasPrefix (newPath ,"\u002f"){newPath ="\u002f"+newPath ;};for _ecc :=range _dabd ._gf .Override {if _dabd ._gf .Override [_ecc ].PartNameAttr ==path {_agg :=*_dabd ._gf .Override [_ecc ];_agg .PartNameAttr =newPath ;_dabd ._gf .Override =append (_dabd ._gf .Override ,&_agg );};};};

// SetCompany sets the name of the company that created the document.
func (_bgfb AppProperties )SetCompany (s string ){_bgfb ._bfc .Company =&s };func (_aebf Relationship )String ()string {return _ab .Sprintf ("\u007b\u0049\u0044\u003a \u0025\u0073\u0020\u0054\u0061\u0072\u0067\u0065\u0074\u003a \u0025s\u0020\u0054\u0079\u0070\u0065\u003a\u0020%\u0073\u007d",_aebf .ID (),_aebf .Target (),_aebf .Type ());};const _fee =16;func (_ccd CustomProperties )SetPropertyAsUi8 (name string ,ui8 uint64 ){_dcf :=_ccd .getNewProperty (name );_dcf .Ui8 =&ui8 ;_ccd .setProperty (_dcf );};func (_cgc CustomProperties )SetPropertyAsInt (name string ,i int ){_fff :=_cgc .getNewProperty (name );_ffb :=int32 (i );_fff .Int =&_ffb ;_cgc .setProperty (_fff );};func (_ecb CustomProperties )SetPropertyAsR4 (name string ,r4 float32 ){_fca :=_ecb .getNewProperty (name );_fca .R4 =&r4 ;_ecb .setProperty (_fca );};

// CustomProperties contains document specific properties.
type CustomProperties struct{_ebe *_accb .Properties };

// AddOverride adds an override content type for a given path name.
func (_ead ContentTypes )AddOverride (path ,contentType string ){if !_fda .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};if _fda .HasPrefix (contentType ,"\u0068\u0074\u0074\u0070"){_geg .Log ("\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u0074\u0079p\u0065\u0020\u0027%\u0073\u0027\u0020\u0069\u0073\u0020\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u002c m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0068\u0074\u0074\u0070",contentType );};_dg :=_cdg .NewOverride ();_dg .PartNameAttr =path ;_dg .ContentTypeAttr =contentType ;_ead ._gf .Override =append (_ead ._gf .Override ,_dg );};

// SetCategory records the category of the document.
func (_ce CoreProperties )SetCategory (s string ){_ce ._dbg .Category =&s };

// ID returns the ID of a relationship.
func (_cb Relationship )ID ()string {return _cb ._aaa .IdAttr };

// IsEmpty returns true if there are no relationships.
func (_ecf Relationships )IsEmpty ()bool {return _ecf ._cga ==nil ||len (_ecf ._cga .Relationship )==0};func (_dee CustomProperties )getNewProperty (_bf string )*_accb .CT_Property {_gg :=_dee ._ebe .Property ;_fab :=int32 (1);for _ ,_fcb :=range _gg {if _fcb .PidAttr > _fab {_fab =_fcb .PidAttr ;};};_fef :=_accb .NewCT_Property ();_fef .NameAttr =&_bf ;_fef .PidAttr =_fab +1;return _fef ;};

// RelativeWidth returns the relative width of an image given a fixed height.
// This is used when setting image to a fixed height to calculate the width
// required to keep the same image aspect ratio.
func (_ef ImageRef )RelativeWidth (h _bgb .Distance )_bgb .Distance {_gga :=float64 (_ef .Size ().X )/float64 (_ef .Size ().Y );return h *_bgb .Distance (_gga );};

// Created returns the time that the document was created.
func (_gbf CoreProperties )Created ()_ae .Time {return _dccb (_gbf ._dbg .Created )};func (_egd CustomProperties )SetPropertyAsCy (name string ,cy string ){_d :=_egd .getNewProperty (name );_d .Cy =&cy ;_egd .setProperty (_d );};func (_gce CustomProperties )SetPropertyAsEmpty (name string ){_aed :=_gce .getNewProperty (name );_aed .Empty =_fabb .NewEmpty ();_gce .setProperty (_aed );};

// X returns the inner wrapped XML type.
func (_ga CustomProperties )X ()*_accb .Properties {return _ga ._ebe };func (_aa CustomProperties )SetPropertyAsUi4 (name string ,ui4 uint32 ){_cbaf :=_aa .getNewProperty (name );_cbaf .Ui4 =&ui4 ;_aa .setProperty (_cbaf );};func (_ge CustomProperties )SetPropertyAsStream (name string ,stream string ){_eac :=_ge .getNewProperty (name );_eac .Stream =&stream ;_ge .setProperty (_eac );};

// NewRelationship constructs a new relationship.
func NewRelationship ()Relationship {return Relationship {_edef .NewRelationship ()}};func (_gbd CustomProperties )SetPropertyAsFiletime (name string ,filetime _ae .Time ){_aae :=_gbd .getNewProperty (name );_aae .Filetime =&filetime ;_gbd .setProperty (_aae );};

// CustomProperty contains document specific property
type CustomProperty *_accb .CT_Property ;func (_fdcb CustomProperties )SetPropertyAsBlob (name ,blob string ){_acgg :=_fdcb .getNewProperty (name );_acgg .Blob =&blob ;_fdcb .setProperty (_acgg );};

// ExtraFile is an unsupported file type extracted from, or to be written to a
// zip package
type ExtraFile struct{ZipPath string ;DiskPath string ;};func (_eae CustomProperties )GetPropertyByName (name string )CustomProperty {_eccg :=_eae .getPropertyByName (name );if _eccg ==nil {return nil ;};return CustomProperty (_eccg );};

// Description returns the description of the document
func (_cg CoreProperties )Description ()string {if _cg ._dbg .Description !=nil {return string (_cg ._dbg .Description .Data );};return "";};

// NewRelationshipsCopy creates a new relationships wrapper as a copy of passed in instance.
func NewRelationshipsCopy (rels Relationships )Relationships {_edg :=*rels ._cga ;return Relationships {_cga :&_edg };};func (_aba CustomProperties )SetPropertyAsArray (name string ,array *_fabb .Array ){_fed :=_aba .getNewProperty (name );_fed .Array =array ;_aba .setProperty (_fed );};func (_ggb CustomProperties )SetPropertyAsLpstr (name string ,lpstr string ){_abg :=_ggb .getNewProperty (name );_abg .Lpstr =&lpstr ;_ggb .setProperty (_abg );};

// WriteExtraFiles writes the extra files to the zip package.
func (_fedc *DocBase )WriteExtraFiles (z *_dfc .Writer )error {for _ ,_eff :=range _fedc .ExtraFiles {if _eg :=_ecbf .AddFileFromDisk (z ,_eff .ZipPath ,_eff .DiskPath );_eg !=nil {return _eg ;};};return nil ;};

// RelativeHeight returns the relative height of an image given a fixed width.
// This is used when setting image to a fixed width to calculate the height
// required to keep the same image aspect ratio.
func (_fba ImageRef )RelativeHeight (w _bgb .Distance )_bgb .Distance {_geb :=float64 (_fba .Size ().Y )/float64 (_fba .Size ().X );return w *_bgb .Distance (_geb );};

// SetDescription records the description of the document.
func (_cgcg CoreProperties )SetDescription (s string ){if _cgcg ._dbg .Description ==nil {_cgcg ._dbg .Description =&_geg .XSDAny {XMLName :_ee .Name {Local :"\u0064\u0063\u003a\u0064\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e"}};};_cgcg ._dbg .Description .Data =[]byte (s );};

// SetLinksUpToDate sets the links up to date flag.
func (_ffbd AppProperties )SetLinksUpToDate (v bool ){_ffbd ._bfc .LinksUpToDate =_geg .Bool (v )};

// Hyperlink is just an appropriately configured relationship.
type Hyperlink Relationship ;func (_dd CustomProperties )SetPropertyAsError (name string ,error string ){_de :=_dd .getNewProperty (name );_de .Error =&error ;_dd .setProperty (_de );};

// DocBase is the type embedded in in the Document/Workbook/Presentation types
// that contains members common to all.
type DocBase struct{ContentTypes ContentTypes ;AppProperties AppProperties ;Rels Relationships ;CoreProperties CoreProperties ;CustomProperties CustomProperties ;Thumbnail _cgd .Image ;Images []ImageRef ;ExtraFiles []ExtraFile ;TmpPath string ;};

// CopyRelationship copies the relationship.
func (_gdb Relationships )CopyRelationship (idAttr string )(Relationship ,bool ){for _f :=range _gdb ._cga .Relationship {if _gdb ._cga .Relationship [_f ].IdAttr ==idAttr {_deg :=*_gdb ._cga .Relationship [_f ];_cce :=len (_gdb ._cga .Relationship )+1;_dag :=map[string ]struct{}{};for _ ,_bfg :=range _gdb ._cga .Relationship {_dag [_bfg .IdAttr ]=struct{}{};};for _ ,_bga :=_dag [_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_cce )];_bga ;_ ,_bga =_dag [_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_cce )]{_cce ++;};_deg .IdAttr =_ab .Sprintf ("\u0072\u0049\u0064%\u0064",_cce );_gdb ._cga .Relationship =append (_gdb ._cga .Relationship ,&_deg );return Relationship {&_deg },true ;};};return Relationship {},false ;};

// AppProperties contains properties specific to the document and the
// application that created it.
type AppProperties struct{_bfc *_cgf .Properties };

// NewRelationships creates a new relationship wrapper.
func NewRelationships ()Relationships {return Relationships {_cga :_edef .NewRelationships ()}};

// Image is a container for image information. It's used as we need format and
// and size information to use images.
// It contains either the filesystem path to the image, or the image itself.
type Image struct{Size _cgd .Point ;Format string ;Path string ;Data *[]byte ;};

// Theme is a drawingml theme.
type Theme struct{_fde *_cded .Theme };func (_fbe CustomProperties )SetPropertyAsDecimal (name string ,decimal float64 ){_ecd :=_fbe .getNewProperty (name );_ecd .Decimal =&decimal ;_fbe .setProperty (_ecd );};func (_ea CustomProperties )SetPropertyAsBool (name string ,b bool ){_gc :=_ea .getNewProperty (name );_gc .Bool =&b ;_ea .setProperty (_gc );};func (_dab CustomProperties )SetPropertyAsI1 (name string ,i1 int8 ){_fae :=_dab .getNewProperty (name );_fae .I1 =&i1 ;_dab .setProperty (_fae );};func (_dgc CustomProperties )SetPropertyAsI4 (name string ,i4 int32 ){_ag :=_dgc .getNewProperty (name );_ag .I4 =&i4 ;_dgc .setProperty (_ag );};const _bab ="2\u00300\u0036\u002d\u0030\u0031\u002d\u0030\u0032\u00541\u0035\u003a\u0030\u0034:0\u0035\u005a";

// SetModified sets the time that the document was modified.
func (_dgf CoreProperties )SetModified (t _ae .Time ){_dgf ._dbg .Modified =_afgb (t ,"\u0064\u0063t\u0065\u0072\u006ds\u003a\u006d\u006f\u0064\u0069\u0066\u0069\u0065\u0064");};

// AddHyperlink adds an external hyperlink relationship.
func (_bec Relationships )AddHyperlink (target string )Hyperlink {_fcd :=_bec .AddRelationship (target ,_geg .HyperLinkType );_fcd ._aaa .TargetModeAttr =_edef .ST_TargetModeExternal ;return Hyperlink (_fcd );};func (_gag CustomProperties )SetPropertyAsStorage (name string ,storage string ){_dde :=_gag .getNewProperty (name );_dde .Storage =&storage ;_gag .setProperty (_dde );};func (_acc CustomProperties )SetPropertyAsR8 (name string ,r8 float64 ){_gff :=_acc .getNewProperty (name );_gff .R8 =&r8 ;_acc .setProperty (_gff );};

// AddImageToZip adds an image (either from bytes or from disk) and adds it to the zip file.
func AddImageToZip (z *_dfc .Writer ,img ImageRef ,imageNum int ,dt _geg .DocType )error {_ade :=_geg .AbsoluteImageFilename (dt ,imageNum ,_fda .ToLower (img .Format ()));if img .Data ()!=nil &&len (*img .Data ())> 0{if _gbb :=_ecbf .AddFileFromBytes (z ,_ade ,*img .Data ());_gbb !=nil {return _gbb ;};}else if img .Path ()!=""{if _gbg :=_ecbf .AddFileFromDisk (z ,_ade ,img .Path ());_gbg !=nil {return _gbg ;};}else {return _ab .Errorf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u003a %\u002b\u0076",img );};return nil ;};

// X returns the inner raw content types.
func (_gcaf ContentTypes )X ()*_cdg .Types {return _gcaf ._gf };func (_bgbf CustomProperties )SetPropertyAsDate (name string ,date _ae .Time ){date =date .UTC ();_edc :=_bgbf .getNewProperty (name );_edc .Date =&date ;_bgbf .setProperty (_edc );};

// Relationship is a relationship within a .rels file.
type Relationship struct{_aaa *_edef .Relationship };

// NewAppProperties constructs a new AppProperties.
func NewAppProperties ()AppProperties {_cfa :=AppProperties {_bfc :_cgf .NewProperties ()};_cfa .SetCompany ("\u0046\u006f\u0078\u0079\u0055\u0074\u0069\u006c\u0073\u0020\u0065\u0068\u0066");_cfa .SetApplication ("g\u0069\u0074\u0068\u0075\u0062\u002ec\u006f\u006d\u002f\u0075\u006e\u0069\u0064\u006f\u0063/\u0075\u006e\u0069o\u0066f\u0069\u0063\u0065");_cfa .SetDocSecurity (0);_cfa .SetLinksUpToDate (false );var _ff ,_afd ,_fga int64 ;_ab .Sscanf (Version ,"\u0025\u0064\u002e\u0025\u0064\u002e\u0025\u0064",&_ff ,&_afd ,&_fga );_fgd :=float64 (_ff )+float64 (_afd )/10000.0;_cfa .SetApplicationVersion (_ab .Sprintf ("\u0025\u0030\u0037\u002e\u0034\u0066",_fgd ));return _cfa ;};const _bd ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// Relationships returns a slice of all of the relationships.
func (_babb Relationships )Relationships ()[]Relationship {_daa :=[]Relationship {};for _ ,_cba :=range _babb ._cga .Relationship {_daa =append (_daa ,Relationship {_cba });};return _daa ;};

// X returns the inner wrapped XML type.
func (_daf Theme )X ()*_cded .Theme {return _daf ._fde };func _afgb (_ffd _ae .Time ,_affg string )*_geg .XSDAny {_fa :=&_geg .XSDAny {XMLName :_ee .Name {Local :_affg }};_fa .Attrs =append (_fa .Attrs ,_ee .Attr {Name :_ee .Name {Local :"\u0078\u0073\u0069\u003a\u0074\u0079\u0070\u0065"},Value :"\u0064\u0063\u0074\u0065\u0072\u006d\u0073\u003a\u00573\u0043\u0044\u0054\u0046"});_fa .Attrs =append (_fa .Attrs ,_ee .Attr {Name :_ee .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u0073i"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0077\u0077\u0077\u002e\u0077\u0033\u002e\u006f\u0072\u0067\u002f\u00320\u0030\u0031\u002f\u0058\u004d\u004c\u0053\u0063\u0068\u0065\u006d\u0061\u002d\u0069\u006e\u0073\u0074\u0061\u006e\u0063\u0065"});_fa .Attrs =append (_fa .Attrs ,_ee .Attr {Name :_ee .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0063\u0074\u0065\u0072\u006d\u0073"},Value :"\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/"});_fa .Data =[]byte (_ffd .Format (_bab ));return _fa ;};

// Company returns the name of the company that created the document.
// For gooxml created documents, it defaults to github.com/unidoc/unioffice
func (_aebe AppProperties )Company ()string {if _aebe ._bfc .Company !=nil {return *_aebe ._bfc .Company ;};return "";};func (_efa CustomProperties )SetPropertyAsNull (name string ){_fe :=_efa .getNewProperty (name );_fe .Null =_fabb .NewNull ();_efa .setProperty (_fe );};

// ImageRef is a reference to an image within a document.
type ImageRef struct{_fd *DocBase ;_bgc Relationships ;_adggd Image ;_affc string ;};

// SetTitle records the title of the document.
func (_aede CoreProperties )SetTitle (s string ){if _aede ._dbg .Title ==nil {_aede ._dbg .Title =&_geg .XSDAny {XMLName :_ee .Name {Local :"\u0064\u0063\u003a\u0074\u0069\u0074\u006c\u0065"}};};_aede ._dbg .Title .Data =[]byte (s );};

// Data returns the data of an image file, if any.
func (_fag ImageRef )Data ()*[]byte {return _fag ._adggd .Data };

// Target returns the target (path) of a relationship.
func (_adg Relationship )Target ()string {return _adg ._aaa .TargetAttr };func (_bbd CustomProperties )SetPropertyAsI8 (name string ,i8 int64 ){_bee :=_bbd .getNewProperty (name );_bee .I8 =&i8 ;_bbd .setProperty (_bee );};

// AddDefault registers a default content type for a given file extension.
func (_fc ContentTypes )AddDefault (fileExtension string ,contentType string ){_dbc :=_cdg .NewDefault ();_dbc .ExtensionAttr =fileExtension ;_dbc .ContentTypeAttr =contentType ;_fc ._gf .Default =append (_fc ._gf .Default ,_dbc );};

// ContentTypes is the top level "[Content_Types].xml" in a zip package.
type ContentTypes struct{_gf *_cdg .Types };

// Path returns the path to an image file, if any.
func (_gfc ImageRef )Path ()string {return _gfc ._adggd .Path };

// ContentStatus returns the content status of the document (e.g. "Final", "Draft")
func (_eaac CoreProperties )ContentStatus ()string {if _eaac ._dbg .ContentStatus !=nil {return *_eaac ._dbg .ContentStatus ;};return "";};

// X returns the inner wrapped XML type.
func (_aaf CoreProperties )X ()*_b .CoreProperties {return _aaf ._dbg };func (_c CustomProperties )SetPropertyAsOstream (name string ,ostream string ){_dda :=_c .getNewProperty (name );_dda .Ostream =&ostream ;_c .setProperty (_dda );};

// NewContentTypes returns a wrapper around a newly constructed content-types.
func NewContentTypes ()ContentTypes {_eca :=ContentTypes {_gf :_cdg .NewTypes ()};_eca .AddDefault ("\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c");_eca .AddDefault ("\u0072\u0065\u006c\u0073","\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006fn\u002f\u0076\u006ed\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002dpa\u0063\u006b\u0061\u0067\u0065\u002e\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002b\u0078\u006d\u006c");_eca .AddDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_eca .AddDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_eca .AddDefault ("\u006a\u0070\u0067","\u0069m\u0061\u0067\u0065\u002f\u006a\u0070g");_eca .AddDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_eca .AddOverride ("\u002fd\u006fc\u0050\u0072\u006f\u0070\u0073/\u0063\u006fr\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073-\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002e\u0063\u006f\u0072\u0065\u002dp\u0072\u006f\u0070\u0065\u0072\u0074i\u0065\u0073\u002bx\u006d\u006c");_eca .AddOverride ("\u002f\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0061\u0070p\u002e\u0078\u006d\u006c","a\u0070\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u002e\u0065\u0078\u0074\u0065\u006e\u0064\u0065\u0064\u002dp\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073\u002b\u0078m\u006c");return _eca ;};

// Relationships represents a .rels file.
type Relationships struct{_cga *_edef .Relationships };

// Modified returns the time that the document was modified.
func (_acg CoreProperties )Modified ()_ae .Time {return _dccb (_acg ._dbg .Modified )};