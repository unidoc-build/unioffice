//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_ddf "github.com/unidoc/unioffice";_e "github.com/unidoc/unioffice/color";_fg "github.com/unidoc/unioffice/measurement";_af "github.com/unidoc/unioffice/schema/soo/dml";);func MakeShapeProperties (x *_af .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};

// X returns the inner wrapped XML type.
func (_fe Run )X ()*_af .EG_TextRun {return _fe ._ga };

// SetWidth sets the width of the shape.
func (_dbc ShapeProperties )SetWidth (w _fg .Distance ){_dbc .ensureXfrm ();if _dbc ._caa .Xfrm .Ext ==nil {_dbc ._caa .Xfrm .Ext =_af .NewCT_PositiveSize2D ();};_dbc ._caa .Xfrm .Ext .CxAttr =int64 (w /_fg .EMU );};

// SetText sets the run's text contents.
func (_ed Run )SetText (s string ){_ed ._ga .Br =nil ;_ed ._ga .Fld =nil ;if _ed ._ga .R ==nil {_ed ._ga .R =_af .NewCT_RegularTextRun ();};_ed ._ga .R .T =s ;};func (_deb LineProperties )SetSolidFill (c _e .Color ){_deb .clearFill ();_deb ._de .SolidFill =_af .NewCT_SolidColorFillProperties ();_deb ._de .SolidFill .SrgbClr =_af .NewCT_SRgbColor ();_deb ._de .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetSize sets the width and height of the shape.
func (_c ShapeProperties )SetSize (w ,h _fg .Distance ){_c .SetWidth (w );_c .SetHeight (h )};

// AddRun adds a new run to a paragraph.
func (_ggd Paragraph )AddRun ()Run {_gg :=MakeRun (_af .NewEG_TextRun ());_ggd ._cc .EG_TextRun =append (_ggd ._cc .EG_TextRun ,_gg .X ());return _gg ;};

// SetJoin sets the line join style.
func (_dg LineProperties )SetJoin (e LineJoin ){_dg ._de .Round =nil ;_dg ._de .Miter =nil ;_dg ._de .Bevel =nil ;switch e {case LineJoinRound :_dg ._de .Round =_af .NewCT_LineJoinRound ();case LineJoinBevel :_dg ._de .Bevel =_af .NewCT_LineJoinBevel ();case LineJoinMiter :_dg ._de .Miter =_af .NewCT_LineJoinMiterProperties ();};};

// SetBulletChar sets the bullet character for the paragraph.
func (_eg ParagraphProperties )SetBulletChar (c string ){if c ==""{_eg ._da .BuChar =nil ;}else {_eg ._da .BuChar =_af .NewCT_TextCharBullet ();_eg ._da .BuChar .CharAttr =c ;};};func (_fbg LineProperties )SetNoFill (){_fbg .clearFill ();_fbg ._de .NoFill =_af .NewCT_NoFillProperties ();};func (_eb ShapeProperties )clearFill (){_eb ._caa .NoFill =nil ;_eb ._caa .BlipFill =nil ;_eb ._caa .GradFill =nil ;_eb ._caa .GrpFill =nil ;_eb ._caa .SolidFill =nil ;_eb ._caa .PattFill =nil ;};

// SetSolidFill controls the text color of a run.
func (_cac RunProperties )SetSolidFill (c _e .Color ){_cac ._eef .NoFill =nil ;_cac ._eef .BlipFill =nil ;_cac ._eef .GradFill =nil ;_cac ._eef .GrpFill =nil ;_cac ._eef .PattFill =nil ;_cac ._eef .SolidFill =_af .NewCT_SolidColorFillProperties ();_cac ._eef .SolidFill .SrgbClr =_af .NewCT_SRgbColor ();_cac ._eef .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};func (_ef ShapeProperties )SetNoFill (){_ef .clearFill ();_ef ._caa .NoFill =_af .NewCT_NoFillProperties ();};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_af .EG_TextRun )Run {return Run {x }};func (_ea ShapeProperties )ensureXfrm (){if _ea ._caa .Xfrm ==nil {_ea ._caa .Xfrm =_af .NewCT_Transform2D ();};};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_af .CT_TextParagraph )Paragraph {return Paragraph {x }};

// SetSize sets the font size of the run text
func (_afc RunProperties )SetSize (sz _fg .Distance ){_afc ._eef .SzAttr =_ddf .Int32 (int32 (sz /_fg .HundredthPoint ));};

// SetAlign controls the paragraph alignment
func (_cef ParagraphProperties )SetAlign (a _af .ST_TextAlignType ){_cef ._da .AlgnAttr =a };

// Properties returns the run's properties.
func (_ee Run )Properties ()RunProperties {if _ee ._ga .R ==nil {_ee ._ga .R =_af .NewCT_RegularTextRun ();};if _ee ._ga .R .RPr ==nil {_ee ._ga .R .RPr =_af .NewCT_TextCharacterProperties ();};return RunProperties {_ee ._ga .R .RPr };};

// Properties returns the paragraph properties.
func (_dd Paragraph )Properties ()ParagraphProperties {if _dd ._cc .PPr ==nil {_dd ._cc .PPr =_af .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_dd ._cc .PPr );};

// AddBreak adds a new line break to a paragraph.
func (_a Paragraph )AddBreak (){_b :=_af .NewEG_TextRun ();_b .Br =_af .NewCT_TextLineBreak ();_a ._cc .EG_TextRun =append (_a ._cc .EG_TextRun ,_b );};

// X returns the inner wrapped XML type.
func (_f LineProperties )X ()*_af .CT_LineProperties {return _f ._de };

// Run is a run within a paragraph.
type Run struct{_ga *_af .EG_TextRun };

// SetHeight sets the height of the shape.
func (_cbd ShapeProperties )SetHeight (h _fg .Distance ){_cbd .ensureXfrm ();if _cbd ._caa .Xfrm .Ext ==nil {_cbd ._caa .Xfrm .Ext =_af .NewCT_PositiveSize2D ();};_cbd ._caa .Xfrm .Ext .CyAttr =int64 (h /_fg .EMU );};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_db LineProperties )SetWidth (w _fg .Distance ){_db ._de .WAttr =_ddf .Int32 (int32 (w /_fg .EMU ))};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_af .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// SetFont controls the font of a run.
func (_g RunProperties )SetFont (s string ){_g ._eef .Latin =_af .NewCT_TextFont ();_g ._eef .Latin .TypefaceAttr =s ;};

// X returns the inner wrapped XML type.
func (_bd ShapeProperties )X ()*_af .CT_ShapeProperties {return _bd ._caa };

// X returns the inner wrapped XML type.
func (_ebg Paragraph )X ()*_af .CT_TextParagraph {return _ebg ._cc };

// X returns the inner wrapped XML type.
func (_ce ParagraphProperties )X ()*_af .CT_TextParagraphProperties {return _ce ._da };func (_ec ShapeProperties )SetSolidFill (c _e .Color ){_ec .clearFill ();_ec ._caa .SolidFill =_af .NewCT_SolidColorFillProperties ();_ec ._caa .SolidFill .SrgbClr =_af .NewCT_SRgbColor ();_ec ._caa .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};func (_ab ShapeProperties )LineProperties ()LineProperties {if _ab ._caa .Ln ==nil {_ab ._caa .Ln =_af .NewCT_LineProperties ();};return LineProperties {_ab ._caa .Ln };};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_da *_af .CT_TextParagraphProperties ;};

// SetFlipVertical controls if the shape is flipped vertically.
func (_fb ShapeProperties )SetFlipVertical (b bool ){_fb .ensureXfrm ();if !b {_fb ._caa .Xfrm .FlipVAttr =nil ;}else {_fb ._caa .Xfrm .FlipVAttr =_ddf .Bool (true );};};

// SetNumbered controls if bullets are numbered or not.
func (_cb ParagraphProperties )SetNumbered (scheme _af .ST_TextAutonumberScheme ){if scheme ==_af .ST_TextAutonumberSchemeUnset {_cb ._da .BuAutoNum =nil ;}else {_cb ._da .BuAutoNum =_af .NewCT_TextAutonumberBullet ();_cb ._da .BuAutoNum .TypeAttr =scheme ;};};

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_af .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};func (_cbdg LineProperties )clearFill (){_cbdg ._de .NoFill =nil ;_cbdg ._de .GradFill =nil ;_cbdg ._de .SolidFill =nil ;_cbdg ._de .PattFill =nil ;};

// SetBold controls the bolding of a run.
func (_ae RunProperties )SetBold (b bool ){_ae ._eef .BAttr =_ddf .Bool (b )};

// RunProperties controls the run properties.
type RunProperties struct{_eef *_af .CT_TextCharacterProperties ;};type ShapeProperties struct{_caa *_af .CT_ShapeProperties };

// SetPosition sets the position of the shape.
func (_ge ShapeProperties )SetPosition (x ,y _fg .Distance ){_ge .ensureXfrm ();if _ge ._caa .Xfrm .Off ==nil {_ge ._caa .Xfrm .Off =_af .NewCT_Point2D ();};_ge ._caa .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ddf .Int64 (int64 (x /_fg .EMU ));_ge ._caa .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ddf .Int64 (int64 (y /_fg .EMU ));};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_d ShapeProperties )SetFlipHorizontal (b bool ){_d .ensureXfrm ();if !b {_d ._caa .Xfrm .FlipHAttr =nil ;}else {_d ._caa .Xfrm .FlipHAttr =_ddf .Bool (true );};};

// SetGeometry sets the shape type of the shape
func (_ca ShapeProperties )SetGeometry (g _af .ST_ShapeType ){if _ca ._caa .PrstGeom ==nil {_ca ._caa .PrstGeom =_af .NewCT_PresetGeometry2D ();};_ca ._caa .PrstGeom .PrstAttr =g ;};

// Paragraph is a paragraph within a document.
type Paragraph struct{_cc *_af .CT_TextParagraph };

// LineJoin is the type of line join
type LineJoin byte ;

// SetBulletFont controls the font for the bullet character.
func (_gb ParagraphProperties )SetBulletFont (f string ){if f ==""{_gb ._da .BuFont =nil ;}else {_gb ._da .BuFont =_af .NewCT_TextFont ();_gb ._da .BuFont .TypefaceAttr =f ;};};

// SetLevel sets the level of indentation of a paragraph.
func (_fa ParagraphProperties )SetLevel (idx int32 ){_fa ._da .LvlAttr =_ddf .Int32 (idx )};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);type LineProperties struct{_de *_af .CT_LineProperties };