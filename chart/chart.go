//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_fg "fmt";_e "github.com/unidoc/unioffice";_a "github.com/unidoc/unioffice/color";_fb "github.com/unidoc/unioffice/drawing";_g "github.com/unidoc/unioffice/measurement";_fgd "github.com/unidoc/unioffice/schema/soo/dml";_c "github.com/unidoc/unioffice/schema/soo/dml/chart";_ca "math/rand";);

// Order returns the order of the series
func (_ggfc ScatterChartSeries )Order ()uint32 {return _ggfc ._dgc .Order .ValAttr };func (_ceb CategoryAxis )MajorGridLines ()GridLines {if _ceb ._gcb .MajorGridlines ==nil {_ceb ._gcb .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_ceb ._gcb .MajorGridlines };};

// X returns the inner wrapped XML type.
func (_ceg Chart )X ()*_c .ChartSpace {return _ceg ._aa };

// Values returns the bubble size data source.
func (_ec BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ec ._bgc .BubbleSize ==nil {_ec ._bgc .BubbleSize =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ec ._bgc .BubbleSize );};var NullAxis Axis =nullAxis (0);

// Properties returns the bar chart series shape properties.
func (_bed AreaChartSeries )Properties ()_fb .ShapeProperties {if _bed ._df .SpPr ==nil {_bed ._df .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bed ._df .SpPr );};

// X returns the inner wrapped XML type.
func (_bf AreaChart )X ()*_c .CT_AreaChart {return _bf ._ad };func (_dbgc SurfaceChartSeries )Values ()NumberDataSource {if _dbgc ._caggb .Val ==nil {_dbgc ._caggb .Val =_c .NewCT_NumDataSource ();};_gdad :=MakeNumberDataSource (_dbgc ._caggb .Val );_gdad .CreateEmptyNumberCache ();return _gdad ;};func (_afca LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _afca ._aac .Cat ==nil {_afca ._aac .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_afca ._aac .Cat );};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_c .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// RemoveLegend removes the legend if the chart has one.
func (_bec Chart )RemoveLegend (){_bec ._aa .Chart .Legend =nil };var _edb =[]_a .Color {_a .RGB (0x33,0x66,0xcc),_a .RGB (0xDC,0x39,0x12),_a .RGB (0xFF,0x99,0x00),_a .RGB (0x10,0x96,0x18),_a .RGB (0x99,0x00,0x99),_a .RGB (0x3B,0x3E,0xAC),_a .RGB (0x00,0x99,0xC6),_a .RGB (0xDD,0x44,0x77),_a .RGB (0x66,0xAA,0x00),_a .RGB (0xB8,0x2E,0x2E),_a .RGB (0x31,0x63,0x95),_a .RGB (0x99,0x44,0x99),_a .RGB (0x22,0xAA,0x99),_a .RGB (0xAA,0xAA,0x11),_a .RGB (0x66,0x33,0xCC),_a .RGB (0xE6,0x73,0x00),_a .RGB (0x8B,0x07,0x07),_a .RGB (0x32,0x92,0x62),_a .RGB (0x55,0x74,0xA6),_a .RGB (0x3B,0x3E,0xAC)};func (_fcb DateAxis )SetPosition (p _c .ST_AxPos ){_fcb ._dbd .AxPos =_c .NewCT_AxPos ();_fcb ._dbd .AxPos .ValAttr =p ;};func MakeSeriesAxis (x *_c .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// SetValues is used to set the source data to a set of values.
func (_cgbg CategoryAxisDataSource )SetValues (v []string ){_cgbg ._cbb .Choice =_c .NewCT_AxDataSourceChoice ();_cgbg ._cbb .Choice .StrLit =_c .NewCT_StrData ();_cgbg ._cbb .Choice .StrLit .PtCount =_c .NewCT_UnsignedInt ();_cgbg ._cbb .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _eaa ,_gfd :=range v {_cgbg ._cbb .Choice .StrLit .Pt =append (_cgbg ._cbb .Choice .StrLit .Pt ,&_c .CT_StrVal {IdxAttr :uint32 (_eaa ),V :_gfd });};};func (_baag Title )RunProperties ()_fb .RunProperties {if _baag ._fcfc .Tx ==nil {_baag .SetText ("");};if _baag ._fcfc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_baag ._fcfc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_fgd .NewCT_TextCharacterProperties ();};return _fb .MakeRunProperties (_baag ._fcfc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_bfc *_c .CT_PieSer };

// SetText sets the series text.
func (_bfg RadarChartSeries )SetText (s string ){_bfg ._fbe .Tx =_c .NewCT_SerTx ();_bfg ._fbe .Tx .Choice .V =&s ;};

// Labels returns the data label properties.
func (_fbb LineChartSeries )Labels ()DataLabels {if _fbb ._aac .DLbls ==nil {_fbb ._aac .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_fbb ._aac .DLbls );};

// X returns the inner wrapped XML type.
func (_gga BubbleChart )X ()*_c .CT_BubbleChart {return _gga ._fc };

// X returns the inner wrapped XML type.
func (_ecb LineChart )X ()*_c .CT_LineChart {return _ecb ._caa };

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_cbe NumberDataSource )CreateEmptyNumberCache (){_cbe .ensureChoice ();if _cbe ._agg .Choice .NumRef ==nil {_cbe ._agg .Choice .NumRef =_c .NewCT_NumRef ();};_cbe ._agg .Choice .NumLit =nil ;_cbe ._agg .Choice .NumRef .NumCache =_c .NewCT_NumData ();_cbe ._agg .Choice .NumRef .NumCache .PtCount =_c .NewCT_UnsignedInt ();_cbe ._agg .Choice .NumRef .NumCache .PtCount .ValAttr =0;};type nullAxis byte ;

// X returns the inner wrapped XML type.
func (_dcg RadarChart )X ()*_c .CT_RadarChart {return _dcg ._aba };func (_dgdf ValueAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_dgdf ._eag .TickLblPos =nil ;}else {_dgdf ._eag .TickLblPos =_c .NewCT_TickLblPos ();_dgdf ._eag .TickLblPos .ValAttr =p ;};};func (_dbg NumberDataSource )SetReference (s string ){_dbg .ensureChoice ();if _dbg ._agg .Choice .NumRef ==nil {_dbg ._agg .Choice .NumRef =_c .NewCT_NumRef ();};_dbg ._agg .Choice .NumRef .F =s ;};

// AddSeries adds a default series to a line chart.
func (_ade Line3DChart )AddSeries ()LineChartSeries {_dcff :=_ade .nextColor (len (_ade ._fab .Ser ));_gef :=_c .NewCT_LineSer ();_ade ._fab .Ser =append (_ade ._fab .Ser ,_gef );_gef .Idx .ValAttr =uint32 (len (_ade ._fab .Ser )-1);_gef .Order .ValAttr =uint32 (len (_ade ._fab .Ser )-1);_gca :=LineChartSeries {_gef };_gca .InitializeDefaults ();_gca .Properties ().LineProperties ().SetSolidFill (_dcff );_gca .Properties ().SetSolidFill (_dcff );return _gca ;};

// Properties returns the bar chart series shape properties.
func (_fag PieChartSeries )Properties ()_fb .ShapeProperties {if _fag ._bfc .SpPr ==nil {_fag ._bfc .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_fag ._bfc .SpPr );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_aac *_c .CT_LineSer };

// Index returns the index of the series
func (_dfae ScatterChartSeries )Index ()uint32 {return _dfae ._dgc .Idx .ValAttr };

// AddSeries adds a default series to an Pie chart.
func (_gbe PieChart )AddSeries ()PieChartSeries {_beee :=_c .NewCT_PieSer ();_gbe ._dgb .Ser =append (_gbe ._dgb .Ser ,_beee );_beee .Idx .ValAttr =uint32 (len (_gbe ._dgb .Ser )-1);_beee .Order .ValAttr =uint32 (len (_gbe ._dgb .Ser )-1);_edde :=PieChartSeries {_beee };_edde .InitializeDefaults ();return _edde ;};

// Values returns the value data source.
func (_bgd PieChartSeries )Values ()NumberDataSource {if _bgd ._bfc .Val ==nil {_bgd ._bfc .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_bgd ._bfc .Val );};

// Index returns the index of the series
func (_ebgc LineChartSeries )Index ()uint32 {return _ebgc ._aac .Idx .ValAttr };

// AddSeries adds a default series to an Pie3D chart.
func (_ffea Pie3DChart )AddSeries ()PieChartSeries {_edf :=_c .NewCT_PieSer ();_ffea ._bagg .Ser =append (_ffea ._bagg .Ser ,_edf );_edf .Idx .ValAttr =uint32 (len (_ffea ._bagg .Ser )-1);_edf .Order .ValAttr =uint32 (len (_ffea ._bagg .Ser )-1);_dgab :=PieChartSeries {_edf };_dgab .InitializeDefaults ();return _dgab ;};

// InitializeDefaults initializes an Pie series to the default values.
func (_agc PieChartSeries )InitializeDefaults (){};

// AddBubbleChart adds a new bubble chart.
func (_afc Chart )AddBubbleChart ()BubbleChart {_fac :=_c .NewCT_PlotAreaChoice ();_afc ._aa .Chart .PlotArea .Choice =append (_afc ._aa .Chart .PlotArea .Choice ,_fac );_fac .BubbleChart =_c .NewCT_BubbleChart ();_ded :=BubbleChart {_fc :_fac .BubbleChart };_ded .InitializeDefaults ();return _ded ;};

// AddBarChart adds a new bar chart to a chart.
func (_ddee Chart )AddBarChart ()BarChart {_ebg :=_c .NewCT_PlotAreaChoice ();_ddee ._aa .Chart .PlotArea .Choice =append (_ddee ._aa .Chart .PlotArea .Choice ,_ebg );_ebg .BarChart =_c .NewCT_BarChart ();_ebg .BarChart .Grouping =_c .NewCT_BarGrouping ();_ebg .BarChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_ada :=BarChart {_bfd :_ebg .BarChart };_ada .InitializeDefaults ();return _ada ;};

// Values returns the value data source.
func (_gda BubbleChartSeries )Values ()NumberDataSource {if _gda ._bgc .YVal ==nil {_gda ._bgc .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_gda ._bgc .YVal );};

// InitializeDefaults the bar chart to its defaults
func (_dgbg RadarChart )InitializeDefaults (){_dgbg ._aba .RadarStyle .ValAttr =_c .ST_RadarStyleMarker };

// AddDateAxis adds a value axis to the chart.
func (_dgd Chart )AddDateAxis ()DateAxis {_afe :=_c .NewCT_DateAx ();if _dgd ._aa .Chart .PlotArea .CChoice ==nil {_dgd ._aa .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_afe .AxId =_c .NewCT_UnsignedInt ();_afe .AxId .ValAttr =0x7FFFFFFF&_ca .Uint32 ();_dgd ._aa .Chart .PlotArea .CChoice .DateAx =append (_dgd ._aa .Chart .PlotArea .CChoice .DateAx ,_afe );_afe .Delete =_c .NewCT_Boolean ();_afe .Delete .ValAttr =_e .Bool (false );_afe .Scaling =_c .NewCT_Scaling ();_afe .Scaling .Orientation =_c .NewCT_Orientation ();_afe .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_afe .Choice =&_c .EG_AxSharedChoice {};_afe .Choice .Crosses =_c .NewCT_Crosses ();_afe .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_eee :=DateAxis {_afe };_eee .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_a .LightGray );_eee .SetMajorTickMark (_c .ST_TickMarkOut );_eee .SetMinorTickMark (_c .ST_TickMarkIn );_eee .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_eee .Properties ().LineProperties ().SetSolidFill (_a .Black );_eee .SetPosition (_c .ST_AxPosL );return _eee ;};

// InitializeDefaults the bar chart to its defaults
func (_gg Area3DChart )InitializeDefaults (){};

// InitializeDefaults initializes an area series to the default values.
func (_cb AreaChartSeries )InitializeDefaults (){};func (_aff Marker )SetSymbol (s _c .ST_MarkerStyle ){if s ==_c .ST_MarkerStyleUnset {_aff ._gdg .Symbol =nil ;}else {_aff ._gdg .Symbol =_c .NewCT_MarkerStyle ();_aff ._gdg .Symbol .ValAttr =s ;};};func (_efc Title )ParagraphProperties ()_fb .ParagraphProperties {if _efc ._fcfc .Tx ==nil {_efc .SetText ("");};if _efc ._fcfc .Tx .Choice .Rich .P [0].PPr ==nil {_efc ._fcfc .Tx .Choice .Rich .P [0].PPr =_fgd .NewCT_TextParagraphProperties ();};return _fb .MakeParagraphProperties (_efc ._fcfc .Tx .Choice .Rich .P [0].PPr );};func (_bdd DataLabels )ensureChoice (){if _bdd ._agd .Choice ==nil {_bdd ._agd .Choice =_c .NewCT_DLblsChoice ();};};

// AddArea3DChart adds a new area chart to a chart.
func (_dcf Chart )AddArea3DChart ()Area3DChart {_ecf (_dcf ._aa .Chart );_cagb :=_c .NewCT_PlotAreaChoice ();_dcf ._aa .Chart .PlotArea .Choice =append (_dcf ._aa .Chart .PlotArea .Choice ,_cagb );_cagb .Area3DChart =_c .NewCT_Area3DChart ();_acb :=Area3DChart {_ac :_cagb .Area3DChart };_acb .InitializeDefaults ();return _acb ;};

// SetOrder sets the order of the series
func (_cec SurfaceChartSeries )SetOrder (idx uint32 ){_cec ._caggb .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_gbg PieOfPieChart )InitializeDefaults (){_gbg ._adg .VaryColors =_c .NewCT_Boolean ();_gbg ._adg .VaryColors .ValAttr =_e .Bool (true );_gbg .SetType (_c .ST_OfPieTypePie );_gbg ._adg .SecondPieSize =_c .NewCT_SecondPieSize ();_gbg ._adg .SecondPieSize .ValAttr =&_c .ST_SecondPieSize {};_gbg ._adg .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_e .Uint16 (75);_eeb :=_c .NewCT_ChartLines ();_eeb .SpPr =_fgd .NewCT_ShapeProperties ();_ebaa :=_fb .MakeShapeProperties (_eeb .SpPr );_ebaa .LineProperties ().SetSolidFill (_a .Auto );_gbg ._adg .SerLines =append (_gbg ._adg .SerLines ,_eeb );};func MakeLegend (l *_c .CT_Legend )Legend {return Legend {l }};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_fc *_c .CT_BubbleChart ;};

// AddScatterChart adds a scatter (X/Y) chart.
func (_egb Chart )AddScatterChart ()ScatterChart {_cfae :=_c .NewCT_PlotAreaChoice ();_egb ._aa .Chart .PlotArea .Choice =append (_egb ._aa .Chart .PlotArea .Choice ,_cfae );_cfae .ScatterChart =_c .NewCT_ScatterChart ();_cgf :=ScatterChart {_ffb :_cfae .ScatterChart };_cgf .InitializeDefaults ();return _cgf ;};func MakeChart (x *_c .ChartSpace )Chart {return Chart {x }};func (_cad CategoryAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_cad ._gcb .MinorTickMark =nil ;}else {_cad ._gcb .MinorTickMark =_c .NewCT_TickMark ();_cad ._gcb .MinorTickMark .ValAttr =m ;};};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_gbc *_c .CT_Bar3DChart ;};func (_ebc DataLabels )SetShowValue (b bool ){_ebc .ensureChoice ();_ebc ._agd .Choice .ShowVal =_c .NewCT_Boolean ();_ebc ._agd .Choice .ShowVal .ValAttr =_e .Bool (b );};

// SetIndex sets the index of the series
func (_efa LineChartSeries )SetIndex (idx uint32 ){_efa ._aac .Idx .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_ace AreaChart )InitializeDefaults (){};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_cbb *_c .CT_AxDataSource };

// X returns the inner wrapped XML type.
func (_ag BubbleChartSeries )X ()*_c .CT_BubbleSer {return _ag ._bgc };

// SetValues sets values directly on a source.
func (_cagg NumberDataSource )SetValues (v []float64 ){_cagg .ensureChoice ();_cagg ._agg .Choice .NumRef =nil ;_cagg ._agg .Choice .NumLit =_c .NewCT_NumData ();_cagg ._agg .Choice .NumLit .PtCount =_c .NewCT_UnsignedInt ();_cagg ._agg .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _faa ,_dba :=range v {_cagg ._agg .Choice .NumLit .Pt =append (_cagg ._agg .Choice .NumLit .Pt ,&_c .CT_NumVal {IdxAttr :uint32 (_faa ),V :_fg .Sprintf ("\u0025\u0067",_dba )});};};

// X returns the inner wrapped XML type.
func (_d Area3DChart )X ()*_c .CT_Area3DChart {return _d ._ac };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ad *_c .CT_AreaChart ;};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_ffbe *_c .CT_Surface3DChart ;};func (_cfgdd Title )SetText (s string ){if _cfgdd ._fcfc .Tx ==nil {_cfgdd ._fcfc .Tx =_c .NewCT_Tx ();};if _cfgdd ._fcfc .Tx .Choice .Rich ==nil {_cfgdd ._fcfc .Tx .Choice .Rich =_fgd .NewCT_TextBody ();};var _ecd *_fgd .CT_TextParagraph ;if len (_cfgdd ._fcfc .Tx .Choice .Rich .P )==0{_ecd =_fgd .NewCT_TextParagraph ();_cfgdd ._fcfc .Tx .Choice .Rich .P =[]*_fgd .CT_TextParagraph {_ecd };}else {_ecd =_cfgdd ._fcfc .Tx .Choice .Rich .P [0];};var _dabf *_fgd .EG_TextRun ;if len (_ecd .EG_TextRun )==0{_dabf =_fgd .NewEG_TextRun ();_ecd .EG_TextRun =[]*_fgd .EG_TextRun {_dabf };}else {_dabf =_ecd .EG_TextRun [0];};if _dabf .R ==nil {_dabf .R =_fgd .NewCT_RegularTextRun ();};_dabf .R .T =s ;};func MakeValueAxis (x *_c .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_cdb SurfaceChart )InitializeDefaults (){_cdb ._aea .Wireframe =_c .NewCT_Boolean ();_cdb ._aea .Wireframe .ValAttr =_e .Bool (false );_cdb ._aea .BandFmts =_c .NewCT_BandFmts ();for _deb :=0;_deb < 15;_deb ++{_fff :=_c .NewCT_BandFmt ();_fff .Idx .ValAttr =uint32 (_deb );_fff .SpPr =_fgd .NewCT_ShapeProperties ();_daae :=_fb .MakeShapeProperties (_fff .SpPr );_daae .SetSolidFill (_cdb .nextColor (_deb ));_cdb ._aea .BandFmts .BandFmt =append (_cdb ._aea .BandFmts .BandFmt ,_fff );};};type DataLabels struct{_agd *_c .CT_DLbls };func MakeCategoryAxis (x *_c .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_abf DateAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_abf ._dbd .MinorTickMark =nil ;}else {_abf ._dbd .MinorTickMark =_c .NewCT_TickMark ();_abf ._dbd .MinorTickMark .ValAttr =m ;};};

// AddStockChart adds a new stock chart.
func (_ee Chart )AddStockChart ()StockChart {_acef :=_c .NewCT_PlotAreaChoice ();_ee ._aa .Chart .PlotArea .Choice =append (_ee ._aa .Chart .PlotArea .Choice ,_acef );_acef .StockChart =_c .NewCT_StockChart ();_gcd :=StockChart {_dge :_acef .StockChart };_gcd .InitializeDefaults ();return _gcd ;};

// InitializeDefaults the bar chart to its defaults
func (_acf Bar3DChart )InitializeDefaults (){_acf .SetDirection (_c .ST_BarDirCol )};func (_eabd Title )InitializeDefaults (){_eabd .SetText ("\u0054\u0069\u0074l\u0065");_eabd .RunProperties ().SetSize (16*_g .Point );_eabd .RunProperties ().SetSolidFill (_a .Black );_eabd .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_eabd .RunProperties ().SetBold (false );};func (_aaf GridLines )Properties ()_fb .ShapeProperties {if _aaf ._ece .SpPr ==nil {_aaf ._ece .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_aaf ._ece .SpPr );};func (_ffg Marker )SetSize (sz uint8 ){_ffg ._gdg .Size =_c .NewCT_MarkerSize ();_ffg ._gdg .Size .ValAttr =&sz ;};

// InitializeDefaults the bar chart to its defaults
func (_cga BarChart )InitializeDefaults (){_cga .SetDirection (_c .ST_BarDirCol )};

// AddAxis adds an axis to a Surface chart.
func (_eegg SurfaceChart )AddAxis (axis Axis ){_gccg :=_c .NewCT_UnsignedInt ();_gccg .ValAttr =axis .AxisID ();_eegg ._aea .AxId =append (_eegg ._aea .AxId ,_gccg );};func (_acea SeriesAxis )AxisID ()uint32 {return _acea ._cffd .AxId .ValAttr };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_cag Chart )AddBar3DChart ()Bar3DChart {_ecf (_cag ._aa .Chart );_fbf :=_c .NewCT_PlotAreaChoice ();_cag ._aa .Chart .PlotArea .Choice =append (_cag ._aa .Chart .PlotArea .Choice ,_fbf );_fbf .Bar3DChart =_c .NewCT_Bar3DChart ();_fbf .Bar3DChart .Grouping =_c .NewCT_BarGrouping ();_fbf .Bar3DChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_ffe :=Bar3DChart {_gbc :_fbf .Bar3DChart };_ffe .InitializeDefaults ();return _ffe ;};

// AddSeries adds a default series to an Doughnut chart.
func (_bfe DoughnutChart )AddSeries ()PieChartSeries {_dee :=_c .NewCT_PieSer ();_bfe ._ef .Ser =append (_bfe ._ef .Ser ,_dee );_dee .Idx .ValAttr =uint32 (len (_bfe ._ef .Ser )-1);_dee .Order .ValAttr =uint32 (len (_bfe ._ef .Ser )-1);_bag :=PieChartSeries {_dee };_bag .InitializeDefaults ();return _bag ;};

// InitializeDefaults the bar chart to its defaults
func (_gcaf PieChart )InitializeDefaults (){_gcaf ._dgb .VaryColors =_c .NewCT_Boolean ();_gcaf ._dgb .VaryColors .ValAttr =_e .Bool (true );};func (_aebe ScatterChart )InitializeDefaults (){_aebe ._ffb .ScatterStyle .ValAttr =_c .ST_ScatterStyleMarker ;};

// AddAxis adds an axis to a Surface chart.
func (_cfda Surface3DChart )AddAxis (axis Axis ){_fef :=_c .NewCT_UnsignedInt ();_fef .ValAttr =axis .AxisID ();_cfda ._ffbe .AxId =append (_cfda ._ffbe .AxId ,_fef );};

// Properties returns the chart's shape properties.
func (_ccc Chart )Properties ()_fb .ShapeProperties {if _ccc ._aa .SpPr ==nil {_ccc ._aa .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ccc ._aa .SpPr );};

// X returns the inner wrapped XML type.
func (_gace Legend )X ()*_c .CT_Legend {return _gace ._bba };

// Properties returns the bar chart series shape properties.
func (_dab BarChartSeries )Properties ()_fb .ShapeProperties {if _dab ._dg .SpPr ==nil {_dab ._dg .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_dab ._dg .SpPr );};

// Properties returns the Bubble chart series shape properties.
func (_fa BubbleChartSeries )Properties ()_fb .ShapeProperties {if _fa ._bgc .SpPr ==nil {_fa ._bgc .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_fa ._bgc .SpPr );};

// SetText sets the series text.
func (_fbc BubbleChartSeries )SetText (s string ){_fbc ._bgc .Tx =_c .NewCT_SerTx ();_fbc ._bgc .Tx .Choice .V =&s ;};func (_ebcg DateAxis )Properties ()_fb .ShapeProperties {if _ebcg ._dbd .SpPr ==nil {_ebcg ._dbd .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ebcg ._dbd .SpPr );};func _ecf (_gab *_c .CT_Chart ){_gab .View3D =_c .NewCT_View3D ();_gab .View3D .RotX =_c .NewCT_RotX ();_gab .View3D .RotX .ValAttr =_e .Int8 (15);_gab .View3D .RotY =_c .NewCT_RotY ();_gab .View3D .RotY .ValAttr =_e .Uint16 (20);_gab .View3D .RAngAx =_c .NewCT_Boolean ();_gab .View3D .RAngAx .ValAttr =_e .Bool (false );_gab .Floor =_c .NewCT_Surface ();_gab .Floor .Thickness =_c .NewCT_Thickness ();_gab .Floor .Thickness .ValAttr .Uint32 =_e .Uint32 (0);_gab .SideWall =_c .NewCT_Surface ();_gab .SideWall .Thickness =_c .NewCT_Thickness ();_gab .SideWall .Thickness .ValAttr .Uint32 =_e .Uint32 (0);_gab .BackWall =_c .NewCT_Surface ();_gab .BackWall .Thickness =_c .NewCT_Thickness ();_gab .BackWall .Thickness .ValAttr .Uint32 =_e .Uint32 (0);};type DateAxis struct{_dbd *_c .CT_DateAx };func (_agb LineChartSeries )InitializeDefaults (){_agb .Properties ().LineProperties ().SetWidth (1*_g .Point );_agb .Properties ().LineProperties ().SetSolidFill (_a .Black );_agb .Properties ().LineProperties ().SetJoin (_fb .LineJoinRound );_agb .Marker ().SetSymbol (_c .ST_MarkerStyleNone );_agb .Labels ().SetShowLegendKey (false );_agb .Labels ().SetShowValue (false );_agb .Labels ().SetShowPercent (false );_agb .Labels ().SetShowCategoryName (false );_agb .Labels ().SetShowSeriesName (false );_agb .Labels ().SetShowLeaderLines (false );};

// Properties returns the line chart series shape properties.
func (_ebd ScatterChartSeries )Properties ()_fb .ShapeProperties {if _ebd ._dgc .SpPr ==nil {_ebd ._dgc .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ebd ._dgc .SpPr );};

// RemoveTitle removes any existing title from the chart.
func (_gbd Chart )RemoveTitle (){_gbd ._aa .Chart .Title =nil ;_gbd ._aa .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_gbd ._aa .Chart .AutoTitleDeleted .ValAttr =_e .Bool (true );};func (_dfc DataLabels )SetShowLeaderLines (b bool ){_dfc .ensureChoice ();_dfc ._agd .Choice .ShowLeaderLines =_c .NewCT_Boolean ();_dfc ._agd .Choice .ShowLeaderLines .ValAttr =_e .Bool (b );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_dge *_c .CT_StockChart ;};func (_ddf ScatterChartSeries )SetSmooth (b bool ){_ddf ._dgc .Smooth =_c .NewCT_Boolean ();_ddf ._dgc .Smooth .ValAttr =&b ;};func (_gdd DateAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_gdd ._dbd .TickLblPos =nil ;}else {_gdd ._dbd .TickLblPos =_c .NewCT_TickLblPos ();_gdd ._dbd .TickLblPos .ValAttr =p ;};};func (_ff CategoryAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_ff ._gcb .TickLblPos =nil ;}else {_ff ._gcb .TickLblPos =_c .NewCT_TickLblPos ();_ff ._gcb .TickLblPos .ValAttr =p ;};};func (_cgg ValueAxis )SetPosition (p _c .ST_AxPos ){_cgg ._eag .AxPos =_c .NewCT_AxPos ();_cgg ._eag .AxPos .ValAttr =p ;};

// AddSeries adds a default series to a Scatter chart.
func (_geae ScatterChart )AddSeries ()ScatterChartSeries {_beda :=_geae .nextColor (len (_geae ._ffb .Ser ));_dfcd :=_c .NewCT_ScatterSer ();_geae ._ffb .Ser =append (_geae ._ffb .Ser ,_dfcd );_dfcd .Idx .ValAttr =uint32 (len (_geae ._ffb .Ser )-1);_dfcd .Order .ValAttr =uint32 (len (_geae ._ffb .Ser )-1);_aebef :=ScatterChartSeries {_dfcd };_aebef .InitializeDefaults ();_aebef .Marker ().Properties ().LineProperties ().SetSolidFill (_beda );_aebef .Marker ().Properties ().SetSolidFill (_beda );return _aebef ;};

// X returns the inner wrapped XML type.
func (_dae SurfaceChart )X ()*_c .CT_SurfaceChart {return _dae ._aea };

// X returns the inner wrapped XML type.
func (_baa Bar3DChart )X ()*_c .CT_Bar3DChart {return _baa ._gbc };type CategoryAxis struct{_gcb *_c .CT_CatAx };

// Order returns the order of the series
func (_faac SurfaceChartSeries )Order ()uint32 {return _faac ._caggb .Order .ValAttr };

// SetType sets the type the secone pie to either pie or bar
func (_ebb PieOfPieChart )SetType (t _c .ST_OfPieType ){_ebb ._adg .OfPieType .ValAttr =t };func (_gcf DataLabels )SetShowPercent (b bool ){_gcf .ensureChoice ();_gcf ._agd .Choice .ShowPercent =_c .NewCT_Boolean ();_gcf ._agd .Choice .ShowPercent .ValAttr =_e .Bool (b );};

// Chart is a generic chart.
type Chart struct{_aa *_c .ChartSpace };type GridLines struct{_ece *_c .CT_ChartLines };type SurfaceChartSeries struct{_caggb *_c .CT_SurfaceSer };type Legend struct{_bba *_c .CT_Legend };

// AddSeries adds a default series to an Radar chart.
func (_fcba RadarChart )AddSeries ()RadarChartSeries {_gefd :=_fcba .nextColor (len (_fcba ._aba .Ser ));_cdd :=_c .NewCT_RadarSer ();_fcba ._aba .Ser =append (_fcba ._aba .Ser ,_cdd );_cdd .Idx .ValAttr =uint32 (len (_fcba ._aba .Ser )-1);_cdd .Order .ValAttr =uint32 (len (_fcba ._aba .Ser )-1);_ebe :=RadarChartSeries {_cdd };_ebe .InitializeDefaults ();_ebe .Properties ().SetSolidFill (_gefd );return _ebe ;};type ScatterChart struct{chartBase ;_ffb *_c .CT_ScatterChart ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_dac Legend )InitializeDefaults (){_dac .SetPosition (_c .ST_LegendPosR );_dac .SetOverlay (false );_dac .Properties ().SetNoFill ();_dac .Properties ().LineProperties ().SetNoFill ();};

// AddSeries adds a default series to an Pie chart.
func (_ggf PieOfPieChart )AddSeries ()PieChartSeries {_aeba :=_c .NewCT_PieSer ();_ggf ._adg .Ser =append (_ggf ._adg .Ser ,_aeba );_aeba .Idx .ValAttr =uint32 (len (_ggf ._adg .Ser )-1);_aeba .Order .ValAttr =uint32 (len (_ggf ._adg .Ser )-1);_aad :=PieChartSeries {_aeba };_aad .InitializeDefaults ();return _aad ;};

// Properties returns the line chart series shape properties.
func (_ggaf LineChartSeries )Properties ()_fb .ShapeProperties {if _ggaf ._aac .SpPr ==nil {_ggaf ._aac .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ggaf ._aac .SpPr );};func (_bbe DataLabels )SetPosition (p _c .ST_DLblPos ){_bbe .ensureChoice ();_bbe ._agd .Choice .DLblPos =_c .NewCT_DLblPos ();_bbe ._agd .Choice .DLblPos .ValAttr =p ;};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_bgc *_c .CT_BubbleSer };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_eacc Chart )AddLine3DChart ()Line3DChart {_ecf (_eacc ._aa .Chart );_aab :=_c .NewCT_PlotAreaChoice ();_eacc ._aa .Chart .PlotArea .Choice =append (_eacc ._aa .Chart .PlotArea .Choice ,_aab );_aab .Line3DChart =_c .NewCT_Line3DChart ();_aab .Line3DChart .Grouping =_c .NewCT_Grouping ();_aab .Line3DChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return Line3DChart {_fab :_aab .Line3DChart };};

// Marker returns the marker properties.
func (_abcb ScatterChartSeries )Marker ()Marker {if _abcb ._dgc .Marker ==nil {_abcb ._dgc .Marker =_c .NewCT_Marker ();};return MakeMarker (_abcb ._dgc .Marker );};

// AddSeries adds a default series to a Surface chart.
func (_aeab SurfaceChart )AddSeries ()SurfaceChartSeries {_ccba :=_aeab .nextColor (len (_aeab ._aea .Ser ));_bea :=_c .NewCT_SurfaceSer ();_aeab ._aea .Ser =append (_aeab ._aea .Ser ,_bea );_bea .Idx .ValAttr =uint32 (len (_aeab ._aea .Ser )-1);_bea .Order .ValAttr =uint32 (len (_aeab ._aea .Ser )-1);_acdc :=SurfaceChartSeries {_bea };_acdc .InitializeDefaults ();_acdc .Properties ().LineProperties ().SetSolidFill (_ccba );return _acdc ;};func (_b Area3DChart )AddAxis (axis Axis ){_gb :=_c .NewCT_UnsignedInt ();_gb .ValAttr =axis .AxisID ();_b ._ac .AxId =append (_b ._ac .AxId ,_gb );};func (_caaa SeriesAxis )SetCrosses (axis Axis ){_caaa ._cffd .CrossAx .ValAttr =axis .AxisID ()};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ed BarChart )SetDirection (d _c .ST_BarDir ){_ed ._bfd .BarDir .ValAttr =d };

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_fbe *_c .CT_RadarSer };

// AddSeries adds a default series to a line chart.
func (_abe LineChart )AddSeries ()LineChartSeries {_def :=_abe .nextColor (len (_abe ._caa .Ser ));_bab :=_c .NewCT_LineSer ();_abe ._caa .Ser =append (_abe ._caa .Ser ,_bab );_bab .Idx .ValAttr =uint32 (len (_abe ._caa .Ser )-1);_bab .Order .ValAttr =uint32 (len (_abe ._caa .Ser )-1);_ebf :=LineChartSeries {_bab };_ebf .InitializeDefaults ();_ebf .Properties ().LineProperties ().SetSolidFill (_def );return _ebf ;};func (_daa Bar3DChart )AddAxis (axis Axis ){_fgc :=_c .NewCT_UnsignedInt ();_fgc .ValAttr =axis .AxisID ();_daa ._gbc .AxId =append (_daa ._gbc .AxId ,_fgc );};

// AddSeries adds a default series to an area chart.
func (_gf Area3DChart )AddSeries ()AreaChartSeries {_cf :=_gf .nextColor (len (_gf ._ac .Ser ));_ga :=_c .NewCT_AreaSer ();_gf ._ac .Ser =append (_gf ._ac .Ser ,_ga );_ga .Idx .ValAttr =uint32 (len (_gf ._ac .Ser )-1);_ga .Order .ValAttr =uint32 (len (_gf ._ac .Ser )-1);_gac :=AreaChartSeries {_ga };_gac .InitializeDefaults ();_gac .Properties ().SetSolidFill (_cf );return _gac ;};func (_ecg Legend )Properties ()_fb .ShapeProperties {if _ecg ._bba .SpPr ==nil {_ecg ._bba .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ecg ._bba .SpPr );};func (_cgacb Surface3DChart )InitializeDefaults (){_cgacb ._ffbe .Wireframe =_c .NewCT_Boolean ();_cgacb ._ffbe .Wireframe .ValAttr =_e .Bool (false );_cgacb ._ffbe .BandFmts =_c .NewCT_BandFmts ();for _aggf :=0;_aggf < 15;_aggf ++{_gddc :=_c .NewCT_BandFmt ();_gddc .Idx .ValAttr =uint32 (_aggf );_gddc .SpPr =_fgd .NewCT_ShapeProperties ();_fbeg :=_fb .MakeShapeProperties (_gddc .SpPr );_fbeg .SetSolidFill (_cgacb .nextColor (_aggf ));_cgacb ._ffbe .BandFmts .BandFmt =append (_cgacb ._ffbe .BandFmts .BandFmt ,_gddc );};};func (_dfg DateAxis )SetCrosses (axis Axis ){_dfg ._dbd .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_dfa Line3DChart )X ()*_c .CT_Line3DChart {return _dfa ._fab };

// AddRadarChart adds a new radar chart to a chart.
func (_cfg Chart )AddRadarChart ()RadarChart {_cdg :=_c .NewCT_PlotAreaChoice ();_cfg ._aa .Chart .PlotArea .Choice =append (_cfg ._aa .Chart .PlotArea .Choice ,_cdg );_cdg .RadarChart =_c .NewCT_RadarChart ();_eab :=RadarChart {_aba :_cdg .RadarChart };_eab .InitializeDefaults ();return _eab ;};

// X returns the inner wrapped XML type.
func (_cda ValueAxis )X ()*_c .CT_ValAx {return _cda ._eag };func (_gcc RadarChart )AddAxis (axis Axis ){_daf :=_c .NewCT_UnsignedInt ();_daf .ValAttr =axis .AxisID ();_gcc ._aba .AxId =append (_gcc ._aba .AxId ,_daf );};

// AddSeries adds a default series to a Surface chart.
func (_edaf Surface3DChart )AddSeries ()SurfaceChartSeries {_dfb :=_edaf .nextColor (len (_edaf ._ffbe .Ser ));_ebag :=_c .NewCT_SurfaceSer ();_edaf ._ffbe .Ser =append (_edaf ._ffbe .Ser ,_ebag );_ebag .Idx .ValAttr =uint32 (len (_edaf ._ffbe .Ser )-1);_ebag .Order .ValAttr =uint32 (len (_edaf ._ffbe .Ser )-1);_gddg :=SurfaceChartSeries {_ebag };_gddg .InitializeDefaults ();_gddg .Properties ().LineProperties ().SetSolidFill (_dfb );return _gddg ;};

// AddValueAxis adds a value axis to the chart.
func (_ecc Chart )AddValueAxis ()ValueAxis {_ffa :=_c .NewCT_ValAx ();if _ecc ._aa .Chart .PlotArea .CChoice ==nil {_ecc ._aa .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_ffa .AxId =_c .NewCT_UnsignedInt ();_ffa .AxId .ValAttr =0x7FFFFFFF&_ca .Uint32 ();_ecc ._aa .Chart .PlotArea .CChoice .ValAx =append (_ecc ._aa .Chart .PlotArea .CChoice .ValAx ,_ffa );_ffa .Delete =_c .NewCT_Boolean ();_ffa .Delete .ValAttr =_e .Bool (false );_ffa .Scaling =_c .NewCT_Scaling ();_ffa .Scaling .Orientation =_c .NewCT_Orientation ();_ffa .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_ffa .Choice =&_c .EG_AxSharedChoice {};_ffa .Choice .Crosses =_c .NewCT_Crosses ();_ffa .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_ffa .CrossBetween =_c .NewCT_CrossBetween ();_ffa .CrossBetween .ValAttr =_c .ST_CrossBetweenBetween ;_gff :=MakeValueAxis (_ffa );_gff .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_a .LightGray );_gff .SetMajorTickMark (_c .ST_TickMarkOut );_gff .SetMinorTickMark (_c .ST_TickMarkIn );_gff .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_gff .Properties ().LineProperties ().SetSolidFill (_a .Black );_gff .SetPosition (_c .ST_AxPosL );return _gff ;};

// X returns the inner wrapped XML type.
func (_cff Pie3DChart )X ()*_c .CT_Pie3DChart {return _cff ._bagg };

// AddAxis adds an axis to a Scatter chart.
func (_fbea ScatterChart )AddAxis (axis Axis ){_bff :=_c .NewCT_UnsignedInt ();_bff .ValAttr =axis .AxisID ();_fbea ._ffb .AxId =append (_fbea ._ffb .AxId ,_bff );};func (_beea StockChart )AddAxis (axis Axis ){_gdc :=_c .NewCT_UnsignedInt ();_gdc .ValAttr =axis .AxisID ();_beea ._dge .AxId =append (_beea ._dge .AxId ,_gdc );};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_cbd CategoryAxisDataSource )SetNumberReference (s string ){_cbd ._cbb .Choice =_c .NewCT_AxDataSourceChoice ();_cbd ._cbb .Choice .NumRef =_c .NewCT_NumRef ();_cbd ._cbb .Choice .NumRef .F =s ;};func (_cfd chartBase )nextColor (_ggb int )_a .Color {return _edb [_ggb %len (_edb )]};

// CategoryAxis returns the category data source.
func (_gdb BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gdb ._bgc .XVal ==nil {_gdb ._bgc .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_gdb ._bgc .XVal );};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_ac *_c .CT_Area3DChart ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_fae CategoryAxisDataSource )SetLabelReference (s string ){_fae ._cbb .Choice =_c .NewCT_AxDataSourceChoice ();_fae ._cbb .Choice .StrRef =_c .NewCT_StrRef ();_fae ._cbb .Choice .StrRef .F =s ;};

// X returns the inner wrapped XML type.
func (_ced BarChartSeries )X ()*_c .CT_BarSer {return _ced ._dg };func (_edd LineChartSeries )SetSmooth (b bool ){_edd ._aac .Smooth =_c .NewCT_Boolean ();_edd ._aac .Smooth .ValAttr =&b ;};func (_cd CategoryAxis )InitializeDefaults (){_cd .SetPosition (_c .ST_AxPosB );_cd .SetMajorTickMark (_c .ST_TickMarkOut );_cd .SetMinorTickMark (_c .ST_TickMarkIn );_cd .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_cd .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_a .LightGray );_cd .Properties ().LineProperties ().SetSolidFill (_a .Black );};func (_fgbd ValueAxis )SetCrosses (axis Axis ){_fgbd ._eag .CrossAx .ValAttr =axis .AxisID ()};

// AddCategoryAxis adds a category axis.
func (_fgde Chart )AddCategoryAxis ()CategoryAxis {_cbbf :=_c .NewCT_CatAx ();if _fgde ._aa .Chart .PlotArea .CChoice ==nil {_fgde ._aa .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_cbbf .AxId =_c .NewCT_UnsignedInt ();_cbbf .AxId .ValAttr =0x7FFFFFFF&_ca .Uint32 ();_fgde ._aa .Chart .PlotArea .CChoice .CatAx =append (_fgde ._aa .Chart .PlotArea .CChoice .CatAx ,_cbbf );_cbbf .Auto =_c .NewCT_Boolean ();_cbbf .Auto .ValAttr =_e .Bool (true );_cbbf .Delete =_c .NewCT_Boolean ();_cbbf .Delete .ValAttr =_e .Bool (false );_agf :=MakeCategoryAxis (_cbbf );_agf .InitializeDefaults ();return _agf ;};func (_gcdd Chart )AddSeriesAxis ()SeriesAxis {_age :=_c .NewCT_SerAx ();if _gcdd ._aa .Chart .PlotArea .CChoice ==nil {_gcdd ._aa .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_age .AxId =_c .NewCT_UnsignedInt ();_age .AxId .ValAttr =0x7FFFFFFF&_ca .Uint32 ();_gcdd ._aa .Chart .PlotArea .CChoice .SerAx =append (_gcdd ._aa .Chart .PlotArea .CChoice .SerAx ,_age );_age .Delete =_c .NewCT_Boolean ();_age .Delete .ValAttr =_e .Bool (false );_bfb :=MakeSeriesAxis (_age );_bfb .InitializeDefaults ();return _bfb ;};func (_eda DataLabels )SetShowCategoryName (b bool ){_eda .ensureChoice ();_eda ._agd .Choice .ShowCatName =_c .NewCT_Boolean ();_eda ._agd .Choice .ShowCatName .ValAttr =_e .Bool (b );};

// X returns the inner wrapped XML type.
func (_dff PieChart )X ()*_c .CT_PieChart {return _dff ._dgb };func (_ddg CategoryAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_ddg ._gcb .MajorTickMark =nil ;}else {_ddg ._gcb .MajorTickMark =_c .NewCT_TickMark ();_ddg ._gcb .MajorTickMark .ValAttr =m ;};};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_aeg Chart )SetDisplayBlanksAs (v _c .ST_DispBlanksAs ){_aeg ._aa .Chart .DispBlanksAs =_c .NewCT_DispBlanksAs ();_aeg ._aa .Chart .DispBlanksAs .ValAttr =v ;};

// X returns the inner wrapped XML type.
func (_gc BarChart )X ()*_c .CT_BarChart {return _gc ._bfd };

// AddSurfaceChart adds a new surface chart to a chart.
func (_fge Chart )AddSurfaceChart ()SurfaceChart {_ccf :=_c .NewCT_PlotAreaChoice ();_fge ._aa .Chart .PlotArea .Choice =append (_fge ._aa .Chart .PlotArea .Choice ,_ccf );_ccf .SurfaceChart =_c .NewCT_SurfaceChart ();_ecf (_fge ._aa .Chart );_fge ._aa .Chart .View3D .RotX .ValAttr =_e .Int8 (90);_fge ._aa .Chart .View3D .RotY .ValAttr =_e .Uint16 (0);_fge ._aa .Chart .View3D .Perspective =_c .NewCT_Perspective ();_fge ._aa .Chart .View3D .Perspective .ValAttr =_e .Uint8 (0);_ddef :=SurfaceChart {_aea :_ccf .SurfaceChart };_ddef .InitializeDefaults ();return _ddef ;};func (_ddaa SeriesAxis )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_cde SurfaceChartSeries )X ()*_c .CT_SurfaceSer {return _cde ._caggb };

// CategoryAxis returns the category data source.
func (_ffc PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ffc ._bfc .Cat ==nil {_ffc ._bfc .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_ffc ._bfc .Cat );};func (_cfc Legend )SetOverlay (b bool ){_cfc ._bba .Overlay =_c .NewCT_Boolean ();_cfc ._bba .Overlay .ValAttr =_e .Bool (b );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_adg *_c .CT_OfPieChart ;};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_dg *_c .CT_BarSer };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_afd BubbleChartSeries )InitializeDefaults (){};func (_ge DateAxis )AxisID ()uint32 {return _ge ._dbd .AxId .ValAttr };

// AddPie3DChart adds a new pie chart to a chart.
func (_dag Chart )AddPie3DChart ()Pie3DChart {_ecf (_dag ._aa .Chart );_fad :=_c .NewCT_PlotAreaChoice ();_dag ._aa .Chart .PlotArea .Choice =append (_dag ._aa .Chart .PlotArea .Choice ,_fad );_fad .Pie3DChart =_c .NewCT_Pie3DChart ();_cfgd :=Pie3DChart {_bagg :_fad .Pie3DChart };_cfgd .InitializeDefaults ();return _cfgd ;};func MakeDataLabels (x *_c .CT_DLbls )DataLabels {return DataLabels {x }};

// SetOrder sets the order of the series
func (_ecea ScatterChartSeries )SetOrder (idx uint32 ){_ecea ._dgc .Order .ValAttr =idx };func (_bde ValueAxis )AxisID ()uint32 {return _bde ._eag .AxId .ValAttr };func (_bded ValueAxis )MajorGridLines ()GridLines {if _bded ._eag .MajorGridlines ==nil {_bded ._eag .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_bded ._eag .MajorGridlines };};

// InitializeDefaults the Stock chart to its defaults
func (_cbdd StockChart )InitializeDefaults (){_cbdd ._dge .HiLowLines =_c .NewCT_ChartLines ();_cbdd ._dge .UpDownBars =_c .NewCT_UpDownBars ();_cbdd ._dge .UpDownBars .GapWidth =_c .NewCT_GapAmount ();_cbdd ._dge .UpDownBars .GapWidth .ValAttr =&_c .ST_GapAmount {};_cbdd ._dge .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_e .Uint16 (150);_cbdd ._dge .UpDownBars .UpBars =_c .NewCT_UpDownBar ();_cbdd ._dge .UpDownBars .DownBars =_c .NewCT_UpDownBar ();};func (_beb CategoryAxis )SetPosition (p _c .ST_AxPos ){_beb ._gcb .AxPos =_c .NewCT_AxPos ();_beb ._gcb .AxPos .ValAttr =p ;};

// Labels returns the data label properties.
func (_fcbad ScatterChartSeries )Labels ()DataLabels {if _fcbad ._dgc .DLbls ==nil {_fcbad ._dgc .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_fcbad ._dgc .DLbls );};

// X returns the inner wrapped XML type.
func (_fcd GridLines )X ()*_c .CT_ChartLines {return _fcd ._ece };func (_bgcd CategoryAxis )AxisID ()uint32 {return _bgcd ._gcb .AxId .ValAttr };func MakeMarker (x *_c .CT_Marker )Marker {return Marker {x }};func (_gde DateAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_gde ._dbd .MajorTickMark =nil ;}else {_gde ._dbd .MajorTickMark =_c .NewCT_TickMark ();_gde ._dbd .MajorTickMark .ValAttr =m ;};};func (_agff ValueAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_agff ._eag .MajorTickMark =nil ;}else {_agff ._eag .MajorTickMark =_c .NewCT_TickMark ();_agff ._eag .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_bfbg PieChartSeries )X ()*_c .CT_PieSer {return _bfbg ._bfc };func (_aafd ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aafd ._dgc .XVal ==nil {_aafd ._dgc .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_aafd ._dgc .XVal );};type ValueAxis struct{_eag *_c .CT_ValAx };

// SetText sets the series text.
func (_acd AreaChartSeries )SetText (s string ){_acd ._df .Tx =_c .NewCT_SerTx ();_acd ._df .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_ffag LineChartSeries )X ()*_c .CT_LineSer {return _ffag ._aac };

// X returns the inner wrapped XML type.
func (_ggd RadarChartSeries )X ()*_c .CT_RadarSer {return _ggd ._fbe };

// SetText sets the series text
func (_bceb ScatterChartSeries )SetText (s string ){_bceb ._dgc .Tx =_c .NewCT_SerTx ();_bceb ._dgc .Tx .Choice .V =&s ;};func (_bd BarChart )AddAxis (axis Axis ){_eac :=_c .NewCT_UnsignedInt ();_eac .ValAttr =axis .AxisID ();_bd ._bfd .AxId =append (_bd ._bfd .AxId ,_eac );};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_aba *_c .CT_RadarChart ;};

// X returns the inner wrapped XML type.
func (_dbgb Surface3DChart )X ()*_c .CT_Surface3DChart {return _dbgb ._ffbe };

// AddSeries adds a default series to a bar chart.
func (_bbc Bar3DChart )AddSeries ()BarChartSeries {_cg :=_bbc .nextColor (len (_bbc ._gbc .Ser ));_fgf :=_c .NewCT_BarSer ();_bbc ._gbc .Ser =append (_bbc ._gbc .Ser ,_fgf );_fgf .Idx .ValAttr =uint32 (len (_bbc ._gbc .Ser )-1);_fgf .Order .ValAttr =uint32 (len (_bbc ._gbc .Ser )-1);_dfd :=BarChartSeries {_fgf };_dfd .InitializeDefaults ();_dfd .Properties ().SetSolidFill (_cg );return _dfd ;};func (_acg DataLabels )SetShowLegendKey (b bool ){_acg .ensureChoice ();_acg ._agd .Choice .ShowLegendKey =_c .NewCT_Boolean ();_acg ._agd .Choice .ShowLegendKey .ValAttr =_e .Bool (b );};func (_fdc ScatterChartSeries )Values ()NumberDataSource {if _fdc ._dgc .YVal ==nil {_fdc ._dgc .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_fdc ._dgc .YVal );};

// SetIndex sets the index of the series
func (_gabe ScatterChartSeries )SetIndex (idx uint32 ){_gabe ._dgc .Idx .ValAttr =idx };

// InitializeDefaults initializes an Radar series to the default values.
func (_fgb RadarChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_db AreaChartSeries )X ()*_c .CT_AreaSer {return _db ._df };

// AddTitle sets a new title on the chart.
func (_dagg Chart )AddTitle ()Title {_dagg ._aa .Chart .Title =_c .NewCT_Title ();_dagg ._aa .Chart .Title .Overlay =_c .NewCT_Boolean ();_dagg ._aa .Chart .Title .Overlay .ValAttr =_e .Bool (false );_dagg ._aa .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_dagg ._aa .Chart .AutoTitleDeleted .ValAttr =_e .Bool (false );_ddbb :=MakeTitle (_dagg ._aa .Chart .Title );_ddbb .InitializeDefaults ();return _ddbb ;};func (_gaba LineChartSeries )Values ()NumberDataSource {if _gaba ._aac .Val ==nil {_gaba ._aac .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_gaba ._aac .Val );};

// SetOrder sets the order of the series
func (_aaa LineChartSeries )SetOrder (idx uint32 ){_aaa ._aac .Order .ValAttr =idx };func (_bgag ValueAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_bgag ._eag .MinorTickMark =nil ;}else {_bgag ._eag .MinorTickMark =_c .NewCT_TickMark ();_bgag ._eag .MinorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_bfda Marker )X ()*_c .CT_Marker {return _bfda ._gdg };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_fadb Chart )AddSurface3DChart ()Surface3DChart {_cfa :=_c .NewCT_PlotAreaChoice ();_fadb ._aa .Chart .PlotArea .Choice =append (_fadb ._aa .Chart .PlotArea .Choice ,_cfa );_cfa .Surface3DChart =_c .NewCT_Surface3DChart ();_ecf (_fadb ._aa .Chart );_aag :=Surface3DChart {_ffbe :_cfa .Surface3DChart };_aag .InitializeDefaults ();return _aag ;};

// X returns the inner wrapped XML type.
func (_ede ScatterChartSeries )X ()*_c .CT_ScatterSer {return _ede ._dgc };func (_eef ScatterChartSeries )InitializeDefaults (){_eef .Properties ().LineProperties ().SetNoFill ();_eef .Marker ().SetSymbol (_c .ST_MarkerStyleAuto );_eef .Labels ().SetShowLegendKey (false );_eef .Labels ().SetShowValue (true );_eef .Labels ().SetShowPercent (false );_eef .Labels ().SetShowCategoryName (false );_eef .Labels ().SetShowSeriesName (false );_eef .Labels ().SetShowLeaderLines (false );};

// SetText sets the series text
func (_add LineChartSeries )SetText (s string ){_add ._aac .Tx =_c .NewCT_SerTx ();_add ._aac .Tx .Choice .V =&s ;};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_dgb *_c .CT_PieChart ;};func (_fe BubbleChart )AddAxis (axis Axis ){_fgae :=_c .NewCT_UnsignedInt ();_fgae .ValAttr =axis .AxisID ();_fe ._fc .AxId =append (_fe ._fc .AxId ,_fgae );};

// Marker returns the marker properties.
func (_aga LineChartSeries )Marker ()Marker {if _aga ._aac .Marker ==nil {_aga ._aac .Marker =_c .NewCT_Marker ();};return MakeMarker (_aga ._aac .Marker );};func (_gea Legend )SetPosition (p _c .ST_LegendPos ){if p ==_c .ST_LegendPosUnset {_gea ._bba .LegendPos =nil ;}else {_gea ._bba .LegendPos =_c .NewCT_LegendPos ();_gea ._bba .LegendPos .ValAttr =p ;};};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_ef *_c .CT_DoughnutChart ;};type SeriesAxis struct{_cffd *_c .CT_SerAx };

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_aea *_c .CT_SurfaceChart ;};

// X returns the inner wrapped XML type.
func (_faf PieOfPieChart )X ()*_c .CT_OfPieChart {return _faf ._adg };func (_da nullAxis )AxisID ()uint32 {return 0};

// AddLineChart adds a new line chart to a chart.
func (_de Chart )AddLineChart ()LineChart {_gfg :=_c .NewCT_PlotAreaChoice ();_de ._aa .Chart .PlotArea .Choice =append (_de ._aa .Chart .PlotArea .Choice ,_gfg );_gfg .LineChart =_c .NewCT_LineChart ();_gfg .LineChart .Grouping =_c .NewCT_Grouping ();_gfg .LineChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return LineChart {_caa :_gfg .LineChart };};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_dada Chart )AddPieOfPieChart ()PieOfPieChart {_gfb :=_c .NewCT_PlotAreaChoice ();_dada ._aa .Chart .PlotArea .Choice =append (_dada ._aa .Chart .PlotArea .Choice ,_gfb );_gfb .OfPieChart =_c .NewCT_OfPieChart ();_dga :=PieOfPieChart {_adg :_gfb .OfPieChart };_dga .InitializeDefaults ();return _dga ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_df *_c .CT_AreaSer };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_bfd *_c .CT_BarChart ;};

// InitializeDefaults the Bubble chart to its defaults
func (_bc BubbleChart )InitializeDefaults (){};

// Properties returns the line chart series shape properties.
func (_acdd SurfaceChartSeries )Properties ()_fb .ShapeProperties {if _acdd ._caggb .SpPr ==nil {_acdd ._caggb .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_acdd ._caggb .SpPr );};

// AddSeries adds a default series to a Bubble chart.
func (_eg BubbleChart )AddSeries ()BubbleChartSeries {_bg :=_eg .nextColor (len (_eg ._fc .Ser ));_cc :=_c .NewCT_BubbleSer ();_eg ._fc .Ser =append (_eg ._fc .Ser ,_cc );_cc .Idx .ValAttr =uint32 (len (_eg ._fc .Ser )-1);_cc .Order .ValAttr =uint32 (len (_eg ._fc .Ser )-1);_dde :=BubbleChartSeries {_cc };_dde .InitializeDefaults ();_dde .Properties ().SetSolidFill (_bg );return _dde ;};

// SetText sets the series text
func (_dfag SurfaceChartSeries )SetText (s string ){_dfag ._caggb .Tx =_c .NewCT_SerTx ();_dfag ._caggb .Tx .Choice .V =&s ;};

// AddPieChart adds a new pie chart to a chart.
func (_ecfd Chart )AddPieChart ()PieChart {_eeg :=_c .NewCT_PlotAreaChoice ();_ecfd ._aa .Chart .PlotArea .Choice =append (_ecfd ._aa .Chart .PlotArea .Choice ,_eeg );_eeg .PieChart =_c .NewCT_PieChart ();_abd :=PieChart {_dgb :_eeg .PieChart };_abd .InitializeDefaults ();return _abd ;};

// AddSeries adds a default series to a Stock chart.
func (_bgg StockChart )AddSeries ()LineChartSeries {_ffab :=_c .NewCT_LineSer ();_bgg ._dge .Ser =append (_bgg ._dge .Ser ,_ffab );_ffab .Idx .ValAttr =uint32 (len (_bgg ._dge .Ser )-1);_ffab .Order .ValAttr =uint32 (len (_bgg ._dge .Ser )-1);_egd :=LineChartSeries {_ffab };_egd .Values ().CreateEmptyNumberCache ();_egd .Properties ().LineProperties ().SetNoFill ();return _egd ;};

// X returns the inner wrapped XML type.
func (_bcc StockChart )X ()*_c .CT_StockChart {return _bcc ._dge };func (_ddb CategoryAxis )SetCrosses (axis Axis ){_ddb ._gcb .Choice =_c .NewEG_AxSharedChoice ();_ddb ._gcb .Choice .Crosses =_c .NewCT_Crosses ();_ddb ._gcb .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_ddb ._gcb .CrossAx .ValAttr =axis .AxisID ();};func (_cgac DataLabels )SetShowSeriesName (b bool ){_cgac .ensureChoice ();_cgac ._agd .Choice .ShowSerName =_c .NewCT_Boolean ();_cgac ._agd .Choice .ShowSerName .ValAttr =_e .Bool (b );};type LineChart struct{chartBase ;_caa *_c .CT_LineChart ;};

// Order returns the order of the series
func (_ccg LineChartSeries )Order ()uint32 {return _ccg ._aac .Order .ValAttr };type Marker struct{_gdg *_c .CT_Marker };type Line3DChart struct{chartBase ;_fab *_c .CT_Line3DChart ;};func (_abc DateAxis )MajorGridLines ()GridLines {if _abc ._dbd .MajorGridlines ==nil {_abc ._dbd .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_abc ._dbd .MajorGridlines };};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bda Chart )AddLegend ()Legend {_bda ._aa .Chart .Legend =_c .NewCT_Legend ();_fbfd :=MakeLegend (_bda ._aa .Chart .Legend );_fbfd .InitializeDefaults ();return _fbfd ;};

// X returns the inner wrapped XML type.
func (_adae ScatterChart )X ()*_c .CT_ScatterChart {return _adae ._ffb };func (_ccb CategoryAxis )Properties ()_fb .ShapeProperties {if _ccb ._gcb .SpPr ==nil {_ccb ._gcb .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ccb ._gcb .SpPr );};func (_dd AreaChart )AddAxis (axis Axis ){_be :=_c .NewCT_UnsignedInt ();_be .ValAttr =axis .AxisID ();_dd ._ad .AxId =append (_dd ._ad .AxId ,_be );};type chartBase struct{};

// X returns the inner wrapped XML type.
func (_abg SeriesAxis )X ()*_c .CT_SerAx {return _abg ._cffd };func MakeNumberDataSource (x *_c .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// AddSeries adds a default series to a bar chart.
func (_ea BarChart )AddSeries ()BarChartSeries {_cgb :=_ea .nextColor (len (_ea ._bfd .Ser ));_dad :=_c .NewCT_BarSer ();_ea ._bfd .Ser =append (_ea ._bfd .Ser ,_dad );_dad .Idx .ValAttr =uint32 (len (_ea ._bfd .Ser )-1);_dad .Order .ValAttr =uint32 (len (_ea ._bfd .Ser )-1);_fd :=BarChartSeries {_dad };_fd .InitializeDefaults ();_fd .Properties ().SetSolidFill (_cgb );return _fd ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_gded PieChartSeries )SetExplosion (v uint32 ){_gded ._bfc .Explosion =_c .NewCT_UnsignedInt ();_gded ._bfc .Explosion .ValAttr =v ;};

// Index returns the index of the series
func (_agbd SurfaceChartSeries )Index ()uint32 {return _agbd ._caggb .Idx .ValAttr };

// InitializeDefaults initializes a bar chart series to the default values.
func (_dfda BarChartSeries )InitializeDefaults (){};

// Properties returns the bar chart series shape properties.
func (_bfa RadarChartSeries )Properties ()_fb .ShapeProperties {if _bfa ._fbe .SpPr ==nil {_bfa ._fbe .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bfa ._fbe .SpPr );};

// AddAxis adds an axis to a line chart.
func (_fgce Line3DChart )AddAxis (axis Axis ){_efb :=_c .NewCT_UnsignedInt ();_efb .ValAttr =axis .AxisID ();_fgce ._fab .AxId =append (_fgce ._fab .AxId ,_efb );};func MakeTitle (x *_c .CT_Title )Title {return Title {x }};

// Values returns the value data source.
func (_eb BarChartSeries )Values ()NumberDataSource {if _eb ._dg .Val ==nil {_eb ._dg .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_eb ._dg .Val );};

// InitializeDefaults the bar chart to its defaults
func (_ggc Pie3DChart )InitializeDefaults (){_ggc ._bagg .VaryColors =_c .NewCT_Boolean ();_ggc ._bagg .VaryColors .ValAttr =_e .Bool (true );};

// X returns the inner wrapped XML type.
func (_edag DoughnutChart )X ()*_c .CT_DoughnutChart {return _edag ._ef };func (_bga NumberDataSource )ensureChoice (){if _bga ._agg .Choice ==nil {_bga ._agg .Choice =_c .NewCT_NumDataSourceChoice ();};};func (_dbc Marker )Properties ()_fb .ShapeProperties {if _dbc ._gdg .SpPr ==nil {_dbc ._gdg .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_dbc ._gdg .SpPr );};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_bagg *_c .CT_Pie3DChart ;};

// X returns the inner wrapped XML type.
func (_eebf Title )X ()*_c .CT_Title {return _eebf ._fcfc };

// InitializeDefaults the bar chart to its defaults
func (_bce DoughnutChart )InitializeDefaults (){_bce ._ef .VaryColors =_c .NewCT_Boolean ();_bce ._ef .VaryColors .ValAttr =_e .Bool (true );_bce ._ef .HoleSize =_c .NewCT_HoleSize ();_bce ._ef .HoleSize .ValAttr =&_c .ST_HoleSize {};_bce ._ef .HoleSize .ValAttr .ST_HoleSizeUByte =_e .Uint8 (50);};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_aeb DoughnutChart )SetHoleSize (pct uint8 ){if _aeb ._ef .HoleSize ==nil {_aeb ._ef .HoleSize =_c .NewCT_HoleSize ();};if _aeb ._ef .HoleSize .ValAttr ==nil {_aeb ._ef .HoleSize .ValAttr =&_c .ST_HoleSize {};};_aeb ._ef .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};type Title struct{_fcfc *_c .CT_Title };

// SetText sets the series text.
func (_gba BarChartSeries )SetText (s string ){_gba ._dg .Tx =_c .NewCT_SerTx ();_gba ._dg .Tx .Choice .V =&s ;};

// CategoryAxis returns the category data source.
func (_bb AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bb ._df .Cat ==nil {_bb ._df .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_bb ._df .Cat );};

// AddAreaChart adds a new area chart to a chart.
func (_ae Chart )AddAreaChart ()AreaChart {_dc :=_c .NewCT_PlotAreaChoice ();_ae ._aa .Chart .PlotArea .Choice =append (_ae ._aa .Chart .PlotArea .Choice ,_dc );_dc .AreaChart =_c .NewCT_AreaChart ();_ab :=AreaChart {_ad :_dc .AreaChart };_ab .InitializeDefaults ();return _ab ;};type NumberDataSource struct{_agg *_c .CT_NumDataSource };

// AddAxis adds an axis to a line chart.
func (_fcf LineChart )AddAxis (axis Axis ){_baf :=_c .NewCT_UnsignedInt ();_baf .ValAttr =axis .AxisID ();_fcf ._caa .AxId =append (_fcf ._caa .AxId ,_baf );};

// CategoryAxis returns the category data source.
func (_fbeb RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fbeb ._fbe .Cat ==nil {_fbeb ._fbe .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_fbeb ._fbe .Cat );};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_bca Chart )AddDoughnutChart ()DoughnutChart {_cgc :=_c .NewCT_PlotAreaChoice ();_bca ._aa .Chart .PlotArea .Choice =append (_bca ._aa .Chart .PlotArea .Choice ,_cgc );_cgc .DoughnutChart =_c .NewCT_DoughnutChart ();_eba :=DoughnutChart {_ef :_cgc .DoughnutChart };_eba .InitializeDefaults ();return _eba ;};func (_gdf ValueAxis )Properties ()_fb .ShapeProperties {if _gdf ._eag .SpPr ==nil {_gdf ._eag .SpPr =_fgd .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_gdf ._eag .SpPr );};

// AddSeries adds a default series to an area chart.
func (_fga AreaChart )AddSeries ()AreaChartSeries {_ba :=_fga .nextColor (len (_fga ._ad .Ser ));_af :=_c .NewCT_AreaSer ();_fga ._ad .Ser =append (_fga ._ad .Ser ,_af );_af .Idx .ValAttr =uint32 (len (_fga ._ad .Ser )-1);_af .Order .ValAttr =uint32 (len (_fga ._ad .Ser )-1);_ce :=AreaChartSeries {_af };_ce .InitializeDefaults ();_ce .Properties ().SetSolidFill (_ba );return _ce ;};

// CategoryAxis returns the category data source.
func (_dda BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dda ._dg .Cat ==nil {_dda ._dg .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dda ._dg .Cat );};

// Values returns the value data source.
func (_fda RadarChartSeries )Values ()NumberDataSource {if _fda ._fbe .Val ==nil {_fda ._fbe .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_fda ._fbe .Val );};

// SetText sets the series text.
func (_gag PieChartSeries )SetText (s string ){_gag ._bfc .Tx =_c .NewCT_SerTx ();_gag ._bfc .Tx .Choice .V =&s ;};

// SetIndex sets the index of the series
func (_bbg SurfaceChartSeries )SetIndex (idx uint32 ){_bbg ._caggb .Idx .ValAttr =idx };func (_aeabf SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aeabf ._caggb .Cat ==nil {_aeabf ._caggb .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_aeabf ._caggb .Cat );};

// Values returns the value data source.
func (_gd AreaChartSeries )Values ()NumberDataSource {if _gd ._df .Val ==nil {_gd ._df .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_gd ._df .Val );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_bee Bar3DChart )SetDirection (d _c .ST_BarDir ){_bee ._gbc .BarDir .ValAttr =d };func (_fbcc SurfaceChartSeries )InitializeDefaults (){_fbcc .Properties ().LineProperties ().SetWidth (1*_g .Point );_fbcc .Properties ().LineProperties ().SetSolidFill (_a .Black );_fbcc .Properties ().LineProperties ().SetJoin (_fb .LineJoinRound );};

// X returns the inner wrapped XML type.
func (_ead DateAxis )X ()*_c .CT_DateAx {return _ead ._dbd };

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_dgc *_c .CT_ScatterSer };