//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_abe "archive/zip";_a "bytes";_ce "encoding/xml";_ad "errors";_dc "fmt";_dcf "github.com/unidoc/unioffice";_ae "github.com/unidoc/unioffice/common";_gd "github.com/unidoc/unioffice/common/tempstorage";_gg "github.com/unidoc/unioffice/drawing";_gcg "github.com/unidoc/unioffice/internal/license";_dcg "github.com/unidoc/unioffice/measurement";_cb "github.com/unidoc/unioffice/schema/soo/dml";_db "github.com/unidoc/unioffice/schema/soo/dml/chart";_b "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_df "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_fd "github.com/unidoc/unioffice/schema/soo/pml";_gc "github.com/unidoc/unioffice/zippkg";_ab "image";_d "image/jpeg";_c "io";_fc "log";_gf "os";_g "path";_ff "sort";_ea "strconv";_e "strings";);

// Properties returns the properties of the TextBox.
func (_add Image )Properties ()_gg .ShapeProperties {if _add ._gcf .SpPr ==nil {_add ._gcf .SpPr =_cb .NewCT_ShapeProperties ();};return _gg .MakeShapeProperties (_add ._gcf .SpPr );};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_aag *Presentation )AddImage (i _ae .Image )(_ae .ImageRef ,error ){_dcae :=_ae .MakeImageRef (i ,&_aag .DocBase ,_aag ._cdd );if i .Data ==nil &&i .Path ==""{return _dcae ,_ad .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _dcae ,_ad .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _dcae ,_ad .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_dade :=_gd .Add (i .Path );if _dade !=nil {return _dcae ,_dade ;};};_aag .Images =append (_aag .Images ,_dcae );_aag .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_aag .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_aag .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_aag .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_aag .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _dcae ,nil ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_fagf Slide )AddImageToRels (img _ae .ImageRef )string {_fec :=0;for _dbfd ,_edb :=range _fagf ._ebd .Images {if _edb ==img {_fec =_dbfd +1;break ;};};var _ece string ;for _cebb ,_abg :=range _fagf ._ebd .Slides (){if _abg ._efba ==_fagf ._efba {_gefb :=_dc .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_fec ,img .Format ());_gfbga :=_fagf ._ebd ._fced [_cebb ].AddRelationship (_gefb ,_dcf .ImageType );_ece =_gfbga .ID ();};};return _ece ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_fgfe *Presentation )GetTableStyleById (id string )*_cb .CT_TableStyle {_dccd :=_fgfe ._aca .TblStyle ();for _ ,_fbaa :=range _dccd {if _fbaa .StyleIdAttr ==id {return _fbaa ;};};return nil ;};func _dca (_cbfa []*_fd .CT_GroupShapeChoice )[]*_fd .CT_GroupShapeChoice {var _agf []*_fd .CT_GroupShapeChoice ;for _ ,_bge :=range _cbfa {if len (_bge .Pic )==0{_agf =append (_agf ,_bge );};};return _agf ;};

// SaveToFile writes the Presentation out to a file.
func (_bda *Presentation )SaveToFile (path string )error {return _bda .saveToFile (path ,false )};

// Remove removes a placeholder from a presentation.
func (_fccb PlaceHolder )Remove ()error {for _cee ,_cde :=range _fccb ._eee .CSld .SpTree .Choice {for _ ,_eeec :=range _cde .Sp {if _eeec ==_fccb ._gcdb {copy (_fccb ._eee .CSld .SpTree .Choice [_cee :],_fccb ._eee .CSld .SpTree .Choice [_cee +1:]);_fccb ._eee .CSld .SpTree .Choice =_fccb ._eee .CSld .SpTree .Choice [0:len (_fccb ._eee .CSld .SpTree .Choice )-1];return nil ;};};};return _ad .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};func _ee (_bdc *Presentation ,_dfb *_fd .CT_Shape ,_bf *_fd .CT_GraphicalObjectFrame ,_cfbb *TableInfo ,_fdf *_cb .CT_Transform2D ,_gcd int ,_bc []*_cb .CT_TextParagraph )[]*TextItem {_gfb :=[]*TextItem {};var _ddd ,_ddb int64 ;_eef :=_fdf ==nil ;_fcb :=0;for _ ,_faa :=range _bc {for _ ,_adc :=range _faa .EG_TextRun {if _ccd :=_adc .R ;_ccd !=nil {if !_eef {if _fdf .Off !=nil {if _bdcg :=_fdf .Off .XAttr .ST_CoordinateUnqualified ;_bdcg !=nil {_ddd =*_bdcg ;_eef =true ;};if _eb :=_fdf .Off .YAttr .ST_CoordinateUnqualified ;_eb !=nil {_ddb =*_eb ;_eef =true ;};};};_gfb =append (_gfb ,&TextItem {Presentation :_bdc ,Shape :_dfb ,GraphicFrame :_bf ,TableInfo :_cfbb ,Paragraph :_faa ,Run :_ccd ,Text :_ccd .T ,_dg :_ddd ,_de :_ddb ,_gfa :_gcd ,_gfd :_fcb });_fcb ++;};};};return _gfb ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_ac *PresentationText )Text ()string {_adf :=_a .NewBuffer ([]byte {});for _ ,_cfc :=range _ac .Slides {_adf .WriteString (_cfc .Text ());};return _adf .String ();};

// Index returns the placeholder index
func (_aegd PlaceHolder )Index ()uint32 {if _aegd ._gcdb .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_aegd ._gcdb .NvSpPr .NvPr .Ph .IdxAttr ;};

// NormalViewPr returns the NormalViewPr property.
func (_gdafa ViewProperties )NormalViewPr ()*_fd .CT_NormalViewProperties {return _gdafa ._ddef .NormalViewPr ;};

// Presentation is the a presentation base document.
type Presentation struct{_ae .DocBase ;_aef *_fd .Presentation ;_cdd _ae .Relationships ;_dda []*_fd .Sld ;_fced []_ae .Relationships ;_ceeg []*_fd .SldMaster ;_cebc []_ae .Relationships ;_gfdb []*_fd .SldLayout ;_dae []_ae .Relationships ;_bad []*_cb .Theme ;_aea []_ae .Relationships ;_aca _ae .TableStyles ;_agb PresentationProperties ;_fde ViewProperties ;_afc []*_cb .CT_Hyperlink ;_bg []*_db .ChartSpace ;_cebf []*_fd .HandoutMaster ;_dad []*_fd .NotesMaster ;_ca []*_dcf .XSDAny ;_fae map[string ]string ;_be string ;};func (_ga sort2d )Len ()int {return len (_ga )};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_bccf :_fd .NewPresentationPr ()};};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_ecfe *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_bbddc :=range _ecfe ._gfdb {if _bbddc .CSld .NameAttr !=nil &&name ==*_bbddc .CSld .NameAttr {return SlideLayout {_bbddc },nil ;};};return SlideLayout {},_ad .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_dcge PlaceHolder )Clear (){_dcge .ClearAll ();_baf :=_cb .NewCT_TextParagraph ();_dcge ._gcdb .TxBody .P =[]*_cb .CT_TextParagraph {_baf };_baf .EndParaRPr =_cb .NewCT_TextCharacterProperties ();_baf .EndParaRPr .LangAttr =_dcf .String ("\u0065\u006e\u002dU\u0053");};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_fd .CT_Shape ;GraphicFrame *_fd .CT_GraphicalObjectFrame ;Paragraph *_cb .CT_TextParagraph ;Run *_cb .CT_RegularTextRun ;TableInfo *TableInfo ;_dg int64 ;_de int64 ;_gfa int ;_gfd int ;};

// X returns TextBox's underlying *pml.CT_Shape.
func (_cfbfg TextBox )X ()*_fd .CT_Shape {return _cfbfg ._ebf };

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_ddef *_fd .ViewPr };

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_ddad *Presentation )GetColorBySchemeColor (schClr _cb .ST_SchemeColorVal )*_cb .CT_Color {if len (_ddad ._ceeg )==0||len (_ddad ._bad )==0{return nil ;};var _bagc _cb .ST_ColorSchemeIndex ;_dffa :=_ddad ._ceeg [0];_beff :=_dffa .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_bagc =_beff .Bg1Attr ;case "\u0062\u0067\u0032":_bagc =_beff .Bg2Attr ;case "\u0074\u0078\u0031":_bagc =_beff .Tx1Attr ;case "\u0074\u0078\u0032":_bagc =_beff .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_bagc =_beff .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_bagc =_beff .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_bagc =_beff .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_bagc =_beff .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_bagc =_beff .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_bagc =_beff .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_bagc =_beff .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_bagc =_beff .FolHlinkAttr ;case "\u0064\u006b\u0031":_bagc =_cb .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_bagc =_cb .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_bagc =_cb .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_bagc =_cb .ST_ColorSchemeIndexLt2 ;default:_bagc =_cb .ST_ColorSchemeIndexUnset ;};_dbd :=_ddad ._bad [0];_eabc :=_dbd .ThemeElements ;if _eabc ==nil {return nil ;};var _gef *_cb .CT_Color ;_aage :=_eabc .ClrScheme ;switch _bagc .String (){case "\u0064\u006b\u0031":_gef =_aage .Dk1 ;case "\u0064\u006b\u0032":_gef =_aage .Dk2 ;case "\u006c\u0074\u0031":_gef =_aage .Lt1 ;case "\u006c\u0074\u0032":_gef =_aage .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_gef =_aage .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_gef =_aage .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_gef =_aage .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_gef =_aage .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_gef =_aage .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_gef =_aage .Accent6 ;case "\u0068\u006c\u0069n\u006b":_gef =_aage .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_gef =_aage .FolHlink ;default:return nil ;};return _gef ;};

// Slides returns the slides in the presentation.
func (_cdba *Presentation )Slides ()[]Slide {_acgc :=[]Slide {};for _gdcb ,_cbe :=range _cdba ._dda {_acgc =append (_acgc ,Slide {_cdba ._aef .SldIdLst .SldId [_gdcb ],_cbe ,_cdba });};return _acgc ;};func _eedd ()*Presentation {_fba :=&Presentation {_aef :_fd .NewPresentation ()};_fba ._aef .SldIdLst =_fd .NewCT_SlideIdList ();_fba ._aef .ConformanceAttr =_b .ST_ConformanceClassTransitional ;_fba .AppProperties =_ae .NewAppProperties ();_fba .CoreProperties =_ae .NewCoreProperties ();_fba ._aca =_ae .NewTableStyles ();_fba .ContentTypes =_ae .NewContentTypes ();_fba .Rels =_ae .NewRelationships ();_fba ._cdd =_ae .NewRelationships ();_fba ._agb =NewPresentationProperties ();_fba ._fde =NewViewProperties ();_fba ._fae =map[string ]string {};return _fba ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// AddTextBox adds an empty textbox to a slide.
func (_eccd Slide )AddTextBox ()TextBox {_cggc :=_fd .NewCT_GroupShapeChoice ();_eccd ._efba .CSld .SpTree .Choice =append (_eccd ._efba .CSld .SpTree .Choice ,_cggc );_eefb :=_fd .NewCT_Shape ();_cggc .Sp =append (_cggc .Sp ,_eefb );_eefb .SpPr =_cb .NewCT_ShapeProperties ();_eefb .SpPr .Xfrm =_cb .NewCT_Transform2D ();_eefb .SpPr .PrstGeom =_cb .NewCT_PresetGeometry2D ();_eefb .SpPr .PrstGeom .PrstAttr =_cb .ST_ShapeTypeRect ;_eefb .NvSpPr =_fd .NewCT_ShapeNonVisual ();_eefb .NvSpPr .CNvSpPr =_cb .NewCT_NonVisualDrawingShapeProps ();_egb :=true ;_eefb .NvSpPr .CNvSpPr .TxBoxAttr =&_egb ;_eefb .TxBody =_cb .NewCT_TextBody ();_eefb .TxBody .BodyPr =_cb .NewCT_TextBodyProperties ();_eefb .TxBody .BodyPr .WrapAttr =_cb .ST_TextWrappingTypeSquare ;_eefb .TxBody .BodyPr .SpAutoFit =_cb .NewCT_TextShapeAutofit ();_cffb :=TextBox {_eefb };_cffb .Properties ().SetWidth (3*_dcg .Inch );_cffb .Properties ().SetHeight (1*_dcg .Inch );_cffb .Properties ().SetPosition (0,0);return _cffb ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_gfe *Presentation )GetImageByRelID (relID string )(_ae .ImageRef ,bool ){for _ ,_egcc :=range _gfe .Images {if _egcc .RelID ()==relID {return _egcc ,true ;};};return _ae .ImageRef {},false ;};

// TextBox is a text box within a slide.
type TextBox struct{_ebf *_fd .CT_Shape };

// GetTextBoxes returns a list of all text boxes from a slide.
func (_aee Slide )GetTextBoxes ()[]*TextBox {_dabbc :=[]*TextBox {};_edg :=_aee ._efba .CSld .SpTree .Choice ;for _ ,_fabf :=range _edg {for _ ,_ddc :=range _fabf .Sp {if _ddc .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_ddc .NvSpPr .CNvSpPr .TxBoxAttr {_dabbc =append (_dabbc ,&TextBox {_ddc });};};};return _dabbc ;};func (_fccbd *Presentation )save (_gda _c .Writer ,_ddab bool )error {const _afg ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _gaf :=_fccbd ._aef .Validate ();_gaf !=nil {_fc .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_gaf );};if !_gcg .GetLicenseKey ().IsLicensed ()&&!_efe {_dc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_dc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _ad .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_fccbd ._be )==0{_eda ,_bag :=_gcg .GenRefId ("\u0070\u0077");if _bag !=nil {_dcf .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_bag );return _bag ;};_fccbd ._be =_eda ;};if _agc :=_gcg .Track (_fccbd ._be ,_afg );_agc !=nil {_dc .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_agc );return _agc ;};if _ddab {_fccbd .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_fccbd .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_fccbd .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_fccbd .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_badf :=_dcf .DocTypePresentation ;_dbea :=_abe .NewWriter (_gda );defer _dbea .Close ();if _adef :=_gc .MarshalXML (_dbea ,_dcf .BaseRelsFilename ,_fccbd .Rels .X ());_adef !=nil {return _adef ;};if _efg :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .ExtendedPropertiesType ,_fccbd .AppProperties .X ());_efg !=nil {return _efg ;};if _ged :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .CorePropertiesType ,_fccbd .CoreProperties .X ());_ged !=nil {return _ged ;};if _dfdf :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .PresentationPropertiesType ,_fccbd ._agb .X ());_dfdf !=nil {return _dfdf ;};if _bbdd :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .ViewPropertiesType ,_fccbd ._fde .X ());_bbdd !=nil {return _bbdd ;};if _gfad :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .TableStylesType ,_fccbd ._aca .X ());_gfad !=nil {return _gfad ;};if _fccbd .CustomProperties .X ()!=nil {if _fcd :=_gc .MarshalXMLByType (_dbea ,_badf ,_dcf .CustomPropertiesType ,_fccbd .CustomProperties .X ());_fcd !=nil {return _fcd ;};};if _fccbd .Thumbnail !=nil {_gdc ,_def :=_dbea .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _def !=nil {return _def ;};if _ceba :=_d .Encode (_gdc ,_fccbd .Thumbnail ,nil );_ceba !=nil {return _ceba ;};};_ggf :=_dcf .AbsoluteFilename (_badf ,_dcf .OfficeDocumentType ,0);if _cdg :=_gc .MarshalXML (_dbea ,_ggf ,_fccbd ._aef );_cdg !=nil {return _cdg ;};if _gfc :=_gc .MarshalXML (_dbea ,_gc .RelationsPathFor (_ggf ),_fccbd ._cdd .X ());_gfc !=nil {return _gfc ;};for _cfbbc ,_dba :=range _fccbd ._dda {_dfef :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideType ,_cfbbc +1);_gc .MarshalXML (_dbea ,_dfef ,_dba );if !_fccbd ._fced [_cfbbc ].IsEmpty (){_eade :=_gc .RelationsPathFor (_dfef );_gc .MarshalXML (_dbea ,_eade ,_fccbd ._fced [_cfbbc ].X ());};};for _dgca ,_adea :=range _fccbd ._ceeg {_gafa :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideMasterType ,_dgca +1);_gc .MarshalXML (_dbea ,_gafa ,_adea );if !_fccbd ._cebc [_dgca ].IsEmpty (){_afag :=_gc .RelationsPathFor (_gafa );_gc .MarshalXML (_dbea ,_afag ,_fccbd ._cebc [_dgca ].X ());};};for _dabb ,_ace :=range _fccbd ._gfdb {_fegc :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideLayoutType ,_dabb +1);_gc .MarshalXML (_dbea ,_fegc ,_ace );if !_fccbd ._dae [_dabb ].IsEmpty (){_fefc :=_gc .RelationsPathFor (_fegc );_gc .MarshalXML (_dbea ,_fefc ,_fccbd ._dae [_dabb ].X ());};};for _efgg ,_caf :=range _fccbd ._bad {_ddag :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .ThemeType ,_efgg +1);_gc .MarshalXML (_dbea ,_ddag ,_caf );if !_fccbd ._aea [_efgg ].IsEmpty (){_bgee :=_gc .RelationsPathFor (_ddag );_gc .MarshalXML (_dbea ,_bgee ,_fccbd ._aea [_efgg ].X ());};};for _eae ,_efb :=range _fccbd ._bg {_gfcb :=_dcf .AbsoluteFilename (_badf ,_dcf .ChartType ,_eae +1);_gc .MarshalXML (_dbea ,_gfcb ,_efb );};for _agff ,_fabb :=range _fccbd ._cebf {_cdf :=_dcf .AbsoluteFilename (_badf ,_dcf .HandoutMasterType ,_agff +1);_gc .MarshalXML (_dbea ,_cdf ,_fabb );};for _agba ,_deaa :=range _fccbd ._dad {_dff :=_dcf .AbsoluteFilename (_badf ,_dcf .NotesMasterType ,_agba +1);_gc .MarshalXML (_dbea ,_dff ,_deaa );};for _fee ,_bae :=range _fccbd ._ca {_bada :=_dcf .AbsoluteFilename (_badf ,_dcf .CustomXMLType ,_fee +1);_gc .MarshalXML (_dbea ,_bada ,_bae );};for _ceg ,_fbe :=range _fccbd .Images {if _egc :=_ae .AddImageToZip (_dbea ,_fbe ,_ceg +1,_dcf .DocTypePresentation );_egc !=nil {return _egc ;};};_fccbd .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_fccbd .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fccbd .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fccbd .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _fad :=_gc .MarshalXML (_dbea ,_dcf .ContentTypesFilename ,_fccbd .ContentTypes .X ());_fad !=nil {return _fad ;};if _fff :=_fccbd .WriteExtraFiles (_dbea );_fff !=nil {return _fff ;};return nil ;};func (_cafd *Presentation )Validate ()error {if _bdb :=_cafd ._aef .Validate ();_bdb !=nil {return _bdb ;};for _bef ,_fgf :=range _cafd .Slides (){if _gba :=_fgf .ValidateWithPath (_dc .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_bef ));_gba !=nil {return _gba ;};};for _eafg ,_agcc :=range _cafd ._ceeg {if _cddg :=_agcc .ValidateWithPath (_dc .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_eafg ));_cddg !=nil {return _cddg ;};};for _dgb ,_bcb :=range _cafd ._gfdb {if _fbf :=_bcb .ValidateWithPath (_dc .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_dgb ));_fbf !=nil {return _fbf ;};};return nil ;};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_bccfb Slide )ValidateWithPath (path string )error {if _bgb :=_bccfb ._efba .ValidateWithPath (path );_bgb !=nil {return _bgb ;};for _ ,_efgb :=range _bccfb ._efba .CSld .SpTree .Choice {for _ ,_fga :=range _efgb .Sp {if _fga .TxBody !=nil {if len (_fga .TxBody .P )==0{return _ad .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_da ,_gdg :=Open (fn );if _gdg !=nil {return nil ,_gdg ;};return _da ,nil ;};

// NotesViewPr returns the NotesViewPr property.
func (_ddec ViewProperties )NotesViewPr ()*_fd .CT_NotesViewProperties {return _ddec ._ddef .NotesViewPr };

// GridSpacing returns the GridSpacing property.
func (_cbg ViewProperties )GridSpacing ()*_cb .CT_PositiveSize2D {return _cbg ._ddef .GridSpacing };

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_efc Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_efaf :=range _efc ._efba .CSld .SpTree .Choice {for _ ,_gbe :=range _efaf .Sp {if _gbe .NvSpPr !=nil &&_gbe .NvSpPr .NvPr !=nil &&_gbe .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_gbe .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_gbe .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_gbe .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_gbe ,_efc ._efba },nil ;};};};};return PlaceHolder {},_ad .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_acgf *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_acd ,_cfe :=_acgf .AddSlideWithLayout (l );for _ ,_ada :=range _acd .PlaceHolders (){_ada .Clear ();switch _ada .Type (){case _fd .ST_PlaceholderTypeFtr ,_fd .ST_PlaceholderTypeDt ,_fd .ST_PlaceholderTypeSldNum :_ada .Remove ();};};return _acd ,_cfe ;};

// Type returns the type of the slide layout.
func (_eadg SlideLayout )Type ()_fd .ST_SlideLayoutType {return _eadg ._efab .TypeAttr };

// SlideLayouts returns the slide layouts defined in the presentation.
func (_bdd *Presentation )SlideLayouts ()[]SlideLayout {_ecdg :=[]SlideLayout {};for _ ,_faac :=range _bdd ._gfdb {_ecdg =append (_ecdg ,SlideLayout {_faac });};return _ecdg ;};

// ExtractText returns text from a presentation as a PresentationText object.
func (_fb *Presentation )ExtractText ()*PresentationText {_fa :=[]*SlideText {};for _ ,_ec :=range _fb .Slides (){_ceb :=_ec .ExtractText ();if _ceb !=nil {_fa =append (_fa ,_ceb );};};return &PresentationText {Slides :_fa };};

// ExtractText returns text from a slide as a SlideText object.
func (_ed *Slide )ExtractText ()*SlideText {_dfe :=_ed ._ebd ;_dgf :=[]*TextItem {};for _ ,_dgc :=range _ed ._efba .CSld .SpTree .Choice {for _ ,_ecd :=range _dgc .Sp {_dgf =append (_dgf ,_ee (_dfe ,_ecd ,nil ,nil ,_ecd .SpPr .Xfrm ,0,_ecd .TxBody .P )...);};for _ ,_dea :=range _dgc .GraphicFrame {if _dea !=nil &&_dea .Graphic !=nil &&_dea .Graphic .GraphicData !=nil {_dec :=_dea .Xfrm ;for _ ,_fe :=range _dea .Graphic .GraphicData .Any {if _dd ,_ecdb :=_fe .(*_cb .Tbl );_ecdb {_bd :=&_dd .CT_Table ;_fdc :=0;for _ced ,_cfb :=range _dd .Tr {for _fcc ,_ag :=range _cfb .Tc {_gde :=&TableInfo {Table :_bd ,Row :_cfb ,Cell :_ag ,RowIndex :_ced ,ColIndex :_fcc };_dgf =append (_dgf ,_ee (_dfe ,nil ,_dea ,_gde ,_dec ,_fdc ,_ag .TxBody .P )...);_fdc ++;};};};};};};};_ff .Sort (sort2d (_dgf ));return &SlideText {Items :_dgf };};

// Slide represents a slide of a presentation.
type Slide struct{_cffa *_fd .CT_SlideIdListEntry ;_efba *_fd .Sld ;_ebd *Presentation ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_abd Slide )PlaceHolders ()[]PlaceHolder {_bcdf :=[]PlaceHolder {};for _ ,_bafa :=range _abd ._efba .CSld .SpTree .Choice {for _ ,_cef :=range _bafa .Sp {if _cef .NvSpPr !=nil &&_cef .NvSpPr .NvPr !=nil &&_cef .NvSpPr .NvPr .Ph !=nil {_bcdf =append (_bcdf ,PlaceHolder {_cef ,_abd ._efba });};};};return _bcdf ;};type sort2d []*TextItem ;

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_bcg *Presentation )SaveAsTemplate (w _c .Writer )error {return _bcg .save (w ,true )};

// AddImage adds an image textbox to a slide.
func (_fffe Slide )AddImage (img _ae .ImageRef )Image {_edf :=_fd .NewCT_GroupShapeChoice ();_fffe ._efba .CSld .SpTree .Choice =append (_fffe ._efba .CSld .SpTree .Choice ,_edf );_eeb :=_fd .NewCT_Picture ();_edf .Pic =append (_edf .Pic ,_eeb );_eeb .NvPicPr .CNvPicPr =_cb .NewCT_NonVisualPictureProperties ();_eeb .NvPicPr .CNvPicPr .PicLocks =_cb .NewCT_PictureLocking ();_eeb .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_dcf .Bool (true );_eeb .BlipFill =_cb .NewCT_BlipFillProperties ();_eeb .BlipFill .Blip =_cb .NewCT_Blip ();_cbbg :=_fffe .AddImageToRels (img );_eeb .BlipFill .Blip .EmbedAttr =_dcf .String (_cbbg );_eeb .BlipFill .Stretch =_cb .NewCT_StretchInfoProperties ();_eeb .BlipFill .Stretch .FillRect =_cb .NewCT_RelativeRect ();_eeb .SpPr =_cb .NewCT_ShapeProperties ();_eeb .SpPr .PrstGeom =_cb .NewCT_PresetGeometry2D ();_eeb .SpPr .PrstGeom .PrstAttr =_cb .ST_ShapeTypeRect ;_ebcb :=Image {_eeb };_ccg :=img .Size ();_ebcb .Properties ().SetWidth (_dcg .Distance (_ccg .X )*_dcg .Pixel72 );_ebcb .Properties ().SetHeight (_dcg .Distance (_ccg .Y )*_dcg .Pixel72 );_ebcb .Properties ().SetPosition (0,0);return _ebcb ;};

// X returns the inner wrapped XML type.
func (_cfbc SlideMaster )X ()*_fd .SldMaster {return _cfbc ._cbc };

// Image is an image within a slide.
type Image struct{_gcf *_fd .CT_Picture };

// Paragraphs returns the paragraphs defined in the placeholder.
func (_feg PlaceHolder )Paragraphs ()[]_gg .Paragraph {_agg :=[]_gg .Paragraph {};for _ ,_dcd :=range _feg ._gcdb .TxBody .P {_agg =append (_agg ,_gg .MakeParagraph (_dcd ));};return _agg ;};func (_gdbg TextBox )getOff ()*_cb .CT_Point2D {if _gdbg ._ebf .SpPr ==nil {_gdbg ._ebf .SpPr =_cb .NewCT_ShapeProperties ();};if _gdbg ._ebf .SpPr .Xfrm ==nil {_gdbg ._ebf .SpPr .Xfrm =_cb .NewCT_Transform2D ();};if _gdbg ._ebf .SpPr .Xfrm .Off ==nil {_gdbg ._ebf .SpPr .Xfrm .Off =_cb .NewCT_Point2D ();};return _gdbg ._ebf .SpPr .Xfrm .Off ;};

// AddSlide adds a new slide to the presentation.
func (_ggdb *Presentation )AddSlide ()Slide {_cfd :=_fd .NewCT_SlideIdListEntry ();_cfd .IdAttr =_ggdb .nextSlideID ();_ggdb ._aef .SldIdLst .SldId =append (_ggdb ._aef .SldIdLst .SldId ,_cfd );_cad :=_fd .NewSld ();_cad .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_cad .CSld .SpTree .GrpSpPr .Xfrm =_cb .NewCT_GroupTransform2D ();_cad .CSld .SpTree .GrpSpPr .Xfrm .Off =_cb .NewCT_Point2D ();_cad .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_dcf .Int64 (0);_cad .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_dcf .Int64 (0);_cad .CSld .SpTree .GrpSpPr .Xfrm .Ext =_cb .NewCT_PositiveSize2D ();_cad .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_dcg .Point );_cad .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_dcg .Point );_cad .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_cad .CSld .SpTree .GrpSpPr .Xfrm .Off ;_cad .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_cad .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_ggdb ._dda =append (_ggdb ._dda ,_cad );_decd :=_ggdb ._cdd .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .OfficeDocumentType ,len (_ggdb ._dda ),_dcf .SlideType );_cfd .RIdAttr =_decd .ID ();_gaa :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideType ,len (_ggdb ._dda ));_ggdb .ContentTypes .AddOverride (_gaa ,_dcf .SlideContentType );_bgdc :=_ae .NewRelationships ();_ggdb ._fced =append (_ggdb ._fced ,_bgdc );_bgdc .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .SlideType ,len (_ggdb ._gfdb ),_dcf .SlideLayoutType );return Slide {_cfd ,_cad ,_ggdb };};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_bfb *Presentation ;_aegg _ae .Relationships ;_cbc *_fd .SldMaster ;};

// Name returns the name of the slide layout.
func (_aaf SlideLayout )Name ()string {if _aaf ._efab .CSld !=nil &&_aaf ._efab .CSld .NameAttr !=nil {return *_aaf ._efab .CSld .NameAttr ;};return "";};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_efab *_fd .SldLayout };

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_gb *Presentation )SaveToFileAsTemplate (path string )error {return _gb .saveToFile (path ,true )};

// X returns the inner wrapped XML type.
func (_eab PresentationProperties )X ()*_fd .PresentationPr {return _eab ._bccf };

// Type returns the placeholder type
func (_aeg PlaceHolder )Type ()_fd .ST_PlaceholderType {return _aeg ._gcdb .NvSpPr .NvPr .Ph .TypeAttr };

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_ddef :_fd .NewViewPr ()}};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_gcdb *_fd .CT_Shape ;_eee *_fd .Sld ;};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_fda ,_ddf :=_gf .Open (filename );if _ddf !=nil {return nil ,_dc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ddf );};defer _fda .Close ();_fg ,_ddf :=_gf .Stat (filename );if _ddf !=nil {return nil ,_dc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ddf );};_ =_fg ;return Read (_fda ,_fg .Size ());};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_dab *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_gcdd :=_fd .NewCT_SlideIdListEntry ();_gcdd .IdAttr =256;for _ ,_fbg :=range _dab ._aef .SldIdLst .SldId {if _fbg .IdAttr >=_gcdd .IdAttr {_gcdd .IdAttr =_fbg .IdAttr +1;};};_dab ._aef .SldIdLst .SldId =append (_dab ._aef .SldIdLst .SldId ,_gcdd );_adg :=_fd .NewSld ();_abad :=_a .Buffer {};_bfc :=_ce .NewEncoder (&_abad );_dbe :=_ce .StartElement {Name :_ce .Name {Local :"\u0073\u006c\u0069d\u0065"}};_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_dbe .Attr =append (_dbe .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _bbd :=l ._efab .CSld .MarshalXML (_bfc ,_dbe );_bbd !=nil {return Slide {},_bbd ;};_bfc .Flush ();_aa :=_ce .NewDecoder (&_abad );_adg .CSld =_fd .NewCT_CommonSlideData ();if _cbf :=_aa .Decode (_adg .CSld );_cbf !=nil {return Slide {},_cbf ;};_adg .CSld .NameAttr =nil ;_adg .CSld .SpTree .Choice =_dca (_adg .CSld .SpTree .Choice );_dab ._dda =append (_dab ._dda ,_adg );_bbg :=_dab ._cdd .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .OfficeDocumentType ,len (_dab ._dda ),_dcf .SlideType );_gcdd .RIdAttr =_bbg .ID ();_ffc :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideType ,len (_dab ._dda ));_dab .ContentTypes .AddOverride (_ffc ,_dcf .SlideContentType );_dcgf :=_ae .NewRelationships ();_dab ._fced =append (_dab ._fced ,_dcgf );_adce :=len (_dab ._fced )-1;for _fegf ,_ebce :=range _dab ._gfdb {if _ebce ==l .X (){_gfg :=_dab ._dae [_fegf ];for _ ,_fdg :=range _gfg .X ().Relationship {if _fdg .TypeAttr !=_dcf .SlideMasterType {_dab ._fced [_adce ].X ().Relationship =append (_dab ._fced [_adce ].X ().Relationship ,_fdg );};};_dcgf .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .SlideType ,_fegf +1,_dcf .SlideLayoutType );};};_acg :=Slide {_gcdd ,_adg ,_dab };return _acg ,nil ;};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_bbae TextBox )SetOffsetX (offX float64 ){_cgd :=_bbae .getOff ();_ecbf :=_dcg .ToEMU (offX );_cgd .XAttr =_cb .ST_Coordinate {ST_CoordinateUnqualified :&_ecbf };};

// WebPr returns the WebPr property.
func (_fce PresentationProperties )WebPr ()*_fd .CT_WebProperties {return _fce ._bccf .WebPr };

// ExtLst returns the ExtLst property.
func (_ge PresentationProperties )ExtLst ()*_fd .CT_ExtensionList {return _ge ._bccf .ExtLst };

// X returns the inner wrapped XML type.
func (_edfb ViewProperties )X ()*_fd .ViewPr {return _edfb ._ddef };

// X returns the inner wrapped XML type.
func (_fbb PlaceHolder )X ()*_fd .CT_Shape {return _fbb ._gcdb };

// OutlineViewPr returns the OutlineViewPr property.
func (_eadgg ViewProperties )OutlineViewPr ()*_fd .CT_OutlineViewProperties {return _eadgg ._ddef .OutlineViewPr ;};

// AddParagraph adds a new paragraph to a placeholder.
func (_bcc PlaceHolder )AddParagraph ()_gg .Paragraph {_aga :=_gg .MakeParagraph (_cb .NewCT_TextParagraph ());_bcc ._gcdb .TxBody .P =append (_bcc ._gcdb .TxBody .P ,_aga .X ());return _aga ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_eadd TextBox )SetOffsetY (offY float64 ){_bgg :=_eadd .getOff ();_gdb :=_dcg .ToEMU (offY );_bgg .YAttr =_cb .ST_Coordinate {ST_CoordinateUnqualified :&_gdb };};

// Text returns text from a slide as one string separated with line breaks.
func (_faf *SlideText )Text ()string {_afa :=_a .NewBuffer ([]byte {});for _ ,_cdb :=range _faf .Items {if _cdb .Text !=""{_afa .WriteString (_cdb .Text );_afa .WriteString ("\u000a");};};return _afa .String ();};

// SetTextAnchor controls the text anchoring
func (_aeac TextBox )SetTextAnchor (a _cb .ST_TextAnchoringType ){_aeac ._ebf .TxBody .BodyPr =_cb .NewCT_TextBodyProperties ();_aeac ._ebf .TxBody .BodyPr .AnchorAttr =a ;};

// SlideViewPr returns the SlideViewPr property.
func (_cfdd ViewProperties )SlideViewPr ()*_fd .CT_SlideViewProperties {return _cfdd ._ddef .SlideViewPr };

// ExtLst returns the ExtLst property.
func (_cgcf ViewProperties )ExtLst ()*_fd .CT_ExtensionList {return _cgcf ._ddef .ExtLst };

// Save writes the presentation out to a writer in the Zip package format
func (_eag *Presentation )Save (w _c .Writer )error {return _eag .save (w ,false )};

// ShowPr returns the ShowPr property.
func (_cfbbb PresentationProperties )ShowPr ()*_fd .CT_ShowProperties {return _cfbbb ._bccf .ShowPr };func (_fab *Presentation )nextSlideID ()uint32 {_acb :=uint32 (256);for _ ,_cff :=range _fab ._aef .SldIdLst .SldId {if _cff .IdAttr >=_acb {_acb =_cff .IdAttr +1;};};return _acb ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_aec :=_eedd ();_aec .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_aec .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_aec .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_aec .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_aec .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_aec .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_aec .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_aec ._aef .SldMasterIdLst =_fd .NewCT_SlideMasterIdList ();_cfcbg :=_fd .NewSldMaster ();_cfcbg .ClrMap .Bg1Attr =_cb .ST_ColorSchemeIndexLt1 ;_cfcbg .ClrMap .Bg2Attr =_cb .ST_ColorSchemeIndexLt2 ;_cfcbg .ClrMap .Tx1Attr =_cb .ST_ColorSchemeIndexDk1 ;_cfcbg .ClrMap .Tx2Attr =_cb .ST_ColorSchemeIndexDk2 ;_cfcbg .ClrMap .Accent1Attr =_cb .ST_ColorSchemeIndexAccent1 ;_cfcbg .ClrMap .Accent2Attr =_cb .ST_ColorSchemeIndexAccent2 ;_cfcbg .ClrMap .Accent3Attr =_cb .ST_ColorSchemeIndexAccent3 ;_cfcbg .ClrMap .Accent4Attr =_cb .ST_ColorSchemeIndexAccent4 ;_cfcbg .ClrMap .Accent5Attr =_cb .ST_ColorSchemeIndexAccent5 ;_cfcbg .ClrMap .Accent6Attr =_cb .ST_ColorSchemeIndexAccent6 ;_cfcbg .ClrMap .HlinkAttr =_cb .ST_ColorSchemeIndexHlink ;_cfcbg .ClrMap .FolHlinkAttr =_cb .ST_ColorSchemeIndexFolHlink ;_aec ._ceeg =append (_aec ._ceeg ,_cfcbg );_dfd :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideMasterType ,1);_aec .ContentTypes .AddOverride (_dfd ,_dcf .SlideMasterContentType );_eg :=_aec ._cdd .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .OfficeDocumentType ,1,_dcf .SlideMasterType );_dgd :=_fd .NewCT_SlideMasterIdListEntry ();_dgd .IdAttr =_dcf .Uint32 (2147483648);_dgd .RIdAttr =_eg .ID ();_aec ._aef .SldMasterIdLst .SldMasterId =append (_aec ._aef .SldMasterIdLst .SldMasterId ,_dgd );_cga :=_ae .NewRelationships ();_aec ._cebc =append (_aec ._cebc ,_cga );_ffg :=_fd .NewSldLayout ();_ggb :=_cga .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .SlideMasterType ,1,_dcf .SlideLayoutType );_bcf :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideLayoutType ,1);_aec .ContentTypes .AddOverride (_bcf ,_dcf .SlideLayoutContentType );_cga .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .SlideMasterType ,1,_dcf .ThemeType );_aec ._gfdb =append (_aec ._gfdb ,_ffg );_cfcbg .SldLayoutIdLst =_fd .NewCT_SlideLayoutIdList ();_eff :=_fd .NewCT_SlideLayoutIdListEntry ();_eff .IdAttr =_dcf .Uint32 (2147483649);_eff .RIdAttr =_ggb .ID ();_cfcbg .SldLayoutIdLst .SldLayoutId =append (_cfcbg .SldLayoutIdLst .SldLayoutId ,_eff );_daf :=_ae .NewRelationships ();_aec ._dae =append (_aec ._dae ,_daf );_daf .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .SlideType ,1,_dcf .SlideMasterType );_aec ._aef .NotesSz .CxAttr =6858000;_aec ._aef .NotesSz .CyAttr =9144000;_fcg :=_cb .NewTheme ();_fcg .NameAttr =_dcf .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_fcg .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_fcg .ThemeElements .ClrScheme .Dk1 .SysClr =_cb .NewCT_SystemColor ();_fcg .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_dcf .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_fcg .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_cb .ST_SystemColorValWindowText ;_fcg .ThemeElements .ClrScheme .Lt1 .SysClr =_cb .NewCT_SystemColor ();_fcg .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_dcf .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_fcg .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_cb .ST_SystemColorValWindow ;_fcg .ThemeElements .ClrScheme .Dk2 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_fcg .ThemeElements .ClrScheme .Lt2 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_fcg .ThemeElements .ClrScheme .Accent1 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_fcg .ThemeElements .ClrScheme .Accent2 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_fcg .ThemeElements .ClrScheme .Accent3 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_fcg .ThemeElements .ClrScheme .Accent4 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_fcg .ThemeElements .ClrScheme .Accent5 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_fcg .ThemeElements .ClrScheme .Accent6 .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_fcg .ThemeElements .ClrScheme .Hlink .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_fcg .ThemeElements .ClrScheme .FolHlink .SrgbClr =_cb .NewCT_SRgbColor ();_fcg .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_fcg .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_fcg .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_fcg .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_fcg .ThemeElements .FmtScheme .NameAttr =_dcf .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_ecfd :=_cb .NewEG_FillProperties ();_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ecfd );_ecfd .SolidFill =&_cb .CT_SolidColorFillProperties {SchemeClr :&_cb .CT_SchemeColor {ValAttr :_cb .ST_SchemeColorValPhClr }};_ecfd =_cb .NewEG_FillProperties ();_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ecfd );_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ecfd );_ecfd .GradFill =&_cb .CT_GradientFillProperties {RotWithShapeAttr :_dcf .Bool (true ),GsLst :&_cb .CT_GradientStopList {},Lin :&_cb .CT_LinearShadeProperties {}};_ecfd .GradFill .Lin .AngAttr =_dcf .Int32 (5400000);_ecfd .GradFill .Lin .ScaledAttr =_dcf .Bool (false );_gaef :=_cb .NewCT_GradientStop ();_gaef .PosAttr .ST_PositiveFixedPercentageDecimal =_dcf .Int32 (0);_gaef .SchemeClr =&_cb .CT_SchemeColor {ValAttr :_cb .ST_SchemeColorValPhClr };_ecfd .GradFill .GsLst .Gs =append (_ecfd .GradFill .GsLst .Gs ,_gaef );_gaef =_cb .NewCT_GradientStop ();_gaef .PosAttr .ST_PositiveFixedPercentageDecimal =_dcf .Int32 (50000);_gaef .SchemeClr =&_cb .CT_SchemeColor {ValAttr :_cb .ST_SchemeColorValPhClr };_ecfd .GradFill .GsLst .Gs =append (_ecfd .GradFill .GsLst .Gs ,_gaef );_fcg .ThemeElements .FmtScheme .LnStyleLst =_cb .NewCT_LineStyleList ();for _ecb :=0;_ecb < 3;_ecb ++{_ddaa :=_cb .NewCT_LineProperties ();_ddaa .WAttr =_dcf .Int32 (int32 (6350*(_ecb +1)));_ddaa .CapAttr =_cb .ST_LineCapFlat ;_ddaa .CmpdAttr =_cb .ST_CompoundLineSng ;_ddaa .AlgnAttr =_cb .ST_PenAlignmentCtr ;_fcg .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_fcg .ThemeElements .FmtScheme .LnStyleLst .Ln ,_ddaa );};_fcg .ThemeElements .FmtScheme .EffectStyleLst =_cb .NewCT_EffectStyleList ();for _ffd :=0;_ffd < 3;_ffd ++{_aba :=_cb .NewCT_EffectStyleItem ();_aba .EffectLst =_cb .NewCT_EffectList ();_fcg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_fcg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_aba );};_fdb :=_cb .NewEG_FillProperties ();_fdb .SolidFill =&_cb .CT_SolidColorFillProperties {SchemeClr :&_cb .CT_SchemeColor {ValAttr :_cb .ST_SchemeColorValPhClr }};_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fdb );_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fdb );_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_fcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ecfd );_aec ._bad =append (_aec ._bad ,_fcg );_bb :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .ThemeType ,1);_aec .ContentTypes .AddOverride (_bb ,_dcf .ThemeContentType );_aec ._cdd .AddAutoRelationship (_dcf .DocTypePresentation ,_dcf .OfficeDocumentType ,1,_dcf .ThemeType );_bgd :=_ae .NewRelationships ();_aec ._aea =append (_aec ._aea ,_bgd );return _aec ;};var _efe =false ;

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_gff SlideMaster )SlideLayouts ()[]SlideLayout {_agaf :=map[string ]int {};_egcg :=[]SlideLayout {};for _ ,_gcb :=range _gff ._aegg .Relationships (){_eabf :=_e .Replace (_gcb .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_eabf =_e .Replace (_eabf ,"\u002e\u0078\u006d\u006c","",-1);if _cca ,_eegg :=_ea .ParseInt (_eabf ,10,32);_eegg ==nil {_agaf [_gcb .ID ()]=int (_cca );};};for _ ,_afac :=range _gff ._cbc .SldLayoutIdLst .SldLayoutId {if _dcda ,_cfbf :=_agaf [_afac .RIdAttr ];_cfbf {_fbac :=_gff ._bfb ._gfdb [_dcda -1];_egcg =append (_egcg ,SlideLayout {_fbac });};};return _egcg ;};

// Read reads a document from an io.Reader.
func Read (r _c .ReaderAt ,size int64 )(*Presentation ,error ){const _bde ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_gcg .GetLicenseKey ().IsLicensed ()&&!_efe {_dc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_dc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_ad .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_fcf :=_eedd ();_caaa ,_fgd :=_gcg .GenRefId ("\u0070\u0072");if _fgd !=nil {_dcf .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_fgd );return nil ,_fgd ;};_fcf ._be =_caaa ;if _dgea :=_gcg .Track (_fcf ._be ,_bde );_dgea !=nil {_dc .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_dgea );return nil ,_dgea ;};_fcgb ,_fgd :=_gd .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _fgd !=nil {return nil ,_fgd ;};_fcf .TmpPath =_fcgb ;_aaa ,_fgd :=_abe .NewReader (r ,size );if _fgd !=nil {return nil ,_dc .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_fgd );};_bddf :=[]*_abe .File {};_bddf =append (_bddf ,_aaa .File ...);_bea :=false ;for _ ,_edd :=range _bddf {if _edd .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_bea =true ;break ;};};if _bea {_fcf .CreateCustomProperties ();};_cbb :=_gc .DecodeMap {};_cbb .SetOnNewRelationshipFunc (_fcf .onNewRelationship );_cbb .AddTarget (_dcf .ContentTypesFilename ,_fcf .ContentTypes .X (),"",0);_cbb .AddTarget (_dcf .BaseRelsFilename ,_fcf .Rels .X (),"",0);if _cebe :=_cbb .Decode (_bddf );_cebe !=nil {return nil ,_cebe ;};for _ ,_aggf :=range _bddf {if _aggf ==nil {continue ;};if _cfba :=_fcf .AddExtraFileFromZip (_aggf );_cfba !=nil {return nil ,_cfba ;};};if _bea {_fgdd :=false ;for _ ,_acee :=range _fcf .Rels .X ().Relationship {if _acee .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_fgdd =true ;break ;};};if !_fgdd {_fcf .AddCustomRelationships ();};};return _fcf ,nil ;};

// X returns the inner wrapped XML type.
func (_beb *Presentation )X ()*_fd .Presentation {return _beb ._aef };

// Properties returns the properties of the TextBox.
func (_adff TextBox )Properties ()_gg .ShapeProperties {if _adff ._ebf .SpPr ==nil {_adff ._ebf .SpPr =_cb .NewCT_ShapeProperties ();};return _gg .MakeShapeProperties (_adff ._ebf .SpPr );};

// AddTable adds an empty table to a slide.
func (_dgdc Slide )AddTable ()*_ae .Table {_ffdd :=_fd .NewCT_GroupShapeChoice ();_dgdc ._efba .CSld .SpTree .Choice =append (_dgdc ._efba .CSld .SpTree .Choice ,_ffdd );_bged :=_fd .NewCT_GraphicalObjectFrame ();_ffdd .GraphicFrame =append (_ffdd .GraphicFrame ,_bged );_bged .Xfrm .Off =_cb .NewCT_Point2D ();_daeg :=int64 (1);_bged .Xfrm .Off .XAttr =_cb .ST_Coordinate {ST_CoordinateUnqualified :&_daeg };_bged .Xfrm .Off .YAttr =_cb .ST_Coordinate {ST_CoordinateUnqualified :&_daeg };_ccb :=_bged .Graphic .CT_GraphicalObject .GraphicData ;_ccb .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_fcgd :=_ae .NewTableWithXfrm (_bged .Xfrm );_ccb .Any =append (_ccb .Any ,_fcgd .X ());return _fcgd ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// AddParagraph adds a paragraph to the text box
func (_gce TextBox )AddParagraph ()_gg .Paragraph {_bgdg :=_cb .NewCT_TextParagraph ();_gce ._ebf .TxBody .P =append (_gce ._ebf .TxBody .P ,_bgdg );return _gg .MakeParagraph (_bgdg );};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_aecc Slide )GetPlaceholder (t _fd .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_cbfcc :=range _aecc ._efba .CSld .SpTree .Choice {for _ ,_dfede :=range _cbfcc .Sp {if _dfede .NvSpPr !=nil &&_dfede .NvSpPr .NvPr !=nil &&_dfede .NvSpPr .NvPr .Ph !=nil {if _dfede .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_dfede ,_aecc ._efba },nil ;};};};};return PlaceHolder {},_ad .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_bccf *_fd .PresentationPr };

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_feb PlaceHolder )ClearAll (){_feb ._gcdb .SpPr =_cb .NewCT_ShapeProperties ();_feb ._gcdb .TxBody =_cb .NewCT_TextBody ();_feb ._gcdb .TxBody .LstStyle =_cb .NewCT_TextListStyle ();};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_cfa ViewProperties )NotesTextViewPr ()*_fd .CT_NotesTextViewProperties {return _cfa ._ddef .NotesTextViewPr ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_cb .CT_Table ;Row *_cb .CT_TableRow ;Cell *_cb .CT_TableCell ;RowIndex int ;ColIndex int ;};

// X returns the inner wrapped XML type.
func (_febc Slide )X ()*_fd .Sld {return _febc ._efba };

// LastViewAttr returns the LastViewAttr property.
func (_afga ViewProperties )LastViewAttr ()_fd .ST_ViewType {return _afga ._ddef .LastViewAttr };

// PrnPr returns the PrnPr property.
func (_gae PresentationProperties )PrnPr ()*_fd .CT_PrintProperties {return _gae ._bccf .PrnPr };

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_dcc *Presentation )Close ()error {if _dcc .TmpPath !=""{return _gd .RemoveAll (_dcc .TmpPath );};return nil ;};func (_fdcf sort2d )Swap (i ,j int ){_fdcf [i ],_fdcf [j ]=_fdcf [j ],_fdcf [i ]};

// ClrMru returns the ClrMru property.
func (_cfcb PresentationProperties )ClrMru ()*_cb .CT_ColorMRU {return _cfcb ._bccf .ClrMru };

// RemoveSlide removes a slide from a presentation.
func (_bfa *Presentation )RemoveSlide (s Slide )error {_bce :=false ;_bedf :=0;for _bbfg ,_aeb :=range _bfa ._dda {if _aeb ==s ._efba {if _bfa ._aef .SldIdLst .SldId [_bbfg ]!=s ._cffa {return _ad .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_bfa ._dda [_bbfg :],_bfa ._dda [_bbfg +1:]);_bfa ._dda =_bfa ._dda [0:len (_bfa ._dda )-1];copy (_bfa ._fced [_bbfg :],_bfa ._fced [_bbfg +1:]);_bfa ._fced =_bfa ._fced [0:len (_bfa ._fced )-1];copy (_bfa ._aef .SldIdLst .SldId [_bbfg :],_bfa ._aef .SldIdLst .SldId [_bbfg +1:]);_bfa ._aef .SldIdLst .SldId =_bfa ._aef .SldIdLst .SldId [0:len (_bfa ._aef .SldIdLst .SldId )-1];_bce =true ;_bedf =_bbfg ;};};if !_bce {return _ad .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_eeg :=_dcf .AbsoluteFilename (_dcf .DocTypePresentation ,_dcf .SlideType ,0);return _bfa .ContentTypes .RemoveOverrideByIndex (_eeg ,_bedf );};func (_dga *Presentation )saveToFile (_bba string ,_bca bool )error {_gfbg ,_fffc :=_gf .Create (_bba );if _fffc !=nil {return _fffc ;};defer _gfbg .Close ();return _dga .save (_gfbg ,_bca );};

// ShowCommentsAttr returns the WebPr property.
func (_fdbd ViewProperties )ShowCommentsAttr ()*bool {return _fdbd ._ddef .ShowCommentsAttr };

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_eac PlaceHolder )SetText (text string ){_eac .Clear ();_cgg :=_cb .NewEG_TextRun ();_cgg .R =_cb .NewCT_RegularTextRun ();_cgg .R .T =text ;if len (_eac ._gcdb .TxBody .P )==0{_eac ._gcdb .TxBody .P =append (_eac ._gcdb .TxBody .P ,_cb .NewCT_TextParagraph ());};_eac ._gcdb .TxBody .P [0].EG_TextRun =nil ;_eac ._gcdb .TxBody .P [0].EG_TextRun =append (_eac ._gcdb .TxBody .P [0].EG_TextRun ,_cgg );};

// HtmlPubPr returns the HtmlPubPr property.
func (_ade PresentationProperties )HtmlPubPr ()*_fd .CT_HtmlPublishProperties {return _ade ._bccf .HtmlPubPr ;};

// SlideMasters returns the slide masters defined in the presentation.
func (_cbfe *Presentation )SlideMasters ()[]SlideMaster {_aed :=[]SlideMaster {};for _bcd ,_gafac :=range _cbfe ._ceeg {_aed =append (_aed ,SlideMaster {_cbfe ,_cbfe ._cebc [_bcd ],_gafac });};return _aed ;};func (_adb sort2d )Less (i ,j int )bool {_fea ,_eaf :=_adb [i ],_adb [j ];_ecf ,_cd ,_cg ,_ef ,_af ,_fbd ,_cgf ,_age :=_fea ._dg ,_eaf ._dg ,_fea ._de ,_eaf ._de ,_fea ._gfa ,_eaf ._gfa ,_fea ._gfd ,_eaf ._gfd ;if _cg ==_ef {if _ecf ==_cd {if _af ==_fbd {return _cgf <=_age ;};return _af < _fbd ;};return _ecf < _cd ;};return _cg < _ef ;};func (_efa *Presentation )onNewRelationship (_ggfa *_gc .DecodeMap ,_dde ,_fgb string ,_bdbd []*_abe .File ,_eaeb *_df .Relationship ,_fge _gc .Target )error {_acde :=_dcf .DocTypePresentation ;switch _fgb {case _dcf .OfficeDocumentType :_efa ._aef =_fd .NewPresentation ();_ggfa .AddTarget (_dde ,_efa ._aef ,_fgb ,0);_ggfa .AddTarget (_gc .RelationsPathFor (_dde ),_efa ._cdd .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .CorePropertiesType :_ggfa .AddTarget (_dde ,_efa .CoreProperties .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .CustomPropertiesType :_ggfa .AddTarget (_dde ,_efa .CustomProperties .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .PresentationPropertiesType :_ggfa .AddTarget (_dde ,_efa ._agb .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .ViewPropertiesType :_ggfa .AddTarget (_dde ,_efa ._fde .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .TableStylesType :_ggfa .AddTarget (_dde ,_efa ._aca .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .HyperLinkType :_cce :=_cb .NewCT_Hyperlink ();_efge :=uint32 (len (_efa ._afc ));_ggfa .AddTarget (_dde ,_cce ,_fgb ,_efge );_efa ._afc =append (_efa ._afc ,_cce );case _dcf .CustomXMLType :_dac :=&_dcf .XSDAny {};_bed :=uint32 (len (_efa ._ca ));_ggfa .AddTarget (_dde ,_dac ,_fgb ,_bed );_efa ._ca =append (_efa ._ca ,_dac );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._ca ));case _dcf .ChartType :_febd :=_db .NewChartSpace ();_edc :=uint32 (len (_efa ._bg ));_ggfa .AddTarget (_dde ,_febd ,_fgb ,_edc );_efa ._bg =append (_efa ._bg ,_febd );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._bg ));case _dcf .HandoutMasterType :_ffgc :=_fd .NewHandoutMaster ();_fag :=uint32 (len (_efa ._cebf ));_ggfa .AddTarget (_dde ,_ffgc ,_fgb ,_fag );_efa ._cebf =append (_efa ._cebf ,_ffgc );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._cebf ));case _dcf .NotesMasterType :_ggba :=_fd .NewNotesMaster ();_daca :=uint32 (len (_efa ._dad ));_ggfa .AddTarget (_dde ,_ggba ,_fgb ,_daca );_efa ._dad =append (_efa ._dad ,_ggba );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._dad ));case _dcf .ExtendedPropertiesType :_ggfa .AddTarget (_dde ,_efa .AppProperties .X (),_fgb ,0);_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,0);case _dcf .SlideType :_gdad :=_fd .NewSld ();_efa ._dda =append (_efa ._dda ,_gdad );_ggfa .AddTarget (_dde ,_gdad ,_fgb ,uint32 (len (_efa ._dda )));_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._dda ));_cbd :=_ae .NewRelationships ();_ggfa .AddTarget (_gc .RelationsPathFor (_dde ),_cbd .X (),_fgb ,0);_efa ._fced =append (_efa ._fced ,_cbd );case _dcf .SlideMasterType :_effd :=_fd .NewSldMaster ();if !_ggfa .AddTarget (_dde ,_effd ,_fgb ,uint32 (len (_efa ._ceeg )+1)){return nil ;};_efa ._ceeg =append (_efa ._ceeg ,_effd );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._ceeg ));_bddc :=_ae .NewRelationships ();_ggfa .AddTarget (_gc .RelationsPathFor (_dde ),_bddc .X (),_fgb ,0);_efa ._cebc =append (_efa ._cebc ,_bddc );case _dcf .SlideLayoutType :_gcff :=_fd .NewSldLayout ();if !_ggfa .AddTarget (_dde ,_gcff ,_fgb ,uint32 (len (_efa ._gfdb )+1)){return nil ;};_efa ._gfdb =append (_efa ._gfdb ,_gcff );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._gfdb ));_efbc :=_ae .NewRelationships ();_ggfa .AddTarget (_gc .RelationsPathFor (_dde ),_efbc .X (),_fgb ,0);_efa ._dae =append (_efa ._dae ,_efbc );case _dcf .ThumbnailType :for _dfdg ,_faad :=range _bdbd {if _faad ==nil {continue ;};if _faad .Name ==_dde {_agfd ,_dbf :=_faad .Open ();if _dbf !=nil {return _dc .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_dbf );};_efa .Thumbnail ,_ ,_dbf =_ab .Decode (_agfd );_agfd .Close ();if _dbf !=nil {return _dc .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_dbf );};_bdbd [_dfdg ]=nil ;};};case _dcf .ThemeType :_cfbd :=_cb .NewTheme ();if !_ggfa .AddTarget (_dde ,_cfbd ,_fgb ,uint32 (len (_efa ._bad )+1)){return nil ;};_efa ._bad =append (_efa ._bad ,_cfbd );_eaeb .TargetAttr =_dcf .RelativeFilename (_acde ,_fge .Typ ,_fgb ,len (_efa ._bad ));_cge :=_ae .NewRelationships ();_ggfa .AddTarget (_gc .RelationsPathFor (_dde ),_cge .X (),_fgb ,0);_efa ._aea =append (_efa ._aea ,_cge );case _dcf .ImageType :_dde =_g .Clean (_dde );if _dgad ,_gdaf :=_efa ._fae [_dde ];_gdaf {_eaeb .TargetAttr =_dgad ;return nil ;};_cbfc :="";for _bbf ,_bebe :=range _bdbd {if _bebe ==nil {continue ;};if _bebe .Name ==_dde {_cbaf ,_ffge :=_gc .ExtractToDiskTmp (_bebe ,_efa .TmpPath );if _ffge !=nil {return _ffge ;};_aedf ,_ffge :=_ae .ImageFromStorage (_cbaf );if _ffge !=nil {return _ffge ;};_cbfc =_aedf .Format ;_cbfd :=_ae .MakeImageRef (_aedf ,&_efa .DocBase ,_efa ._cdd );_efa .Images =append (_efa .Images ,_cbfd );_bdbd [_bbf ]=nil ;_ggfa .RecordIndex (_dde ,len (_efa .Images ));break ;};};_ecg :=_ggfa .IndexFor (_dde );_eaeb .TargetAttr =_dcf .RelativeImageFilename (_acde ,_fge .Typ ,_fgb ,_ecg ,_cbfc );_efa ._fae [_dde ]=_eaeb .TargetAttr ;default:_dcf .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_fgb ,_dde );};return nil ;};

// SorterViewPr returns the SorterViewPr property.
func (_cec ViewProperties )SorterViewPr ()*_fd .CT_SlideSorterViewProperties {return _cec ._ddef .SorterViewPr ;};

// X returns the inner wrapped XML type.
func (_fgg SlideLayout )X ()*_fd .SldLayout {return _fgg ._efab };