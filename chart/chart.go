//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_bcbg "fmt";_efef "github.com/unidoc/unioffice";_dcc "github.com/unidoc/unioffice/color";_degg "github.com/unidoc/unioffice/drawing";_agbb "github.com/unidoc/unioffice/measurement";_fba "github.com/unidoc/unioffice/schema/soo/dml";_bb "github.com/unidoc/unioffice/schema/soo/dml/chart";_eca "math/rand";);

// X returns the inner wrapped XML type.
func (_bedd DoughnutChart )X ()*_bb .CT_DoughnutChart {return _bedd ._gedb };

// X returns the inner wrapped XML type.
func (_c GridLines )X ()*_bb .CT_ChartLines {return _c ._fgb };func (_efa CategoryAxis )SetMinorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_efa ._abc .MinorTickMark =nil ;}else {_efa ._abc .MinorTickMark =_bb .NewCT_TickMark ();_efa ._abc .MinorTickMark .ValAttr =m ;};};func (_bc Chart )AddSeriesAxis ()SeriesAxis {_aag :=_bb .NewCT_SerAx ();if _bc ._gcd .Chart .PlotArea .CChoice ==nil {_bc ._gcd .Chart .PlotArea .CChoice =_bb .NewCT_PlotAreaChoice1 ();};_aag .AxId =_bb .NewCT_UnsignedInt ();_aag .AxId .ValAttr =0x7FFFFFFF&_eca .Uint32 ();_bc ._gcd .Chart .PlotArea .CChoice .SerAx =append (_bc ._gcd .Chart .PlotArea .CChoice .SerAx ,_aag );_aag .Delete =_bb .NewCT_Boolean ();_aag .Delete .ValAttr =_efef .Bool (false );_bgb :=MakeSeriesAxis (_aag );_bgb .InitializeDefaults ();return _bgb ;};

// RemoveLegend removes the legend if the chart has one.
func (_eba Chart )RemoveLegend (){_eba ._gcd .Chart .Legend =nil };type SeriesAxis struct{_bdd *_bb .CT_SerAx };

// SetDisplayBlanksAs controls how missing values are displayed.
func (_ff Chart )SetDisplayBlanksAs (v _bb .ST_DispBlanksAs ){_ff ._gcd .Chart .DispBlanksAs =_bb .NewCT_DispBlanksAs ();_ff ._gcd .Chart .DispBlanksAs .ValAttr =v ;};

// AddSeries adds a default series to an Doughnut chart.
func (_geg DoughnutChart )AddSeries ()PieChartSeries {_agb :=_bb .NewCT_PieSer ();_geg ._gedb .Ser =append (_geg ._gedb .Ser ,_agb );_agb .Idx .ValAttr =uint32 (len (_geg ._gedb .Ser )-1);_agb .Order .ValAttr =uint32 (len (_geg ._gedb .Ser )-1);_gbe :=PieChartSeries {_agb };_gbe .InitializeDefaults ();return _gbe ;};

// X returns the inner wrapped XML type.
func (_gbc Bar3DChart )X ()*_bb .CT_Bar3DChart {return _gbc ._dec };

// InitializeDefaults the bar chart to its defaults
func (_gef Pie3DChart )InitializeDefaults (){_gef ._dbf .VaryColors =_bb .NewCT_Boolean ();_gef ._dbf .VaryColors .ValAttr =_efef .Bool (true );};func (_aafd CategoryAxis )AxisID ()uint32 {return _aafd ._abc .AxId .ValAttr };func (_bbdc StockChart )AddAxis (axis Axis ){_fd :=_bb .NewCT_UnsignedInt ();_fd .ValAttr =axis .AxisID ();_bbdc ._dff .AxId =append (_bbdc ._dff .AxId ,_fd );};func MakeNumberDataSource (x *_bb .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// SetIndex sets the index of the series
func (_aeb LineChartSeries )SetIndex (idx uint32 ){_aeb ._cfa .Idx .ValAttr =idx };

// Properties returns the bar chart series shape properties.
func (_egbb AreaChartSeries )Properties ()_degg .ShapeProperties {if _egbb ._gebb .SpPr ==nil {_egbb ._gebb .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_egbb ._gebb .SpPr );};

// X returns the inner wrapped XML type.
func (_ef SurfaceChart )X ()*_bb .CT_SurfaceChart {return _ef ._bee };

// AddSeries adds a default series to a bar chart.
func (_fgd Bar3DChart )AddSeries ()BarChartSeries {_cbc :=_fgd .nextColor (len (_fgd ._dec .Ser ));_ggef :=_bb .NewCT_BarSer ();_fgd ._dec .Ser =append (_fgd ._dec .Ser ,_ggef );_ggef .Idx .ValAttr =uint32 (len (_fgd ._dec .Ser )-1);_ggef .Order .ValAttr =uint32 (len (_fgd ._dec .Ser )-1);_bda :=BarChartSeries {_ggef };_bda .InitializeDefaults ();_bda .Properties ().SetSolidFill (_cbc );return _bda ;};func (_dbg Area3DChart )AddAxis (axis Axis ){_afc :=_bb .NewCT_UnsignedInt ();_afc .ValAttr =axis .AxisID ();_dbg ._beb .AxId =append (_dbg ._beb .AxId ,_afc );};func (_bcac CategoryAxis )InitializeDefaults (){_bcac .SetPosition (_bb .ST_AxPosB );_bcac .SetMajorTickMark (_bb .ST_TickMarkOut );_bcac .SetMinorTickMark (_bb .ST_TickMarkIn );_bcac .SetTickLabelPosition (_bb .ST_TickLblPosNextTo );_bcac .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_dcc .LightGray );_bcac .Properties ().LineProperties ().SetSolidFill (_dcc .Black );};func MakeSeriesAxis (x *_bb .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_fgg *_bb .CT_PieChart ;};func (_efc ScatterChartSeries )SetSmooth (b bool ){_efc ._fbfa .Smooth =_bb .NewCT_Boolean ();_efc ._fbfa .Smooth .ValAttr =&b ;};func (_cef CategoryAxis )SetTickLabelPosition (p _bb .ST_TickLblPos ){if p ==_bb .ST_TickLblPosUnset {_cef ._abc .TickLblPos =nil ;}else {_cef ._abc .TickLblPos =_bb .NewCT_TickLblPos ();_cef ._abc .TickLblPos .ValAttr =p ;};};func (_fea SurfaceChart )InitializeDefaults (){_fea ._bee .Wireframe =_bb .NewCT_Boolean ();_fea ._bee .Wireframe .ValAttr =_efef .Bool (false );_fea ._bee .BandFmts =_bb .NewCT_BandFmts ();for _bbgbe :=0;_bbgbe < 15;_bbgbe ++{_fbf :=_bb .NewCT_BandFmt ();_fbf .Idx .ValAttr =uint32 (_bbgbe );_fbf .SpPr =_fba .NewCT_ShapeProperties ();_ccb :=_degg .MakeShapeProperties (_fbf .SpPr );_ccb .SetSolidFill (_fea .nextColor (_bbgbe ));_fea ._bee .BandFmts .BandFmt =append (_fea ._bee .BandFmts .BandFmt ,_fbf );};};

// AddAxis adds an axis to a Surface chart.
func (_bbc Surface3DChart )AddAxis (axis Axis ){_ccd :=_bb .NewCT_UnsignedInt ();_ccd .ValAttr =axis .AxisID ();_bbc ._edb .AxId =append (_bbc ._edb .AxId ,_ccd );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_cefd Chart )AddSurfaceChart ()SurfaceChart {_bacd :=_bb .NewCT_PlotAreaChoice ();_cefd ._gcd .Chart .PlotArea .Choice =append (_cefd ._gcd .Chart .PlotArea .Choice ,_bacd );_bacd .SurfaceChart =_bb .NewCT_SurfaceChart ();_aga (_cefd ._gcd .Chart );_cefd ._gcd .Chart .View3D .RotX .ValAttr =_efef .Int8 (90);_cefd ._gcd .Chart .View3D .RotY .ValAttr =_efef .Uint16 (0);_cefd ._gcd .Chart .View3D .Perspective =_bb .NewCT_Perspective ();_cefd ._gcd .Chart .View3D .Perspective .ValAttr =_efef .Uint8 (0);_eaac :=SurfaceChart {_bee :_bacd .SurfaceChart };_eaac .InitializeDefaults ();return _eaac ;};

// InitializeDefaults the Bubble chart to its defaults
func (_bbee BubbleChart )InitializeDefaults (){};

// AddArea3DChart adds a new area chart to a chart.
func (_agdb Chart )AddArea3DChart ()Area3DChart {_aga (_agdb ._gcd .Chart );_aee :=_bb .NewCT_PlotAreaChoice ();_agdb ._gcd .Chart .PlotArea .Choice =append (_agdb ._gcd .Chart .PlotArea .Choice ,_aee );_aee .Area3DChart =_bb .NewCT_Area3DChart ();_def :=Area3DChart {_beb :_aee .Area3DChart };_def .InitializeDefaults ();return _def ;};

// AddRadarChart adds a new radar chart to a chart.
func (_eebe Chart )AddRadarChart ()RadarChart {_fed :=_bb .NewCT_PlotAreaChoice ();_eebe ._gcd .Chart .PlotArea .Choice =append (_eebe ._gcd .Chart .PlotArea .Choice ,_fed );_fed .RadarChart =_bb .NewCT_RadarChart ();_eff :=RadarChart {_cbf :_fed .RadarChart };_eff .InitializeDefaults ();return _eff ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_gebb *_bb .CT_AreaSer };

// Values returns the value data source.
func (_cfga AreaChartSeries )Values ()NumberDataSource {if _cfga ._gebb .Val ==nil {_cfga ._gebb .Val =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfga ._gebb .Val );};

// X returns the inner wrapped XML type.
func (_gf LineChart )X ()*_bb .CT_LineChart {return _gf ._feg };

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_eec *_bb .CT_BubbleChart ;};type NumberDataSource struct{_de *_bb .CT_NumDataSource };

// SetIndex sets the index of the series
func (_cbg SurfaceChartSeries )SetIndex (idx uint32 ){_cbg ._aegb .Idx .ValAttr =idx };

// AddSeries adds a default series to a line chart.
func (_fafe LineChart )AddSeries ()LineChartSeries {_bbdg :=_fafe .nextColor (len (_fafe ._feg .Ser ));_acb :=_bb .NewCT_LineSer ();_fafe ._feg .Ser =append (_fafe ._feg .Ser ,_acb );_acb .Idx .ValAttr =uint32 (len (_fafe ._feg .Ser )-1);_acb .Order .ValAttr =uint32 (len (_fafe ._feg .Ser )-1);_deba :=LineChartSeries {_acb };_deba .InitializeDefaults ();_deba .Properties ().LineProperties ().SetSolidFill (_bbdg );return _deba ;};

// Index returns the index of the series
func (_fcee ScatterChartSeries )Index ()uint32 {return _fcee ._fbfa .Idx .ValAttr };

// Order returns the order of the series
func (_gefc ScatterChartSeries )Order ()uint32 {return _gefc ._fbfa .Order .ValAttr };func (_eaec ValueAxis )SetPosition (p _bb .ST_AxPos ){_eaec ._gede .AxPos =_bb .NewCT_AxPos ();_eaec ._gede .AxPos .ValAttr =p ;};

// AddCategoryAxis adds a category axis.
func (_defa Chart )AddCategoryAxis ()CategoryAxis {_gdfc :=_bb .NewCT_CatAx ();if _defa ._gcd .Chart .PlotArea .CChoice ==nil {_defa ._gcd .Chart .PlotArea .CChoice =_bb .NewCT_PlotAreaChoice1 ();};_gdfc .AxId =_bb .NewCT_UnsignedInt ();_gdfc .AxId .ValAttr =0x7FFFFFFF&_eca .Uint32 ();_defa ._gcd .Chart .PlotArea .CChoice .CatAx =append (_defa ._gcd .Chart .PlotArea .CChoice .CatAx ,_gdfc );_gdfc .Auto =_bb .NewCT_Boolean ();_gdfc .Auto .ValAttr =_efef .Bool (true );_gdfc .Delete =_bb .NewCT_Boolean ();_gdfc .Delete .ValAttr =_efef .Bool (false );_cgc :=MakeCategoryAxis (_gdfc );_cgc .InitializeDefaults ();return _cgc ;};

// Values returns the value data source.
func (_cgbg BarChartSeries )Values ()NumberDataSource {if _cgbg ._bbb .Val ==nil {_cgbg ._bbb .Val =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_cgbg ._bbb .Val );};

// Properties returns the line chart series shape properties.
func (_g LineChartSeries )Properties ()_degg .ShapeProperties {if _g ._cfa .SpPr ==nil {_g ._cfa .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_g ._cfa .SpPr );};func (_cegc SeriesAxis )SetCrosses (axis Axis ){_cegc ._bdd .CrossAx .ValAttr =axis .AxisID ()};func (_cdb ValueAxis )AxisID ()uint32 {return _cdb ._gede .AxId .ValAttr };func (_fbg ScatterChartSeries )Values ()NumberDataSource {if _fbg ._fbfa .YVal ==nil {_fbg ._fbfa .YVal =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_fbg ._fbfa .YVal );};

// InitializeDefaults the Stock chart to its defaults
func (_gfae StockChart )InitializeDefaults (){_gfae ._dff .HiLowLines =_bb .NewCT_ChartLines ();_gfae ._dff .UpDownBars =_bb .NewCT_UpDownBars ();_gfae ._dff .UpDownBars .GapWidth =_bb .NewCT_GapAmount ();_gfae ._dff .UpDownBars .GapWidth .ValAttr =&_bb .ST_GapAmount {};_gfae ._dff .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_efef .Uint16 (150);_gfae ._dff .UpDownBars .UpBars =_bb .NewCT_UpDownBar ();_gfae ._dff .UpDownBars .DownBars =_bb .NewCT_UpDownBar ();};

// X returns the inner wrapped XML type.
func (_ae StockChart )X ()*_bb .CT_StockChart {return _ae ._dff };

// X returns the inner wrapped XML type.
func (_ecb LineChartSeries )X ()*_bb .CT_LineSer {return _ecb ._cfa };func MakeLegend (l *_bb .CT_Legend )Legend {return Legend {l }};func (_gae GridLines )Properties ()_degg .ShapeProperties {if _gae ._fgb .SpPr ==nil {_gae ._fgb .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_gae ._fgb .SpPr );};func MakeDataLabels (x *_bb .CT_DLbls )DataLabels {return DataLabels {x }};func (_a LineChartSeries )InitializeDefaults (){_a .Properties ().LineProperties ().SetWidth (1*_agbb .Point );_a .Properties ().LineProperties ().SetSolidFill (_dcc .Black );_a .Properties ().LineProperties ().SetJoin (_degg .LineJoinRound );_a .Marker ().SetSymbol (_bb .ST_MarkerStyleNone );_a .Labels ().SetShowLegendKey (false );_a .Labels ().SetShowValue (false );_a .Labels ().SetShowPercent (false );_a .Labels ().SetShowCategoryName (false );_a .Labels ().SetShowSeriesName (false );_a .Labels ().SetShowLeaderLines (false );};

// AddSeries adds a default series to a Surface chart.
func (_ge Surface3DChart )AddSeries ()SurfaceChartSeries {_aadf :=_ge .nextColor (len (_ge ._edb .Ser ));_bff :=_bb .NewCT_SurfaceSer ();_ge ._edb .Ser =append (_ge ._edb .Ser ,_bff );_bff .Idx .ValAttr =uint32 (len (_ge ._edb .Ser )-1);_bff .Order .ValAttr =uint32 (len (_ge ._edb .Ser )-1);_dbae :=SurfaceChartSeries {_bff };_dbae .InitializeDefaults ();_dbae .Properties ().LineProperties ().SetSolidFill (_aadf );return _dbae ;};type GridLines struct{_fgb *_bb .CT_ChartLines };

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_bb .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// CategoryAxis returns the category data source.
func (_bfg RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bfg ._fa .Cat ==nil {_bfg ._fa .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_bfg ._fa .Cat );};

// InitializeDefaults the bar chart to its defaults
func (_gcbae AreaChart )InitializeDefaults (){};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// X returns the inner wrapped XML type.
func (_ed Pie3DChart )X ()*_bb .CT_Pie3DChart {return _ed ._dbf };

// InitializeDefaults initializes a bar chart series to the default values.
func (_gcb BarChartSeries )InitializeDefaults (){};func (_dea DateAxis )MajorGridLines ()GridLines {if _dea ._eab .MajorGridlines ==nil {_dea ._eab .MajorGridlines =_bb .NewCT_ChartLines ();};return GridLines {_dea ._eab .MajorGridlines };};

// CategoryAxis returns the category data source.
func (_d BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _d ._bbd .XVal ==nil {_d ._bbd .XVal =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_d ._bbd .XVal );};

// X returns the inner wrapped XML type.
func (_bcde Chart )X ()*_bb .ChartSpace {return _bcde ._gcd };

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_dbf *_bb .CT_Pie3DChart ;};

// Properties returns the line chart series shape properties.
func (_dac SurfaceChartSeries )Properties ()_degg .ShapeProperties {if _dac ._aegb .SpPr ==nil {_dac ._aegb .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_dac ._aegb .SpPr );};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_dec *_bb .CT_Bar3DChart ;};

// X returns the inner wrapped XML type.
func (_eabd Area3DChart )X ()*_bb .CT_Area3DChart {return _eabd ._beb };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_ggfc Chart )AddBar3DChart ()Bar3DChart {_aga (_ggfc ._gcd .Chart );_fff :=_bb .NewCT_PlotAreaChoice ();_ggfc ._gcd .Chart .PlotArea .Choice =append (_ggfc ._gcd .Chart .PlotArea .Choice ,_fff );_fff .Bar3DChart =_bb .NewCT_Bar3DChart ();_fff .Bar3DChart .Grouping =_bb .NewCT_BarGrouping ();_fff .Bar3DChart .Grouping .ValAttr =_bb .ST_BarGroupingStandard ;_agd :=Bar3DChart {_dec :_fff .Bar3DChart };_agd .InitializeDefaults ();return _agd ;};func (_ffa ValueAxis )SetMajorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_ffa ._gede .MajorTickMark =nil ;}else {_ffa ._gede .MajorTickMark =_bb .NewCT_TickMark ();_ffa ._gede .MajorTickMark .ValAttr =m ;};};func (_bbbb Legend )SetPosition (p _bb .ST_LegendPos ){if p ==_bb .ST_LegendPosUnset {_bbbb ._fbed .LegendPos =nil ;}else {_bbbb ._fbed .LegendPos =_bb .NewCT_LegendPos ();_bbbb ._fbed .LegendPos .ValAttr =p ;};};

// SetText sets the series text.
func (_bfc BubbleChartSeries )SetText (s string ){_bfc ._bbd .Tx =_bb .NewCT_SerTx ();_bfc ._bbd .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_beff AreaChartSeries )X ()*_bb .CT_AreaSer {return _beff ._gebb };

// Index returns the index of the series
func (_aagf LineChartSeries )Index ()uint32 {return _aagf ._cfa .Idx .ValAttr };func (_cfc Title )SetText (s string ){if _cfc ._cc .Tx ==nil {_cfc ._cc .Tx =_bb .NewCT_Tx ();};if _cfc ._cc .Tx .Choice .Rich ==nil {_cfc ._cc .Tx .Choice .Rich =_fba .NewCT_TextBody ();};var _bbg *_fba .CT_TextParagraph ;if len (_cfc ._cc .Tx .Choice .Rich .P )==0{_bbg =_fba .NewCT_TextParagraph ();_cfc ._cc .Tx .Choice .Rich .P =[]*_fba .CT_TextParagraph {_bbg };}else {_bbg =_cfc ._cc .Tx .Choice .Rich .P [0];};var _eae *_fba .EG_TextRun ;if len (_bbg .EG_TextRun )==0{_eae =_fba .NewEG_TextRun ();_bbg .EG_TextRun =[]*_fba .EG_TextRun {_eae };}else {_eae =_bbg .EG_TextRun [0];};if _eae .R ==nil {_eae .R =_fba .NewCT_RegularTextRun ();};_eae .R .T =s ;};

// SetText sets the series text
func (_gdc SurfaceChartSeries )SetText (s string ){_gdc ._aegb .Tx =_bb .NewCT_SerTx ();_gdc ._aegb .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_eaf BubbleChartSeries )X ()*_bb .CT_BubbleSer {return _eaf ._bbd };

// InitializeDefaults initializes an area series to the default values.
func (_ede AreaChartSeries )InitializeDefaults (){};func MakeMarker (x *_bb .CT_Marker )Marker {return Marker {x }};func (_gc Legend )SetOverlay (b bool ){_gc ._fbed .Overlay =_bb .NewCT_Boolean ();_gc ._fbed .Overlay .ValAttr =_efef .Bool (b );};

// Labels returns the data label properties.
func (_cba LineChartSeries )Labels ()DataLabels {if _cba ._cfa .DLbls ==nil {_cba ._cfa .DLbls =_bb .NewCT_DLbls ();};return MakeDataLabels (_cba ._cfa .DLbls );};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_gff *_bb .CT_BarChart ;};func MakeCategoryAxis (x *_bb .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_bg Marker )SetSymbol (s _bb .ST_MarkerStyle ){if s ==_bb .ST_MarkerStyleUnset {_bg ._baa .Symbol =nil ;}else {_bg ._baa .Symbol =_bb .NewCT_MarkerStyle ();_bg ._baa .Symbol .ValAttr =s ;};};

// Values returns the value data source.
func (_bge PieChartSeries )Values ()NumberDataSource {if _bge ._bbbg .Val ==nil {_bge ._bbbg .Val =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_bge ._bbbg .Val );};func (_gdf BarChart )AddAxis (axis Axis ){_gedg :=_bb .NewCT_UnsignedInt ();_gedg .ValAttr =axis .AxisID ();_gdf ._gff .AxId =append (_gdf ._gff .AxId ,_gedg );};func (_gaee DateAxis )SetTickLabelPosition (p _bb .ST_TickLblPos ){if p ==_bb .ST_TickLblPosUnset {_gaee ._eab .TickLblPos =nil ;}else {_gaee ._eab .TickLblPos =_bb .NewCT_TickLblPos ();_gaee ._eab .TickLblPos .ValAttr =p ;};};

// SetDirection changes the direction of the bar chart (bar or column).
func (_cf BarChart )SetDirection (d _bb .ST_BarDir ){_cf ._gff .BarDir .ValAttr =d };

// X returns the inner wrapped XML type.
func (_fbab Legend )X ()*_bb .CT_Legend {return _fbab ._fbed };type LineChart struct{chartBase ;_feg *_bb .CT_LineChart ;};func (_ccg CategoryAxis )SetPosition (p _bb .ST_AxPos ){_ccg ._abc .AxPos =_bb .NewCT_AxPos ();_ccg ._abc .AxPos .ValAttr =p ;};func (_gd Legend )Properties ()_degg .ShapeProperties {if _gd ._fbed .SpPr ==nil {_gd ._fbed .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_gd ._fbed .SpPr );};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_beb *_bb .CT_Area3DChart ;};

// AddValueAxis adds a value axis to the chart.
func (_egbd Chart )AddValueAxis ()ValueAxis {_ggg :=_bb .NewCT_ValAx ();if _egbd ._gcd .Chart .PlotArea .CChoice ==nil {_egbd ._gcd .Chart .PlotArea .CChoice =_bb .NewCT_PlotAreaChoice1 ();};_ggg .AxId =_bb .NewCT_UnsignedInt ();_ggg .AxId .ValAttr =0x7FFFFFFF&_eca .Uint32 ();_egbd ._gcd .Chart .PlotArea .CChoice .ValAx =append (_egbd ._gcd .Chart .PlotArea .CChoice .ValAx ,_ggg );_ggg .Delete =_bb .NewCT_Boolean ();_ggg .Delete .ValAttr =_efef .Bool (false );_ggg .Scaling =_bb .NewCT_Scaling ();_ggg .Scaling .Orientation =_bb .NewCT_Orientation ();_ggg .Scaling .Orientation .ValAttr =_bb .ST_OrientationMinMax ;_ggg .Choice =&_bb .EG_AxSharedChoice {};_ggg .Choice .Crosses =_bb .NewCT_Crosses ();_ggg .Choice .Crosses .ValAttr =_bb .ST_CrossesAutoZero ;_ggg .CrossBetween =_bb .NewCT_CrossBetween ();_ggg .CrossBetween .ValAttr =_bb .ST_CrossBetweenBetween ;_dddf :=MakeValueAxis (_ggg );_dddf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_dcc .LightGray );_dddf .SetMajorTickMark (_bb .ST_TickMarkOut );_dddf .SetMinorTickMark (_bb .ST_TickMarkIn );_dddf .SetTickLabelPosition (_bb .ST_TickLblPosNextTo );_dddf .Properties ().LineProperties ().SetSolidFill (_dcc .Black );_dddf .SetPosition (_bb .ST_AxPosL );return _dddf ;};

// Properties returns the chart's shape properties.
func (_geb Chart )Properties ()_degg .ShapeProperties {if _geb ._gcd .SpPr ==nil {_geb ._gcd .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_geb ._gcd .SpPr );};type Legend struct{_fbed *_bb .CT_Legend };

// X returns the inner wrapped XML type.
func (_ade ScatterChartSeries )X ()*_bb .CT_ScatterSer {return _ade ._fbfa };

// SetText sets the series text.
func (_gcgd PieChartSeries )SetText (s string ){_gcgd ._bbbg .Tx =_bb .NewCT_SerTx ();_gcgd ._bbbg .Tx .Choice .V =&s ;};func (_ga Title )ParagraphProperties ()_degg .ParagraphProperties {if _ga ._cc .Tx ==nil {_ga .SetText ("");};if _ga ._cc .Tx .Choice .Rich .P [0].PPr ==nil {_ga ._cc .Tx .Choice .Rich .P [0].PPr =_fba .NewCT_TextParagraphProperties ();};return _degg .MakeParagraphProperties (_ga ._cc .Tx .Choice .Rich .P [0].PPr );};func (_dba DataLabels )SetPosition (p _bb .ST_DLblPos ){_dba .ensureChoice ();_dba ._da .Choice .DLblPos =_bb .NewCT_DLblPos ();_dba ._da .Choice .DLblPos .ValAttr =p ;};

// AddSeries adds a default series to an Pie chart.
func (_ebe PieChart )AddSeries ()PieChartSeries {_cgd :=_bb .NewCT_PieSer ();_ebe ._fgg .Ser =append (_ebe ._fgg .Ser ,_cgd );_cgd .Idx .ValAttr =uint32 (len (_ebe ._fgg .Ser )-1);_cgd .Order .ValAttr =uint32 (len (_ebe ._fgg .Ser )-1);_bef :=PieChartSeries {_cgd };_bef .InitializeDefaults ();return _bef ;};func (_cdf DateAxis )SetPosition (p _bb .ST_AxPos ){_cdf ._eab .AxPos =_bb .NewCT_AxPos ();_cdf ._eab .AxPos .ValAttr =p ;};

// InitializeDefaults the bar chart to its defaults
func (_ee Area3DChart )InitializeDefaults (){};

// SetText sets the series text
func (_eaa LineChartSeries )SetText (s string ){_eaa ._cfa .Tx =_bb .NewCT_SerTx ();_eaa ._cfa .Tx .Choice .V =&s ;};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_bcf NumberDataSource )CreateEmptyNumberCache (){_bcf .ensureChoice ();if _bcf ._de .Choice .NumRef ==nil {_bcf ._de .Choice .NumRef =_bb .NewCT_NumRef ();};_bcf ._de .Choice .NumLit =nil ;_bcf ._de .Choice .NumRef .NumCache =_bb .NewCT_NumData ();_bcf ._de .Choice .NumRef .NumCache .PtCount =_bb .NewCT_UnsignedInt ();_bcf ._de .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// Order returns the order of the series
func (_ecf SurfaceChartSeries )Order ()uint32 {return _ecf ._aegb .Order .ValAttr };func (_bde Marker )Properties ()_degg .ShapeProperties {if _bde ._baa .SpPr ==nil {_bde ._baa .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_bde ._baa .SpPr );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_edb *_bb .CT_Surface3DChart ;};func (_bed CategoryAxis )SetMajorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_bed ._abc .MajorTickMark =nil ;}else {_bed ._abc .MajorTickMark =_bb .NewCT_TickMark ();_bed ._abc .MajorTickMark .ValAttr =m ;};};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_gcge CategoryAxisDataSource )SetLabelReference (s string ){_gcge ._fbb .Choice =_bb .NewCT_AxDataSourceChoice ();_gcge ._fbb .Choice .StrRef =_bb .NewCT_StrRef ();_gcge ._fbb .Choice .StrRef .F =s ;};func (_cb RadarChart )AddAxis (axis Axis ){_deg :=_bb .NewCT_UnsignedInt ();_deg .ValAttr =axis .AxisID ();_cb ._cbf .AxId =append (_cb ._cbf .AxId ,_deg );};func (_fcf Legend )InitializeDefaults (){_fcf .SetPosition (_bb .ST_LegendPosR );_fcf .SetOverlay (false );_fcf .Properties ().SetNoFill ();_fcf .Properties ().LineProperties ().SetNoFill ();};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_bbb *_bb .CT_BarSer };func (_baaf DateAxis )SetCrosses (axis Axis ){_baaf ._eab .CrossAx .ValAttr =axis .AxisID ()};func MakeTitle (x *_bb .CT_Title )Title {return Title {x }};func (_cbdf ValueAxis )MajorGridLines ()GridLines {if _cbdf ._gede .MajorGridlines ==nil {_cbdf ._gede .MajorGridlines =_bb .NewCT_ChartLines ();};return GridLines {_cbdf ._gede .MajorGridlines };};

// AddDateAxis adds a value axis to the chart.
func (_eafe Chart )AddDateAxis ()DateAxis {_dbaa :=_bb .NewCT_DateAx ();if _eafe ._gcd .Chart .PlotArea .CChoice ==nil {_eafe ._gcd .Chart .PlotArea .CChoice =_bb .NewCT_PlotAreaChoice1 ();};_dbaa .AxId =_bb .NewCT_UnsignedInt ();_dbaa .AxId .ValAttr =0x7FFFFFFF&_eca .Uint32 ();_eafe ._gcd .Chart .PlotArea .CChoice .DateAx =append (_eafe ._gcd .Chart .PlotArea .CChoice .DateAx ,_dbaa );_dbaa .Delete =_bb .NewCT_Boolean ();_dbaa .Delete .ValAttr =_efef .Bool (false );_dbaa .Scaling =_bb .NewCT_Scaling ();_dbaa .Scaling .Orientation =_bb .NewCT_Orientation ();_dbaa .Scaling .Orientation .ValAttr =_bb .ST_OrientationMinMax ;_dbaa .Choice =&_bb .EG_AxSharedChoice {};_dbaa .Choice .Crosses =_bb .NewCT_Crosses ();_dbaa .Choice .Crosses .ValAttr =_bb .ST_CrossesAutoZero ;_aca :=DateAxis {_dbaa };_aca .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_dcc .LightGray );_aca .SetMajorTickMark (_bb .ST_TickMarkOut );_aca .SetMinorTickMark (_bb .ST_TickMarkIn );_aca .SetTickLabelPosition (_bb .ST_TickLblPosNextTo );_aca .Properties ().LineProperties ().SetSolidFill (_dcc .Black );_aca .SetPosition (_bb .ST_AxPosL );return _aca ;};

// X returns the inner wrapped XML type.
func (_fgba Surface3DChart )X ()*_bb .CT_Surface3DChart {return _fgba ._edb };func (_gace DataLabels )SetShowLegendKey (b bool ){_gace .ensureChoice ();_gace ._da .Choice .ShowLegendKey =_bb .NewCT_Boolean ();_gace ._da .Choice .ShowLegendKey .ValAttr =_efef .Bool (b );};func (_fbc DataLabels )SetShowValue (b bool ){_fbc .ensureChoice ();_fbc ._da .Choice .ShowVal =_bb .NewCT_Boolean ();_fbc ._da .Choice .ShowVal .ValAttr =_efef .Bool (b );};

// SetText sets the series text
func (_ebc ScatterChartSeries )SetText (s string ){_ebc ._fbfa .Tx =_bb .NewCT_SerTx ();_ebc ._fbfa .Tx .Choice .V =&s ;};

// CategoryAxis returns the category data source.
func (_ab PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ab ._bbbg .Cat ==nil {_ab ._bbbg .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_ab ._bbbg .Cat );};

// X returns the inner wrapped XML type.
func (_cgbb RadarChart )X ()*_bb .CT_RadarChart {return _cgbb ._cbf };

// AddAxis adds an axis to a Surface chart.
func (_ega SurfaceChart )AddAxis (axis Axis ){_aaad :=_bb .NewCT_UnsignedInt ();_aaad .ValAttr =axis .AxisID ();_ega ._bee .AxId =append (_ega ._bee .AxId ,_aaad );};func (_bae SurfaceChartSeries )Values ()NumberDataSource {if _bae ._aegb .Val ==nil {_bae ._aegb .Val =_bb .NewCT_NumDataSource ();};_fg :=MakeNumberDataSource (_bae ._aegb .Val );_fg .CreateEmptyNumberCache ();return _fg ;};

// X returns the inner wrapped XML type.
func (_gaf BarChart )X ()*_bb .CT_BarChart {return _gaf ._gff };

// AddStockChart adds a new stock chart.
func (_gad Chart )AddStockChart ()StockChart {_baf :=_bb .NewCT_PlotAreaChoice ();_gad ._gcd .Chart .PlotArea .Choice =append (_gad ._gcd .Chart .PlotArea .Choice ,_baf );_baf .StockChart =_bb .NewCT_StockChart ();_faaa :=StockChart {_dff :_baf .StockChart };_faaa .InitializeDefaults ();return _faaa ;};

// AddSeries adds a default series to a bar chart.
func (_cad BarChart )AddSeries ()BarChartSeries {_be :=_cad .nextColor (len (_cad ._gff .Ser ));_eg :=_bb .NewCT_BarSer ();_cad ._gff .Ser =append (_cad ._gff .Ser ,_eg );_eg .Idx .ValAttr =uint32 (len (_cad ._gff .Ser )-1);_eg .Order .ValAttr =uint32 (len (_cad ._gff .Ser )-1);_bcc :=BarChartSeries {_eg };_bcc .InitializeDefaults ();_bcc .Properties ().SetSolidFill (_be );return _bcc ;};func (_egf Marker )SetSize (sz uint8 ){_egf ._baa .Size =_bb .NewCT_MarkerSize ();_egf ._baa .Size .ValAttr =&sz ;};func (_ddc SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ddc ._aegb .Cat ==nil {_ddc ._aegb .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_ddc ._aegb .Cat );};

// SetText sets the series text.
func (_ffd AreaChartSeries )SetText (s string ){_ffd ._gebb .Tx =_bb .NewCT_SerTx ();_ffd ._gebb .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_fce BarChart )InitializeDefaults (){_fce .SetDirection (_bb .ST_BarDirCol )};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_fbb *_bb .CT_AxDataSource };

// AddScatterChart adds a scatter (X/Y) chart.
func (_gce Chart )AddScatterChart ()ScatterChart {_bdb :=_bb .NewCT_PlotAreaChoice ();_gce ._gcd .Chart .PlotArea .Choice =append (_gce ._gcd .Chart .PlotArea .Choice ,_bdb );_bdb .ScatterChart =_bb .NewCT_ScatterChart ();_ffdg :=ScatterChart {_baec :_bdb .ScatterChart };_ffdg .InitializeDefaults ();return _ffdg ;};

// AddSeries adds a default series to a Surface chart.
func (_ebf SurfaceChart )AddSeries ()SurfaceChartSeries {_agf :=_ebf .nextColor (len (_ebf ._bee .Ser ));_cab :=_bb .NewCT_SurfaceSer ();_ebf ._bee .Ser =append (_ebf ._bee .Ser ,_cab );_cab .Idx .ValAttr =uint32 (len (_ebf ._bee .Ser )-1);_cab .Order .ValAttr =uint32 (len (_ebf ._bee .Ser )-1);_ddd :=SurfaceChartSeries {_cab };_ddd .InitializeDefaults ();_ddd .Properties ().LineProperties ().SetSolidFill (_agf );return _ddd ;};func (_cffc DateAxis )Properties ()_degg .ShapeProperties {if _cffc ._eab .SpPr ==nil {_cffc ._eab .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_cffc ._eab .SpPr );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_bbbg *_bb .CT_PieSer };

// Properties returns the bar chart series shape properties.
func (_efed PieChartSeries )Properties ()_degg .ShapeProperties {if _efed ._bbbg .SpPr ==nil {_efed ._bbbg .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_efed ._bbbg .SpPr );};

// InitializeDefaults the bar chart to its defaults
func (_ccdc PieChart )InitializeDefaults (){_ccdc ._fgg .VaryColors =_bb .NewCT_Boolean ();_ccdc ._fgg .VaryColors .ValAttr =_efef .Bool (true );};

// AddSeries adds a default series to an area chart.
func (_bfb AreaChart )AddSeries ()AreaChartSeries {_gadg :=_bfb .nextColor (len (_bfb ._cada .Ser ));_eaecc :=_bb .NewCT_AreaSer ();_bfb ._cada .Ser =append (_bfb ._cada .Ser ,_eaecc );_eaecc .Idx .ValAttr =uint32 (len (_bfb ._cada .Ser )-1);_eaecc .Order .ValAttr =uint32 (len (_bfb ._cada .Ser )-1);_ded :=AreaChartSeries {_eaecc };_ded .InitializeDefaults ();_ded .Properties ().SetSolidFill (_gadg );return _ded ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bca Chart )AddLegend ()Legend {_bca ._gcd .Chart .Legend =_bb .NewCT_Legend ();_bac :=MakeLegend (_bca ._gcd .Chart .Legend );_bac .InitializeDefaults ();return _bac ;};

// X returns the inner wrapped XML type.
func (_ggag PieOfPieChart )X ()*_bb .CT_OfPieChart {return _ggag ._bfd };

// SetType sets the type the secone pie to either pie or bar
func (_dgfc PieOfPieChart )SetType (t _bb .ST_OfPieType ){_dgfc ._bfd .OfPieType .ValAttr =t };

// AddSeries adds a default series to a Stock chart.
func (_eef StockChart )AddSeries ()LineChartSeries {_e :=_bb .NewCT_LineSer ();_eef ._dff .Ser =append (_eef ._dff .Ser ,_e );_e .Idx .ValAttr =uint32 (len (_eef ._dff .Ser )-1);_e .Order .ValAttr =uint32 (len (_eef ._dff .Ser )-1);_fag :=LineChartSeries {_e };_fag .Values ().CreateEmptyNumberCache ();_fag .Properties ().LineProperties ().SetNoFill ();return _fag ;};func (_cac ScatterChart )InitializeDefaults (){_cac ._baec .ScatterStyle .ValAttr =_bb .ST_ScatterStyleMarker ;};func _aga (_ec *_bb .CT_Chart ){_ec .View3D =_bb .NewCT_View3D ();_ec .View3D .RotX =_bb .NewCT_RotX ();_ec .View3D .RotX .ValAttr =_efef .Int8 (15);_ec .View3D .RotY =_bb .NewCT_RotY ();_ec .View3D .RotY .ValAttr =_efef .Uint16 (20);_ec .View3D .RAngAx =_bb .NewCT_Boolean ();_ec .View3D .RAngAx .ValAttr =_efef .Bool (false );_ec .Floor =_bb .NewCT_Surface ();_ec .Floor .Thickness =_bb .NewCT_Thickness ();_ec .Floor .Thickness .ValAttr .Uint32 =_efef .Uint32 (0);_ec .SideWall =_bb .NewCT_Surface ();_ec .SideWall .Thickness =_bb .NewCT_Thickness ();_ec .SideWall .Thickness .ValAttr .Uint32 =_efef .Uint32 (0);_ec .BackWall =_bb .NewCT_Surface ();_ec .BackWall .Thickness =_bb .NewCT_Thickness ();_ec .BackWall .Thickness .ValAttr .Uint32 =_efef .Uint32 (0);};func (_cag Title )RunProperties ()_degg .RunProperties {if _cag ._cc .Tx ==nil {_cag .SetText ("");};if _cag ._cc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_cag ._cc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_fba .NewCT_TextCharacterProperties ();};return _degg .MakeRunProperties (_cag ._cc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};

// X returns the inner wrapped XML type.
func (_fca BarChartSeries )X ()*_bb .CT_BarSer {return _fca ._bbb };

// Properties returns the bar chart series shape properties.
func (_abd RadarChartSeries )Properties ()_degg .ShapeProperties {if _abd ._fa .SpPr ==nil {_abd ._fa .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_abd ._fa .SpPr );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_bfd *_bb .CT_OfPieChart ;};

// AddAxis adds an axis to a Scatter chart.
func (_cd ScatterChart )AddAxis (axis Axis ){_agg :=_bb .NewCT_UnsignedInt ();_agg .ValAttr =axis .AxisID ();_cd ._baec .AxId =append (_cd ._baec .AxId ,_agg );};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_gfc BubbleChartSeries )InitializeDefaults (){};

// SetIndex sets the index of the series
func (_cafa ScatterChartSeries )SetIndex (idx uint32 ){_cafa ._fbfa .Idx .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_cgf DoughnutChart )InitializeDefaults (){_cgf ._gedb .VaryColors =_bb .NewCT_Boolean ();_cgf ._gedb .VaryColors .ValAttr =_efef .Bool (true );_cgf ._gedb .HoleSize =_bb .NewCT_HoleSize ();_cgf ._gedb .HoleSize .ValAttr =&_bb .ST_HoleSize {};_cgf ._gedb .HoleSize .ValAttr .ST_HoleSizeUByte =_efef .Uint8 (50);};func (_efe CategoryAxis )SetCrosses (axis Axis ){_efe ._abc .Choice =_bb .NewEG_AxSharedChoice ();_efe ._abc .Choice .Crosses =_bb .NewCT_Crosses ();_efe ._abc .Choice .Crosses .ValAttr =_bb .ST_CrossesAutoZero ;_efe ._abc .CrossAx .ValAttr =axis .AxisID ();};

// SetOrder sets the order of the series
func (_ceg SurfaceChartSeries )SetOrder (idx uint32 ){_ceg ._aegb .Order .ValAttr =idx };func (_fbe DataLabels )SetShowSeriesName (b bool ){_fbe .ensureChoice ();_fbe ._da .Choice .ShowSerName =_bb .NewCT_Boolean ();_fbe ._da .Choice .ShowSerName .ValAttr =_efef .Bool (b );};

// InitializeDefaults the bar chart to its defaults
func (_ca Bar3DChart )InitializeDefaults (){_ca .SetDirection (_bb .ST_BarDirCol )};type DataLabels struct{_da *_bb .CT_DLbls };

// X returns the inner wrapped XML type.
func (_fgdg DateAxis )X ()*_bb .CT_DateAx {return _fgdg ._eab };func (_cfca Surface3DChart )InitializeDefaults (){_cfca ._edb .Wireframe =_bb .NewCT_Boolean ();_cfca ._edb .Wireframe .ValAttr =_efef .Bool (false );_cfca ._edb .BandFmts =_bb .NewCT_BandFmts ();for _fgda :=0;_fgda < 15;_fgda ++{_cca :=_bb .NewCT_BandFmt ();_cca .Idx .ValAttr =uint32 (_fgda );_cca .SpPr =_fba .NewCT_ShapeProperties ();_cda :=_degg .MakeShapeProperties (_cca .SpPr );_cda .SetSolidFill (_cfca .nextColor (_fgda ));_cfca ._edb .BandFmts .BandFmt =append (_cfca ._edb .BandFmts .BandFmt ,_cca );};};func (_ce ValueAxis )Properties ()_degg .ShapeProperties {if _ce ._gede .SpPr ==nil {_ce ._gede .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_ce ._gede .SpPr );};

// SetOrder sets the order of the series
func (_ece ScatterChartSeries )SetOrder (idx uint32 ){_ece ._fbfa .Order .ValAttr =idx };

// Marker returns the marker properties.
func (_egfb ScatterChartSeries )Marker ()Marker {if _egfb ._fbfa .Marker ==nil {_egfb ._fbfa .Marker =_bb .NewCT_Marker ();};return MakeMarker (_egfb ._fbfa .Marker );};func (_gg DateAxis )SetMajorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_gg ._eab .MajorTickMark =nil ;}else {_gg ._eab .MajorTickMark =_bb .NewCT_TickMark ();_gg ._eab .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_edgd Marker )X ()*_bb .CT_Marker {return _edgd ._baa };func (_dc SurfaceChartSeries )InitializeDefaults (){_dc .Properties ().LineProperties ().SetWidth (1*_agbb .Point );_dc .Properties ().LineProperties ().SetSolidFill (_dcc .Black );_dc .Properties ().LineProperties ().SetJoin (_degg .LineJoinRound );};func (_acad DataLabels )SetShowLeaderLines (b bool ){_acad .ensureChoice ();_acad ._da .Choice .ShowLeaderLines =_bb .NewCT_Boolean ();_acad ._da .Choice .ShowLeaderLines .ValAttr =_efef .Bool (b );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_bbd *_bb .CT_BubbleSer };func (_dcb SeriesAxis )InitializeDefaults (){};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_gedb *_bb .CT_DoughnutChart ;};

// AddBarChart adds a new bar chart to a chart.
func (_ecag Chart )AddBarChart ()BarChart {_cce :=_bb .NewCT_PlotAreaChoice ();_ecag ._gcd .Chart .PlotArea .Choice =append (_ecag ._gcd .Chart .PlotArea .Choice ,_cce );_cce .BarChart =_bb .NewCT_BarChart ();_cce .BarChart .Grouping =_bb .NewCT_BarGrouping ();_cce .BarChart .Grouping .ValAttr =_bb .ST_BarGroupingStandard ;_aade :=BarChart {_gff :_cce .BarChart };_aade .InitializeDefaults ();return _aade ;};func MakeValueAxis (x *_bb .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_ea CategoryAxis )Properties ()_degg .ShapeProperties {if _ea ._abc .SpPr ==nil {_ea ._abc .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_ea ._abc .SpPr );};

// X returns the inner wrapped XML type.
func (_aaa SeriesAxis )X ()*_bb .CT_SerAx {return _aaa ._bdd };

// X returns the inner wrapped XML type.
func (_bbe ValueAxis )X ()*_bb .CT_ValAx {return _bbe ._gede };func (_age ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _age ._fbfa .XVal ==nil {_age ._fbfa .XVal =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_age ._fbfa .XVal );};

// X returns the inner wrapped XML type.
func (_aac AreaChart )X ()*_bb .CT_AreaChart {return _aac ._cada };

// SetText sets the series text.
func (_cafab RadarChartSeries )SetText (s string ){_cafab ._fa .Tx =_bb .NewCT_SerTx ();_cafab ._fa .Tx .Choice .V =&s ;};func (_dddc NumberDataSource )SetReference (s string ){_dddc .ensureChoice ();if _dddc ._de .Choice .NumRef ==nil {_dddc ._de .Choice .NumRef =_bb .NewCT_NumRef ();};_dddc ._de .Choice .NumRef .F =s ;};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_fa *_bb .CT_RadarSer };

// InitializeDefaults the bar chart to its defaults
func (_bce RadarChart )InitializeDefaults (){_bce ._cbf .RadarStyle .ValAttr =_bb .ST_RadarStyleMarker };

// AddSeries adds a default series to an Pie chart.
func (_egag PieOfPieChart )AddSeries ()PieChartSeries {_dbb :=_bb .NewCT_PieSer ();_egag ._bfd .Ser =append (_egag ._bfd .Ser ,_dbb );_dbb .Idx .ValAttr =uint32 (len (_egag ._bfd .Ser )-1);_dbb .Order .ValAttr =uint32 (len (_egag ._bfd .Ser )-1);_aa :=PieChartSeries {_dbb };_aa .InitializeDefaults ();return _aa ;};func (_gcf LineChartSeries )SetSmooth (b bool ){_gcf ._cfa .Smooth =_bb .NewCT_Boolean ();_gcf ._cfa .Smooth .ValAttr =&b ;};

// AddAxis adds an axis to a line chart.
func (_bf LineChart )AddAxis (axis Axis ){_fgc :=_bb .NewCT_UnsignedInt ();_fgc .ValAttr =axis .AxisID ();_bf ._feg .AxId =append (_bf ._feg .AxId ,_fgc );};func (_dg ValueAxis )SetTickLabelPosition (p _bb .ST_TickLblPos ){if p ==_bb .ST_TickLblPosUnset {_dg ._gede .TickLblPos =nil ;}else {_dg ._gede .TickLblPos =_bb .NewCT_TickLblPos ();_dg ._gede .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_ada SurfaceChartSeries )X ()*_bb .CT_SurfaceSer {return _ada ._aegb };func (_faa CategoryAxis )MajorGridLines ()GridLines {if _faa ._abc .MajorGridlines ==nil {_faa ._abc .MajorGridlines =_bb .NewCT_ChartLines ();};return GridLines {_faa ._abc .MajorGridlines };};func (_cagg DataLabels )ensureChoice (){if _cagg ._da .Choice ==nil {_cagg ._da .Choice =_bb .NewCT_DLblsChoice ();};};

// X returns the inner wrapped XML type.
func (_cde PieChartSeries )X ()*_bb .CT_PieSer {return _cde ._bbbg };

// SetValues sets values directly on a source.
func (_aad NumberDataSource )SetValues (v []float64 ){_aad .ensureChoice ();_aad ._de .Choice .NumRef =nil ;_aad ._de .Choice .NumLit =_bb .NewCT_NumData ();_aad ._de .Choice .NumLit .PtCount =_bb .NewCT_UnsignedInt ();_aad ._de .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _cgb ,_dd :=range v {_aad ._de .Choice .NumLit .Pt =append (_aad ._de .Choice .NumLit .Pt ,&_bb .CT_NumVal {IdxAttr :uint32 (_cgb ),V :_bcbg .Sprintf ("\u0025\u0067",_dd )});};};

// Properties returns the line chart series shape properties.
func (_bgg ScatterChartSeries )Properties ()_degg .ShapeProperties {if _bgg ._fbfa .SpPr ==nil {_bgg ._fbfa .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_bgg ._fbfa .SpPr );};type SurfaceChartSeries struct{_aegb *_bb .CT_SurfaceSer };

// AddBubbleChart adds a new bubble chart.
func (_gcg Chart )AddBubbleChart ()BubbleChart {_gdd :=_bb .NewCT_PlotAreaChoice ();_gcg ._gcd .Chart .PlotArea .Choice =append (_gcg ._gcd .Chart .PlotArea .Choice ,_gdd );_gdd .BubbleChart =_bb .NewCT_BubbleChart ();_fggg :=BubbleChart {_eec :_gdd .BubbleChart };_fggg .InitializeDefaults ();return _fggg ;};func (_gcfe DateAxis )SetMinorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_gcfe ._eab .MinorTickMark =nil ;}else {_gcfe ._eab .MinorTickMark =_bb .NewCT_TickMark ();_gcfe ._eab .MinorTickMark .ValAttr =m ;};};

// Labels returns the data label properties.
func (_ffc ScatterChartSeries )Labels ()DataLabels {if _ffc ._fbfa .DLbls ==nil {_ffc ._fbfa .DLbls =_bb .NewCT_DLbls ();};return MakeDataLabels (_ffc ._fbfa .DLbls );};

// X returns the inner wrapped XML type.
func (_bd PieChart )X ()*_bb .CT_PieChart {return _bd ._fgg };

// X returns the inner wrapped XML type.
func (_ebda BubbleChart )X ()*_bb .CT_BubbleChart {return _ebda ._eec };

// X returns the inner wrapped XML type.
func (_ag RadarChartSeries )X ()*_bb .CT_RadarSer {return _ag ._fa };

// Values returns the value data source.
func (_abb RadarChartSeries )Values ()NumberDataSource {if _abb ._fa .Val ==nil {_abb ._fa .Val =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_abb ._fa .Val );};type ScatterChart struct{chartBase ;_baec *_bb .CT_ScatterChart ;};func (_cae DataLabels )SetShowCategoryName (b bool ){_cae .ensureChoice ();_cae ._da .Choice .ShowCatName =_bb .NewCT_Boolean ();_cae ._da .Choice .ShowCatName .ValAttr =_efef .Bool (b );};

// AddPie3DChart adds a new pie chart to a chart.
func (_eda Chart )AddPie3DChart ()Pie3DChart {_aga (_eda ._gcd .Chart );_bgc :=_bb .NewCT_PlotAreaChoice ();_eda ._gcd .Chart .PlotArea .Choice =append (_eda ._gcd .Chart .PlotArea .Choice ,_bgc );_bgc .Pie3DChart =_bb .NewCT_Pie3DChart ();_aegg :=Pie3DChart {_dbf :_bgc .Pie3DChart };_aegg .InitializeDefaults ();return _aegg ;};func (_b ScatterChartSeries )InitializeDefaults (){_b .Properties ().LineProperties ().SetNoFill ();_b .Marker ().SetSymbol (_bb .ST_MarkerStyleAuto );_b .Labels ().SetShowLegendKey (false );_b .Labels ().SetShowValue (true );_b .Labels ().SetShowPercent (false );_b .Labels ().SetShowCategoryName (false );_b .Labels ().SetShowSeriesName (false );_b .Labels ().SetShowLeaderLines (false );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_gac Bar3DChart )SetDirection (d _bb .ST_BarDir ){_gac ._dec .BarDir .ValAttr =d };

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_gfa DoughnutChart )SetHoleSize (pct uint8 ){if _gfa ._gedb .HoleSize ==nil {_gfa ._gedb .HoleSize =_bb .NewCT_HoleSize ();};if _gfa ._gedb .HoleSize .ValAttr ==nil {_gfa ._gedb .HoleSize .ValAttr =&_bb .ST_HoleSize {};};_gfa ._gedb .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};type CategoryAxis struct{_abc *_bb .CT_CatAx };type Line3DChart struct{chartBase ;_bgf *_bb .CT_Line3DChart ;};

// X returns the inner wrapped XML type.
func (_ccc Line3DChart )X ()*_bb .CT_Line3DChart {return _ccc ._bgf };func (_bgbdb SeriesAxis )AxisID ()uint32 {return _bgbdb ._bdd .AxId .ValAttr };

// SetText sets the series text.
func (_dfe BarChartSeries )SetText (s string ){_dfe ._bbb .Tx =_bb .NewCT_SerTx ();_dfe ._bbb .Tx .Choice .V =&s ;};

// CategoryAxis returns the category data source.
func (_dfg BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dfg ._bbb .Cat ==nil {_dfg ._bbb .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_dfg ._bbb .Cat );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_dff *_bb .CT_StockChart ;};func (_eea AreaChart )AddAxis (axis Axis ){_cec :=_bb .NewCT_UnsignedInt ();_cec .ValAttr =axis .AxisID ();_eea ._cada .AxId =append (_eea ._cada .AxId ,_cec );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_cfa *_bb .CT_LineSer };

// AddSeries adds a default series to an Pie3D chart.
func (_acd Pie3DChart )AddSeries ()PieChartSeries {_eeb :=_bb .NewCT_PieSer ();_acd ._dbf .Ser =append (_acd ._dbf .Ser ,_eeb );_eeb .Idx .ValAttr =uint32 (len (_acd ._dbf .Ser )-1);_eeb .Order .ValAttr =uint32 (len (_acd ._dbf .Ser )-1);_fad :=PieChartSeries {_eeb };_fad .InitializeDefaults ();return _fad ;};

// AddSeries adds a default series to a Bubble chart.
func (_gca BubbleChart )AddSeries ()BubbleChartSeries {_ffda :=_gca .nextColor (len (_gca ._eec .Ser ));_egd :=_bb .NewCT_BubbleSer ();_gca ._eec .Ser =append (_gca ._eec .Ser ,_egd );_egd .Idx .ValAttr =uint32 (len (_gca ._eec .Ser )-1);_egd .Order .ValAttr =uint32 (len (_gca ._eec .Ser )-1);_bcd :=BubbleChartSeries {_egd };_bcd .InitializeDefaults ();_bcd .Properties ().SetSolidFill (_ffda );return _bcd ;};

// SetValues is used to set the source data to a set of values.
func (_dca CategoryAxisDataSource )SetValues (v []string ){_dca ._fbb .Choice =_bb .NewCT_AxDataSourceChoice ();_dca ._fbb .Choice .StrLit =_bb .NewCT_StrData ();_dca ._fbb .Choice .StrLit .PtCount =_bb .NewCT_UnsignedInt ();_dca ._fbb .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _dgf ,_deb :=range v {_dca ._fbb .Choice .StrLit .Pt =append (_dca ._fbb .Choice .StrLit .Pt ,&_bb .CT_StrVal {IdxAttr :uint32 (_dgf ),V :_deb });};};

// X returns the inner wrapped XML type.
func (_faf Title )X ()*_bb .CT_Title {return _faf ._cc };

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_bee *_bb .CT_SurfaceChart ;};type Marker struct{_baa *_bb .CT_Marker };

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_cge CategoryAxisDataSource )SetNumberReference (s string ){_cge ._fbb .Choice =_bb .NewCT_AxDataSourceChoice ();_cge ._fbb .Choice .NumRef =_bb .NewCT_NumRef ();_cge ._fbb .Choice .NumRef .F =s ;};

// Properties returns the Bubble chart series shape properties.
func (_bcb BubbleChartSeries )Properties ()_degg .ShapeProperties {if _bcb ._bbd .SpPr ==nil {_bcb ._bbd .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_bcb ._bbd .SpPr );};

// Properties returns the bar chart series shape properties.
func (_fc BarChartSeries )Properties ()_degg .ShapeProperties {if _fc ._bbb .SpPr ==nil {_fc ._bbb .SpPr =_fba .NewCT_ShapeProperties ();};return _degg .MakeShapeProperties (_fc ._bbb .SpPr );};func MakeChart (x *_bb .ChartSpace )Chart {return Chart {x }};

// AddAxis adds an axis to a line chart.
func (_ged Line3DChart )AddAxis (axis Axis ){_dega :=_bb .NewCT_UnsignedInt ();_dega .ValAttr =axis .AxisID ();_ged ._bgf .AxId =append (_ged ._bgf .AxId ,_dega );};

// RemoveTitle removes any existing title from the chart.
func (_dcf Chart )RemoveTitle (){_dcf ._gcd .Chart .Title =nil ;_dcf ._gcd .Chart .AutoTitleDeleted =_bb .NewCT_Boolean ();_dcf ._gcd .Chart .AutoTitleDeleted .ValAttr =_efef .Bool (true );};

// AddTitle sets a new title on the chart.
func (_bgbd Chart )AddTitle ()Title {_bgbd ._gcd .Chart .Title =_bb .NewCT_Title ();_bgbd ._gcd .Chart .Title .Overlay =_bb .NewCT_Boolean ();_bgbd ._gcd .Chart .Title .Overlay .ValAttr =_efef .Bool (false );_bgbd ._gcd .Chart .AutoTitleDeleted =_bb .NewCT_Boolean ();_bgbd ._gcd .Chart .AutoTitleDeleted .ValAttr =_efef .Bool (false );_cff :=MakeTitle (_bgbd ._gcd .Chart .Title );_cff .InitializeDefaults ();return _cff ;};

// Chart is a generic chart.
type Chart struct{_gcd *_bb .ChartSpace };

// AddSeries adds a default series to a line chart.
func (_af Line3DChart )AddSeries ()LineChartSeries {_dcg :=_af .nextColor (len (_af ._bgf .Ser ));_ebfd :=_bb .NewCT_LineSer ();_af ._bgf .Ser =append (_af ._bgf .Ser ,_ebfd );_ebfd .Idx .ValAttr =uint32 (len (_af ._bgf .Ser )-1);_ebfd .Order .ValAttr =uint32 (len (_af ._bgf .Ser )-1);_ebd :=LineChartSeries {_ebfd };_ebd .InitializeDefaults ();_ebd .Properties ().LineProperties ().SetSolidFill (_dcg );_ebd .Properties ().SetSolidFill (_dcg );return _ebd ;};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_egc Chart )AddDoughnutChart ()DoughnutChart {_cfaf :=_bb .NewCT_PlotAreaChoice ();_egc ._gcd .Chart .PlotArea .Choice =append (_egc ._gcd .Chart .PlotArea .Choice ,_cfaf );_cfaf .DoughnutChart =_bb .NewCT_DoughnutChart ();_afcc :=DoughnutChart {_gedb :_cfaf .DoughnutChart };_afcc .InitializeDefaults ();return _afcc ;};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_cada *_bb .CT_AreaChart ;};var _egb =[]_dcc .Color {_dcc .RGB (0x33,0x66,0xcc),_dcc .RGB (0xDC,0x39,0x12),_dcc .RGB (0xFF,0x99,0x00),_dcc .RGB (0x10,0x96,0x18),_dcc .RGB (0x99,0x00,0x99),_dcc .RGB (0x3B,0x3E,0xAC),_dcc .RGB (0x00,0x99,0xC6),_dcc .RGB (0xDD,0x44,0x77),_dcc .RGB (0x66,0xAA,0x00),_dcc .RGB (0xB8,0x2E,0x2E),_dcc .RGB (0x31,0x63,0x95),_dcc .RGB (0x99,0x44,0x99),_dcc .RGB (0x22,0xAA,0x99),_dcc .RGB (0xAA,0xAA,0x11),_dcc .RGB (0x66,0x33,0xCC),_dcc .RGB (0xE6,0x73,0x00),_dcc .RGB (0x8B,0x07,0x07),_dcc .RGB (0x32,0x92,0x62),_dcc .RGB (0x55,0x74,0xA6),_dcc .RGB (0x3B,0x3E,0xAC)};func (_agc nullAxis )AxisID ()uint32 {return 0};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_fbfa *_bb .CT_ScatterSer };

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_cg PieChartSeries )SetExplosion (v uint32 ){_cg ._bbbg .Explosion =_bb .NewCT_UnsignedInt ();_cg ._bbbg .Explosion .ValAttr =v ;};func (_gb chartBase )nextColor (_fe int )_dcc .Color {return _egb [_fe %len (_egb )]};func (_ggf DataLabels )SetShowPercent (b bool ){_ggf .ensureChoice ();_ggf ._da .Choice .ShowPercent =_bb .NewCT_Boolean ();_ggf ._da .Choice .ShowPercent .ValAttr =_efef .Bool (b );};type chartBase struct{};type nullAxis byte ;func (_aaga BubbleChart )AddAxis (axis Axis ){_bec :=_bb .NewCT_UnsignedInt ();_bec .ValAttr =axis .AxisID ();_aaga ._eec .AxId =append (_aaga ._eec .AxId ,_bec );};func (_cdeg NumberDataSource )ensureChoice (){if _cdeg ._de .Choice ==nil {_cdeg ._de .Choice =_bb .NewCT_NumDataSourceChoice ();};};func (_f Title )InitializeDefaults (){_f .SetText ("\u0054\u0069\u0074l\u0065");_f .RunProperties ().SetSize (16*_agbb .Point );_f .RunProperties ().SetSolidFill (_dcc .Black );_f .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_f .RunProperties ().SetBold (false );};

// SetOrder sets the order of the series
func (_db LineChartSeries )SetOrder (idx uint32 ){_db ._cfa .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_bea PieOfPieChart )InitializeDefaults (){_bea ._bfd .VaryColors =_bb .NewCT_Boolean ();_bea ._bfd .VaryColors .ValAttr =_efef .Bool (true );_bea .SetType (_bb .ST_OfPieTypePie );_bea ._bfd .SecondPieSize =_bb .NewCT_SecondPieSize ();_bea ._bfd .SecondPieSize .ValAttr =&_bb .ST_SecondPieSize {};_bea ._bfd .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_efef .Uint16 (75);_baed :=_bb .NewCT_ChartLines ();_baed .SpPr =_fba .NewCT_ShapeProperties ();_ffdf :=_degg .MakeShapeProperties (_baed .SpPr );_ffdf .LineProperties ().SetSolidFill (_dcc .Auto );_bea ._bfd .SerLines =append (_bea ._bfd .SerLines ,_baed );};func (_ccf ValueAxis )SetCrosses (axis Axis ){_ccf ._gede .CrossAx .ValAttr =axis .AxisID ()};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_gcba Chart )AddPieOfPieChart ()PieOfPieChart {_eb :=_bb .NewCT_PlotAreaChoice ();_gcba ._gcd .Chart .PlotArea .Choice =append (_gcba ._gcd .Chart .PlotArea .Choice ,_eb );_eb .OfPieChart =_bb .NewCT_OfPieChart ();_fgf :=PieOfPieChart {_bfd :_eb .OfPieChart };_fgf .InitializeDefaults ();return _fgf ;};

// AddLineChart adds a new line chart to a chart.
func (_cbd Chart )AddLineChart ()LineChart {_gab :=_bb .NewCT_PlotAreaChoice ();_cbd ._gcd .Chart .PlotArea .Choice =append (_cbd ._gcd .Chart .PlotArea .Choice ,_gab );_gab .LineChart =_bb .NewCT_LineChart ();_gab .LineChart .Grouping =_bb .NewCT_Grouping ();_gab .LineChart .Grouping .ValAttr =_bb .ST_GroupingStandard ;return LineChart {_feg :_gab .LineChart };};func (_gbf DateAxis )AxisID ()uint32 {return _gbf ._eab .AxId .ValAttr };

// Marker returns the marker properties.
func (_gge LineChartSeries )Marker ()Marker {if _gge ._cfa .Marker ==nil {_gge ._cfa .Marker =_bb .NewCT_Marker ();};return MakeMarker (_gge ._cfa .Marker );};

// Values returns the bubble size data source.
func (_aaf BubbleChartSeries )BubbleSizes ()NumberDataSource {if _aaf ._bbd .BubbleSize ==nil {_aaf ._bbd .BubbleSize =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_aaf ._bbd .BubbleSize );};var NullAxis Axis =nullAxis (0);func (_aafe LineChartSeries )Values ()NumberDataSource {if _aafe ._cfa .Val ==nil {_aafe ._cfa .Val =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_aafe ._cfa .Val );};

// AddSeries adds a default series to an area chart.
func (_efd Area3DChart )AddSeries ()AreaChartSeries {_cfce :=_efd .nextColor (len (_efd ._beb .Ser ));_bbgb :=_bb .NewCT_AreaSer ();_efd ._beb .Ser =append (_efd ._beb .Ser ,_bbgb );_bbgb .Idx .ValAttr =uint32 (len (_efd ._beb .Ser )-1);_bbgb .Order .ValAttr =uint32 (len (_efd ._beb .Ser )-1);_aada :=AreaChartSeries {_bbgb };_aada .InitializeDefaults ();_aada .Properties ().SetSolidFill (_cfce );return _aada ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_ac Chart )AddLine3DChart ()Line3DChart {_aga (_ac ._gcd .Chart );_fafg :=_bb .NewCT_PlotAreaChoice ();_ac ._gcd .Chart .PlotArea .Choice =append (_ac ._gcd .Chart .PlotArea .Choice ,_fafg );_fafg .Line3DChart =_bb .NewCT_Line3DChart ();_fafg .Line3DChart .Grouping =_bb .NewCT_Grouping ();_fafg .Line3DChart .Grouping .ValAttr =_bb .ST_GroupingStandard ;return Line3DChart {_bgf :_fafg .Line3DChart };};type ValueAxis struct{_gede *_bb .CT_ValAx };func (_eeg LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _eeg ._cfa .Cat ==nil {_eeg ._cfa .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_eeg ._cfa .Cat );};

// AddAreaChart adds a new area chart to a chart.
func (_dee Chart )AddAreaChart ()AreaChart {_acdf :=_bb .NewCT_PlotAreaChoice ();_dee ._gcd .Chart .PlotArea .Choice =append (_dee ._gcd .Chart .PlotArea .Choice ,_acdf );_acdf .AreaChart =_bb .NewCT_AreaChart ();_ad :=AreaChart {_cada :_acdf .AreaChart };_ad .InitializeDefaults ();return _ad ;};func (_aeg ValueAxis )SetMinorTickMark (m _bb .ST_TickMark ){if m ==_bb .ST_TickMarkUnset {_aeg ._gede .MinorTickMark =nil ;}else {_aeg ._gede .MinorTickMark =_bb .NewCT_TickMark ();_aeg ._gede .MinorTickMark .ValAttr =m ;};};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_cbf *_bb .CT_RadarChart ;};

// Order returns the order of the series
func (_aff LineChartSeries )Order ()uint32 {return _aff ._cfa .Order .ValAttr };

// AddSeries adds a default series to a Scatter chart.
func (_edg ScatterChart )AddSeries ()ScatterChartSeries {_ba :=_edg .nextColor (len (_edg ._baec .Ser ));_df :=_bb .NewCT_ScatterSer ();_edg ._baec .Ser =append (_edg ._baec .Ser ,_df );_df .Idx .ValAttr =uint32 (len (_edg ._baec .Ser )-1);_df .Order .ValAttr =uint32 (len (_edg ._baec .Ser )-1);_cdbe :=ScatterChartSeries {_df };_cdbe .InitializeDefaults ();_cdbe .Marker ().Properties ().LineProperties ().SetSolidFill (_ba );_cdbe .Marker ().Properties ().SetSolidFill (_ba );return _cdbe ;};

// AddPieChart adds a new pie chart to a chart.
func (_adac Chart )AddPieChart ()PieChart {_cadf :=_bb .NewCT_PlotAreaChoice ();_adac ._gcd .Chart .PlotArea .Choice =append (_adac ._gcd .Chart .PlotArea .Choice ,_cadf );_cadf .PieChart =_bb .NewCT_PieChart ();_deeg :=PieChart {_fgg :_cadf .PieChart };_deeg .InitializeDefaults ();return _deeg ;};

// Values returns the value data source.
func (_bga BubbleChartSeries )Values ()NumberDataSource {if _bga ._bbd .YVal ==nil {_bga ._bbd .YVal =_bb .NewCT_NumDataSource ();};return MakeNumberDataSource (_bga ._bbd .YVal );};

// CategoryAxis returns the category data source.
func (_beaf AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _beaf ._gebb .Cat ==nil {_beaf ._gebb .Cat =_bb .NewCT_AxDataSource ();};return MakeAxisDataSource (_beaf ._gebb .Cat );};

// X returns the inner wrapped XML type.
func (_bfa ScatterChart )X ()*_bb .CT_ScatterChart {return _bfa ._baec };type Title struct{_cc *_bb .CT_Title };

// AddSeries adds a default series to an Radar chart.
func (_gcbf RadarChart )AddSeries ()RadarChartSeries {_gga :=_gcbf .nextColor (len (_gcbf ._cbf .Ser ));_daa :=_bb .NewCT_RadarSer ();_gcbf ._cbf .Ser =append (_gcbf ._cbf .Ser ,_daa );_daa .Idx .ValAttr =uint32 (len (_gcbf ._cbf .Ser )-1);_daa .Order .ValAttr =uint32 (len (_gcbf ._cbf .Ser )-1);_fbd :=RadarChartSeries {_daa };_fbd .InitializeDefaults ();_fbd .Properties ().SetSolidFill (_gga );return _fbd ;};

// Index returns the index of the series
func (_eac SurfaceChartSeries )Index ()uint32 {return _eac ._aegb .Idx .ValAttr };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_dgfe Chart )AddSurface3DChart ()Surface3DChart {_gceb :=_bb .NewCT_PlotAreaChoice ();_dgfe ._gcd .Chart .PlotArea .Choice =append (_dgfe ._gcd .Chart .PlotArea .Choice ,_gceb );_gceb .Surface3DChart =_bb .NewCT_Surface3DChart ();_aga (_dgfe ._gcd .Chart );_efec :=Surface3DChart {_edb :_gceb .Surface3DChart };_efec .InitializeDefaults ();return _efec ;};type DateAxis struct{_eab *_bb .CT_DateAx };

// InitializeDefaults initializes an Pie series to the default values.
func (_caf PieChartSeries )InitializeDefaults (){};

// InitializeDefaults initializes an Radar series to the default values.
func (_cfg RadarChartSeries )InitializeDefaults (){};func (_fda Bar3DChart )AddAxis (axis Axis ){_ebeg :=_bb .NewCT_UnsignedInt ();_ebeg .ValAttr =axis .AxisID ();_fda ._dec .AxId =append (_fda ._dec .AxId ,_ebeg );};