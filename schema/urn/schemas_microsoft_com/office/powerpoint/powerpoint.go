//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_gf "encoding/xml";_afb "fmt";_efb "github.com/unidoc/unioffice";);func (_cb *Iscomment )UnmarshalXML (d *_gf .Decoder ,start _gf .StartElement )error {_cb .CT_Empty =*NewCT_Empty ();for {_c ,_fea :=d .Token ();if _fea !=nil {return _afb .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_fea );};if _ef ,_gff :=_c .(_gf .EndElement );_gff &&_ef .Name ==start .Name {break ;};};return nil ;};func (_dgc *CT_Empty )MarshalXML (e *_gf .Encoder ,start _gf .StartElement )error {e .EncodeToken (start );e .EncodeToken (_gf .EndElement {Name :start .Name });return nil ;};func (_gcc *CT_Rel )MarshalXML (e *_gf .Encoder ,start _gf .StartElement )error {if _gcc .IdAttr !=nil {start .Attr =append (start .Attr ,_gf .Attr {Name :_gf .Name {Local :"\u0069\u0064"},Value :_afb .Sprintf ("\u0025\u0076",*_gcc .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_gf .EndElement {Name :start .Name });return nil ;};type CT_Empty struct{};

// Validate validates the CT_Rel and its children
func (_ea *CT_Rel )Validate ()error {return _ea .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func NewCT_Empty ()*CT_Empty {_gc :=&CT_Empty {};return _gc };

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_de *CT_Rel )ValidateWithPath (path string )error {return nil };func NewTextdata ()*Textdata {_fe :=&Textdata {};_fe .CT_Rel =*NewCT_Rel ();return _fe };

// Validate validates the CT_Empty and its children
func (_bg *CT_Empty )Validate ()error {return _bg .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};type Textdata struct{CT_Rel };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_e *Textdata )ValidateWithPath (path string )error {if _fed :=_e .CT_Rel .ValidateWithPath (path );_fed !=nil {return _fed ;};return nil ;};func (_f *CT_Empty )UnmarshalXML (d *_gf .Decoder ,start _gf .StartElement )error {for {_bf ,_ae :=d .Token ();if _ae !=nil {return _afb .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_ae );};if _dad ,_eac :=_bf .(_gf .EndElement );_eac &&_dad .Name ==start .Name {break ;};};return nil ;};func NewIscomment ()*Iscomment {_ca :=&Iscomment {};_ca .CT_Empty =*NewCT_Empty ();return _ca };func (_db *Iscomment )MarshalXML (e *_gf .Encoder ,start _gf .StartElement )error {start .Attr =append (start .Attr ,_gf .Attr {Name :_gf .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_gf .Attr {Name :_gf .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _db .CT_Empty .MarshalXML (e ,start );};

// Validate validates the Iscomment and its children
func (_abc *Iscomment )Validate ()error {return _abc .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_afbb *CT_Empty )ValidateWithPath (path string )error {return nil };type CT_Rel struct{IdAttr *string ;};func (_dea *CT_Rel )UnmarshalXML (d *_gf .Decoder ,start _gf .StartElement )error {for _ ,_ac :=range start .Attr {if _ac .Name .Local =="\u0069\u0064"{_cae ,_da :=_ac .Value ,error (nil );if _da !=nil {return _da ;};_dea .IdAttr =&_cae ;continue ;};};for {_aad ,_bd :=d .Token ();if _bd !=nil {return _afb .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_bd );};if _g ,_bc :=_aad .(_gf .EndElement );_bc &&_g .Name ==start .Name {break ;};};return nil ;};

// Validate validates the Textdata and its children
func (_cf *Textdata )Validate ()error {return _cf .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_gd *Textdata )MarshalXML (e *_gf .Encoder ,start _gf .StartElement )error {start .Attr =append (start .Attr ,_gf .Attr {Name :_gf .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_gf .Attr {Name :_gf .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _gd .CT_Rel .MarshalXML (e ,start );};func (_dgg *Textdata )UnmarshalXML (d *_gf .Decoder ,start _gf .StartElement )error {_dgg .CT_Rel =*NewCT_Rel ();for _ ,_dg :=range start .Attr {if _dg .Name .Local =="\u0069\u0064"{_aa ,_gg :=_dg .Value ,error (nil );if _gg !=nil {return _gg ;};_dgg .IdAttr =&_aa ;continue ;};};for {_acb ,_a :=d .Token ();if _a !=nil {return _afb .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_a );};if _gfc ,_af :=_acb .(_gf .EndElement );_af &&_gfc .Name ==start .Name {break ;};};return nil ;};type Iscomment struct{CT_Empty };

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_b *Iscomment )ValidateWithPath (path string )error {if _ad :=_b .CT_Empty .ValidateWithPath (path );_ad !=nil {return _ad ;};return nil ;};func NewCT_Rel ()*CT_Rel {_d :=&CT_Rel {};return _d };func init (){_efb .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_efb .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_efb .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_efb .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};