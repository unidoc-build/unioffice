//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Match (pattern ,name string )(_bba bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_af :=make ([]rune ,0,len (name ));_gb :=make ([]rune ,0,len (pattern ));for _ ,_c :=range name {_af =append (_af ,_c );};for _ ,_bg :=range pattern {_gb =append (_gb ,_bg );};_e :=false ;return _ca (_af ,_gb ,_e );};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_cg :=make ([]rune ,0,len (name ));_gce :=make ([]rune ,0,len (pattern ));for _ ,_df :=range name {_cg =append (_cg ,_df );};for _ ,_f :=range pattern {_gce =append (_gce ,_f );};_dfb :=true ;return _ca (_cg ,_gce ,_dfb );};func _gc (_ecc ,_bbag []rune ,_ceg int )int {for len (_bbag )> 0{switch _bbag [0]{default:if len (_ecc )==0{return -1;};if _ecc [0]!=_bbag [0]{return _gc (_ecc [1:],_bbag ,_ceg +1);};case '?':if len (_ecc )==0{return -1;};case '*':if len (_ecc )==0{return -1;};_ff :=_gc (_ecc ,_bbag [1:],_ceg );if _ff !=-1{return _ceg ;}else {_ff =_gc (_ecc [1:],_bbag ,_ceg );if _ff !=-1{return _ceg ;}else {return -1;};};};_ecc =_ecc [1:];_bbag =_bbag [1:];};return _ceg ;};func _ca (_b ,_d []rune ,_dc bool )bool {for len (_d )> 0{switch _d [0]{default:if len (_b )==0||_b [0]!=_d [0]{return false ;};case '?':if len (_b )==0&&!_dc {return false ;};case '*':return _ca (_b ,_d [1:],_dc )||(len (_b )> 0&&_ca (_b [1:],_d ,_dc ));};_b =_b [1:];_d =_d [1:];};return len (_b )==0&&len (_d )==0;};func Index (pattern ,name string )(_bb int ){if pattern ==""||pattern =="\u002a"{return 0;};_gd :=make ([]rune ,0,len (name ));_gba :=make ([]rune ,0,len (pattern ));for _ ,_be :=range name {_gd =append (_gd ,_be );};for _ ,_a :=range pattern {_gba =append (_gba ,_a );};return _gc (_gd ,_gba ,0);};