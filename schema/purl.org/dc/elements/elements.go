//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_fd "encoding/xml";_ef "fmt";_ed "github.com/unidoc/unioffice";);

// ValidateWithPath validates the ElementsGroupChoice and its children, prefixing error messages with path
func (_dc *ElementsGroupChoice )ValidateWithPath (path string )error {for _bd ,_cgf :=range _dc .Any {if _ebc :=_cgf .ValidateWithPath (_ef .Sprintf ("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d",path ,_bd ));_ebc !=nil {return _ebc ;};};return nil ;};func (_ca *ElementsGroupChoice )MarshalXML (e *_fd .Encoder ,start _fd .StartElement )error {if _ca .Any !=nil {_de :=_fd .StartElement {Name :_fd .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};for _ ,_aa :=range _ca .Any {e .EncodeElement (_aa ,_de );};};return nil ;};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_fda *Any )ValidateWithPath (path string )error {if _bdg :=_fda .SimpleLiteral .ValidateWithPath (path );_bdg !=nil {return _bdg ;};return nil ;};

// Validate validates the ElementContainer and its children
func (_ac *ElementContainer )Validate ()error {return _ac .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};func NewElementsGroup ()*ElementsGroup {_e :=&ElementsGroup {};return _e };type ElementContainer struct{Choice []*ElementsGroupChoice ;};func (_cd *ElementsGroup )UnmarshalXML (d *_fd .Decoder ,start _fd .StartElement )error {_gg :for {_dcd ,_eeg :=d .Token ();if _eeg !=nil {return _eeg ;};switch _f :=_dcd .(type ){case _fd .StartElement :switch _f .Name {case _fd .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_gd :=NewElementsGroupChoice ();if _ba :=d .DecodeElement (&_gd .Any ,&_f );_ba !=nil {return _ba ;};_cd .Choice =append (_cd .Choice ,_gd );default:_ed .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_f .Name );if _bfd :=d .Skip ();_bfd !=nil {return _bfd ;};};case _fd .EndElement :break _gg ;case _fd .CharData :};};return nil ;};func (_bag *Any )UnmarshalXML (d *_fd .Decoder ,start _fd .StartElement )error {_bag .SimpleLiteral =*NewSimpleLiteral ();for {_bf ,_cc :=d .Token ();if _cc !=nil {return _ef .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_cc );};if _dce ,_g :=_bf .(_fd .EndElement );_g &&_dce .Name ==start .Name {break ;};};return nil ;};func NewElementContainer ()*ElementContainer {_fa :=&ElementContainer {};return _fa };func NewElementsGroupChoice ()*ElementsGroupChoice {_gc :=&ElementsGroupChoice {};return _gc };func (_eff *ElementsGroup )MarshalXML (e *_fd .Encoder ,start _fd .StartElement )error {if _eff .Choice !=nil {for _ ,_cbe :=range _eff .Choice {_cbe .MarshalXML (e ,_fd .StartElement {});};};return nil ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_ga *ElementsGroup )ValidateWithPath (path string )error {for _ffd ,_c :=range _ga .Choice {if _bdf :=_c .ValidateWithPath (_ef .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_ffd ));_bdf !=nil {return _bdf ;};};return nil ;};

// Validate validates the Any and its children
func (_ab *Any )Validate ()error {return _ab .ValidateWithPath ("\u0041\u006e\u0079")};func NewAny ()*Any {_fg :=&Any {};_fg .SimpleLiteral =*NewSimpleLiteral ();return _fg };func (_ee *ElementsGroupChoice )UnmarshalXML (d *_fd .Decoder ,start _fd .StartElement )error {_gcb :for {_gdb ,_bea :=d .Token ();if _bea !=nil {return _bea ;};switch _bg :=_gdb .(type ){case _fd .StartElement :switch _bg .Name {case _fd .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_bc :=NewAny ();if _a :=d .DecodeElement (_bc ,&_bg );_a !=nil {return _a ;};_ee .Any =append (_ee .Any ,_bc );default:_ed .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072ou\u0070\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076",_bg .Name );if _aff :=d .Skip ();_aff !=nil {return _aff ;};};case _fd .EndElement :break _gcb ;case _fd .CharData :};};return nil ;};func (_d *SimpleLiteral )UnmarshalXML (d *_fd .Decoder ,start _fd .StartElement )error {for {_baf ,_ff :=d .Token ();if _ff !=nil {return _ef .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ff );};if _dgc ,_df :=_baf .(_fd .EndElement );_df &&_dgc .Name ==start .Name {break ;};};return nil ;};func (_bb *Any )MarshalXML (e *_fd .Encoder ,start _fd .StartElement )error {return _bb .SimpleLiteral .MarshalXML (e ,start );};type ElementsGroup struct{Choice []*ElementsGroupChoice ;};func (_eb *SimpleLiteral )MarshalXML (e *_fd .Encoder ,start _fd .StartElement )error {e .EncodeToken (start );e .EncodeToken (_fd .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementsGroup and its children
func (_ae *ElementsGroup )Validate ()error {return _ae .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};

// Validate validates the ElementsGroupChoice and its children
func (_ace *ElementsGroupChoice )Validate ()error {return _ace .ValidateWithPath ("\u0045\u006c\u0065\u006den\u0074\u0073\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u006f\u0069\u0063\u0065");};func NewSimpleLiteral ()*SimpleLiteral {_bbf :=&SimpleLiteral {};return _bbf };

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_edg *SimpleLiteral )ValidateWithPath (path string )error {return nil };func (_fc *ElementContainer )MarshalXML (e *_fd .Encoder ,start _fd .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _fc .Choice !=nil {for _ ,_cca :=range _fc .Choice {_cca .MarshalXML (e ,_fd .StartElement {});};};e .EncodeToken (_fd .EndElement {Name :start .Name });return nil ;};func (_ccac *ElementContainer )UnmarshalXML (d *_fd .Decoder ,start _fd .StartElement )error {_efg :for {_ec ,_b :=d .Token ();if _b !=nil {return _b ;};switch _cg :=_ec .(type ){case _fd .StartElement :switch _cg .Name {case _fd .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_fff :=NewElementsGroupChoice ();if _bce :=d .DecodeElement (&_fff .Any ,&_cg );_bce !=nil {return _bce ;};_ccac .Choice =append (_ccac .Choice ,_fff );default:_ed .Log ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_cg .Name );if _afg :=d .Skip ();_afg !=nil {return _afg ;};};case _fd .EndElement :break _efg ;case _fd .CharData :};};return nil ;};type ElementsGroupChoice struct{Any []*Any ;};

// Validate validates the SimpleLiteral and its children
func (_gdc *SimpleLiteral )Validate ()error {return _gdc .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};type SimpleLiteral struct{};type Any struct{SimpleLiteral };

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_be *ElementContainer )ValidateWithPath (path string )error {for _db ,_fe :=range _be .Choice {if _cb :=_fe .ValidateWithPath (_ef .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_db ));_cb !=nil {return _cb ;};};return nil ;};func init (){_ed .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );_ed .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );_ed .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_ed .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );};