//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, gooxml leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the gooxml evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_ddfd "bytes";_befc "fmt";_bfgbf "github.com/unidoc/unioffice";_acfd "github.com/unidoc/unioffice/internal/mergesort";_ege "github.com/unidoc/unioffice/internal/wildcard";_bgaec "github.com/unidoc/unioffice/spreadsheet/format";_ecga "github.com/unidoc/unioffice/spreadsheet/reference";_cdd "github.com/unidoc/unioffice/spreadsheet/update";_begd "io";_cggd "math";_dadgf "math/big";_gfga "math/rand";_dfde "regexp";_ae "sort";_fbgg "strconv";_fged "strings";_dafdg "sync";_gbcec "time";_eacd "unicode";);func _ggec (_fcafg string )*criteriaRegex {_bgeg :=&criteriaRegex {};if _fcafg ==""{return _bgeg ;};if _aegb :=_gacg .FindStringSubmatch (_fcafg );len (_aegb )> 1{_bgeg ._cbccg =_bc ;_bgeg ._bgef =_aegb [1];}else if _fggd :=_bdaf .FindStringSubmatch (_fcafg );len (_fggd )> 1{_bgeg ._cbccg =_bc ;_bgeg ._bgef =_fggd [1];}else if _fdafd :=_egdgf .FindStringSubmatch (_fcafg );len (_fdafd )> 1{_bgeg ._cbccg =_eddfa ;_bgeg ._bgef =_fdafd [1];}else if _cedea :=_ddgfb .FindStringSubmatch (_fcafg );len (_cedea )> 1{_bgeg ._cbccg =_baaaf ;_bgeg ._bgef =_cedea [1];}else if _adgf :=_afeee .FindStringSubmatch (_fcafg );len (_adgf )> 1{_bgeg ._cbccg =_ccff ;_bgeg ._bgef =_adgf [1];}else if _aaag :=_fabb .FindStringSubmatch (_fcafg );len (_aaag )> 1{_bgeg ._cbccg =_ceda ;_bgeg ._bgef =_aaag [1];};return _bgeg ;};func (_dbbff *Lexer )Next ()*node {_dbbff ._fega .Lock ();defer _dbbff ._fega .Unlock ();if len (_dbbff ._ccecd )> 0{_feae :=_dbbff ._ccecd [0];_dbbff ._ccecd =_dbbff ._ccecd [1:];return _feae ;};return _dbbff .nextRaw ();};const _fcba =_deeg +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _ebfec (_bbgc int ,_aad _gbcec .Month ,_dgag int )int64 {if _bbgc ==1900&&int (_aad )<=2{_dgag --;};_bcccf :=_gbcec .Date (_bbgc ,_aad ,_dgag ,0,0,0,0,_gbcec .UTC );return _bcccf .Unix ();};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdab :=args [0].AsNumber ();_fgba :=args [1].AsNumber ();_dgdc :=args [2].AsNumber ();_caec :=args [3].ListValues ();if _gdab .Type !=ResultTypeNumber ||_fgba .Type !=ResultTypeNumber ||_dgdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cbdcb :=float64 (0);for _dedc ,_bcf :=range _caec {_cbdcb +=_bcf .ValueNumber *_cggd .Pow (_gdab .ValueNumber ,_fgba .ValueNumber +float64 (_dedc )*_dgdc .ValueNumber );};return MakeNumberResult (_cbdcb );};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcaff :=args [0].AsNumber ();_dfbge :=args [1].AsNumber ();if _dcaff .Type !=ResultTypeNumber ||_dfbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfbge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cggd .Trunc (_dcaff .ValueNumber /_dfbge .ValueNumber ));};

// Eval evaluates the binary expression using the context given.
func (_ggdf BinaryExpr )String ()string {_acc :="";switch _ggdf ._ccae {case BinOpTypePlus :_acc ="\u002b";case BinOpTypeMinus :_acc ="\u002d";case BinOpTypeMult :_acc ="\u002a";case BinOpTypeDiv :_acc ="\u002f";case BinOpTypeExp :_acc ="\u005e";case BinOpTypeLT :_acc ="\u003c";case BinOpTypeGT :_acc ="\u003e";case BinOpTypeEQ :_acc ="\u003d";case BinOpTypeLEQ :_acc ="\u003c\u003d";case BinOpTypeGEQ :_acc ="\u003e\u003d";case BinOpTypeNE :_acc ="\u003c\u003e";case BinOpTypeConcat :_acc ="\u0026";};return _ggdf ._feaf .String ()+_acc +_ggdf ._cfde .String ();};

// Reference returns a string reference value to a range.
func (_bcbg Range )Reference (ctx Context ,ev Evaluator )Reference {_cgbd :=_bcbg ._bedaba .Reference (ctx ,ev );_ggbg :=_bcbg ._efbeb .Reference (ctx ,ev );if _cgbd .Type ==ReferenceTypeCell &&_ggbg .Type ==ReferenceTypeCell {return MakeRangeReference (_cfag (_cgbd ,_ggbg ));};return ReferenceInvalid ;};const _ffab ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_deeg +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _dgagf ="\u005e\u0028\u0028"+_cdfb +"\u007c"+_fcba +"\u007c"+_gggd +"\u007c"+_ffab +"\u0029\u0020\u0029\u003f";

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfg ,_ggcb ,_bfbad :=_bgacc (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _bfbad .Type ==ResultTypeError {return _bfbad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgga :=_ggcb -_dfg ;if _dgga > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_gced :=args [2].ValueNumber ;if _gced <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_gced )/(360-_gced *_dgga ));};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebcge :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aagab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fabf :=args [2].ValueNumber ;if _fabf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcda :=args [3].ValueNumber ;if _fcda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fcda > _fabf {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_cagef :=(_ebcge -_aagab )*(_fabf -_fcda +1)*2;_efdg :=_fabf *(_fabf +1);return MakeNumberResult (_cagef /_efdg );};var _eafg string =string ([]byte {92});

// Eval evaluates and returns a string.
func (_dcecb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_dcecb ._fbbg )};var _bfff _dafdg .Mutex ;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_dedcg PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ebaad :=_dedcg ._cdbfa .Reference (ctx ,ev );_gefd :=_dedcg ._agb .Reference (ctx ,ev );_acbg :=_dedcg ._bfaa .Reference (ctx ,ev );switch _ebaad .Type {case ReferenceTypeSheet :_cdbc :=_cedeb (_ebaad ,_gefd ,_acbg );if _gefd .Type ==ReferenceTypeCell &&_acbg .Type ==ReferenceTypeCell {if _efda ,_fca :=ev .GetFromCache (_cdbc );_fca {return _efda ;}else {_fdag :=_bedb (ctx .Sheet (_ebaad .Value ),ev ,_gefd .Value ,_acbg .Value );ev .SetCache (_cdbc ,_fdag );return _fdag ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cdbc );default:return MakeErrorResult (_befc .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebaad .Type ));};};func (_fcffb *defEval )checkLastEvalIsRef (_feegg Context ,_agdd Expression ){switch _agdd .(type ){case FunctionCall :switch _agdd .(FunctionCall )._fgdf {case "\u0049\u0053\u0052E\u0046":for _ ,_gbeb :=range _agdd .(FunctionCall )._ggad {switch _gbeb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_ece :=_gbeb .Eval (_feegg ,_fcffb );_fcffb ._ebg =!(_ece .Type ==ResultTypeError &&_ece .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fcffb ._ebg =false ;};};};};};func _bcdbd (_dfeg string )bool {for _ ,_ebafe :=range _dbgd {_eabe :=_ebafe .FindStringSubmatch (_dfeg );if len (_eabe )> 1{return true ;};};return false ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_eef (args ,_agcg ))};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbb :=int (args [0].ValueNumber );return MakeBoolResult (_fbb !=_fbb /2*2);};func _cfccf (_fccb []Result ,_fgfe bool ,_ecgb string )Result {var _agff ,_fgea string ;if _fgfe {_agff ="\u0074\u0068\u0072e\u0065";_fgea ="\u006f\u0064\u0064";}else {_agff ="\u0074\u0077\u006f";_fgea ="\u0065\u0076\u0065\u006e";};_egeed :=len (_fccb );if (_fgfe &&_egeed < 3)||(!_fgfe &&_egeed < 2){return MakeErrorResult (_ecgb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_agff +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_egeed /2*2==_egeed )==_fgfe {return MakeErrorResult (_ecgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fgea +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_edb :=-1;_ebed :=-1;for _bfag :=0;_bfag < _egeed ;_bfag +=2{_bdaa :=_fccb [_bfag ];if _bdaa .Type !=ResultTypeArray &&_bdaa .Type !=ResultTypeList {return MakeErrorResult (_ecgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_fagfd :=_abgcd (_bdaa );if _ebed ==-1{_ebed =len (_fagfd );_edb =len (_fagfd [0]);}else if len (_fagfd )!=_ebed ||len (_fagfd [0])!=_edb {return MakeErrorResult (_ecgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fgfe &&_bfag ==0{_bfag --;};};return _bdgb ;};

// String returns an empty string for Error.
func (_bfeag Error )String ()string {return ""};func _faeb (_eebb []Result ,_aefd string )(float64 ,float64 ,Result ){if len (_eebb )!=2{return 0,0,MakeErrorResult (_aefd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _eebb [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_aefd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbg :=_eebb [0].ValueNumber ;if _eebb [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_aefd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acgce :=float64 (int (_eebb [1].ValueNumber ));if _acgce < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_aefd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _cbg ,_acgce ,_bdgb ;};type amorArgs struct{_aacg float64 ;_gage float64 ;_fadc float64 ;_baab float64 ;_dccd int ;_ecb float64 ;_bdebf int ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_eeff string ,_ffff Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_edcdg string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_gbcec .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_efcgb int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_egg string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_cfed string )string ;

// GetFormat returns if cell is protected.
GetLocked (_eabg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cga string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_aabff string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_af ,_bacd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_agdac string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ffaa string ,_gegf bool );

// NamedRange returns a named range.
NamedRange (_edge string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ccce ,_cbdbe uint32 );};const _cfddg =57351;func _ddbf ()evCache {_dfgg :=evCache {};_dfgg ._dabad =make (map[string ]Result );_dfgg ._gfeae =&_dafdg .Mutex {};return _dfgg ;};func (_ccdf BinOpType )String ()string {if _ccdf >=BinOpType (len (_eede )-1){return _befc .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ccdf );};return _egbe [_eede [_ccdf ]:_eede [_ccdf +1]];};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cfdda :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_cfdda *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ccgca :=_abgcd (args [1]);for _ ,_cagcb :=range _ccgca {for _ ,_aadbf :=range _cagcb {if _aadbf .Type !=ResultTypeNumber ||_aadbf .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_cfdda *=1.0+_aadbf .ValueNumber ;};};return MakeNumberResult (_cfdda );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};const (_bcdc countMode =iota ;_agcg ;_beaag ;);const _dcga =57377;func (_dcebb Result )String ()string {return _dcebb .Value ()};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ceb :=args [0];if _ceb .Type ==ResultTypeError {return _ceb ;};if _ceb .Type !=ResultTypeString &&_ceb .Type !=ResultTypeNumber &&_ceb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ead :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gaae :=int (args [1].ValueNumber );if _gaae < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dead :=int (args [2].ValueNumber );if _dead < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bbe :=len (_ead );if _gaae > _bbe {return MakeStringResult ("");};_gaae --;_bb :=_gaae +_dead ;if _bb > _bbe +1{return MakeStringResult (_ead [_gaae :]);}else {return MakeStringResult (_ead [_gaae :_bb ]);};};const _afcdc =57349;func _eeagf (_dgef ,_geb Result ,_aecgb string )(*xargs ,Result ){if _dgef .Type !=ResultTypeList &&_dgef .Type !=ResultTypeArray {return nil ,MakeErrorResult (_aecgb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_gffb :=_abgcd (_dgef );_feaaf :=[]float64 {};for _ ,_gbgdd :=range _gffb {for _ ,_gagg :=range _gbgdd {if _gagg .Type ==ResultTypeNumber &&!_gagg .IsBoolean {_feaaf =append (_feaaf ,_gagg .ValueNumber );}else {return nil ,MakeErrorResult (_aecgb +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_agcf :=len (_feaaf );if len (_feaaf )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _geb .Type !=ResultTypeList &&_geb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_aecgb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_faee :=_abgcd (_geb );_feda :=[]float64 {};_aaggd :=0.0;for _ ,_eafa :=range _faee {for _ ,_ddgg :=range _eafa {if _ddgg .Type ==ResultTypeNumber &&!_ddgg .IsBoolean {_dfgb :=float64 (int (_ddgg .ValueNumber ));if _dfgb < _aaggd {return nil ,MakeErrorResultType (ErrorTypeNum ,_aecgb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_feda =append (_feda ,_dfgb );_aaggd =_dfgb ;}else {return nil ,MakeErrorResult (_aecgb +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_feda )!=_agcf {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_feaaf ,_feda },MakeEmptyResult ();};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dagb :=args [0].AsNumber ();if _dagb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eba :=float64 (1);if _dagb .ValueNumber < 0{_eba =-1;};if len (args )> 1{_acfa :=args [1].AsNumber ();if _acfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_eba =_cggd .Abs (_acfa .ValueNumber );};if len (args )==1{return MakeNumberResult (_cggd .Floor (_dagb .ValueNumber ));};_cggee :=_dagb .ValueNumber ;_cggee ,_cdfeg :=_cggd .Modf (_cggee /_eba );if _cdfeg !=0{if _dagb .ValueNumber < 0{_cggee --;};};return MakeNumberResult (_cggee *_eba );};func _adc (_gca ,_gdcd float64 ,_cdeda ,_afdae int )float64 {_fcge :=_cad (_gca );_bded :=_cad (_gdcd );_geega :=_ddd (_fcge ,_bded ,_cdeda ,_afdae );return _agea (_geega ,_fcge ,_afdae );};func _gbee (_dbdc [][]Result )float64 {if len (_dbdc )==2{_dbgf :=_dbdc [0][0].AsNumber ();_bg :=_dbdc [0][1].AsNumber ();_acac :=_dbdc [1][0].AsNumber ();_fdbbc :=_dbdc [1][1].AsNumber ();if _dbgf .Type !=ResultTypeNumber ||_bg .Type !=ResultTypeNumber ||_acac .Type !=ResultTypeNumber ||_fdbbc .Type !=ResultTypeNumber {return _cggd .NaN ();};return _dbgf .ValueNumber *_fdbbc .ValueNumber -_acac .ValueNumber *_bg .ValueNumber ;};_afcc :=float64 (0);_deega :=float64 (1);for _bdeb :=range _dbdc {_afcc +=_deega *_dbdc [0][_bdeb ].ValueNumber *_gbee (_cgfca (_dbdc ,_bdeb ));_deega *=-1;};return _afcc ;};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_bgc :=len (args );if _bgc !=4&&_bgc !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aggd ,_gcecc ,_fff :=_bgacc (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _fff .Type ==ResultTypeError {return _fff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbd :=args [2].ValueNumber ;if _cbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_beade :=args [3].ValueNumber ;if _beade <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_gge :=0;if _bgc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gge =int (args [4].ValueNumber );if !_ebf (_gge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_aadea ,_fff :=_gceb (_aggd ,_gcecc ,_gge );if _fff .Type ==ResultTypeError {return _fff ;};return MakeNumberResult ((_beade /_cbd -1)/_aadea );};func _abg (_bdbe ,_dgfa ,_fdf ,_aba int )int {if _dgfa > _fdf {return 0;};if _fdfd (_aba ){return (_fdf -_dgfa +1)*30;};_cdgbb :=0;for _ea :=_dgfa ;_ea <=_fdf ;_ea ++{_cdgbb +=_fcaa (_bdbe ,_ea );};return _cdgbb ;};const _ffad =57371;func _gaea (_dgaf []Result ,_dbdbf []string ,_bgec bool )[]string {for _ ,_ggcbb :=range _dgaf {switch _ggcbb .Type {case ResultTypeEmpty :if !_bgec {_dbdbf =append (_dbdbf ,"");};case ResultTypeString :if _ggcbb .ValueString !=""||!_bgec {_dbdbf =append (_dbdbf ,_ggcbb .ValueString );};case ResultTypeNumber :_dbdbf =append (_dbdbf ,_ggcbb .Value ());case ResultTypeList :_dbdbf =_eegc (_dbdbf ,_gaea (_ggcbb .ValueList ,[]string {},_bgec ));case ResultTypeArray :for _ ,_fa :=range _ggcbb .ValueArray {_dbdbf =_eegc (_dbdbf ,_gaea (_fa ,[]string {},_bgec ));};};};return _dbdbf ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_gfe :=len (args );if (_gfe !=2&&_gfe !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgde :=0;if _gfe ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgde =int (args [2].ValueNumber );if !_ebf (_bgde ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aecbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afef :=args [1].ValueNumber ;_dbg ,_cedgb :=_gceb (_aecbc ,_afef ,_bgde );if _cedgb .Type ==ResultTypeError {return _cedgb ;};return MakeNumberResult (_dbg );};func _bba (_ccac string ,_becc *_cdd .UpdateQuery )string {_faf ,_fdgfg :=_ecga .ParseCellReference (_ccac );if _fdgfg !=nil {return "\u0023\u0052\u0045F\u0021";};if _becc .UpdateType ==_cdd .UpdateActionRemoveColumn {_ggac :=_becc .ColumnIdx ;_bbc :=_faf .ColumnIdx ;if _bbc < _ggac {return _ccac ;}else if _bbc ==_ggac {return "\u0023\u0052\u0045F\u0021";}else {return _faf .Update (_cdd .UpdateActionRemoveColumn ).String ();};};return _ccac ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgdc :=args [0].AsNumber ();if _bgdc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgbbfd ,_bbbd :=_cggd .Modf (_bgdc .ValueNumber );if _bbbd < 0{_cgbbfd --;};return MakeNumberResult (_cgbbfd );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// String returns a string of a range.
func (_fcbg Range )String ()string {return _befc .Sprintf ("\u0025\u0073\u003a%\u0073",_fcbg ._bedaba .String (),_fcbg ._efbeb .String ());};func _fgac (_fbeg ,_bgfa _gbcec .Time )bool {_afcfd :=_fbeg .Unix ();_agca :=_bgfa .Unix ();_egcg :=_fbeg .Year ();_deca :=_ebfec (_egcg ,_gbcec .March ,1);if _dcec (_egcg )&&_afcfd < _deca &&_agca >=_deca {return true ;};var _bea =_bgfa .Year ();var _fbdf =_ebfec (_bea ,_gbcec .March ,1);return (_dcec (_bea )&&_agca >=_fbdf &&_afcfd < _fbdf );};func (_eaab *evCache )SetCache (key string ,value Result ){_eaab ._gfeae .Lock ();_eaab ._dabad [key ]=value ;_eaab ._gfeae .Unlock ();};func _fcgaa (_cbfff ,_dddc ,_aceff float64 )float64 {return (_cbfff *3600+_dddc *60+_aceff )/86400};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cedad :=args [0];if _cedad .Type ==ResultTypeList {_fgccg :=[][]Result {};for _ ,_dfc :=range _cedad .ValueList {_fgccg =append (_fgccg ,[]Result {_dfc });};return MakeArrayResult (_fgccg );};_gbab :=make ([][]Result ,len (_cedad .ValueArray [0]));for _ ,_bgge :=range _cedad .ValueArray {for _cdfe ,_ebgb :=range _bgge {_gbab [_cdfe ]=append (_gbab [_cdfe ],_ebgb );};};return MakeArrayResult (_gbab );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_ggd PrefixHorizontalRange )Update (q *_cdd .UpdateQuery )Expression {return _ggd };

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_dcfd ,_ccea :=_aefc (args ,true );if _ccea ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_dcfd /_ccea );};func _ffgd (_efgaa string ,_efcde []Result )(*parsedReplaceObject ,Result ){if len (_efcde )!=4{return nil ,MakeErrorResult (_efgaa +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _efcde [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_efgaa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_afca :=_efcde [0].ValueString ;if _efcde [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efgaa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_abac :=int (_efcde [1].ValueNumber )-1;if _efcde [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efgaa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ecbc :=int (_efcde [2].ValueNumber );if _efcde [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_efgaa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_ggbbf :=_efcde [3].ValueString ;return &parsedReplaceObject {_afca ,_abac ,_ecbc ,_ggbbf },_bdgb ;};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efbb ,_fedga ,_gbeda :=_bgacc (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _gbeda .Type ==ResultTypeError {return _gbeda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfb :=_fedga -_efbb ;if _ebfb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_ebbgc :=args [2].ValueNumber ;if _ebbgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_ebbgc *_ebfb /360));};var _egbfc int64 =_ebfec (1900,_gbcec .January ,1);

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faba :=args [0].ValueNumber ;if _faba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabg :=args [1].ValueNumber ;if _aabg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbcf :=args [2].ValueNumber ;if _gbcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_cggd .Log10 (_gbcf )-_cggd .Log10 (_aabg ))/_cggd .Log10 (1+_faba ));};var _agf =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedcb :=args [0].AsNumber ();if _bedcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_cggd .Pi /180.0*_bedcb .ValueNumber );};const _cdgfa =57348;func init (){_bfdbb ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_dfggb ,_aceef :=_ecda (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _aceef .Type ==ResultTypeError {return _aceef ;};_gdd :=_dfggb ._adbff ;_bbga :=_dfggb ._caa ;_gadg :=_dfggb ._bcbb ;_dfba :=_dfggb ._bgfd ;_bacf :=_dfggb ._bedab ;_cfff :=_dfggb ._ge ;_aee :=_dbcgc (_gdd ,_bbga ,_gadg ,_dfba ,_bacf ,_cfff );if _aee .Type ==ResultTypeError {return _aee ;};_cece :=_aee .ValueNumber /(1.0+_dfba /_bacf );return MakeNumberResult (_cece );};func _ebf (_bdeg int )bool {return _bdeg >=0&&_bdeg <=4};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _fggb (_ddgc Result ,_gaee ,_dgae string )(float64 ,Result ){switch _ddgc .Type {case ResultTypeEmpty :return 0,_bdgb ;case ResultTypeNumber :return _ddgc .ValueNumber ,_bdgb ;case ResultTypeString :_ggf ,_ceg :=_fbgg .ParseFloat (_ddgc .ValueString ,64);if _ceg !=nil {return 0,MakeErrorResult (_dgae +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_gaee );};return _ggf ,_bdgb ;default:return 0,MakeErrorResult (_gaee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dgae +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0049\u0046\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbcg :=args [0];switch _gbcg .Type {case ResultTypeError :return _gbcg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gbcg .ValueNumber !=0);};if _gbcg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _ddad (args );case ResultTypeArray :return _ebadc (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Reference returns a string reference value to a named range.
func (_affaa NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_affaa ._eggg };};

// String returns a string representation of a horizontal range.
func (_cfg HorizontalRange )String ()string {return _cfg .horizontalRangeReference ()};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_gfaf ,_gebgc :=_ggegd (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _gebgc .Type ==ResultTypeError {return _gebgc ;};_ebbfb :=_cad (_gfaf ._bggc );_ggcbe :=_cad (_gfaf ._baac );_bagc :=_gfaf ._gbdb ;_cdaba :=_bdaad (_ebbfb ,_ggcbe ,_bagc );_bgga ,_bfegd ,_bfec :=_cdaba .Date ();return MakeNumberResult (_dfcaa (_bgga ,int (_bfegd ),_bfec ));};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_bacb :=args [0].ValueNumber ;if _bacb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_gggcb :=float64 (int (args [1].ValueNumber ));if _gggcb < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_cggd .Pow ((1+_bacb /_gggcb ),_gggcb )-1);};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_aeee :=len (args );if _aeee < 4||_aeee > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_edbf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecc :=args [1].ValueNumber ;if _fecc <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedc :=args [2].ValueNumber ;if _cedc < _fecc {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gfaeb :=args [3].ValueNumber ;_gbdbg :=0.0;if _aeee >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbdbg =args [4].ValueNumber ;};_bcda :=0;if _aeee ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcda =int (args [5].ValueNumber );if _bcda !=0{_bcda =1;};};return MakeNumberResult (_abcdb (_edbf ,_cedc ,_gfaeb ,_gbdbg ,_bcda )-_fcg (_edbf ,_fecc ,_cedc ,_gfaeb ,_gbdbg ,_bcda ));};func _ef (_bedge ,_baag []float64 ,_fgb float64 )float64 {_beae :=_fgb +1;_ebaa :=_bedge [0];_fb :=len (_bedge );_bff :=_baag [0];for _eaecca :=1;_eaecca < _fb ;_eaecca ++{_ebaa +=_bedge [_eaecca ]/_cggd .Pow (_beae ,(_baag [_eaecca ]-_bff )/365);};return _ebaa ;};

// Reference returns an invalid reference for Bool.
func (_eedef Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_gfdac ,_defa :=_ggegd (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _defa .Type ==ResultTypeError {return _defa ;};return MakeNumberResult (_bgd (_gfdac ._bggc ,_gfdac ._baac ,_gfdac ._gbdb ,_gfdac ._faccc ));};func _gffca (_cffe ,_dcffe ,_ff ,_bfdc float64 ,_gec int )float64 {var _gcdc float64 ;if _cffe ==0{_gcdc =_bfdc +_ff *_dcffe ;}else {_eadg :=_cggd .Pow (1+_cffe ,_dcffe );if _gec ==1{_gcdc =_bfdc *_eadg +_ff *(1+_cffe )*(_eadg -1)/_cffe ;}else {_gcdc =_bfdc *_eadg +_ff *(_eadg -1)/_cffe ;};};return -_gcdc ;};func _fgff (_ddcg ,_daabg float64 )float64 {_ddcg =_cggd .Trunc (_ddcg );_daabg =_cggd .Trunc (_daabg );if _ddcg ==0&&_daabg ==0{return 0;};return _ddcg *_daabg /_daca (_ddcg ,_daabg );};type plex struct{_fbfc chan*node ;_gdba Expression ;};

// Eval evaluates and returns an expression with prefix.
func (_eefb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_aade :=_eefb ._aeag .Reference (ctx ,ev );switch _aade .Type {case ReferenceTypeSheet :_bbff :=ctx .Sheet (_aade .Value );return _eefb ._eeecd .Eval (_bbff ,ev );default:return MakeErrorResult (_befc .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aade .Type ));};};

// Reference returns an invalid reference for FunctionCall.
func (_bfege FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fdgc =57378;

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bfff .Lock ();defer _bfff .Unlock ();if _bdf ,_ede :=_cdgb [name ];_ede {return _bdf ;};return nil ;};

// Update returns the same object as updating sheet references does not affect String.
func (_fgce String )Update (q *_cdd .UpdateQuery )Expression {return _fgce };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgef :=args [0].AsString ();if _fgef .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_fgef .ValueString )));};func (_acee *noCache )SetCache (key string ,value Result ){};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgaa :=args [0].AsNumber ();_ddga :=args [1].AsNumber ();if _bgaa .Type !=ResultTypeNumber ||_ddga .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acceb :=_cggd .Trunc (_bgaa .ValueNumber );_bfcd :=_cggd .Trunc (_ddga .ValueNumber );if _bfcd > _acceb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _bfcd ==_acceb ||_bfcd ==0{return MakeNumberResult (1);};_bafgc :=float64 (1);for _dfa :=float64 (1);_dfa <=_bfcd ;_dfa ++{_bafgc *=(_acceb +1-_dfa )/_dfa ;};return MakeNumberResult (_bafgc );};func _bece (_egbfa ,_gfdde [][]Result )bool {if len (_egbfa )!=len (_gfdde ){return false ;};for _gbfg :=range _egbfa {if len (_egbfa [_gbfg ])!=len (_gfdde [_gbfg ]){return false ;};};return true ;};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _cebdf :=0;_cebdf < len (args )-1;_cebdf +=2{if args [_cebdf ].ValueNumber ==1{return args [_cebdf +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_eef (args ,_beaag ));};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_bdbdeg :=args [0];if _bdbdeg .Type !=ResultTypeArray &&_bdbdeg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdde :=_cffa (args [1]);_bde :=0;for _ ,_ecafe :=range _abgcd (_bdbdeg ){for _ ,_afgff :=range _ecafe {if _feg (_afgff ,_cdde ){_bde ++;};};};return MakeNumberResult (float64 (_bde ));};var _cdab *_gfga .Rand ;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ffcec :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ecff :=args [2].ValueNumber +1;if _ecff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_beee :=_abgcd (args [0]);_cafbe :=float64 (len (_beee ));_affe ,_ecfg :=0.0,0.0;_eeb ,_egde :=1.0,1.0;_dedcd ,_fbff :=false ,false ;for _ ,_eddf :=range _beee {for _ ,_ddb :=range _eddf {if _ddb .Type ==ResultTypeNumber &&!_ddb .IsBoolean {_dcfc :=_ddb .ValueNumber ;if _dcfc ==0{continue ;}else {if _dcfc > 0{_dedcd =true ;_ecfg +=_ddb .ValueNumber *_egde ;}else {_fbff =true ;_affe +=_ddb .ValueNumber *_eeb ;};_eeb /=_ffcec ;_egde /=_ecff ;};};};};if !_dedcd ||!_fbff {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ccc :=-_ecfg /_affe ;_ccc *=_cggd .Pow (_ecff ,_cafbe -1);_ccc =_cggd .Pow (_ccc ,1/(_cafbe -1));return MakeNumberResult (_ccc -1);};const _cdg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";var _bcdg =false ;func _abaa (_baegb int )string {if _baegb >=0&&_baegb < len (_efac ){if _efac [_baegb ]!=""{return _efac [_baegb ];};};return _befc .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_baegb );};type cmpResult int8 ;

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _afaeb (_aaca []Result ,_afgf string )(*amorArgs ,Result ){_df :=len (_aaca );if _df !=6&&_df !=7{return nil ,MakeErrorResult (_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _aaca [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_egac :=_aaca [0].ValueNumber ;if _egac < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_eaf ,_ecec :=_gccg (_aaca [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_afgf );if _ecec .Type ==ResultTypeError {return nil ,_ecec ;};_bcea ,_ecec :=_gccg (_aaca [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_afgf );if _ecec .Type ==ResultTypeError {return nil ,_ecec ;};if _bcea < _eaf {return nil ,MakeErrorResultType (ErrorTypeNum ,_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _aaca [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acda :=_aaca [3].ValueNumber ;if _acda < 0||_acda > _egac {return nil ,MakeErrorResultType (ErrorTypeNum ,_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _aaca [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfbbd :=int (_aaca [4].ValueNumber );if _gfbbd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afgf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _aaca [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_faa :=_aaca [5].ValueNumber ;if _faa < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afgf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_agfc :=0;if _df ==7&&_aaca [6].Type !=ResultTypeEmpty {if _aaca [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_agfc =int (_aaca [6].ValueNumber );if !_ebf (_agfc )||_agfc ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_afgf );};};return &amorArgs {_egac ,_eaf ,_bcea ,_acda ,_gfbbd ,_faa ,_agfc },_bdgb ;};const _cead =57366;

// Eval evaluates and returns a number.
func (_ddaa Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_ddaa ._gcd )};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_acca :=1.0;for _ ,_begga :=range args {_begga =_begga .AsNumber ();switch _begga .Type {case ResultTypeNumber :_acca *=_begga .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gbffe :=Product (_begga .ListValues ());if _gbffe .Type !=ResultTypeNumber {return _gbffe ;};_acca *=_gbffe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _begga ;case ResultTypeEmpty :default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_begga .Type ));};};return MakeNumberResult (_acca );};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_fagc :=_cfccf (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _fagc .Type !=ResultTypeEmpty {return _fagc ;};_aaebe :=_gfeca (args );return MakeNumberResult (float64 (len (_aaebe )));};func (_gccb *yyParserImpl )Lookahead ()int {return _gccb ._edcd };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bbef ,_abgd float64 ;switch args [0].Type {case ResultTypeNumber :_abgd =args [0].ValueNumber ;case ResultTypeString :_aagg :=DateValue ([]Result {args [0]});if _aagg .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_abgd =_aagg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bbef =args [1].ValueNumber ;if _bbef < 62&&_abgd >=62{_bbef --;};case ResultTypeString :_eeefd :=DateValue ([]Result {args [1]});if _eeefd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_bbef =_eeefd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fddbc :=float64 (int (_abgd -_bbef ));return MakeNumberResult (_fddbc );};func _aafb (_afbff ,_fba float64 ,_dadb ,_gbga int )float64 {_gdgaa :=_cad (_afbff );_egbf :=_cad (_fba );if _gbga ==1{_bge :=_ddd (_gdgaa ,_egbf ,_dadb ,1);_adee :=_bge .AddDate (0,12/_dadb ,0);return _agea (_bge ,_adee ,_gbga );};return float64 (_bfedc (0,_gbga ))/float64 (_dadb );};type ivr struct{};type evCache struct{_dabad map[string ]Result ;_gfeae *_dafdg .Mutex ;};type yyLexer interface{Lex (_ccdb *yySymType )int ;Error (_dcgeb string );};func _bfedc (_gbea ,_fbfbg int )int {switch _fbfbg {case 1:if _dcec (_gbea ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};type ri struct{_aegf float64 ;_bdcc string ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_ccfg BinaryExpr )Update (q *_cdd .UpdateQuery )Expression {_aca :=_ccfg ;_aca ._feaf =_ccfg ._feaf .Update (q );_aca ._cfde =_ccfg ._cfde .Update (q );return _aca ;};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_bdabf :=len (args );if _bdabf !=4&&_bdabf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fbcb ,_abfbb ,_fbdga :=_bgacc (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _fbdga .Type ==ResultTypeError {return _fbdga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcfea :=args [2].ValueNumber ;if _dcfea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbbc :=args [3].ValueNumber ;if _gbbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fda :=0;if _bdabf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fda =int (args [4].ValueNumber );if !_ebf (_fda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_cbfg ,_fbdga :=_gceb (_fbcb ,_abfbb ,_fda );if _fbdga .Type ==ResultTypeError {return _fbdga ;};return MakeNumberResult (_dcfea /(1-_gbbc *_cbfg ));};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edac :=args [0];if _edac .Type ==ResultTypeNumber {return _edac ;};if _edac .Type ==ResultTypeString {_ffcfa ,_gcad :=_fbgg .ParseFloat (_edac .Value (),64);if _gcad ==nil {return MakeNumberResult (_ffcfa );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func (_acffa *ivr )Sheet (name string )Context {return _acffa };type rangeIndex struct{_cebg int ;_dbdfa int ;};func _bgd (_ddeb ,_bac float64 ,_dcdac ,_cfeb int )float64 {_eagfd :=_cad (_ddeb );_efgbd :=_cad (_bac );_fbdcd :=_bdaad (_eagfd ,_efgbd ,_dcdac );return _agea (_eagfd ,_fbdcd ,_cfeb );};

// Eval evaluates and returns the result of a constant array expression.
func (_gef ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ddfec :=[][]Result {};for _ ,_fgfcc :=range _gef ._ffgb {_efcd :=[]Result {};for _ ,_gdbcc :=range _fgfcc {_efcd =append (_efcd ,_gdbcc .Eval (ctx ,ev ));};_ddfec =append (_ddfec ,_efcd );};return MakeArrayResult (_ddfec );};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func (_fdb *ivr )SetOffset (col ,row uint32 ){};

// Update updates the FunctionCall references after removing a row/column.
func (_ecdg FunctionCall )Update (q *_cdd .UpdateQuery )Expression {_bbgb :=[]Expression {};for _ ,_fgf :=range _ecdg ._ggad {_bcfef :=_fgf .Update (q );_bbgb =append (_bbgb ,_bcfef );};return FunctionCall {_fgdf :_ecdg ._fgdf ,_ggad :_bbgb };};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {s }};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gdeb :=args [0];if _gdeb .Type !=ResultTypeArray &&_gdeb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfgdg :=_gdeb .ValueArray ;if len (_bfgdg )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_bfgdg [0])));};

// Update returns the same object as updating sheet references does not affect Error.
func (_agg Error )Update (q *_cdd .UpdateQuery )Expression {return _agg };func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};func _ecda (_ecae []Result ,_ggc string )(*durationArgs ,Result ){_aef :=len (_ecae );if _aef !=5&&_aef !=6{return nil ,MakeErrorResult (_ggc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbaa ,_dfbb ,_gbcb :=_bgacc (_ecae [0],_ecae [1],_ggc );if _gbcb .Type ==ResultTypeError {return nil ,_gbcb ;};_bgae :=_ecae [2];if _bgae .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_adfd :=_bgae .ValueNumber ;if _adfd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cfcd :=_ecae [3];if _cfcd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cgfgd :=_cfcd .ValueNumber ;if _cgfgd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_dgfe :=_ecae [4];if _dgfe .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgdd :=float64 (int (_dgfe .ValueNumber ));if !_daedf (_dgdd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgac :=0;if _aef ==6&&_ecae [5].Type !=ResultTypeEmpty {_cfa :=_ecae [5];if _cfa .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgac =int (_cfa .ValueNumber );if !_ebf (_dgac ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ggc );};};return &durationArgs {_gbaa ,_dfbb ,_adfd ,_cgfgd ,_dgdd ,_dgac },_bdgb ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_gcab ,_eecaec :=_dg (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _eecaec .Type ==ResultTypeError {return _eecaec ;};_efgb :=_gcab ._aeeec ;_cegg :=_gcab ._ddcb ;_edbb :=_gcab ._fedg ;_bcfc :=_gcab ._dgdg ;_eeed :=_gcab ._gad ;_gfdf :=_gcab ._ecgg ;_cdfd :=_abcdb (_efgb ,_cegg ,_edbb ,0,_gfdf );_beabe :=0.0;if _bcfc ==1{if _gfdf ==0{_beabe =-_edbb ;_bcfc ++;};};for _gggf :=_bcfc ;_gggf <=_eeed ;_gggf ++{if _gfdf ==1{_beabe +=_gffca (_efgb ,_gggf -2,_cdfd ,_edbb ,1)-_cdfd ;}else {_beabe +=_gffca (_efgb ,_gggf -1,_cdfd ,_edbb ,0);};};_beabe *=_efgb ;return MakeNumberResult (_beabe );};const _ccec =57375;var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func (_gfded Result )AsString ()Result {switch _gfded .Type {case ResultTypeNumber :return MakeStringResult (_gfded .Value ());default:return _gfded ;};};

// String returns a string representation of a range with prefix.
func (_gdae PrefixRangeExpr )String ()string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gdae ._cdbfa .String (),_gdae ._agb .String (),_gdae ._bfaa .String ());};type parsedSearchObject struct{_cge string ;_ffed string ;_ffcdg int ;};const (_ byte =iota ;_bc ;_eddfa ;_baaaf ;_ccff ;_ceda ;);

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_adce chan*node ;_fega _dafdg .Mutex ;_dedea []chan*node ;_ccecd []*node ;};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_gega ,_fbc int };func _cdaf (_ac ,_eadac ,_egee int )bool {if _eadac < 1||_eadac > 12{return false ;};if _egee < 1{return false ;};return _egee <=_fcaa (_ac ,_eadac );};func _ebe (_bfb Result ,_cgbb *criteriaParsed )bool {if _bfb .Type ==ResultTypeEmpty {return false ;};if _cgbb ._ecfaf {return _bfb .ValueNumber ==_cgbb ._dabb ;}else {_aabe :=_fged .ToLower (_bfb .ValueString );return _cgbb ._aaae ==_aabe ||_ege .Match (_cgbb ._aaae ,_aabe );};};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_aeag Expression ;_eeecd Expression ;};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_eacaa :=len (args );if _eacaa !=4&&_eacaa !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdge :=args [0].ValueNumber ;if _gdge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcae :=args [1].ValueNumber ;if _dcae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccdfg :=args [2].ValueNumber ;if _ccdfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbg :=args [3].ValueNumber ;if _bbg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bbg > _ccdfg {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_cgfc :=2.0;if _eacaa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgfc =args [4].ValueNumber ;if _cgfc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_faff (_gdge ,_dcae ,_ccdfg ,_bbg ,_cgfc ));};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eaca :=args [0].Ref ;if _eaca .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_eaca .Value ));};

// Reference returns an invalid reference for Negate.
func (_efbe Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_ccbc tokenType )String ()string {return _dcdae (int (_ccbc ))};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cede :=args [0].AsNumber ();if _cede .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gedb :=float64 (1);if _cede .ValueNumber < 0{_gedb =-1;};if len (args )> 1{_aeeb :=args [1].AsNumber ();if _aeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gedb =_cggd .Abs (_aeeb .ValueNumber );};if len (args )==1{return MakeNumberResult (_cggd .Ceil (_cede .ValueNumber ));};_bedf :=_cede .ValueNumber ;_bedf ,_faeaf :=_cggd .Modf (_bedf /_gedb );if _faeaf !=0{if _cede .ValueNumber > 0{_bedf ++;};};return MakeNumberResult (_bedf *_gedb );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_gegg :=args [0];if _gegg .Type !=ResultTypeArray &&_gegg .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aggdf :=_gegg .ValueArray ;if len (_aggdf )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_aggdf )));};

// Function is a standard function whose result only depends on its arguments.
type Function func (_adae []Result )Result ;func _bdae (_gdce ,_fafc float64 ,_afcd ,_cc int )(float64 ,Result ){_caba ,_bdcf :=_cad (_gdce ),_cad (_fafc );if _bdcf .After (_caba ){_ebd :=_ddd (_caba ,_bdcf ,_afcd ,_cc );_fgefa :=(_bdcf .Year ()-_ebd .Year ())*12+int (_bdcf .Month ())-int (_ebd .Month ());return float64 (_fgefa *_afcd )/12.0,_bdgb ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_edbdd :=args [0].ValueNumber ;if _edbdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_defe ,_bceg :=_eeagf (args [1],args [2],"\u0058\u004e\u0050\u0056");if _bceg .Type ==ResultTypeError {return _bceg ;};_ebcce :=_defe ._cbe ;_gagbb :=_defe ._ebcga ;_fec :=0.0;_bgac :=_gagbb [0];for _agecf ,_dbbbf :=range _ebcce {_fec +=_dbbbf /_cggd .Pow (1+_edbdd ,(_gagbb [_agecf ]-_bgac )/365);};return MakeNumberResult (_fec );};func _bfcc (_dfbf BinOpType ,_gdbce ,_afgfa [][]Result )Result {_bdecf :=[][]Result {};for _efd :=range _gdbce {_ggda :=_afae (_dfbf ,_gdbce [_efd ],_afgfa [_efd ]);if _ggda .Type ==ResultTypeError {return _ggda ;};_bdecf =append (_bdecf ,_ggda .ValueList );};return MakeArrayResult (_bdecf );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {v }};func _ggegd (_fecf []Result ,_bdad string )(*couponArgs ,Result ){_fccc :=len (_fecf );if _fccc !=3&&_fccc !=4{return nil ,MakeErrorResult (_bdad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcgf ,_ecfae ,_ecf :=_bgacc (_fecf [0],_fecf [1],_bdad );if _ecf .Type ==ResultTypeError {return nil ,_ecf ;};if _fecf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdad +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaf :=_fecf [2].ValueNumber ;if !_daedf (_aaf ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_bdad );};_egcb :=0;if _fccc ==4&&_fecf [3].Type !=ResultTypeEmpty {if _fecf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bdad +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egcb =int (_fecf [3].ValueNumber );if !_ebf (_egcb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bdad );};};return &couponArgs {_fcgf ,_ecfae ,int (_aaf ),_egcb },_bdgb ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func (_bggb PrefixVerticalRange )verticalRangeReference (_dadd string )string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dadd ,_bggb ._eead ,_bggb ._gbef );};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_fafdf :=len (args );if _fafdf < 5||_fafdf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgfb :=args [0].ValueNumber ;if _cgfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gffba :=args [1].ValueNumber ;if _gffba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfabb :=args [2].ValueNumber ;if _bfabb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bfabb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebadf :=args [3].ValueNumber ;if _ebadf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcfca :=args [4].ValueNumber ;if _ebadf > _bcfca {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _bcfca > _bfabb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_egbb :=2.0;if _fafdf > 5{if args [5].Type ==ResultTypeEmpty {_egbb =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egbb =args [5].ValueNumber ;if _egbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_gebg :=false ;if _fafdf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gebg =args [6].ValueNumber !=0;};_cdbdg :=0.0;_gffdc :=_cggd .Floor (_ebadf );_gb :=_cggd .Ceil (_bcfca );if _gebg {for _gafc :=_gffdc +1;_gafc <=_gb ;_gafc ++{_accbe :=_faff (_cgfb ,_gffba ,_bfabb ,_gafc ,_egbb );if _gafc ==_gffdc +1{_accbe *=_cggd .Min (_bcfca ,_gffdc +1)-_ebadf ;}else if _gafc ==_gb {_accbe *=_bcfca +1-_gb ;};_cdbdg +=_accbe ;};}else {_fceb :=_bfabb ;var _efgbg float64 ;if !_gbdeg (_ebadf ,_cggd .Floor (_ebadf )){if _egbb ==1{_dcddb :=_bfabb /2;if _ebadf > _dcddb ||_gbdeg (_ebadf ,_dcddb ){_efgbg =_ebadf -_dcddb ;_ebadf =_dcddb ;_bcfca -=_efgbg ;_fceb ++;};};};if _egbb !=0{_cgfb -=_abec (_cgfb ,_gffba ,_bfabb ,_fceb ,_ebadf ,_egbb );};_cdbdg =_abec (_cgfb ,_gffba ,_bfabb ,_bfabb -_ebadf ,_bcfca -_ebadf ,_egbb );};return MakeNumberResult (_cdbdg );};const _bbdf =57374;var _aecb []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func (_bfgdc *evCache )GetFromCache (key string )(Result ,bool ){_bfgdc ._gfeae .Lock ();_aedb ,_bacc :=_bfgdc ._dabad [key ];_bfgdc ._gfeae .Unlock ();return _aedb ,_bacc ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gecf :=args [0].Ref ;if _gecf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_ccfgf ,_fcbd :=_ecga .ParseCellReference (_gecf .Value );if _fcbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gecf .Value );};return MakeNumberResult (float64 (_ccfgf .ColumnIdx +1));};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_fged .Replace (v ,"\u0022\u0022","\u0022",-1);return String {v };};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdga :=args [0].AsString ();if _fdga .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_aadb :=args [1].Ref ;if _aadb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_cbbd :=_aadb .Value ;switch _fdga .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_aadaf ,_bccc :=_ecga .ParseCellReference (_cbbd );if _bccc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbbd );};_eeaae :="\u0024"+_aadaf .Column +"\u0024"+_fbgg .Itoa (int (_aadaf .RowIdx ));if _aadaf .SheetName !=""{_eeaae =_aadaf .SheetName +"\u0021"+_eeaae ;};return MakeStringResult (_eeaae );case "\u0063\u006f\u006c":_ecffg ,_bgcgf :=_ecga .ParseCellReference (_cbbd );if _bgcgf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbbd );};return MakeNumberResult (float64 (_ecffg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_ccggd :=_fged .Contains (ctx .GetFormat (_cbbd ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_ccggd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_badd :="\u0047";_bafg :=ctx .GetFormat (_cbbd );if _bafg =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_dddf .MatchString (_bafg ){_badd ="\u0046\u0030";}else if _bafg =="\u0030\u0025"{_badd ="\u0050\u0030";}else if _bafg =="\u004d\u004d\u004d\u0020\u0044\u0044"{_badd ="\u0044\u0032";}else if _bafg =="\u004d\u004d\u002fY\u0059"{_badd ="\u0044\u0033";}else if _bafg =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_bafg =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_badd ="\u0044\u0034";}else if _bafg =="\u004d\u004d\u005c\u002d\u0044\u0044"{_badd ="\u0044\u0035";}else if _bafg =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_badd ="\u0044\u0036";}else if _bafg =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_badd ="\u0044\u0037";}else if _bafg =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_badd ="\u0044\u0038";}else if _bafg =="\u0048\u0048\u003aM\u004d"{_badd ="\u0044\u0039";}else if _ecafc .MatchString (_bafg ){_badd ="\u002e\u0030";}else if _edde .MatchString (_bafg ){_badd ="\u002e\u0030\u0028\u0029";}else if _bcfg .MatchString (_bafg ){_badd ="\u0043\u0030";}else if _ffgc .MatchString (_bafg )||_dff .MatchString (_bafg ){_badd ="\u0044\u0031";}else if _gegb :=_effb .FindStringSubmatch (_bafg );len (_gegb )> 1{_badd ="\u0046"+_fbgg .Itoa (len (_gegb [1]));}else if _cgdd :=_caag .FindStringSubmatch (_bafg );len (_cgdd )> 1{_badd ="\u002e"+_fbgg .Itoa (len (_cgdd [2]));}else if _baeg :=_bgg .FindStringSubmatch (_bafg );len (_baeg )> 1{_badd ="\u0050"+_fbgg .Itoa (len (_baeg [2]));}else if _cdbdd :=_gebb .FindStringSubmatch (_bafg );len (_cdbdd )> 1{_badd ="\u0043"+_bca (_cdbdd ,1);}else if _dagbc :=_bfeab .FindStringSubmatch (_bafg );len (_dagbc )> 1{_badd ="\u0043"+_bca (_dagbc ,1);}else if _fgacd :=_faaf .FindStringSubmatch (_bafg );len (_fgacd )> 1{_badd ="\u002e"+_bca (_fgacd ,1)+"\u0028\u0029";}else if _egfe :=_bfcdg .FindStringSubmatch (_bafg );len (_egfe )> 1{_badd ="\u002e"+_bca (_egfe ,1);}else if _gafce :=_dcbc .FindStringSubmatch (_bafg );len (_gafce )> 1{_badd ="\u0053"+_bca (_gafce ,3);};if _badd !="\u0047"&&_fged .Contains (_bafg ,"\u005b\u0052\u0045D\u005d"){_badd +="\u002d";};return MakeStringResult (_badd );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_bfefd :=ctx .GetFormat (_cbbd );if _eec .MatchString (_bfefd ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_cbbd ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_dbdcg :=0.0;if ctx .GetLocked (_cbbd ){_dbdcg =1.0;};return MakeNumberResult (_dbdcg );case "\u0072\u006f\u0077":_gagd ,_bbda :=_ecga .ParseCellReference (_cbbd );if _bbda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbbd );};return MakeNumberResult (float64 (_gagd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_fde ,_edfb :=_ecga .ParseCellReference (_cbbd );if _edfb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbbd );};if _fde .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fde .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_fde .SheetName ).GetWidth (int (_fde .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_fdga .ValueString );};const _fbga =57360;

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_cae :=len (args );if _cae < 3||_cae > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbb :=args [0].ValueNumber ;if _fcbb !=float64 (int (_fcbb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affac :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_edacf :=args [2].ValueNumber ;_cged :=0.0;if _cae >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cged =args [3].ValueNumber ;};_gdef :=0.0;if _cae >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gdef =args [4].ValueNumber ;if _gdef !=0{_gdef =1;};};_acge :=0.1;if _cae >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acge =args [5].ValueNumber ;};_eccb :=100;_dbcg :=0;_faeg :=false ;_aggcc :=1e-6;_dcdd :=_acge ;for _dbcg < _eccb &&!_faeg {_geac :=_cggd .Pow (_dcdd +1,_fcbb );_eeefg :=_cggd .Pow (_dcdd +1,_fcbb -1);_bdg :=_dcdd *_gdef +1;_daba :=_affac *(_geac -1);_edcfc :=_cged +_geac *_edacf +_daba *_bdg /_dcdd ;_efgea :=_fcbb *_eeefg *_edacf -_daba *_bdg /_cggd .Pow (_dcdd ,2);_fcabe :=(_fcbb *_affac *_eeefg *_bdg +_daba *_gdef )/_dcdd ;_fedef :=_edcfc /(_efgea +_fcabe );if _cggd .Abs (_fedef )< _aggcc {_faeg =true ;};_dbcg ++;_dcdd -=_fedef ;};return MakeNumberResult (_dcdd );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Update updates references in the Negate after removing a row/column.
func (_dfaeg Negate )Update (q *_cdd .UpdateQuery )Expression {return Negate {_dfaeg ._gcfa .Update (q )}};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_ecdf :=len (args );if _ecdf !=5&&_ecdf !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abba ,_dgec ,_fcdf :=_bgacc (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _fcdf .Type ==ResultTypeError {return _fcdf ;};_dddca ,_fcdf :=_gccg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _fcdf .Type ==ResultTypeError {return _fcdf ;};if _dddca >=_abba {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aefg :=args [3].ValueNumber ;if _aefg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dege :=args [4].ValueNumber ;if _dege <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_feeg :=0;if _ecdf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feeg =int (args [5].ValueNumber );if !_ebf (_feeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_dfdff ,_fcdf :=_gceb (_dddca ,_dgec ,_feeg );if _fcdf .Type ==ResultTypeError {return _fcdf ;};_gabfg ,_fcdf :=_gceb (_dddca ,_abba ,_feeg );if _fcdf .Type ==ResultTypeError {return _fcdf ;};_cefc ,_fcdf :=_gceb (_abba ,_dgec ,_feeg );if _fcdf .Type ==ResultTypeError {return _fcdf ;};_ecef :=1+_dfdff *_aefg ;_ecef /=_dege /100+_gabfg *_aefg ;_ecef --;_ecef /=_cefc ;return MakeNumberResult (_ecef );};func _cgba (_fgbg []Result ,_ddebf bool )Result {var _abcd string ;if _ddebf {_abcd ="\u004c\u0041\u0052G\u0045";}else {_abcd ="\u0053\u004d\u0041L\u004c";};if len (_fgbg )!=2{return MakeErrorResult (_abcd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfec :=_fgbg [0];var _cacg [][]Result ;switch _gfec .Type {case ResultTypeArray :_cacg =_gfec .ValueArray ;case ResultTypeList :_cacg =[][]Result {_gfec .ValueList };default:return MakeErrorResult (_abcd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_cacg )==0{return MakeErrorResult (_abcd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _fgbg [1].Type !=ResultTypeNumber {return MakeErrorResult (_abcd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ffd :=_fgbg [1].ValueNumber ;if _ffd < 1{return MakeErrorResultType (ErrorTypeNum ,_abcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gagb :=int (_ffd );if float64 (_gagb )!=_ffd {return MakeErrorResultType (ErrorTypeNum ,_abcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_acb :=[]float64 {};for _ ,_aaabg :=range _cacg {for _ ,_gcb :=range _aaabg {if _gcb .Type ==ResultTypeNumber {_acb =append (_acb ,_gcb .ValueNumber );};};};if _gagb > len (_acb ){return MakeErrorResultType (ErrorTypeNum ,_abcd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fdfg :=_acfd .MergeSort (_acb );if _ddebf {return MakeNumberResult (_fdfg [len (_fdfg )-_gagb ]);}else {return MakeNumberResult (_fdfg [_gagb -1]);};};func (_ecce *Lexer )emit (_dfdc tokenType ,_dfed []byte ){if _bcdg {_befc .Println ("\u0065\u006d\u0069\u0074",_dfdc ,_abe (string (_dfed )));};_ecce ._adce <-&node {_dfdc ,string (_dfed )};};const _dbae int =30;type tokenType int ;const _ggdd int =0;type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _bdaad (_ecgc ,_gafg _gbcec .Time ,_bfaf int )_gbcec .Time {_eefd :=_gbcec .Date (_ecgc .Year (),_gafg .Month (),_gafg .Day (),0,0,0,0,_gbcec .UTC );if _eefd .After (_ecgc ){_eefd =_eefd .AddDate (-1,0,0);};for !_eefd .After (_ecgc ){_eefd =_eefd .AddDate (0,12/_bfaf ,0);};return _eefd ;};func _becd (_bbcf string )bool {for _ ,_gfgdd :=range _afd {_afcf :=_gfgdd .FindStringSubmatch (_bbcf );if len (_afcf )> 1{return true ;};};return false ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eabfe :=args [0];switch _eabfe .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_ebba :=0.0;_bdcg :=0.0;for _ ,_gfaa :=range _eabfe .ValueString {_cfgf :=0.0;switch _gfaa {case 'I':_cfgf =1;case 'V':_cfgf =5;case 'X':_cfgf =10;case 'L':_cfgf =50;case 'C':_cfgf =100;case 'D':_cfgf =500;case 'M':_cfgf =1000;};_ebba +=_cfgf ;switch {case _bdcg ==_cfgf &&(_bdcg ==5||_bdcg ==50||_bdcg ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_bdcg ==_cfgf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _bdcg < _cfgf {_ebba -=2*_bdcg ;};_bdcg =_cfgf ;};return MakeNumberResult (_ebba );case ResultTypeError :return _eabfe ;default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eabfe .Type ));};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {lhs ,rhs ,op };};

// Eval evaluates a vertical range returning a list of results or an error.
func (_aedf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dafc :=_aedf .verticalRangeReference ();if _dag ,_fcff :=ev .GetFromCache (_dafc );_fcff {return _dag ;};_cdea ,_gfgda :=_bdec (ctx ,_aedf ._gdgf ,_aedf ._gggg );_deba :=_bedb (ctx ,ev ,_cdea ,_gfgda );ev .SetCache (_dafc ,_deba );return _deba ;};const _baef =57358;func _cedeb (_ecfef ,_ccba ,_cbef Reference )string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ecfef .Value ,_ccba .Value ,_cbef .Value );};func _fceag (_cfcb Result )bool {if _cfcb .Type ==ResultTypeString {return _cfcb .ValueString =="";};return _cfcb .ValueNumber ==0;};func _gbaf (_gaeg Result ,_acd ,_ccbe int )[][]Result {_ccdaga :=[][]Result {};switch _gaeg .Type {case ResultTypeArray :for _aaac ,_dcdge :=range _gaeg .ValueArray {if _aaac < _acd {_ccdaga =append (_ccdaga ,_ffc (MakeListResult (_dcdge ),_ccbe ));}else {_ccdaga =append (_ccdaga ,_ffc (MakeErrorResultType (ErrorTypeNA ,""),_ccbe ));};};case ResultTypeList :_gdgcd :=_ffc (_gaeg ,_ccbe );for _dfefc :=0;_dfefc < _acd ;_dfefc ++{_ccdaga =append (_ccdaga ,_gdgcd );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _afab :=0;_afab < _acd ;_afab ++{_dfge :=_ffc (_gaeg ,_ccbe );_ccdaga =append (_ccdaga ,_dfge );};};return _ccdaga ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_egab :=_ddfd .Buffer {};for _ ,_ffeed :=range args {switch _ffeed .Type {case ResultTypeString :_egab .WriteString (_ffeed .ValueString );case ResultTypeNumber :var _cceab string ;if _ffeed .IsBoolean {if _ffeed .ValueNumber ==0{_cceab ="\u0046\u0041\u004cS\u0045";}else {_cceab ="\u0054\u0052\u0055\u0045";};}else {_cceab =_ffeed .AsString ().ValueString ;};_egab .WriteString (_cceab );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_egab .String ());};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_dcgg :=len (args );if _dcgg < 4||_dcgg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_deea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfee :=args [1].ValueNumber ;if _gfee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cefb :=args [2].ValueNumber ;if _cefb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_g :=args [3].ValueNumber ;_ecged :=0.0;if _dcgg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecged =args [4].ValueNumber ;};_fbagf :=0;if _dcgg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbagf =int (args [5].ValueNumber );if _fbagf !=0{_fbagf =1;};};return MakeNumberResult (_fcg (_deea ,_gfee ,_cefb ,_g ,_ecged ,_fbagf ));};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cff :=_fged .ToLower (args [0].ValueString );if !_becd (_cff ){_ ,_ ,_ ,_ ,_ddfg ,_bdaae :=_bcaf (_cff );if _bdaae .Type ==ResultTypeError {_bdaae .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _bdaae ;};if _ddfg {return MakeNumberResult (0);};};_gcec ,_bfgf ,_afee ,_ ,_bebdb :=_cagb (_cff );if _bebdb .Type ==ResultTypeError {return _bebdb ;};return MakeNumberResult (_dfcaa (_gcec ,_bfgf ,_afee ));};func _begc (_bfc Result )[]Result {_dcge :=_bfc .ValueList ;if _bfc .Type ==ResultTypeArray {_dcge =nil ;for _ ,_cfbg :=range _bfc .ValueArray {if len (_cfbg )> 0{_dcge =append (_dcge ,_cfbg [0]);}else {_dcge =append (_dcge ,_bdgb );};};};return _dcge ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bdff :=len (args );if _bdff < 3||_bdff > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggdb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdaec :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_efge :=args [2].ValueNumber ;_edcf :=0.0;if _bdff >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_edcf =args [3].ValueNumber ;};_ceca :=0.0;if _bdff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ceca =args [4].ValueNumber ;if _ceca !=0{_ceca =1;};};_acg :=_cdaec *(1+_ggdb *_ceca )-_edcf *_ggdb ;_gbdgd :=(_efge *_ggdb +_cdaec *(1+_ggdb *_ceca ));return MakeNumberResult (_cggd .Log (_acg /_gbdgd )/_cggd .Log (1+_ggdb ));};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fce :=args [0].AsNumber ();if _fce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fce .ValueNumber < 0{return MakeNumberResult (-1);}else if _fce .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaad :=args [0].AsNumber ();_efb :=args [1].AsNumber ();if _gaad .Type !=ResultTypeNumber ||_efb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fedd :=_cggd .Trunc (_gaad .ValueNumber );_bage :=_cggd .Trunc (_efb .ValueNumber );if _fedd < _bage {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _fedd ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_fedd +_bage -1);args [1]=MakeNumberResult (_fedd -1);return Combin (args );};func _bcec (_ccafe string ,_edfd func (_eeab float64 )float64 )Function {return func (_faag []Result )Result {if len (_faag )!=1{return MakeErrorResult (_ccafe +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdac :=_faag [0].AsNumber ();switch _gdac .Type {case ResultTypeNumber :_cbf :=_edfd (_gdac .ValueNumber );if _cggd .IsNaN (_cbf ){return MakeErrorResult (_ccafe +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cggd .IsInf (_cbf ,0){return MakeErrorResult (_ccafe +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_cbf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ccafe +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gdac ;default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccafe ,_gdac .Type ));};};};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_facd :=MakeNumberResult (0);for _ ,_gbdg :=range args {_gbdg =_gbdg .AsNumber ();switch _gbdg .Type {case ResultTypeNumber :_facd .ValueNumber +=_gbdg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cddd :=Sum (_gbdg .ListValues ());if _cddd .Type !=ResultTypeNumber {return _cddd ;};_facd .ValueNumber +=_cddd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbdg ;case ResultTypeEmpty :default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbdg .Type ));};};return _facd ;};var _cdgb =map[string ]FunctionComplex {};type rmode byte ;

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfae :=args [0].AsNumber ();if _bfae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgg :=int (_bfae .ValueNumber );if _fgg < 0||_fgg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_befc .Sprintf ("\u0025\u0063",_fgg ));};

// SetLocked does nothing for the invalid reference context.
func (_aced *ivr )SetLocked (cellRef string ,locked bool ){};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_affa Expression ;_ebbd ,_eecfd int ;};func _daca (_dfaed ,_dbcd float64 )float64 {_dfaed =_cggd .Trunc (_dfaed );_dbcd =_cggd .Trunc (_dbcd );if _dfaed ==0{return _dbcd ;};if _dbcd ==0{return _dfaed ;};for _dfaed !=_dbcd {if _dfaed > _dbcd {_dfaed =_dfaed -_dbcd ;}else {_dbcd =_dbcd -_dfaed ;};};return _dfaed ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_daab Context ,formula string )Result ;SetCache (_fgfd string ,_dba Result );GetFromCache (_agad string )(Result ,bool );LastEvalIsRef ()bool ;};func _fdfd (_fabdc int )bool {return _fabdc ==0||_fabdc ==4};

// IsDBCS returns false for the invalid reference context.
func (_dcff *ivr )IsDBCS ()bool {return false };

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agdf :=args [0].AsNumber ();if _agdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfde :=0;if len (args )> 1{_fdgg :=args [1];if _fdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_gfde =int (_fdgg .ValueNumber );if _gfde < 0{_gfde =0;}else if _gfde > 4{_gfde =4;};};_fddb :=_gagaf ;switch _gfde {case 1:_fddb =_gaag ;case 2:_fddb =_fbdg ;case 3:_fddb =_ffede ;case 4:_fddb =_bede ;};_aagf :=_cggd .Trunc (_agdf .ValueNumber );_gacef :=_ddfd .Buffer {};for _ ,_ebcf :=range _fddb {for _aagf >=_ebcf ._aegf {_gacef .WriteString (_ebcf ._bdcc );_aagf -=_ebcf ._aegf ;};};return MakeStringResult (_gacef .String ());};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_gedg HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ggbd :=_gedg .horizontalRangeReference ();if _bfab ,_gege :=ev .GetFromCache (_ggbd );_gege {return _bfab ;};_cecd ,_fdcfd :=_efbd (ctx ,_gedg ._gega ,_gedg ._fbc );_bcgd :=_bedb (ctx ,ev ,_cecd ,_fdcfd );ev .SetCache (_ggbd ,_bcgd );return _bcgd ;};func _dg (_feefb []Result ,_cgeab string )(*cumulArgs ,Result ){if len (_feefb )!=6{return nil ,MakeErrorResult (_cgeab +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _feefb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgeab +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gffe :=_feefb [0].ValueNumber ;if _gffe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _feefb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgeab +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbcb :=_feefb [1].ValueNumber ;if _cbcb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _feefb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgeab +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccb :=_feefb [2].ValueNumber ;if _cccb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _feefb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgeab +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ddfe :=_feefb [3].ValueNumber ;if _ddfe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _feefb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgeab +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbd :=_feefb [4].ValueNumber ;if _fgbd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _fgbd < _ddfe {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _fgbd > _cbcb {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_aegc :=int (_feefb [5].ValueNumber );if _aegc !=0&&_aegc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeab +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_gffe ,_cbcb ,_cccb ,_ddfe ,_fgbd ,_aegc },_bdgb ;};var _agfcb =map[string ]*_dfde .Regexp {};func NewLexer ()*Lexer {return &Lexer {_adce :make (chan*node )}};func _ddad (_ffggg []Result )Result {_ecge :=_ffggg [0].ValueList ;_ebea :=len (_ecge );switch len (_ffggg ){case 1:_dgd :=[]Result {};for _ ,_gdded :=range _ecge {_dgd =append (_dgd ,MakeBoolResult (_gdded .ValueNumber !=0));};return MakeListResult (_dgd );case 2:_agac :=_ffggg [1];switch _agac .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_dde :=[]Result {};for _ ,_gfbc :=range _ecge {var _fgbe Result ;if _gfbc .ValueNumber ==0{_fgbe =MakeBoolResult (false );}else {_fgbe =_agac ;};_dde =append (_dde ,_fgbe );};return MakeListResult (_dde );case ResultTypeList :_cafa :=_ffc (_agac ,_ebea );_acgc :=[]Result {};for _acefba ,_gaef :=range _ecge {var _aegec Result ;if _gaef .ValueNumber ==0{_aegec =MakeBoolResult (false );}else {_aegec =_cafa [_acefba ];};_acgc =append (_acgc ,_aegec );};return MakeListResult (_acgc );case ResultTypeArray :_cadf :=_gbaf (_agac ,len (_agac .ValueArray ),_ebea );_afebg :=[][]Result {};for _ ,_dfcfb :=range _cadf {_fgdfg :=[]Result {};for _cbde ,_ggag :=range _ecge {var _afb Result ;if _ggag .ValueNumber ==0{_afb =MakeBoolResult (false );}else {_afb =_dfcfb [_cbde ];};_fgdfg =append (_fgdfg ,_afb );};_afebg =append (_afebg ,_fgdfg );};return MakeArrayResult (_afebg );};case 3:_bfbc :=_ffggg [1];_bged :=_ffggg [2];_edcdb :=_bfaab (_bfbc );_dace :=_bfaab (_bged );if _edcdb &&_dace {_cfbe :=[]Result {};for _ ,_dgbd :=range _ecge {var _bce Result ;if _dgbd .ValueNumber ==0{_bce =_bged ;}else {_bce =_bfbc ;};_cfbe =append (_cfbe ,_bce );};return MakeListResult (_cfbe );};if _bfbc .Type !=ResultTypeArray &&_bged .Type !=ResultTypeArray {_eegfb :=_ffc (_bfbc ,_ebea );_cggdd :=_ffc (_bged ,_ebea );_cacb :=[]Result {};for _cdcbgd ,_bbdd :=range _ecge {var _eaa Result ;if _bbdd .ValueNumber ==0{_eaa =_cggdd [_cdcbgd ];}else {_eaa =_eegfb [_cdcbgd ];};_cacb =append (_cacb ,_eaa );};return MakeListResult (_cacb );};_agge :=len (_bfbc .ValueArray );if len (_bged .ValueArray )> _agge {_agge =len (_bged .ValueArray );};_befef :=_gbaf (_bfbc ,_agge ,_ebea );_cbdcg :=_gbaf (_bged ,_agge ,_ebea );_beda :=[][]Result {};for _gbfe :=0;_gbfe < _agge ;_gbfe ++{_acaca :=[]Result {};for _ccbb ,_dgbcb :=range _ecge {var _gdde Result ;if _dgbcb .ValueNumber ==0{_gdde =_cbdcg [_gbfe ][_ccbb ];}else {_gdde =_befef [_gbfe ][_ccbb ];};_acaca =append (_acaca ,_gdde );};_beda =append (_beda ,_acaca );};return MakeArrayResult (_beda );};return MakeErrorResult ("");};

// Eval evaluates a range returning a list of results or an error.
func (_ggeg Range )Eval (ctx Context ,ev Evaluator )Result {_fdca :=_ggeg ._bedaba .Reference (ctx ,ev );_feff :=_ggeg ._efbeb .Reference (ctx ,ev );_fede :=_cfag (_fdca ,_feff );if _fdca .Type ==ReferenceTypeCell &&_feff .Type ==ReferenceTypeCell {if _cgea ,_geae :=ev .GetFromCache (_fede );_geae {return _cgea ;}else {_cfb :=_bedb (ctx ,ev ,_fdca .Value ,_feff .Value );ev .SetCache (_fede ,_cfb );return _cfb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fede );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gfd ,_ageg :=_ggegd (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _ageg .Type ==ResultTypeError {return _ageg ;};_adge :=_cad (_gfd ._bggc );_ecd :=_cad (_gfd ._baac );_fbba :=_gfd ._gbdb ;_bege :=_gfd ._faccc ;_gfg :=_ddd (_adge ,_ecd ,_fbba ,_bege );_feddc ,_eccdc ,_ggddg :=_gfg .Date ();return MakeNumberResult (_dfcaa (_feddc ,int (_eccdc ),_ggddg ));};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _aea (args ,_fcfa )};type parsedReplaceObject struct{_efca string ;_cfaeb int ;_cfbf int ;_eedda string ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_dagbd :=len (args );if _dagbd !=4&&_dagbd !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gdc ,_fae :=_gccg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fae .Type ==ResultTypeError {return _fae ;};_edae ,_fae :=_gccg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fae .Type ==ResultTypeError {return _fae ;};if _gdc >=_edae {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_adbb :=args [2].ValueNumber ;if _adbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efff :=args [3].ValueNumber ;if _efff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgf :=0;if _dagbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgf =int (args [4].ValueNumber );if !_ebf (_dgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_bdbc ,_fae :=_gceb (_gdc ,_edae ,_dgf );if _fae .Type ==ResultTypeError {return _fae ;};return MakeNumberResult (_efff *_adbb *_bdbc );};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_cdga ,_bafac :=_gd ("\u0046\u0049\u004e\u0044",args );if _bafac .Type !=ResultTypeEmpty {return _bafac ;};_eac :=_fged .ToLower (_cdga ._cge );if _eac ==""{return MakeNumberResult (1.0);};_gfaaa :=_fged .ToLower (_cdga ._ffed );_bbd :=_cdga ._ffcdg ;_gaegc :=1;for _baa :=range _gfaaa {if _gaegc < _bbd {_gaegc ++;continue ;};_gcfgc :=_ege .Index (_eac ,_gfaaa [_baa :]);if _gcfgc ==0{return MakeNumberResult (float64 (_gaegc ));};_gaegc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cgba (args ,true )};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgffe :=ctx .GetEpoch ();_bdab ,_fcdd :=_cccgc (args [0].Value (),_cgffe );if _fcdd !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_bdab .Year ()));};func _gcae (_b ,_gabf []float64 ,_aaa float64 )Result {_afg :=false ;_fdac :=false ;for _aead :=0;_aead < len (_b );_aead ++{if _b [_aead ]> 0{_afg =true ;};if _b [_aead ]< 0{_fdac =true ;};};if !_afg ||!_fdac {return MakeErrorResultType (ErrorTypeNum ,"");};_egcab :=_aaa ;_dfd :=1e-10;_geg :=0;_bgb :=50;_edeac :=false ;for {_fgbda :=_ef (_b ,_gabf ,_egcab );_fagcf :=_egcab -_fgbda /_cbaa (_b ,_gabf ,_egcab );_ddf :=_cggd .Abs (_fagcf -_egcab );_egcab =_fagcf ;_geg ++;if _ddf <=_dfd ||_cggd .Abs (_fgbda )<=_dfd {break ;};if _geg > _bgb {_edeac =true ;break ;};};if _edeac ||_cggd .IsNaN (_egcab )||_cggd .IsInf (_egcab ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_egcab );};

// FunctionCall is a function call expression.
type FunctionCall struct{_fgdf string ;_ggad []Expression ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_ffbb :=len (args );if _ffbb !=4&&_ffbb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dccaa ,_gcffd ,_fade :=_bgacc (args [0],args [1],"\u0044\u0049\u0053\u0043");if _fade .Type ==ResultTypeError {return _fade ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_daae :=args [2].ValueNumber ;if _daae <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccg :=args [3].ValueNumber ;if _eccg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfb :=0;if _ffbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfb =int (args [4].ValueNumber );if !_ebf (_bdfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_caf ,_fade :=_gceb (_dccaa ,_gcffd ,_bdfb );if _fade .Type ==ResultTypeError {return _fade ;};return MakeNumberResult ((_eccg -_daae )/_eccg /_caf );};type Expression interface{Eval (_fffe Context ,_cgbcd Evaluator )Result ;Reference (_eafd Context ,_cfdcc Evaluator )Reference ;String ()string ;Update (_bfbb *_cdd .UpdateQuery )Expression ;};func _fcg (_bagca ,_ggga ,_gdced ,_geaeb ,_cfd float64 ,_fgcdd int )float64 {_gdda :=_abcdb (_bagca ,_gdced ,_geaeb ,_cfd ,_fgcdd );var _cdgec float64 ;if _ggga ==1{if _fgcdd ==1{_cdgec =0;}else {_cdgec =-_geaeb ;};}else {if _fgcdd ==1{_cdgec =_gffca (_bagca ,_ggga -2,_gdda ,_geaeb ,1)-_gdda ;}else {_cdgec =_gffca (_bagca ,_ggga -1,_gdda ,_geaeb ,0);};};return _cdgec *_bagca ;};

// Update updates the horizontal range references after removing a row/column.
func (_abgb HorizontalRange )Update (q *_cdd .UpdateQuery )Expression {return _abgb };

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_debf :=args [0].Ref ;if _debf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_fcbc ,_cfaf :=_ecga .ParseCellReference (_debf .Value );if _cfaf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_debf .Value );};return MakeNumberResult (float64 (_fcbc .RowIdx ));};var _bgaea =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbbgb :=args [0].AsNumber ();if _gbbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcefg :=args [1].AsNumber ();if _gcefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_cggd .Pow (_gbbgb .ValueNumber ,_gcefg .ValueNumber ));};func _dfcaa (_ceefg ,_gdee ,_ffef int )float64 {return float64 (_ebfec (_ceefg ,_gbcec .Month (_gdee ),_ffef )/86400)+_ceef ;};

// Eval evaluates and returns the result of a function call.
func (_caabb FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_cebd :=LookupFunction (_caabb ._fgdf );if _cebd !=nil {_gcecd :=make ([]Result ,len (_caabb ._ggad ));for _dcfb ,_eafb :=range _caabb ._ggad {_gcecd [_dcfb ]=_eafb .Eval (ctx ,ev );_gcecd [_dcfb ].Ref =_eafb .Reference (ctx ,ev );};return _cebd (_gcecd );};_egd :=LookupFunctionComplex (_caabb ._fgdf );if _egd !=nil {_gbb :=make ([]Result ,len (_caabb ._ggad ));for _bbf ,_cgbbf :=range _caabb ._ggad {_gbb [_bbf ]=_cgbbf .Eval (ctx ,ev );_gbb [_bbf ].Ref =_cgbbf .Reference (ctx ,ev );};return _egd (ctx ,ev ,_gbb );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_caabb ._fgdf );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eaggd :=len (args );if _eaggd !=2&&_eaggd !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gg ,_gbc :=_eeagf (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gbc .Type ==ResultTypeError {return _gbc ;};_bcgac :=_gg ._cbe ;_cbgdb :=_gg ._ebcga ;_fedaa :=0.1;if _eaggd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedaa =args [2].ValueNumber ;if _fedaa <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _gcae (_bcgac ,_cbgdb ,_fedaa );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_dce NamedRangeRef )Update (q *_cdd .UpdateQuery )Expression {return _dce };

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbba :=args [0];if _bbba .Type ==ResultTypeError ||_bbba .Type ==ResultTypeString {return _bbba ;};return _bdgb ;};

// Update updates references in the Range after removing a row/column.
func (_baee Range )Update (q *_cdd .UpdateQuery )Expression {_fbbb :=_baee ;if q .UpdateCurrentSheet {_fbbb ._bedaba =_baee ._bedaba .Update (q );_fbbb ._efbeb =_baee ._efbeb .Update (q );};return _fbbb ;};const _aecga =57361;func _agea (_fafdc ,_bfa _gbcec .Time ,_egga int )float64 {if _fafdc .After (_bfa ){_fafdc ,_bfa =_bfa ,_fafdc ;};_agefee :=0;_dbf ,_ddcdg ,_eagdd :=_fafdc .Date ();_fbaf ,_bcgf ,_egba :=_bfa .Date ();_efgbf ,_cbbga :=int (_ddcdg ),int (_bcgf );_adbg ,_eeae :=_fbfe (_dbf ,_efgbf ,_eagdd ,_egga ),_fbfe (_fbaf ,_cbbga ,_egba ,_egga );if !_fdfd (_egga ){return _dfcaa (_fbaf ,_cbbga ,_eeae )-_dfcaa (_dbf ,_efgbf ,_adbg );};if _egga ==0{if (_efgbf ==2||_adbg < 30)&&_egba ==31{_eeae =31;}else if _cbbga ==2&&_eeae ==_fcaa (_fbaf ,_cbbga ){_eeae =_fcaa (_fbaf ,2);};}else {if _efgbf ==2&&_adbg ==30{_adbg =_fcaa (_dbf ,2);};if _cbbga ==2&&_eeae ==30{_eeae =_fcaa (_fbaf ,2);};};if _dbf < _fbaf ||(_dbf ==_fbaf &&_efgbf < _cbbga ){_agefee =30-_adbg +1;_eagdd =1;_adbg =1;_bgf :=_gbcec .Date (_dbf ,_gbcec .Month (_efgbf ),_eagdd ,0,0,0,0,_gbcec .UTC ).AddDate (0,1,0);if _bgf .Year ()< _fbaf {_agefee +=_abg (_bgf .Year (),int (_bgf .Month ()),12,_egga );_bgf =_bgf .AddDate (0,13-int (_bgf .Month ()),0);_agefee +=_bddc (_bgf .Year (),_fbaf -1,_egga );};_agefee +=_abg (_fbaf ,int (_bgf .Month ()),_cbbga -1,_egga );_bgf =_bgf .AddDate (0,_cbbga -int (_bgf .Month ()),0);_efgbf =_bgf .Day ();};_agefee +=_eeae -_adbg ;if _agefee > 0{return float64 (_agefee );}else {return 0;};};func init (){_ggdda ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// String returns a string representation of String.
func (_efce String )String ()string {return "\u0022"+_efce ._fbbg +"\u0022"};const _ceeff =57356;const _dac =57365;const _beab ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// String is a string expression.
type String struct{_fbbg string };

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_ccg :=len (args );if _ccg < 3||_ccg > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgfef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fac :=args [1].ValueNumber ;if _fac !=float64 (int (_fac )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecbd :=args [2].ValueNumber ;_cdf :=0.0;if _ccg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdf =args [3].ValueNumber ;};_dec :=0.0;if _ccg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dec =args [4].ValueNumber ;if _dec !=0{_dec =1;};};if _dgfef ==0{return MakeNumberResult (-_ecbd *_fac -_cdf );}else {return MakeNumberResult ((((1-_cggd .Pow (1+_dgfef ,_fac ))/_dgfef )*_ecbd *(1+_dgfef *_dec )-_cdf )/_cggd .Pow (1+_dgfef ,_fac ));};};func _bca (_acdag []string ,_afcg int )string {return _fbgg .Itoa (len (_acdag [len (_acdag )-1-_afcg ]))};func _ecaeb (_cbfb yyLexer ,_age *yySymType )(_debe ,_baaagb int ){_baaagb =0;_debe =_cbfb .Lex (_age );if _debe <=0{_baaagb =_fdg [0];goto _afbe ;};if _debe < len (_fdg ){_baaagb =_fdg [_debe ];goto _afbe ;};if _debe >=_cccc {if _debe < _cccc +len (_beaf ){_baaagb =_beaf [_debe -_cccc ];goto _afbe ;};};for _beff :=0;_beff < len (_bcggd );_beff +=2{_baaagb =_bcggd [_beff +0];if _baaagb ==_debe {_baaagb =_bcggd [_beff +1];goto _afbe ;};};_afbe :if _baaagb ==0{_baaagb =_beaf [1];};if _ffeec >=3{_befc .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_dcdae (_baaagb ),uint (_debe ));};return _debe ,_baaagb ;};func _bfaab (_afba Result )bool {_fbdc :=_afba .Type ;return _fbdc !=ResultTypeArray &&_fbdc !=ResultTypeList ;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_aeece ConstArrayExpr )Update (q *_cdd .UpdateQuery )Expression {return _aeece };

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bceb :=int (args [0].ValueNumber );if _bceb < 0||_bceb >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _bceb <=1899{_bceb +=1900;};_egbcc :=_gbcec .Month (args [1].ValueNumber );_ddaf :=int (args [2].ValueNumber );_agafe :=_ebfec (_bceb ,_egbcc ,_ddaf );_d :=_ddac (_egbfc ,_agafe )+1;if _d < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_d );};

// LastRow returns 0 for the invalid reference context.
func (_bgda *ivr )LastRow (colFrom string )int {return 0};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_ebaaa PrefixRangeExpr )Update (q *_cdd .UpdateQuery )Expression {_bgcff :=_ebaaa ;_baaa :=_ebaaa ._cdbfa .String ();if _baaa ==q .SheetToUpdate {_gfgd :=*q ;_gfgd .UpdateCurrentSheet =true ;_bgcff ._agb =_ebaaa ._agb .Update (&_gfgd );_bgcff ._bfaa =_ebaaa ._bfaa .Update (&_gfgd );};return _bgcff ;};func _bec (_fafa string ,_cfbd uint32 )string {_gfeac :=_ecga .ColumnToIndex (_fafa );if _gfeac ==_cfbd {return "\u0023\u0052\u0045F\u0021";}else if _gfeac > _cfbd {return _ecga .IndexToColumn (_gfeac -1);}else {return _fafa ;};};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {return Range {from ,to }};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_faea :=args [0].ValueNumber ;if _faea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_ab :=float64 (int (args [1].ValueNumber ));if _ab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_cggd .Pow (_faea +1,1/_ab )-1)*_ab );};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};const _cbdcgd ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";func _cgfca (_becbb [][]Result ,_cgdf int )[][]Result {_ebbae :=[][]Result {};for _ebec :=range _becbb {if _ebec ==0{continue ;};_gacec :=[]Result {};for _cedfa :=range _becbb {if _cedfa ==_cgdf {continue ;};_gacec =append (_gacec ,_becbb [_ebec ][_cedfa ]);};_ebbae =append (_ebbae ,_gacec );};return _ebbae ;};

// GetWidth returns 0 for the invalid reference context.
func (_gda *ivr )GetWidth (colIdx int )float64 {return float64 (0)};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Eval evaluates and returns the result of an empty expression.
func (_bcd EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_eef (args ,_bcdc ))};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_gdfec ,_aacc :=_ggegd (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _aacc .Type ==ResultTypeError {return _aacc ;};return MakeNumberResult (_adc (_gdfec ._bggc ,_gdfec ._baac ,_gdfec ._gbdb ,_gdfec ._faccc ));};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _fcaa (_cdbb ,_egfeg int )int {if _egfeg ==2&&_dcec (_cdbb ){return 29;}else {return _aeda [_egfeg -1];};};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bgaef EmptyExpr )Update (q *_cdd .UpdateQuery )Expression {return _bgaef };var _cgdfe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _bcad (_ba int )int {if _ba < 1900{if _ba < 30{_ba +=2000;}else {_ba +=1900;};};return _ba ;};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afag :=args [0].AsNumber ();if _afag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aaff :=args [1].AsNumber ();if _aaff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cddee :=int (_aaff .ValueNumber );if _cddee < 0||_cddee > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_cdgf :=0;if len (args )> 2{_eaafg :=args [2].AsNumber ();if _eaafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdgf =int (_eaafg .ValueNumber );};_cecde :=_fbgg .FormatInt (int64 (_afag .ValueNumber ),_cddee );if len (_cecde )< _cdgf {_cecde =_fged .Repeat ("\u0030",_cdgf -len (_cecde ))+_cecde ;};return MakeStringResult (_cecde );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dega :=args [0].AsNumber ();_cdbbc :=args [1].AsNumber ();if _dega .Type ==ResultTypeNumber &&_cdbbc .Type ==ResultTypeNumber {_bda :=_cggd .Atan2 (_cdbbc .ValueNumber ,_dega .ValueNumber );if _bda !=_bda {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_bda );};for _ ,_dggc :=range []ResultType {_dega .Type ,_cdbbc .Type }{switch _dggc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _dega ;default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dggc ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dgdbe :=ctx .GetEpoch ();_cdefb ,_fbag :=_cccgc (args [0].Value (),_dgdbe );if _fbag !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ccca :=_cdefb .Year ();return MakeBoolResult (_dcec (_ccca ));};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgd :=args [0].AsString ();if _cgd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_cgd .ValueString ,ev );};func (_dca *plex )Error (s string ){_bfgbf .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );};func _fbagg (_fbad float64 ,_dfcf *criteriaRegex )bool {_gbgg ,_fcac :=_fbgg .ParseFloat (_dfcf ._bgef ,64);if _fcac !=nil {return false ;};switch _dfcf ._cbccg {case _bc :return _fbad ==_gbgg ;case _eddfa :return _fbad <=_gbgg ;case _baaaf :return _fbad >=_gbgg ;case _ccff :return _fbad < _gbgg ;case _ceda :return _fbad > _gbgg ;};return false ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_fbfb PrefixVerticalRange )Update (q *_cdd .UpdateQuery )Expression {if q .UpdateType ==_cdd .UpdateActionRemoveColumn {_dbce :=_fbfb ;_afgaa :=_fbfb ._afda .String ();if _afgaa ==q .SheetToUpdate {_eadc :=q .ColumnIdx ;_dbce ._eead =_bec (_fbfb ._eead ,_eadc );_dbce ._gbef =_bec (_fbfb ._gbef ,_eadc );};return _dbce ;};return _fbfb ;};func init (){_cdab =_gfga .New (_gfga .NewSource (_gbcec .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bcec ("\u0041\u0053\u0049\u004e",_cggd .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bcec ("\u0041\u0053\u0049\u004e",_cggd .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bcec ("\u0041\u0053\u0049\u004e",_cggd .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bcec ("\u0041\u0043\u004f\u0054",func (_acaab float64 )float64 {return _cggd .Pi /2-_cggd .Atan (_acaab )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bcec ("\u0041\u0043\u004fT\u0048",func (_daaba float64 )float64 {return _cggd .Atanh (1/_daaba )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bcec ("\u0041\u0053\u0049\u004e",_cggd .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bcec ("\u0041\u0053\u0049N\u0048",_cggd .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bcec ("\u0041\u0054\u0041\u004e",_cggd .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bcec ("\u0041\u0054\u0041N\u0048",_cggd .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bcec ("\u0043\u004f\u0053",_cggd .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bcec ("\u0043\u004f\u0053\u0048",_cggd .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_bfdb ("\u0043\u004f\u0054",_cggd .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_bfdb ("\u0043\u004f\u0054\u0048",_cggd .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_bfdb ("\u0043\u0053\u0043",_cggd .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_bfdb ("\u0043\u0053\u0043",_cggd .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bcec ("\u0045\u0058\u0050",_cggd .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bcec ("\u004c\u004e",_cggd .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bcec ("\u004c\u004f\u00471\u0030",_cggd .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_bfdb ("\u0053\u0045\u0043",_cggd .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_bfdb ("\u0053\u0045\u0043\u0048",_cggd .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bcec ("\u0053\u0049\u004e",_cggd .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bcec ("\u0053\u0049\u004e\u0048",_cggd .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bcec ("\u0053\u0051\u0052\u0054",_cggd .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bcec ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bfbd float64 )float64 {return _cggd .Sqrt (_bfbd *_cggd .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bcec ("\u0054\u0041\u004e",_cggd .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bcec ("\u0054\u0041\u004e\u0048",_cggd .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccaf :=args [0].AsString ();if _ccaf .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgeg :=_ddfd .Buffer {};_gbe :=false ;_gbgfe :=false ;_abgba :=0;for _ ,_adfb :=range _ccaf .ValueString {_abbg :=_adfb ==' ';if _abbg {if !_gbe {continue ;};if !_gbgfe {_abgba ++;_cgeg .WriteRune (_adfb );};}else {_abgba =0;_gbe =true ;_cgeg .WriteRune (_adfb );};_gbgfe =_abbg ;};_cgeg .Truncate (_cgeg .Len ()-_abgba );return MakeStringResult (_cgeg .String ());};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_bdbd :=len (args );if _bdbd < 3||_bdbd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bddee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cbgb :=args [1].ValueNumber ;if _cbgb !=float64 (int (_cbgb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fccf :=args [2].ValueNumber ;_dcbe :=0.0;if _bdbd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbe =args [3].ValueNumber ;};_acec :=0;if _bdbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_acec =int (args [4].ValueNumber );if _acec !=0{_acec =1;};};return MakeNumberResult (_gffca (_bddee ,_cbgb ,_fccf ,_dcbe ,_acec ));};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_eacg ,_bdce :=_fbgg .ParseBool (v );if _bdce !=nil {_bfgbf .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_bdce );};return Bool {_eacg };};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdg :=args [0].ValueNumber ;if _dbdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcee :=args [1].ValueNumber ;if _dcee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgf :=args [2].ValueNumber ;if _ebgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_cggd .Pow (_ebgf /_dcee ,1/_dbdg )-1);};

// Eval evaluates and returns the result of an error expression.
func (_bdgg Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_bdgg ._c )};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);var _ffede =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_cbfe ,_afcb :=_ggegd (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _afcb .Type ==ResultTypeError {return _afcb ;};return MakeNumberResult (_aafb (_cbfe ._bggc ,_cbfe ._baac ,_cbfe ._gbdb ,_cbfe ._faccc ));};type noCache struct{};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbdb :=args [0].AsString ();if _ddbdb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_ddbdb .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_ddbdb .ValueString [0]));};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_efbc ,_eefed :=_fbgg .ParseFloat (v ,64);if _eefed !=nil {_bfgbf .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_eefed );};return Number {_efbc };};const _bagea =2;var _ceef float64 =25569.0;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fdafb :=args [0].ValueNumber ;_efgg :=args [1].ValueNumber ;if _efgg < _fdafb {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _efgg ==_fdafb {return MakeNumberResult (0);};_fbgd :=_fged .ToLower (args [2].ValueString );if _fbgd =="\u0064"{return MakeNumberResult (_efgg -_fdafb );};_bbbc :=_cad (_fdafb );_gcaaf :=_cad (_efgg );_accb ,_ceab ,_daga :=_bbbc .Date ();_acag ,_gebc ,_gbfd :=_gcaaf .Date ();_fgcc :=int (_ceab );_dgfed :=int (_gebc );var _ccb float64 ;switch _fbgd {case "\u0079":_ccb =float64 (_acag -_accb );if _dgfed < _fgcc ||(_dgfed ==_fgcc &&_gbfd < _daga ){_ccb --;};case "\u006d":_fcdfg :=_acag -_accb ;_bffa :=_dgfed -_fgcc ;if _gbfd < _daga {_bffa --;};if _bffa < 0{_fcdfg --;_bffa +=12;};_ccb =float64 (_fcdfg *12+_bffa );case "\u006d\u0064":_ggbdb :=_dgfed ;if _gbfd < _daga {_ggbdb --;};_ccb =float64 (int (_efgg -_dfcaa (_acag ,_ggbdb ,_daga )));case "\u0079\u006d":_ccb =float64 (_dgfed -_fgcc );if _gbfd < _daga {_ccb --;};if _ccb < 0{_ccb +=12;};case "\u0079\u0064":_agcbf :=_acag ;if _dgfed < _fgcc ||(_dgfed ==_fgcc &&_gbfd < _daga ){_agcbf --;};_ccb =float64 (int (_efgg -_dfcaa (_agcbf ,_fgcc ,_daga )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_ccb );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecdfc :=args [0].AsNumber ();if _ecdfc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccgg :=float64 (1);if _ecdfc .ValueNumber < 0{_ccgg =-1;};if len (args )> 1{_fdee :=args [1].AsNumber ();if _fdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_ccgg =_fdee .ValueNumber ;};_degb :=float64 (1);if len (args )> 2{_afccd :=args [2].AsNumber ();if _afccd .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_degb =_afccd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cggd .Floor (_ecdfc .ValueNumber ));};_agcd :=_ecdfc .ValueNumber ;_agcd ,_fbdb :=_cggd .Modf (_agcd /_ccgg );if _fbdb !=0&&_ecdfc .ValueNumber < 0&&_degb > 0{_agcd ++;};return MakeNumberResult (_agcd *_ccgg );};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_eg :=args [0];switch _eg .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_ecac :=_cad (_eg .ValueNumber );return MakeNumberResult (float64 (_ecac .Day ()));case ResultTypeString :_ceba :=_fged .ToLower (_eg .ValueString );if !_becd (_ceba ){_ ,_ ,_ ,_ ,_afgg ,_dafba :=_bcaf (_ceba );if _dafba .Type ==ResultTypeError {_dafba .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _dafba ;};if _afgg {return MakeNumberResult (0);};};_ ,_ ,_ggfc ,_ ,_fadb :=_cagb (_ceba );if _fadb .Type ==ResultTypeError {return _fadb ;};return MakeNumberResult (float64 (_ggfc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};const _bdb =57373;func _dcec (_befb int )bool {if _befb ==_befb /400*400{return true ;};if _befb ==_befb /100*100{return false ;};return _befb ==_befb /4*4;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_bgceg :=len (args );if _bgceg !=4&&_bgceg !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fefed ,_eaag ,_fcgc :=_bgacc (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _fcgc .Type ==ResultTypeError {return _fcgc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afbgf :=args [2].ValueNumber ;if _afbgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cdc :=args [3].ValueNumber ;if _cdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_ade :=0;if _bgceg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ade =int (args [4].ValueNumber );if !_ebf (_ade ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_ddgca ,_fcgc :=_gceb (_fefed ,_eaag ,_ade );if _fcgc .Type ==ResultTypeError {return _fcgc ;};return MakeNumberResult (_cdc *(1-_afbgf *_ddgca ));};func _gbdeg (_dbac ,_fcc float64 )bool {return _cggd .Abs (_dbac -_fcc )< 1.0e-6};type criteriaParsed struct{_ecfaf bool ;_dabb float64 ;_aaae string ;_ecgbg *criteriaRegex ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_gfbf :=_fged .Split (v ,"\u003a");if len (_gfbf )!=2{return nil ;};_ebce ,_ :=_fbgg .Atoi (_gfbf [0]);_daea ,_ :=_fbgg .Atoi (_gfbf [1]);return HorizontalRange {_ebce ,_daea };};func _addb ()yyParser {return &yyParserImpl {}};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_bdfg :=len (args );if _bdfg !=3&&_bdfg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egdg ,_cb :=_cgcc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cb .Type ==ResultTypeError {return _cb ;};_afdf ,_cb :=_cgcc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _cb .Type ==ResultTypeError {return _cb ;};_da ,_cb :=_cgcc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cb .Type ==ResultTypeError {return _cb ;};_eadd :=0;if _bdfg ==3{return MakeStringResult (_fged .Replace (_egdg ,_afdf ,_da ,-1));}else {_efbce ,_fee :=_fggb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _fee .Type ==ResultTypeError {return _fee ;};_eadd =int (_efbce );if _eadd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_gfff :=_egdg ;_afad :=_eadd ;_adgda :=-1;_dfdg :=len (_afdf );_fef :=0;for {_afad --;_affc :=_fged .Index (_gfff ,_afdf );if _affc ==-1{_adgda =-1;break ;}else {_adgda =_affc +_fef ;if _afad ==0{break ;};_cef :=_dfdg +_affc ;_fef +=_cef ;_gfff =_gfff [_cef :];};};if _adgda ==-1{return MakeStringResult (_egdg );}else {_bbgf :=_egdg [:_adgda ];_bdedd :=_egdg [_adgda +_dfdg :];return MakeStringResult (_bbgf +_da +_bdedd );};};};

// Reference returns an invalid reference for ConstArrayExpr.
func (_bagaf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};const _efcaf =187;

// IsBool returns false for the invalid reference context.
func (_agfg *ivr )IsBool (cellRef string )bool {return false };

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gae :=args [0].AsNumber ();_dadeb :=args [1].AsNumber ();if _gae .Type !=ResultTypeNumber ||_dadeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _dadeb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_gcgc ,_cbefb :=_cggd .Modf (_gae .ValueNumber /_dadeb .ValueNumber );if _cbefb < 0{_gcgc --;};return MakeNumberResult (_gae .ValueNumber -_dadeb .ValueNumber *_gcgc );};func _cgcc (_efcdg Result ,_acdfg ,_cafcd string )(string ,Result ){switch _efcdg .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _efcdg .Value (),_bdgb ;default:return "",MakeErrorResult (_acdfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cafcd +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Reference returns a string reference value to a vertical range.
func (_adbffd VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_adbffd .verticalRangeReference ()};};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gfda :=_fged .Split (v ,"\u003a");if len (_gfda )!=2{return nil ;};return VerticalRange {_gfda [0],_gfda [1]};};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_gfdd :=args [0].AsNumber ();if _gfdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_bgbg :=int (_gfdd .ValueNumber );_ccfc :=make ([][]Result ,0,_bgbg );for _dbbb :=0;_dbbb < _bgbg ;_dbbb ++{_deae :=make ([]Result ,_bgbg );for _bbcc :=0;_bbcc < _bgbg ;_bbcc ++{if _dbbb ==_bbcc {_deae [_bbcc ]=MakeNumberResult (1.0);}else {_deae [_bbcc ]=MakeNumberResult (0.0);};};_ccfc =append (_ccfc ,_deae );};return MakeArrayResult (_ccfc );};func _fgace (_f []Result ,_gfgb bool )Result {_ggdfe :="\u004d\u0041\u0058";if _gfgb {_ggdfe ="\u004d\u0041\u0058\u0041";};if len (_f )==0{return MakeErrorResult (_ggdfe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcg :=-_cggd .MaxFloat64 ;for _ ,_bae :=range _f {switch _bae .Type {case ResultTypeNumber :if (_gfgb ||!_bae .IsBoolean )&&_bae .ValueNumber > _gcg {_gcg =_bae .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_eag :=_fgace (_bae .ListValues (),_gfgb );if _eag .ValueNumber > _gcg {_gcg =_eag .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dfcd :=0.0;if _gfgb {_dfcd =_bae .AsNumber ().ValueNumber ;};if _dfcd > _gcg {_gcg =_dfcd ;};default:_bfgbf .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ggdfe +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bae .Type );};};if _gcg ==-_cggd .MaxFloat64 {_gcg =0;};return MakeNumberResult (_gcg );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_daaae *defEval )LastEvalIsRef ()bool {return _daaae ._ebg };

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {data }};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cddgf :=_gbcec .Now ();_ ,_dcfa :=_cddgf .Zone ();_ccbf :=_ddac (_egbfc ,_cddgf .Unix ()+int64 (_dcfa ))+1;return MakeNumberResult (_ccbf );};const _deeg ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _bgacc (_ebc ,_gdgcc Result ,_eaecc string )(float64 ,float64 ,Result ){_dee ,_ffge :=_gccg (_ebc ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_eaecc );if _ffge .Type ==ResultTypeError {return 0,0,_ffge ;};_dbe ,_ffge :=_gccg (_gdgcc ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_eaecc );if _ffge .Type ==ResultTypeError {return 0,0,_ffge ;};if _dee >=_dbe {return 0,0,MakeErrorResultType (ErrorTypeNum ,_eaecc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _dee ,_dbe ,_bdgb ;};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_feeb :=len (args );if _feeb > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_cfdg :=_abgcd (args [0]);_cgfce :=[]float64 {};for _ ,_gabd :=range _cfdg {for _ ,_bcdbe :=range _gabd {if _bcdbe .Type ==ResultTypeNumber &&!_bcdbe .IsBoolean {_cgfce =append (_cgfce ,_bcdbe .ValueNumber );};};};_be :=len (_cgfce );if len (_cgfce )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_dcda :=0.1;if _feeb ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dcda =args [1].ValueNumber ;if _dcda <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_afa :=[]float64 {};for _bdbb :=0;_bdbb < _be ;_bdbb ++{if _bdbb ==0{_afa =append (_afa ,0);}else {_afa =append (_afa ,_afa [_bdbb -1]+365);};};return _gcae (_cgfce ,_afa ,_dcda );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aggc :=args [0].AsString ();if _aggc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_aggc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_aggc .ValueString [0]));};func _faff (_cdbf ,_agaed ,_bdca ,_cde ,_aafc float64 )float64 {var _aaebg float64 ;_baeb :=_aafc /_bdca ;if _baeb >=1{_baeb =1;if _cde ==1{_aaebg =_cdbf ;}else {_aaebg =0;};}else {_aaebg =_cdbf *_cggd .Pow (1-_baeb ,_cde -1);};_geeb :=_cdbf *_cggd .Pow (1-_baeb ,_cde );var _cbdgc float64 ;if _geeb < _agaed {_cbdgc =_aaebg -_agaed ;}else {_cbdgc =_aaebg -_geeb ;};if _cbdgc < 0{_cbdgc =0;};return _cbdgc ;};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgffc :=false ;for _ ,_cbdf :=range args {switch _cbdf .Type {case ResultTypeList ,ResultTypeArray :_gade :=Or (_cbdf .ListValues ());if _gade .Type ==ResultTypeError {return _gade ;};if _gade .ValueNumber !=0{_bgffc =true ;};case ResultTypeNumber :if _cbdf .ValueNumber !=0{_bgffc =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _cbdf ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_bgffc );};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _adg (args ,false )};var _gacg ,_bdaf ,_fabb ,_afeee ,_ddgfb ,_egdgf *_dfde .Regexp ;

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_cdbfa ,_agb ,_bfaa Expression };

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. gooxml will return 0.5 in this case.
func Average (args []Result )Result {_cbab ,_aadg :=_aefc (args ,false );if _aadg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cbab /_aadg );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_afda Expression ;_eead ,_gbef string ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgfde :=args [0].ValueNumber ;_cace :=args [1].ValueNumber ;_egda :=args [2].ValueNumber ;_ceee :=_fcgaa (_fgfde ,_cace ,_egda );if _ceee >=0{return MakeNumberResult (_ceee );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};const _ffdb =57368;

// String returns a string representation of Number.
func (_aecf Number )String ()string {return _fbgg .FormatFloat (_aecf ._gcd ,'f',-1,64)};var _gaag =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bfff .Lock ();defer _bfff .Unlock ();if _ ,_agacb :=_cdgb [name ];_agacb {_bfgbf .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cdgb [name ]=fn ;};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_cca :=args [0].AsString ();if _cca .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cebf :=args [1].AsNumber ();if _cebf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _cebf .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _cebf .ValueNumber ==0{return MakeStringResult ("");};_dgdb :=_ddfd .Buffer {};for _bef :=0;_bef < int (_cebf .ValueNumber );_bef ++{_dgdb .WriteString (_cca .ValueString );};return MakeStringResult (_dgdb .String ());};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// String returns a string representation of a horizontal range with prefix.
func (_agegb PrefixHorizontalRange )String ()string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_agegb ._affa .String (),_agegb ._ebbd ,_agegb ._eecfd );};type yyParserImpl struct{_ebfc yySymType ;_fbfde [_abb ]yySymType ;_edcd int ;};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cggd .Pi );};var _fgddg =map[string ]*_dfde .Regexp {};const _gfea =57354;func _abe (_gaff string )string {_gaff =_fged .Replace (_gaff ,"\u000a","\u005c\u006e",-1);_gaff =_fged .Replace (_gaff ,"\u000d","\u005c\u0072",-1);_gaff =_fged .Replace (_gaff ,"\u0009","\u005c\u0074",-1);return _gaff ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbb :=true ;for _ ,_eggb :=range args {_eggb =_eggb .AsNumber ();switch _eggb .Type {case ResultTypeList ,ResultTypeArray :_bcga :=And (_eggb .ListValues ());if _bcga .Type ==ResultTypeError {return _bcga ;};if _bcga .ValueNumber ==0{_gfbb =false ;};case ResultTypeNumber :if _eggb .ValueNumber ==0{_gfbb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _eggb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_gfbb );};func init (){_afc ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_gcfc CellRef )Update (q *_cdd .UpdateQuery )Expression {if q .UpdateCurrentSheet {_gcfc ._effc =_bba (_gcfc ._effc ,q );};return _gcfc ;};

// Reference returns an invalid reference for EmptyExpr.
func (_dcgb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bddc (_bd ,_dggac ,_dbda int )int {if _bd > _dggac {return 0;};if _fdfd (_dbda ){return (_dggac -_bd +1)*360;};_fdacg :=0;for _ccgc :=_bd ;_ccgc <=_dggac ;_ccgc ++{_eeaf :=365;if _dcec (_ccgc ){_eeaf =366;};_fdacg +=_eeaf ;};return _fdacg ;};

// Bool is a boolean expression.
type Bool struct{_ddabg bool };func (_cbff ResultType )String ()string {if _cbff >=ResultType (len (_afbg )-1){return _befc .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cbff );};return _egdd [_afbg [_cbff ]:_afbg [_cbff +1]];};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ecg :=args [0].AsNumber ();_aeadg :=args [1].AsNumber ();if _ecg .Type !=ResultTypeNumber ||_aeadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _aeadg .ValueNumber < _ecg .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_dfgbg :=int64 (_ecg .ValueNumber );_eccc :=int64 (_aeadg .ValueNumber );return MakeNumberResult (float64 (_cdab .Int63n (_eccc -_dfgbg +1)+_dfgbg ));};func _ebadc (_eegf []Result )Result {_afbc :=_eegf [0].ValueArray ;if len (_eegf )==1{_dcage :=[][]Result {};for _ ,_fbegf :=range _afbc {_dcage =append (_dcage ,_ddad ([]Result {MakeListResult (_fbegf )}).ValueList );};return MakeArrayResult (_dcage );}else if len (_eegf )==2{_aabd :=len (_afbc );_agcea :=len (_afbc [0]);_edf :=_gbaf (_eegf [1],_aabd ,_agcea );_ccacb :=len (_edf );_cbgdc :=[][]Result {};var _dd []Result ;for _dcdbd ,_bbcge :=range _afbc {if _dcdbd < _ccacb {_dd =_edf [_dcdbd ];}else {_dd =_ffc (MakeErrorResultType (ErrorTypeNA ,""),_agcea );};_cbgdc =append (_cbgdc ,_ddad ([]Result {MakeListResult (_bbcge ),MakeListResult (_dd )}).ValueList );};return MakeArrayResult (_cbgdc );}else if len (_eegf )==3{_eff :=len (_afbc );_fcgd :=len (_afbc [0]);_gaaf :=_gbaf (_eegf [1],_eff ,_fcgd );_dbbe :=_gbaf (_eegf [2],_eff ,_fcgd );_acdg :=len (_gaaf );_febf :=len (_dbbe );_cagd :=[][]Result {};var _gddb ,_aebc []Result ;for _agbga ,_agdg :=range _afbc {if _agbga < _acdg {_gddb =_gaaf [_agbga ];}else {_gddb =_ffc (MakeErrorResultType (ErrorTypeNA ,""),_fcgd );};if _agbga < _febf {_aebc =_dbbe [_agbga ];}else {_aebc =_ffc (MakeErrorResultType (ErrorTypeNA ,""),_fcgd );};_cagd =append (_cagd ,_ddad ([]Result {MakeListResult (_agdg ),MakeListResult (_gddb ),MakeListResult (_aebc )}).ValueList );};return MakeArrayResult (_cagd );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_eca PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ccda :=_eca ._affa .Reference (ctx ,ev );switch _ccda .Type {case ReferenceTypeSheet :_ecee :=_eca .horizontalRangeReference (_ccda .Value );if _bbfb ,_bf :=ev .GetFromCache (_ecee );_bf {return _bbfb ;};_gagad :=ctx .Sheet (_ccda .Value );_aadf ,_decb :=_efbd (_gagad ,_eca ._ebbd ,_eca ._eecfd );_fegb :=_bedb (_gagad ,ev ,_aadf ,_decb );ev .SetCache (_ecee ,_fegb );return _fegb ;default:return MakeErrorResult (_befc .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccda .Type ));};};func _cffa (_dgbc Result )*criteriaParsed {_egea :=_dgbc .Type ==ResultTypeNumber ;_gbeg :=_dgbc .ValueNumber ;_babfc :=_fged .ToLower (_dgbc .ValueString );_babf :=_ggec (_babfc );return &criteriaParsed {_egea ,_gbeg ,_babfc ,_babf };};

// String returns a string representation of PrefixExpr.
func (_eagd PrefixExpr )String ()string {return _befc .Sprintf ("\u0025\u0073\u0021%\u0073",_eagd ._aeag .String (),_eagd ._eeecd .String ());};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eefg :=args [0];if _eefg .Type !=ResultTypeNumber &&_eefg .Type !=ResultTypeString &&_eefg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_eaaf :=args [1].ValueString ;switch _eefg .Type {case ResultTypeNumber :return MakeStringResult (_bgaec .Number (_eefg .ValueNumber ,_eaaf ));case ResultTypeString :return MakeStringResult (_bgaec .String (_eefg .ValueString ,_eaaf ));case ResultTypeEmpty :return MakeStringResult (_bgaec .Number (0,_eaaf ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};const _fabd =57372;

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcede :=args [0];switch _fcede .Type {case ResultTypeError :return _fcede ;case ResultTypeNumber ,ResultTypeString :return _bbbgb (args [0]);case ResultTypeList :_dbaa :=_fcede .ValueList ;_fdagc :=[]Result {};for _ ,_feaed :=range _dbaa {_adbf :=_bbbgb (_feaed );if _adbf .Type ==ResultTypeError {return _adbf ;};_fdagc =append (_fdagc ,_adbf );};return MakeListResult (_fdagc );case ResultTypeArray :_ggdg :=_fcede .ValueArray ;_dafce :=[][]Result {};for _ ,_eafc :=range _ggdg {_becb :=[]Result {};for _ ,_addg :=range _eafc {_dgb :=_bbbgb (_addg );if _dgb .Type ==ResultTypeError {return _dgb ;};_becb =append (_becb ,_dgb );};_dafce =append (_dafce ,_becb );};return MakeArrayResult (_dafce );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};var _afd =[]*_dfde .Regexp {};type criteriaRegex struct{_cbccg byte ;_bgef string ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bfff .Lock ();defer _bfff .Unlock ();if _ ,_ebfg :=_bdea [name ];_ebfg {_bfgbf .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_bdea [name ]=fn ;};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbgd :=args [0].AsNumber ();if _bbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_afgfd :=float64 (1);if _bbgd .ValueNumber < 0{_afgfd =-1;};if len (args )> 1{_bcecd :=args [1].AsNumber ();if _bcecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afgfd =_bcecd .ValueNumber ;};if _afgfd < 0&&_bbgd .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_cggd .Ceil (_bbgd .ValueNumber ));};_ddde :=_bbgd .ValueNumber ;_ddde ,_eaad :=_cggd .Modf (_ddde /_afgfd );if _eaad > 0{_ddde ++;};return MakeNumberResult (_ddde *_afgfd );};

// Eval evaluates and returns the result of a Negate expression.
func (_bbbg Negate )Eval (ctx Context ,ev Evaluator )Result {_bfbadb :=_bbbg ._gcfa .Eval (ctx ,ev );if _bfbadb .Type ==ResultTypeNumber {return MakeNumberResult (-_bfbadb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// Reference returns a string reference value to a horizontal range with prefix.
func (_dggg PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_cdcb :=_dggg ._affa .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dggg .horizontalRangeReference (_cdcb .Value )};};func (_dab *noCache )GetFromCache (key string )(Result ,bool ){return _bdgb ,false };var _afbg =[...]uint8 {0,17,33,49,63,78,93,108};

// Eval evaluates and returns the result of the cell reference.
func (_fbda CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fbda ._effc ,ev )};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// String returns a string representation for Negate.
func (_cdae Negate )String ()string {return "\u002d"+_cdae ._gcfa .String ()};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggadb :=args [0].Type ;for _ ,_bddaa :=range args {if _bddaa .Type !=_ggadb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _ggadb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_eeag :=len (args [0].ListValues ());_cbcbd :=make ([]float64 ,_eeag );for _eabde :=range _cbcbd {_cbcbd [_eabde ]=1.0;};for _ ,_cafg :=range args {if len (_cafg .ListValues ())!=_eeag {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _febe ,_gaaed :=range _cafg .ListValues (){_gaaed =_gaaed .AsNumber ();if _gaaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_cbcbd [_febe ]=_cbcbd [_febe ]*_gaaed .ValueNumber ;};};_bddcf :=0.0;for _ ,_befba :=range _cbcbd {_bddcf +=_befba ;};return MakeNumberResult (_bddcf );};return MakeNumberResult (1.0);};

// Update returns the same object as updating sheet references does not affect Number.
func (_caad Number )Update (q *_cdd .UpdateQuery )Expression {return _caad };func (_dcaf node )String ()string {return _befc .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dcaf ._bgff ,_abe (string (_dcaf ._fddcc )));};const _dedg =57350;var _beed =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_feac :=MakeNumberResult (0);for _ ,_cgde :=range args {_cgde =_cgde .AsNumber ();switch _cgde .Type {case ResultTypeNumber :_feac .ValueNumber +=_cgde .ValueNumber *_cgde .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ebbb :=SumSquares (_cgde .ListValues ());if _ebbb .Type !=ResultTypeNumber {return _ebbb ;};_feac .ValueNumber +=_ebbb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cgde ;case ResultTypeEmpty :default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_cgde .Type ));};};return _feac ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_feba :=args [0];if _feba .Type !=ResultTypeArray &&_feba .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dcca :=_abgcd (_feba );_dabe :=args [2];if _dabe .Type !=ResultTypeArray &&_dabe .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dfbg :=_abgcd (_dabe );_dbgac :=_cffa (args [1]);_bdaba :=0.0;for _cedg ,_afbf :=range _dcca {for _dbga ,_eed :=range _afbf {if _feg (_eed ,_dbgac ){_bdaba +=_dfbg [_cedg ][_dbga ].ValueNumber ;};};};return MakeNumberResult (_bdaba );};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fgace (args ,true )};var _bffdb =[...]int {-1,1,1,-1,-2,0};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_cggf :=len (args );if _cggf < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adabf :=args [0].ValueNumber ;if _adabf ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bcg :=[]float64 {};for _ ,_edbe :=range args [1:]{switch _edbe .Type {case ResultTypeNumber :_bcg =append (_bcg ,_edbe .ValueNumber );case ResultTypeArray ,ResultTypeList :_ee :=_abgcd (_edbe );for _ ,_fcd :=range _ee {for _ ,_cdec :=range _fcd {if _cdec .Type ==ResultTypeNumber &&!_cdec .IsBoolean {_bcg =append (_bcg ,_cdec .ValueNumber );};};};};};_cedac :=0.0;for _egc ,_faaef :=range _bcg {_cedac +=_faaef /_cggd .Pow (1+_adabf ,float64 (_egc )+1);};return MakeNumberResult (_cedac );};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_cagc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ffbgd :=_cagc ._afda .Reference (ctx ,ev );switch _ffbgd .Type {case ReferenceTypeSheet :_afe :=_cagc .verticalRangeReference (_ffbgd .Value );if _ddc ,_bffd :=ev .GetFromCache (_afe );_bffd {return _ddc ;};_gfad :=ctx .Sheet (_ffbgd .Value );_agefe ,_badf :=_bdec (_gfad ,_cagc ._eead ,_cagc ._gbef );_fd :=_bedb (_gfad ,ev ,_agefe ,_badf );ev .SetCache (_afe ,_fd );return _fd ;default:return MakeErrorResult (_befc .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffbgd .Type ));};};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_gdbb ,_fdgf :=_ffgd ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fdgf .Type !=ResultTypeEmpty {return _fdgf ;};_begg :=_gdbb ._efca ;_abf :=_gdbb ._cfaeb ;_dfdgg :=_gdbb ._cfbf ;_ded :=_gdbb ._eedda ;_fcde :=len (_begg );if _abf > _fcde {_abf =_fcde ;};_abge :=_abf +_dfdgg ;if _abge > _fcde {_abge =_fcde ;};_eabf :=_begg [0:_abf ]+_ded +_begg [_abge :];return MakeStringResult (_eabf );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_gdcbe :=len (args );if _gdcbe < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdcbe > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbff :=args [0];_dcgef :=args [1];if _dcgef .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eecae :=args [2].AsNumber ();if _eecae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcac :=false ;if _gdcbe ==4&&args [3].Type !=ResultTypeEmpty {_cf :=args [3].AsNumber ();if _cf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cf .ValueNumber ==0{_bcac =true ;};};_fcgfd :=int (_eecae .ValueNumber )-1;_ddbg :=-1;_abdb :=false ;_cdee :for _geba ,_fgeg :=range _dcgef .ValueArray {if len (_fgeg )==0{continue ;};_abae :=_fgeg [0];switch _fcfe (_abae ,_gbff ,false ,_bcac ){case _fgdeg :_ddbg =_geba ;case _ddgada :_ddbg =_geba ;_abdb =true ;break _cdee ;};};if _ddbg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_begaa :=_dcgef .ValueArray [_ddbg ];if _fcgfd < 0||_fcgfd >=len (_begaa ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _abdb ||!_bcac {return _begaa [_fcgfd ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bedaba ,_efbeb Expression };

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dagf ,_ca :=_dg (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ca .Type ==ResultTypeError {return _ca ;};_acff :=_dagf ._aeeec ;_abbe :=_dagf ._ddcb ;_def :=_dagf ._fedg ;_cafc :=_dagf ._dgdg ;_fgdd :=_dagf ._gad ;_gff :=_dagf ._ecgg ;_efaf :=_abcdb (_acff ,_abbe ,_def ,0,_gff );_geegb :=0.0;if _cafc ==1{if _gff ==0{_geegb =_efaf +_def *_acff ;}else {_geegb =_efaf ;};_cafc ++;};for _bgad :=_cafc ;_bgad <=_fgdd ;_bgad ++{if _gff ==1{_geegb +=_efaf -(_gffca (_acff ,_bgad -2,_efaf ,_def ,1)-_efaf )*_acff ;}else {_geegb +=_efaf -_gffca (_acff ,_bgad -1,_efaf ,_def ,0)*_acff ;};};return MakeNumberResult (_geegb );};const _eab =57364;

// String returns a string representation of a named range.
func (_abfb NamedRangeRef )String ()string {return _abfb ._eggg };var _dddf ,_effb ,_ecafc ,_edde ,_bfcdg ,_caag ,_faaf ,_eec ,_bgg ,_bcfg ,_gebb ,_bfeab ,_ffgc ,_dff ,_dcbc *_dfde .Regexp ;const _gggd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _afc (){_gacg =_dfde .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bdaf =_dfde .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_afeee =_dfde .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_fabb =_dfde .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_egdgf =_dfde .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_ddgfb =_dfde .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _bdec (_bfbcc Context ,_dea ,_agaee string )(string ,string ){_faec :=_dea +"\u0031";_bafe :=_bfbcc .LastRow (_dea );_fegac :=_agaee +_fbgg .Itoa (_bafe );return _faec ,_fegac ;};

// Reference returns a string reference value to an expression with prefix.
func (_fdbf PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_ebb :=_fdbf ._aeag .Reference (ctx ,ev );_eabd :=_fdbf ._eeecd .Reference (ctx ,ev );if _ebb .Type ==ReferenceTypeSheet &&_eabd .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_ebb .Value +"\u0021"+_eabd .Value };};return ReferenceInvalid ;};var _eede =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};var _fbdg =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Reference returns a string reference value to a vertical range with prefix.
func (_eabcg PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_eaee :=_eabcg ._afda .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_eabcg .verticalRangeReference (_eaee .Value )};};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// String returns a string representation of SheetPrefixExpr.
func (_cdbd SheetPrefixExpr )String ()string {return _cdbd ._cbbg };func _bbbgb (_eeca Result )Result {if _eeca .Type ==ResultTypeEmpty {return _eeca ;};_agbgg :=_eeca .AsString ();if _agbgg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _eeca .IsBoolean {if _agbgg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _agbgg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_fged .ToLower (_agbgg .ValueString ));};};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _aeda =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func (_abfg ReferenceType )String ()string {if _abfg >=ReferenceType (len (_eggc )-1){return _befc .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_abfg );};return _cbdcgd [_eggc [_abfg ]:_eggc [_abfg +1]];};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egec :=0;_eaba :=false ;for _ ,_ggff :=range args {switch _ggff .Type {case ResultTypeList ,ResultTypeArray :_cecca :=Xor (_ggff .ListValues ());if _cecca .Type ==ResultTypeError {return _cecca ;};if _cecca .ValueNumber !=0{_egec ++;};_eaba =true ;case ResultTypeNumber :if _ggff .ValueNumber !=0{_egec ++;};_eaba =true ;case ResultTypeString :case ResultTypeError :return _ggff ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_eaba {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_egec %2!=0);};const _abcg =57370;

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_beb NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_dcfe :=ctx .NamedRange (_beb ._eggg );_feace :=_dcfe .Value ;if _bbb ,_adda :=ev .GetFromCache (_feace );_adda {return _bbb ;};_ggb :=_fged .Split (_feace ,"\u0021");if len (_ggb )!=2{return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_feace ));};_eddb :=ctx .Sheet (_ggb [0]);_fdega :=_fged .Split (_ggb [1],"\u003a");switch len (_fdega ){case 1:_feaee :=ev .Eval (_eddb ,_fdega [0]);ev .SetCache (_feace ,_feaee );return _feaee ;case 2:_egce :=_bedb (_eddb ,ev ,_fdega [0],_fdega [1]);ev .SetCache (_feace ,_egce );return _egce ;};return MakeErrorResult (_befc .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_dcfe .Type ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccafb ,_fgae ,_efa :=_bgacc (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _efa .Type ==ResultTypeError {return _efa ;};_dfb ,_efa :=_gccg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _efa .Type ==ResultTypeError {return _efa ;};if _dfb >=_ccafb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfg :=args [3].ValueNumber ;if _bfg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_faaa :=args [4].ValueNumber ;if _faaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dfef :=args [5].ValueNumber ;if _dfef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbfdd :=float64 (int (args [6].ValueNumber ));if !_daedf (_dbfdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_degfg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_degfg =int (args [7].ValueNumber );if !_ebf (_degfg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_fdfgbe ,_efa :=_gceb (_dfb ,_fgae ,_degfg );if _efa .Type ==ResultTypeError {return _efa ;};_fdfgbe *=_dbfdd ;_ddged ,_efa :=_gceb (_ccafb ,_fgae ,_degfg );if _efa .Type ==ResultTypeError {return _efa ;};_ddged *=_dbfdd ;_bggfb ,_efa :=_gceb (_dfb ,_ccafb ,_degfg );if _efa .Type ==ResultTypeError {return _efa ;};_bggfb *=_dbfdd ;_cade :=_dfef +_fdfgbe *100*_bfg /_dbfdd ;_cade /=_faaa +_bggfb *100*_bfg /_dbfdd ;_cade --;_cade *=_dbfdd /_ddged ;return MakeNumberResult (_cade );};var _dbgd =[]*_dfde .Regexp {};var _egfb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_gffbd :=len (args );if _gffbd !=6&&_gffbd !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbag ,_ddafa ,_bfda :=_bgacc (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _bfda .Type ==ResultTypeError {return _bfda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cddg :=args [2].ValueNumber ;if _cddg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fgaa :=args [3].ValueNumber ;if _fgaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gce :=args [4].ValueNumber ;if _gce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccea :=args [5];if _eccea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fabg :=_eccea .ValueNumber ;if !_daedf (_fabg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ffdag :=0;if _gffbd ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdag =int (args [6].ValueNumber );if !_ebf (_ffdag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_cdcbg ,_bfda :=_fdbb (_bbag ,_ddafa ,_cddg ,_fgaa ,_gce ,_fabg ,_ffdag );if _bfda .Type ==ResultTypeError {return _bfda ;};return MakeNumberResult (_cdcbg );};

// GetEpoch returns a null time object for the invalid reference context.
func (_eagf *ivr )GetEpoch ()_gbcec .Time {return _gbcec .Time {}};func (_eggd VerticalRange )verticalRangeReference ()string {return _befc .Sprintf ("\u0025\u0073\u003a%\u0073",_eggd ._gdgf ,_eggd ._gggg );};var _fdfa =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Match implements the MATCH function.
func Match (args []Result )Result {_cdge :=len (args );if _cdge !=2&&_cdge !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcbd :=1;if _cdge ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eadca :=args [2].ValueNumber ;if _eadca ==-1||_eadca ==0{_bcbd =int (_eadca );};};_bgce :=args [1];var _bcgb []Result ;switch _bgce .Type {case ResultTypeList :_bcgb =_bgce .ValueList ;case ResultTypeArray :_fceda :=_bgce .ValueArray ;if len (_fceda [0])!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};for _ ,_ebafg :=range _fceda {_bcgb =append (_bcgb ,_ebafg [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_begfg :=_cffa (args [0]);switch _bcbd {case 0:for _fcga ,_eaffe :=range _bcgb {if _ebe (_eaffe ,_begfg ){return MakeNumberResult (float64 (_fcga +1));};};case -1:for _gabfd :=0;_gabfd < len (_bcgb );_gabfd ++{if _ebe (_bcgb [_gabfd ],_begfg ){return MakeNumberResult (float64 (_gabfd +1));};if _begfg ._ecfaf &&(_bcgb [_gabfd ].ValueNumber < _begfg ._dabb ){if _gabfd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gabfd ));};};case 1:for _ccge :=0;_ccge < len (_bcgb );_ccge ++{if _ebe (_bcgb [_ccge ],_begfg ){return MakeNumberResult (float64 (_ccge +1));};if _begfg ._ecfaf &&(_bcgb [_ccge ].ValueNumber > _begfg ._dabb ){if _ccge ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_ccge ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ebbf :=args [1].ValueNumber ;_adaf :=args [0];var _ggae float64 ;switch _adaf .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_ggae =_adaf .ValueNumber ;case ResultTypeString :_dfbe :=DateValue ([]Result {args [0]});if _dfbe .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ggae =_dfbe .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gdgb :=_cad (_ggae );_fcfb :=_gdgb .AddDate (0,int (_ebbf ),0);_fed ,_cdb ,_defd :=_fcfb .Date ();_gdgg :=_dfcaa (_fed ,int (_cdb ),_defd );if _gdgg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_gdgg );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dcb ,_add :=_gd ("\u0046\u0049\u004e\u0044",args );if _add .Type !=ResultTypeEmpty {return _add ;};_ccee :=_dcb ._cge ;if _ccee ==""{return MakeNumberResult (1.0);};_cedf :=_dcb ._ffed ;_cgcb :=_dcb ._ffcdg -1;_cdcd :=1;_afdb :=0;for _faga :=range _cedf {if _faga !=0{_ebbfc :=1;if _faga -_afdb > 1{_ebbfc =2;};_cdcd +=_ebbfc ;};if _cdcd > _cgcb {_aadc :=_fged .Index (_cedf [_faga :],_ccee );if _aadc ==0{return MakeNumberResult (float64 (_cdcd ));};};_afdb =_faga ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _dcdae (_abbaf int )string {if _abbaf >=1&&_abbaf -1< len (_dgce ){if _dgce [_abbaf -1]!=""{return _dgce [_abbaf -1];};};return _befc .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_abbaf );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_eggg string };var _bcggd =[...]int {0};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {v }};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};const _gdebb ="\u0028\u0020\u0028"+_cdg +"\u007c"+_beeb +"\u007c"+_agef +"\u007c"+_beab +"\u0029\u0029\u003f\u0024";func _abcdb (_ggcc ,_dcac ,_afaf ,_bdfgc float64 ,_ced int )float64 {var _fafe float64 ;if _ggcc ==0{_fafe =(_afaf +_bdfgc )/_dcac ;}else {_fdd :=_cggd .Pow (1+_ggcc ,_dcac );if _ced ==1{_fafe =(_bdfgc *_ggcc /(_fdd -1)+_afaf *_ggcc /(1-1/_fdd ))/(1+_ggcc );}else {_fafe =_bdfgc *_ggcc /(_fdd -1)+_afaf *_ggcc /(1-1/_fdd );};};return -_fafe ;};const (_gdga rmode =iota ;_ffcf ;_fcfa ;);

// Value returns a string version of the result.
func (_fcacb Result )Value ()string {switch _fcacb .Type {case ResultTypeNumber :_daed :=_fbgg .FormatFloat (_fcacb .ValueNumber ,'f',-1,64);if len (_daed )> 12{_fcfg :=12;for _fffc :=_fcfg ;_fffc > 0&&_daed [_fffc ]=='0';_fffc --{_fcfg --;};_daed =_daed [0:_fcfg +1];};return _daed ;case ResultTypeError :return _fcacb .ValueString ;case ResultTypeString :return _fcacb .ValueString ;case ResultTypeList :if len (_fcacb .ValueList )==0{return "";};return _fcacb .ValueList [0].Value ();case ResultTypeArray :if len (_fcacb .ValueArray )==0||len (_fcacb .ValueArray [0])==0{return "";};return _fcacb .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_eefce ,_daeb :=_afaeb (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _daeb .Type ==ResultTypeError {return _daeb ;};_feaeg :=_eefce ._aacg ;_gacb :=_eefce ._gage ;_ebcg :=_eefce ._fadc ;_gagc :=_eefce ._baab ;_fagg :=_eefce ._dccd ;_daedb :=_eefce ._ecb ;_cacc :=_eefce ._bdebf ;_daec ,_edc :=_gceb (_gacb ,_ebcg ,_cacc );if _edc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_afga :=_daec *_daedb *_feaeg ;if _fagg ==0{return MakeNumberResult (_afga );};_cag :=_feaeg *_daedb ;_bbeba :=_feaeg -_gagc ;_febcb :=int ((_bbeba -_afga )/_cag );if _fagg <=_febcb {return MakeNumberResult (_cag );}else if _fagg ==_febcb +1{return MakeNumberResult (_bbeba -_cag *float64 (_febcb )-_afga );}else {return MakeNumberResult (0);};};const _cage =86400000000000;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_baf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgde :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdee :=args [2].ValueNumber ;if _bdee ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_baf -_fgde )/_bdee );};func _ddecc (_fbe ,_efcda int )string {const TOKSTART =4;if !_debg {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_gcef :=range _dcg {if _gcef ._dfee ==_fbe &&_gcef ._fggg ==_efcda {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_gcef ._ggdfd ;};};_edfa :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_dcdae (_efcda );_agbe :=make ([]int ,0,4);_gbag :=_ce [_fbe ];for _cac :=TOKSTART ;_cac -1< len (_dgce );_cac ++{if _dfeef :=_gbag +_cac ;_dfeef >=0&&_dfeef < _efcaf &&_beed [_dafbg [_dfeef ]]==_cac {if len (_agbe )==cap (_agbe ){return _edfa ;};_agbe =append (_agbe ,_cac );};};if _fdfa [_fbe ]==-2{_feed :=0;for _bffdb [_feed ]!=-1||_bffdb [_feed +1]!=_fbe {_feed +=2;};for _feed +=2;_bffdb [_feed ]>=0;_feed +=2{_acecd :=_bffdb [_feed ];if _acecd < TOKSTART ||_bffdb [_feed +1]==0{continue ;};if len (_agbe )==cap (_agbe ){return _edfa ;};_agbe =append (_agbe ,_acecd );};if _bffdb [_feed +1]!=0{return _edfa ;};};for _ggcf ,_ggee :=range _agbe {if _ggcf ==0{_edfa +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_edfa +="\u0020\u006f\u0072\u0020";};_edfa +=_dcdae (_ggee );};return _edfa ;};func _abec (_fbcac ,_eeac ,_fedf ,_cgdeb ,_gaafb ,_fbea float64 )float64 {var _fcf ,_agc float64 ;_cgbf :=0.0;_agbgc :=_cggd .Ceil (_gaafb );_fbcbgd :=_fbcac -_eeac ;_cdef :=false ;_dcdb :=0.0;for _gdag :=1.0;_gdag <=_agbgc ;_gdag ++{if !_cdef {_fcf =_faff (_fbcac ,_eeac ,_fedf ,_gdag ,_fbea );_dcdb =_fbcbgd /(_fedf -_gdag +1);if _dcdb > _fcf {_agc =_dcdb ;_cdef =true ;}else {_agc =_fcf ;_fbcbgd -=_fcf ;};}else {_agc =_dcdb ;};if _gdag ==_agbgc {_agc *=_gaafb +1-_agbgc ;};_cgbf +=_agc ;};return _cgbf ;};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_cbbg string };const _cccc =57344;func _dfce (_fbegd []Result )[]float64 {_dffd :=make ([]float64 ,0);for _ ,_cfbc :=range _fbegd {if _cfbc .Type ==ResultTypeEmpty {continue ;};_cfbc =_cfbc .AsNumber ();switch _cfbc .Type {case ResultTypeNumber :if !_cfbc .IsBoolean {_dffd =append (_dffd ,_cfbc .ValueNumber );};case ResultTypeList ,ResultTypeArray :_dffd =append (_dffd ,_dfce (_cfbc .ListValues ())...);case ResultTypeString :default:_bfgbf .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfbc .Type );};};return _dffd ;};

// String returns a string representation of ConstArrayExpr.
func (_eged ConstArrayExpr )String ()string {return ""};var _beaf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ffgb [][]Expression };var _bdea =map[string ]Function {};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_aaea :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aaea =int (args [1].ValueNumber );if _aaea < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _aaea ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_edag :=args [0].Value ();if _aaea > len (_edag ){return MakeStringResult (_edag );};return MakeStringResult (_edag [0:_aaea ]);};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bffb :=args [0].Ref ;for _bffb .Type ==ReferenceTypeNamedRange {_bffb =ctx .NamedRange (_bffb .Value );};_aceda :="";switch _bffb .Type {case ReferenceTypeCell :_aceda =_bffb .Value ;case ReferenceTypeRange :_bggfa :=_fged .Split (_bffb .Value ,"\u003a");if len (_bggfa )==2{_aceda =_bggfa [0];};default:return MakeErrorResult (_befc .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bffb .Type ));};_dcbd ,_gag :=_ecga .ParseCellReference (_aceda );if _gag !=nil {return MakeErrorResult (_befc .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gag .Error ()));};_beaa ,_aabc ,_gebgd :=_dcbd .Column ,_dcbd .RowIdx ,_dcbd .SheetName ;_efcc :=args [1].AsNumber ();if _efcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_fdge :=args [2].AsNumber ();if _fdge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _fcea ,_gegbg Result ;if len (args )==3{_fcea =MakeNumberResult (1);_gegbg =MakeNumberResult (1);}else {_fcea =args [3].AsNumber ();if _fcea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _fcea .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gegbg =args [4].AsNumber ();if _gegbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gegbg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_dbgacd :=_ecga .ColumnToIndex (_beaa );_dggb :=_aabc +uint32 (_efcc .ValueNumber );_agbb :=_dbgacd +uint32 (_fdge .ValueNumber );_cdafc :=_dggb +uint32 (_fcea .ValueNumber );_eaff :=_agbb +uint32 (_gegbg .ValueNumber );if _fcea .ValueNumber > 0{_cdafc --;}else {_cdafc ++;_dggb ,_cdafc =_cdafc ,_dggb ;};if _gegbg .ValueNumber > 0{_eaff --;}else {_eaff ++;_agbb ,_eaff =_eaff ,_agbb ;};_gccde :=_befc .Sprintf ("\u0025\u0073\u0025\u0064",_ecga .IndexToColumn (_agbb ),_dggb );_bgbc :=_befc .Sprintf ("\u0025\u0073\u0025\u0064",_ecga .IndexToColumn (_eaff ),_cdafc );if _gebgd ==""{return _bedb (ctx ,ev ,_gccde ,_bgbc );}else {return _bedb (ctx .Sheet (_gebgd ),ev ,_gccde ,_bgbc );};};const _befe =57362;

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _aea (args ,_ffcf )};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfd :=args [0].AsNumber ();if _bfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbdd :=_cggd .Signbit (_bfd .ValueNumber );_befff ,_adgef :=_cggd .Modf (_bfd .ValueNumber /2);_gbgcf :=_befff *2;if _adgef !=0{if !_bgbdd {_gbgcf +=2;}else {_gbgcf -=2;};};return MakeNumberResult (_gbgcf );};const _egdd ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbgcf :=args [0].AsNumber ();if _dbgcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _ccacfe float64 ;_ffe :=args [1].AsNumber ();if _ffe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccacfe =_ffe .ValueNumber ;if _ccacfe < 0&&_dbgcf .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_geda :=_dbgcf .ValueNumber ;_geda ,_dc :=_cggd .Modf (_geda /_ccacfe );if _dc !=0{if _dbgcf .ValueNumber < 0&&_dc < 0{_geda --;};};return MakeNumberResult (_geda *_ccacfe );};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gfdaa :=len (args );if _gfdaa < 2||_gfdaa > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agdc :=args [0];if _agdc .Type !=ResultTypeArray &&_agdc .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_facc :=args [1].AsNumber ();if _facc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfdf :=int (_facc .ValueNumber )-1;_ecfe :=-1;if _gfdaa ==3&&args [2].Type !=ResultTypeEmpty {_fafb :=args [2].AsNumber ();if _fafb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ecfe =int (_fafb .ValueNumber )-1;};if _dfdf ==-1&&_ecfe ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _agae []Result ;if _agdc .Type ==ResultTypeArray {_gdcb :=_agdc .ValueArray ;if _dfdf < -1||_dfdf >=len (_gdcb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dfdf ==-1{if _ecfe >=len (_gdcb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dgegg :=[][]Result {};for _ ,_dbefb :=range _gdcb {_fgec :=_dbefb [_ecfe ];if _fgec .Type ==ResultTypeEmpty {_fgec =MakeNumberResult (0);};_dgegg =append (_dgegg ,[]Result {_fgec });};return MakeArrayResult (_dgegg );};_agae =_gdcb [_dfdf ];}else {_edea :=_agdc .ValueList ;if _dfdf < -1||_dfdf >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dfdf ==-1{if _ecfe >=len (_edea ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_acgda :=_edea [_ecfe ];if _acgda .Type ==ResultTypeEmpty {_acgda =MakeNumberResult (0);};return _acgda ;};_agae =_edea ;};if _ecfe < -1||_ecfe > len (_agae ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ecfe ==-1{_bedg :=[]Result {};for _ ,_efad :=range _agae {if _efad .Type ==ResultTypeEmpty {_bedg =append (_bedg ,MakeNumberResult (0));}else {_bedg =append (_bedg ,_efad );};};return MakeArrayResult ([][]Result {_bedg });};_dcdg :=_agae [_ecfe ];if _dcdg .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _dcdg ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func _efbd (_feafb Context ,_daeg ,_beg int )(string ,string ){_gdcdf :="\u0041"+_fbgg .Itoa (_daeg );_gfeg :=_feafb .LastColumn (_daeg ,_beg );_fbfa :=_gfeg +_fbgg .Itoa (_beg );return _gdcdf ,_fbfa ;};var InvalidReferenceContext =&ivr {};var _dcg =[...]struct{_dfee int ;_fggg int ;_ggdfd string ;}{};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Eval evaluates and returns the result of a sheet expression.
func (_ebcc SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};var _bdgb Result =MakeEmptyResult ();

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_edfe :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edfe =int (args [1].ValueNumber );if _edfe < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _edfe ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dbfg :=args [0].Value ();_fdeb :=len (_dbfg );if _edfe > _fdeb {return MakeStringResult (_dbfg );};return MakeStringResult (_dbfg [_fdeb -_edfe :_fdeb ]);};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_dadg ,_fcb :=_gd ("\u0046\u0049\u004e\u0044",args );if _fcb .Type !=ResultTypeEmpty {return _fcb ;};_gfbcd :=_fged .ToLower (_dadg ._cge );_febeb :=_fged .ToLower (_dadg ._ffed );if _gfbcd ==""{return MakeNumberResult (1.0);};_cgec :=_dadg ._ffcdg -1;_ebbg :=1;_bdfdd :=0;for _bdag :=range _febeb {if _bdag !=0{_cbbdb :=1;if _bdag -_bdfdd > 1{_cbbdb =2;};_ebbg +=_cbbdb ;};if _ebbg > _cgec {_gccd :=_ege .Index (_gfbcd ,_febeb [_bdag :]);if _gccd ==0{return MakeNumberResult (float64 (_ebbg ));};};_bdfdd =_bdag ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _efac =[...]string {};

// String returns a string representation of CellRef.
func (_aec CellRef )String ()string {return _aec ._effc };

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_gcde :=len (args );if _gcde < 3||_gcde > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eacf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcaf :=args [1].ValueNumber ;if _gcaf ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgfe :=args [2].ValueNumber ;_bfad :=0.0;if _gcde >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfad =args [3].ValueNumber ;};_egbc :=0.0;if _gcde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egbc =args [4].ValueNumber ;if _egbc !=0{_egbc =1;};};var _gagaae float64 ;if _eacf ==0{_gagaae =(_cgfe +_bfad )/_gcaf ;}else {_ffda :=_cggd .Pow (1+_eacf ,_gcaf );if _egbc ==1{_gagaae =(_bfad *_eacf /(_ffda -1)+_cgfe *_eacf /(1-1/_ffda ))/(1+_eacf );}else {_gagaae =_bfad *_eacf /(_ffda -1)+_cgfe *_eacf /(1-1/_ffda );};};return MakeNumberResult (-_gagaae );};

// String returns a string representation of a vertical range with prefix.
func (_ada PrefixVerticalRange )String ()string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ada ._afda .String (),_ada ._eead ,_ada ._gbef );};const _fgab =-1000;

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_facg :=args [0].Ref ;if _facg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_facg .Value ,ev ).IsBoolean );};

// Reference returns a string reference value to a sheet.
func (_agda SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_agda ._cbbg };};const _egbe ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func _fdbb (_gbgc ,_daa ,_gbgad ,_dbd ,_geab ,_fefe float64 ,_ggbb int )(float64 ,Result ){_fdgb :=int (_fefe );_aaggc :=_aafb (_gbgc ,_daa ,_fdgb ,_ggbb );_feagc :=_bgd (_gbgc ,_daa ,_fdgb ,_ggbb )/_aaggc ;_cafb ,_gdgc :=_bdae (_gbgc ,_daa ,_fdgb ,_ggbb );if _gdgc .Type ==ResultTypeError {return 0,_gdgc ;};_gcdb :=_adc (_gbgc ,_daa ,_fdgb ,_ggbb );_caab :=_geab /_cggd .Pow (1+_dbd /_fefe ,_cafb -1+_feagc );_caab -=100*_gbgad /_fefe *_gcdb /_aaggc ;_acdgg :=100*_gbgad /_fefe ;_fdad :=1+_dbd /_fefe ;for _bgbdb :=0.0;_bgbdb < _cafb ;_bgbdb ++{_caab +=_acdgg /_cggd .Pow (_fdad ,_bgbdb +_feagc );};return _caab ,MakeEmptyResult ();};func _bcaf (_abd string )(int ,int ,float64 ,bool ,bool ,Result ){_cbfbg :="";_aadeb :=[]string {};for _gbd ,_fbae :=range _agfcb {_aadeb =_fbae .FindStringSubmatch (_abd );if len (_aadeb )> 1{_cbfbg =_gbd ;break ;};};if _cbfbg ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_acaa :=_aadeb [1]=="";_aadeb =_aadeb [49:];_cbffb :=len (_aadeb );_dddb :=_aadeb [_cbffb -1];_eeea :=_dddb =="\u0061\u006d";_fdcf :=_dddb =="\u0070\u006d";var _dccae ,_eeef int ;var _dceec float64 ;var _aecg error ;switch _cbfbg {case "\u0068\u0068":_dccae ,_aecg =_fbgg .Atoi (_aadeb [0]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_eeef =0;_dceec =0;case "\u0068\u0068\u003am\u006d":_dccae ,_aecg =_fbgg .Atoi (_aadeb [0]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_eeef ,_aecg =_fbgg .Atoi (_aadeb [2]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_dceec =0;case "\u006d\u006d\u003as\u0073":_dccae =0;_eeef ,_aecg =_fbgg .Atoi (_aadeb [0]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_dceec ,_aecg =_fbgg .ParseFloat (_aadeb [2],64);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_dccae ,_aecg =_fbgg .Atoi (_aadeb [0]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_eeef ,_aecg =_fbgg .Atoi (_aadeb [2]);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};_dceec ,_aecg =_fbgg .ParseFloat (_aadeb [4],64);if _aecg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};};if _eeef >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};if _eeea ||_fdcf {if _dccae > 12||_dceec >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );}else if _dccae ==12{_dccae =0;};}else if _dccae >=24||_dceec >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cabe );};return _dccae ,_eeef ,_dceec ,_fdcf ,_acaa ,_bdgb ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cgce :=_gbcec .Now ();_ ,_efbf :=_cgce .Zone ();_bcdda :=_ceef +float64 (_cgce .Unix ()+int64 (_efbf ))/86400;return MakeNumberResult (_bcdda );};var _dgce =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gdcgg :=args [0].AsNumber ();if _gdcgg .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _gdcgg .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_edcdc (_gdcgg .ValueNumber ));};const _fabgd =57347;

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_gdgf ,_gggg string };var _fdg =[...]int {1};const _gcca =57369;

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {name ,args }};func (_gffec *Lexer )nextRaw ()*node {for len (_gffec ._dedea )!=0{_gefa :=<-_gffec ._dedea [len (_gffec ._dedea )-1];if _gefa !=nil {return _gefa ;};_gffec ._dedea =_gffec ._dedea [0:len (_gffec ._dedea )-1];};return <-_gffec ._adce ;};type cumulArgs struct{_aeeec float64 ;_ddcb float64 ;_fedg float64 ;_dgdg float64 ;_gad float64 ;_ecgg int ;};func _fcfe (_bcde ,_cgbca Result ,_agd ,_bgdad bool )cmpResult {_bcde =_bcde .AsNumber ();_cgbca =_cgbca .AsNumber ();if _bcde .Type !=_cgbca .Type {return _dggfe ;};if _bcde .Type ==ResultTypeNumber {if _bcde .ValueNumber ==_cgbca .ValueNumber {return _ddgada ;};if _bcde .ValueNumber < _cgbca .ValueNumber {return _fgdeg ;};return _cec ;};if _bcde .Type ==ResultTypeString {_agec :=_bcde .ValueString ;_deef :=_cgbca .ValueString ;if !_agd {_agec =_fged .ToLower (_agec );_deef =_fged .ToLower (_deef );};if _bgdad {_gebf :=_ege .Match (_deef ,_agec );if _gebf {return _ddgada ;}else {return _cec ;};};return cmpResult (_fged .Compare (_agec ,_deef ));};if _bcde .Type ==ResultTypeEmpty {return _ddgada ;};if _bcde .Type ==ResultTypeList {if len (_bcde .ValueList )< len (_cgbca .ValueList ){return _fgdeg ;};if len (_bcde .ValueList )> len (_cgbca .ValueList ){return _cec ;};for _ffba :=range _bcde .ValueList {_abbb :=_fcfe (_bcde .ValueList [_ffba ],_cgbca .ValueList [_ffba ],_agd ,_bgdad );if _abbb !=_ddgada {return _abbb ;};};return _ddgada ;};if _bcde .Type ==ResultTypeList {if len (_bcde .ValueArray )< len (_cgbca .ValueArray ){return _fgdeg ;};if len (_bcde .ValueArray )> len (_cgbca .ValueArray ){return _cec ;};for _gfag :=range _bcde .ValueArray {_facca :=_bcde .ValueArray [_gfag ];_caecg :=_bcde .ValueArray [_gfag ];if len (_facca )< len (_caecg ){return _fgdeg ;};if len (_facca )> len (_caecg ){return _cec ;};for _gagbe :=range _facca {_gbcd :=_fcfe (_facca [_gagbe ],_caecg [_gagbe ],_agd ,_bgdad );if _gbcd !=_ddgada {return _gbcd ;};};};return _ddgada ;};return _dggfe ;};

// Reference returns a string reference value to a cell.
func (_eee CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_eee ._effc };};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ffbe ,_gged :=_ecda (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _gged .Type ==ResultTypeError {return _gged ;};_accf :=_ffbe ._adbff ;_cadc :=_ffbe ._caa ;_bega :=_ffbe ._bcbb ;_dade :=_ffbe ._bgfd ;_gbgfg :=_ffbe ._bedab ;_fdff :=_ffbe ._ge ;return _dbcgc (_accf ,_cadc ,_bega ,_dade ,_gbgfg ,_fdff );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_dcag ,_efdaa ,_cfcc :=_faeb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cfcc .Type ==ResultTypeError {return _cfcc ;};if _efdaa < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _dcag ==0{return MakeNumberResult (0);};_cdcf :=_dcag < 0;if _cdcf {_dcag =-_dcag ;};_bbgbd :=args [0].Value ();_gdbf :=_fged .Split (_bbgbd ,"\u002e");_ebaab :=float64 (int (_dcag ));_dedf :=_gdbf [1];_afeb :=len (_dedf );_fgee :=int (_cggd .Log10 (_efdaa ))+1;_bdde :=float64 (_fgee -_afeb );_cecab ,_gceca :=_fbgg .ParseFloat (_dedf ,64);if _gceca !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_cecab *=_cggd .Pow (10,_bdde );_eefc :=_ebaab +_cecab /_efdaa ;if _cdcf {_eefc =-_eefc ;};return MakeNumberResult (_eefc );};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {e }};

// String returns an empty string for EmptyExpr.
func (_ecc EmptyExpr )String ()string {return ""};var _cecg []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgbde :=args [0];_dfca :=args [1];if _dfca .Type !=ResultTypeArray &&_dfca .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdbc :=_begc (_dfca );_fcbcc :=-1;for _baed ,_gabb :=range _gdbc {if _fcfe (_bgbde ,_gabb ,false ,false )==_ddgada {_fcbcc =_baed ;};};if _fcbcc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_aecff :=_gdbc ;if len (args )==3{_aecff =_begc (args [2]);};if _fcbcc < 0||_fcbcc >=len (_aecff ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _aecff [_fcbcc ];};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdca :=args [0].AsNumber ();if _cdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cegd :=float64 (0);if len (args )> 1{_gdeg :=args [1].AsNumber ();if _gdeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cegd =_gdeg .ValueNumber ;};_gefc :=_cdca .ValueNumber ;_eadab :=1.0;if _cegd >=0{_eadab =_cggd .Pow (1/10.0,_cegd );}else {return MakeNumberResult (0);};_gefc ,_cgf :=_cggd .Modf (_gefc /_eadab );_acaf :=0.99999;if _cgf > _acaf {_gefc ++;}else if _cgf < -_acaf {_gefc --;};_ =_cgf ;return MakeNumberResult (_gefc *_eadab );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func _adg (_fgada []Result ,_agdbg bool )Result {_ecbag :="\u004d\u0049\u004e";if _agdbg {_ecbag ="\u004d\u0049\u004e\u0041";};if len (_fgada )==0{return MakeErrorResult (_ecbag +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfge :=_cggd .MaxFloat64 ;for _ ,_adbe :=range _fgada {switch _adbe .Type {case ResultTypeNumber :if (_agdbg ||!_adbe .IsBoolean )&&_adbe .ValueNumber < _gfge {_gfge =_adbe .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_baagf :=_adg (_adbe .ListValues (),_agdbg );if _baagf .ValueNumber < _gfge {_gfge =_baagf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dgeee :=0.0;if _agdbg {_dgeee =_adbe .AsNumber ().ValueNumber ;};if _dgeee < _gfge {_gfge =_dgeee ;};default:_bfgbf .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ecbag +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_adbe .Type );};};if _gfge ==_cggd .MaxFloat64 {_gfge =0;};return MakeNumberResult (_gfge );};

// Reference returns an invalid reference for String.
func (_abbbg String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ddbd :=[]string {};for _dacea :=range _bdea {_ddbd =append (_ddbd ,_dacea );};for _fdgbg :=range _cdgb {_ddbd =append (_ddbd ,_fdgbg );};_ae .Strings (_ddbd );return _ddbd ;};const _bgcd =57357;func _eef (_fbcbg []Result ,_aacb countMode )float64 {_bfgd :=0.0;for _ ,_ddg :=range _fbcbg {switch _ddg .Type {case ResultTypeNumber :if _aacb ==_agcg ||(_aacb ==_bcdc &&!_ddg .IsBoolean ){_bfgd ++;};case ResultTypeList ,ResultTypeArray :_bfgd +=_eef (_ddg .ListValues (),_aacb );case ResultTypeString :if _aacb ==_agcg {_bfgd ++;};case ResultTypeEmpty :if _aacb ==_beaag {_bfgd ++;};};};return _bfgd ;};func Parse (r _begd .Reader )Expression {_fdfc :=&plex {LexReader (r ),nil };_ffaag (_fdfc );return _fdfc ._gdba ;};const _agef ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_a :=_cfccf (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _a .Type !=ResultTypeEmpty {return _a ;};_gadc :=_gfeca (args [1:]);_ccaff :=_cggd .MaxFloat64 ;_ecbf :=_abgcd (args [0]);for _ ,_dfbd :=range _gadc {_gbgd :=_ecbf [_dfbd ._cebg ][_dfbd ._dbdfa ].ValueNumber ;if _ccaff > _gbgd {_ccaff =_gbgd ;};};if _ccaff ==_cggd .MaxFloat64 {_ccaff =0;};return MakeNumberResult (float64 (_ccaff ));};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bace :=args [0].AsString ();if _bace .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_fged .ToUpper (_bace .ValueString ));};func (_aagga *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};const _abb =16;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func _bfdb (_dga string ,_fgcf func (_feag float64 )float64 )Function {return func (_cdace []Result )Result {if len (_cdace )!=1{return MakeErrorResult (_dga +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caed :=_cdace [0].AsNumber ();switch _caed .Type {case ResultTypeNumber :_gdg :=_fgcf (_caed .ValueNumber );if _cggd .IsNaN (_gdg ){return MakeErrorResult (_dga +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cggd .IsInf (_gdg ,0){return MakeErrorResult (_dga +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _gdg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_dga +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_gdg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_dga +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _caed ;default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dga ,_caed .Type ));};};};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_daf ,_abbf ,_ccdag :=_faeb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _ccdag .Type ==ResultTypeError {return _ccdag ;};if _daf ==0{return MakeNumberResult (0);};_fadg :=_daf < 0;if _fadg {_daf =-_daf ;};_defc :=float64 (int (_daf ));_babc :=args [0].Value ();_bdeed :=_fged .Split (_babc ,"\u002e");_cd :=_bdeed [1];_bdaaa ,_fbca :=_fbgg .ParseFloat (_cd ,64);if _fbca !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_ccd :=float64 (len (_cd ));_bdaaa /=_cggd .Pow (10,_ccd );_cada :=_bdaaa *_abbf /_cggd .Pow (10,float64 (int (_cggd .Log10 (_abbf )))+1)+_defc ;if _fadg {_cada =-_cada ;};return MakeNumberResult (_cada );};

// CellRef is a reference to a single cell
type CellRef struct{_effc string };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cdab .Float64 ());};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddbc :=args [0].AsString ();_dacef :=args [1].AsString ();if _ddbc .Type !=ResultTypeString ||_dacef .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ddbc .ValueString ==_dacef .ValueString );};func _ggdda (){_dddf =_dfde .MustCompile ("\u005e\u0030\u002b\u0024");_ecafc =_dfde .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_edde =_dfde .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_effb =_dfde .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bfcdg =_dfde .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_caag =_dfde .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_faaf =_dfde .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_bgg =_dfde .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_bcfg =_dfde .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gebb =_dfde .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_bfeab =_dfde .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_ffgc =_dfde .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eafg +_eafg +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eafg +_eafg +"\u0029\u002b\u0059+\u0024");_dff =_dfde .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_eafg +_eafg +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_eafg +_eafg +"\u0029\u002b\u0059+\u0024");_dcbc =_dfde .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_eec =_dfde .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};const _ecaff ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";const _ccdfe =57353;

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {return PrefixRangeExpr {pfx ,from ,to }};

// Reference returns an invalid reference for Error.
func (_afbd Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {v }};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Reference returns a string reference value to a range with prefix.
func (_agfa PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_dbbfc :=_agfa ._cdbfa .Reference (ctx ,ev );_dggf :=_agfa ._agb .Reference (ctx ,ev );_gcefd :=_agfa ._bfaa .Reference (ctx ,ev );if _dbbfc .Type ==ReferenceTypeSheet &&_dggf .Type ==ReferenceTypeCell &&_gcefd .Type ==ReferenceTypeCell {return MakeRangeReference (_cedeb (_dbbfc ,_dggf ,_gcefd ));};return ReferenceInvalid ;};func _edcdc (_ggebg float64 )float64 {_ffea :=float64 (1);for _aecag :=float64 (2);_aecag <=_ggebg ;_aecag ++{_ffea *=_aecag ;};return _ffea ;};const _cdfb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _abbde =57363;

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bacg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eedf :=args [2].ValueNumber ;if _eedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecbdf :=args [3].ValueNumber ;return MakeNumberResult (_ecbdf *_ceae *(_bacg /_eedf -1));};func _bedb (_cbbb Context ,_eeec Evaluator ,_cdcg ,_cfc string )Result {_bced ,_eggga :=_ecga .ParseCellReference (_cdcg );if _eggga !=nil {return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cdcg ,_eggga .Error ()));};_dfbc ,_ecba :=_bced .ColumnIdx ,_bced .RowIdx ;_cgff ,_aefe :=_ecga .ParseCellReference (_cfc );if _aefe !=nil {return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cfc ,_aefe .Error ()));};_de ,_fge :=_cgff .ColumnIdx ,_cgff .RowIdx ;_cded :=[][]Result {};for _fcbcg :=_ecba ;_fcbcg <=_fge ;_fcbcg ++{_ebdc :=[]Result {};for _cccbg :=_dfbc ;_cccbg <=_de ;_cccbg ++{_gbdgdb :=_cbbb .Cell (_befc .Sprintf ("\u0025\u0073\u0025\u0064",_ecga .IndexToColumn (_cccbg ),_fcbcg ),_eeec );_ebdc =append (_ebdc ,_gbdgdb );};_cded =append (_cded ,_ebdc );};if len (_cded )==1{if len (_cded [0])==1{return _cded [0][0];};return MakeListResult (_cded [0]);};return MakeArrayResult (_cded );};

// Eval evaluates and returns the result of a formula.
func (_dfdb *defEval )Eval (ctx Context ,formula string )Result {_agbg :=ParseString (formula );if _agbg !=nil {_dfdb .checkLastEvalIsRef (ctx ,_agbg );_dbcea :=_agbg .Eval (ctx ,_dfdb );return _dbcea ;};return MakeErrorResult (_befc .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_bcef :=_cfccf (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _bcef .Type !=ResultTypeEmpty {return _bcef ;};_bccccd :=_gfeca (args [1:]);_dccdb :=-_cggd .MaxFloat64 ;_aaggf :=_abgcd (args [0]);for _ ,_eefe :=range _bccccd {_aaeb :=_aaggf [_eefe ._cebg ][_eefe ._dbdfa ].ValueNumber ;if _dccdb < _aaeb {_dccdb =_aaeb ;};};if _dccdb ==-_cggd .MaxFloat64 {_dccdb =0;};return MakeNumberResult (float64 (_dccdb ));};const _afbce =57359;

// LastColumn returns empty string for the invalid reference context.
func (_dafd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddced :=[]float64 {};for _ ,_bdcaa :=range args {switch _bdcaa .Type {case ResultTypeString :_gafcg :=_bdcaa .AsNumber ();if _gafcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddced =append (_ddced ,_gafcg .ValueNumber );case ResultTypeList ,ResultTypeArray :_gdbcb :=GCD (_bdcaa .ListValues ());if _gdbcb .Type !=ResultTypeNumber {return _gdbcb ;};_ddced =append (_ddced ,_gdbcb .ValueNumber );case ResultTypeNumber :_ddced =append (_ddced ,_bdcaa .ValueNumber );case ResultTypeError :return _bdcaa ;default:return MakeErrorResult (_befc .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdcaa .Type ));};};if _ddced [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ddced )==1{return MakeNumberResult (_ddced [0]);};_adga :=_ddced [0];for _adb :=1;_adb < len (_ddced );_adb ++{if _ddced [_adb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adga =_daca (_adga ,_ddced [_adb ]);};return MakeNumberResult (_adga );};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_gee :=_cfccf (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _gee .Type !=ResultTypeEmpty {return _gee ;};_bggca :=_gfeca (args [1:]);_adac :=0.0;_acce :=_abgcd (args [0]);for _ ,_eebf :=range _bggca {_adac +=_acce [_eebf ._cebg ][_eebf ._dbdfa ].ValueNumber ;};return MakeNumberResult (float64 (_adac ));};

// Error is an error expression.
type Error struct{_c string };

// GetFormat returns an empty string for the invalid reference context.
func (_ddab *ivr )GetFormat (cellRef string )string {return ""};func _cfag (_fdbcf ,_gfba Reference )string {return _befc .Sprintf ("\u0025\u0073\u003a%\u0073",_fdbcf .Value ,_gfba .Value );};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_babd :=_fged .Split (v ,"\u003a");if len (_babd )!=2{return nil ;};return PrefixVerticalRange {pfx ,_babd [0],_babd [1]};};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _adg (args ,true )};func _ffc (_aaga Result ,_bfdcf int )[]Result {_ggg :=[]Result {};switch _aaga .Type {case ResultTypeList :_fded :=_aaga .ValueList ;_gccf :=len (_fded );for _dgadc :=0;_dgadc < _bfdcf ;_dgadc ++{if _dgadc < _gccf {_ggg =append (_ggg ,_fded [_dgadc ]);}else {_ggg =append (_ggg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ddbb :=0;_ddbb < _bfdcf ;_ddbb ++{_ggg =append (_ggg ,_aaga );};};return _ggg ;};

// Reference returns an invalid reference for Number.
func (_efec Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gagaf =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_aegbd SheetPrefixExpr )Update (q *_cdd .UpdateQuery )Expression {return _aegbd };func _aea (_afaaa []Result ,_eeffa rmode )Result {if len (_afaaa )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcdf :=_afaaa [0].AsNumber ();if _bcdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ad :=_afaaa [1].AsNumber ();if _ad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_feee :=_ad .ValueNumber ;_bfgfg :=_bcdf .ValueNumber ;_cccbd :=1.0;if _feee > 0{_cccbd =_cggd .Pow (1/10.0,_feee );}else {_cccbd =_cggd .Pow (10.0,-_feee );};_bfgfg ,_ged :=_cggd .Modf (_bfgfg /_cccbd );switch _eeffa {case _gdga :const _dfcag =0.499999999;if _ged >=_dfcag {_bfgfg ++;}else if _ged <=-_dfcag {_bfgfg --;};case _ffcf :case _fcfa :if _ged > 0{_bfgfg ++;}else if _ged < 0{_bfgfg --;};};return MakeNumberResult (_bfgfg *_cccbd );};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fgace (args ,false )};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_edgc *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Negate is a negate expression like -A1.
type Negate struct{_gcfa Expression };func _daedf (_ggeb float64 )bool {return _ggeb ==1||_ggeb ==2||_ggeb ==4};func LexReader (r _begd .Reader )chan*node {_cagee :=NewLexer ();go _cagee .lex (r );return _cagee ._adce ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_effa Result )AsNumber ()Result {if _effa .Type ==ResultTypeString {_acde ,_ebdf :=_fbgg .ParseFloat (_effa .ValueString ,64);if _ebdf ==nil {return MakeNumberResult (_acde );};};if _effa .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _effa ;};const _beeb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Reference returns a string reference value to a horizontal range.
func (_cffc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_cffc .horizontalRangeReference ()};};func _cbaa (_dbfgd ,_efg []float64 ,_eabc float64 )float64 {_dada :=_eabc +1;_cagf :=0.0;_ccaa :=len (_dbfgd );_cbgda :=_efg [0];for _daefd :=1;_daefd < _ccaa ;_daefd ++{_fdfb :=(_efg [_daefd ]-_cbgda )/365;_cagf -=_fdfb *_dbfgd [_daefd ]/_cggd .Pow (_dada ,_fdfb +1);};return _cagf ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_egcce :=args [0].AsNumber ();if _egcce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edgg :=_cggd .Signbit (_egcce .ValueNumber );_ddce ,_cbdc :=_cggd .Modf ((_egcce .ValueNumber -1)/2);_ddbdd :=_ddce *2+1;if _cbdc !=0{if !_edgg {_ddbdd +=2;}else {_ddbdd -=2;};};return MakeNumberResult (_ddbdd );};type durationArgs struct{_adbff float64 ;_caa float64 ;_bcbb float64 ;_bgfd float64 ;_bedab float64 ;_ge int ;};

// String returns a string representation of a vertical range.
func (_cbea VerticalRange )String ()string {return _cbea .verticalRangeReference ()};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daaa :=args [0].AsNumber ();if _daaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _daaa .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_aggf :=float64 (1);_aada :=_cggd .Trunc (_daaa .ValueNumber );for _cdfg :=_aada ;_cdfg > 1;_cdfg -=2{_aggf *=_cdfg ;};return MakeNumberResult (_aggf );};

// Number is a nubmer expression.
type Number struct{_gcd float64 };

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cggfa :=args [0].AsString ();if _cggfa .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgg :=args [1].AsNumber ();if _cgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cceac :=_cggfa .ValueString ;if len (_cceac )> 2&&(_fged .HasPrefix (_cceac ,"\u0030\u0078")||_fged .HasPrefix (_cceac ,"\u0030\u0058")){_cceac =_cceac [2:];};_egcc ,_bead :=_fbgg .ParseInt (_cceac ,int (_cgg .ValueNumber ),64);if _bead !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_egcc ));};func _cccgc (_dbc string ,_fbfd _gbcec .Time )(_gbcec .Time ,error ){_bgbdc ,_ ,_gdff :=_dadgf .ParseFloat (_dbc ,10,128,_dadgf .ToNearestEven );if _gdff !=nil {return _gbcec .Time {},_gdff ;};_aff :=new (_dadgf .Float );_aff .SetUint64 (uint64 (24*_gbcec .Hour ));_bgbdc .Mul (_bgbdc ,_aff );_gbbg ,_ :=_bgbdc .Uint64 ();_dcef :=_fbfd .Add (_gbcec .Duration (_gbbg ));return _bee (_dcef ),nil ;};const _fgeb =57376;func _bgaecg (_eaec []Result )(float64 ,float64 ,Result ){_dgcd :=0.0;_gac :=1.0;for _ ,_abgc :=range _eaec {switch _abgc .Type {case ResultTypeNumber :_dgcd +=_abgc .ValueNumber ;_gac *=_edcdc (_abgc .ValueNumber );case ResultTypeList ,ResultTypeArray :_gab ,_bcc ,_bdcac :=_bgaecg (_abgc .ListValues ());_dgcd +=_gab ;_gac *=_edcdc (_bcc );if _bdcac .Type ==ResultTypeError {return 0,0,_bdcac ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_abgc ;};};return _dgcd ,_gac ,_bdgb ;};func _abgcd (_gdcea Result )[][]Result {switch _gdcea .Type {case ResultTypeArray :return _gdcea .ValueArray ;case ResultTypeList :return [][]Result {_gdcea .ValueList };default:return [][]Result {};};};

// Update returns the same object as updating sheet references does not affect Bool.
func (_gde Bool )Update (q *_cdd .UpdateQuery )Expression {return _gde };type Reference struct{Type ReferenceType ;Value string ;};var (_ffeec =0;_debg =false ;);func _cba (_bcb float64 )float64 {return float64 (int (_bcb +0.5))};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_egf :=len (args );if _egf !=5&&_egf !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbcc ,_agdb ,_fcgb :=_bgacc (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fcgb .Type ==ResultTypeError {return _fcgb ;};_bfba ,_fcgb :=_gccg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fcgb .Type ==ResultTypeError {return _fcgb ;};if _bfba >=_cbcc {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eege :=args [3].ValueNumber ;if _eege < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ffcb :=args [4].ValueNumber ;if _ffcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_effbg :=0;if _egf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_effbg =int (args [5].ValueNumber );if !_ebf (_effbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_ggebf ,_fcgb :=_gceb (_cbcc ,_agdb ,_effbg );if _fcgb .Type ==ResultTypeError {return _fcgb ;};_cfdb ,_fcgb :=_gceb (_bfba ,_agdb ,_effbg );if _fcgb .Type ==ResultTypeError {return _fcgb ;};_gcaa ,_fcgb :=_gceb (_bfba ,_cbcc ,_effbg );if _fcgb .Type ==ResultTypeError {return _fcgb ;};_eea :=1+_cfdb *_eege ;_ddff :=1+_ggebf *_ffcb ;return MakeNumberResult ((_eea /_ddff -_gcaa *_eege )*100);};

// Reference returns an invalid reference for BinaryExpr.
func (_eebc BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cggd .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fccd :=_fged .ToLower (args [0].ValueString );if !_bcdbd (_fccd ){_ ,_ ,_ ,_fcab ,_cffca :=_cagb (_fccd );if _cffca .Type ==ResultTypeError {_cffca .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _cffca ;};if _fcab {return MakeNumberResult (0);};};_degf ,_fgdc ,_acebc ,_egdaa ,_ ,_ggedd :=_bcaf (_fccd );if _ggedd .Type ==ResultTypeError {return _ggedd ;};_gbfga :=_fcgaa (float64 (_degf ),float64 (_fgdc ),_acebc );if _egdaa {_gbfga +=0.5;}else if _gbfga >=1{_gbfga -=float64 (int (_gbfga ));};return MakeNumberResult (_gbfga );};func _gceb (_adab ,_ecca float64 ,_fdbe int )(float64 ,Result ){_fbaeg ,_bggfba :=_cad (_adab ),_cad (_ecca );_gcee :=_fbaeg .Unix ();_gggdg :=_bggfba .Unix ();if _gcee ==_gggdg {return 0,_bdgb ;};_edad ,_fbec ,_gagbd :=_fbaeg .Date ();_dgeg ,_gaga ,_bfgc :=_bggfba .Date ();_fgfeg ,_fafcf :=int (_fbec ),int (_gaga );var _gbgf ,_bdc float64 ;switch _fdbe {case 0:if _gagbd ==31{_gagbd --;};if _gagbd ==30&&_bfgc ==31{_bfgc --;}else if _bfdac :=_dcec (_edad );_fgfeg ==2&&((_bfdac &&_gagbd ==29)||(!_bfdac &&_gagbd ==28)){_gagbd =30;if _egff :=_dcec (_dgeg );_fafcf ==2&&((_egff &&_bfgc ==29)||(!_egff &&_bfgc ==28)){_bfgc =30;};};_gbgf =float64 ((_dgeg -_edad )*360+(_fafcf -_fgfeg )*30+(_bfgc -_gagbd ));_bdc =360;case 1:_gbgf =_ecca -_adab ;_aabdf :=_edad !=_dgeg ;if _aabdf &&(_dgeg !=_edad +1||_fgfeg < _fafcf ||(_fgfeg ==_fafcf &&_gagbd < _bfgc )){_gadag :=0;for _ddgfa :=_edad ;_ddgfa <=_dgeg ;_ddgfa ++{_gadag +=_bfedc (_ddgfa ,1);};_bdc =float64 (_gadag )/float64 (_dgeg -_edad +1);}else {if !_aabdf &&_dcec (_edad ){_bdc =366;}else {if _aabdf &&((_dcec (_edad )&&(_fgfeg < 2||(_fgfeg ==2&&_gagbd <=29)))||(_dcec (_dgeg )&&(_fafcf > 2||(_fafcf ==2&&_bfgc ==29)))){_bdc =366;}else {_bdc =365;};};};case 2:_gbgf =_ecca -_adab ;_bdc =360;case 3:_gbgf =_ecca -_adab ;_bdc =365;case 4:if _gagbd ==31{_gagbd --;};if _bfgc ==31{_bfgc --;};_gbgf =float64 ((_dgeg -_edad )*360+(_fafcf -_fgfeg )*30+(_bfgc -_gagbd ));_bdc =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _gbgf /_bdc ,_bdgb ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bfff .Lock ();defer _bfff .Unlock ();if _aacf ,_gdb :=_bdea [name ];_gdb {return _aacf ;};return nil ;};var _dafbg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// String returns a string representation of FunctionCall expression.
func (_dgca FunctionCall )String ()string {_agaa :=_ddfd .Buffer {};_agaa .WriteString (_dgca ._fgdf );_agaa .WriteString ("\u0028");_cbfd :=len (_dgca ._ggad )-1;for _dgba ,_ggeda :=range _dgca ._ggad {_agaa .WriteString (_ggeda .String ());if _dgba !=_cbfd {_agaa .WriteString ("\u002c");};};_agaa .WriteString ("\u0029");return _agaa .String ();};const (_ddgada cmpResult =0;_fgdeg cmpResult =-1;_cec cmpResult =1;_dggfe cmpResult =2;);func _bee (_ffee _gbcec .Time )_gbcec .Time {_ffee =_ffee .UTC ();return _gbcec .Date (_ffee .Year (),_ffee .Month (),_ffee .Day (),_ffee .Hour (),_ffee .Minute (),_ffee .Second (),_ffee .Nanosecond (),_gbcec .Local );};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cceb ,_cfdc ,_cffb :=_bgacc (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cffb .Type ==ResultTypeError {return _cffb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeec :=_cfdc -_cceb ;if _aeec > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_efcg :=args [2].ValueNumber ;if _efcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcc :=(100-_efcg )/_efcg ;_eadf :=360/_aeec ;return MakeNumberResult (_dcc *_eadf );};const _fecg =57355;

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_caee :=len (args );if _caee !=6&&_caee !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afbb ,_fegd ,_agcge :=_bgacc (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _agcge .Type ==ResultTypeError {return _agcge ;};_geag :=args [2];if _geag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gddc :=_geag .ValueNumber ;if _gddc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cfaebb :=args [3];if _cfaebb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dadf :=_cfaebb .ValueNumber ;if _dadf <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_ffbd :=args [4];if _ffbd .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_dcdc :=_ffbd .ValueNumber ;if _dcdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gcf :=args [5];if _gcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_efbfg :=float64 (int (_gcf .ValueNumber ));if !_daedf (_efbfg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ecfb :=0;if _caee ==7&&args [6].Type !=ResultTypeEmpty {_dded :=args [6];if _dded .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ecfb =int (_dded .ValueNumber );if !_ebf (_ecfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_adf :=0.0;_afbeg :=0.0;_baaag :=1.0;_bebd ,_agcge :=_fdbb (_afbb ,_fegd ,_gddc ,_afbeg ,_dcdc ,_efbfg ,_ecfb );if _agcge .Type ==ResultTypeError {return _agcge ;};_fcfc ,_agcge :=_fdbb (_afbb ,_fegd ,_gddc ,_baaag ,_dcdc ,_efbfg ,_ecfb );if _agcge .Type ==ResultTypeError {return _agcge ;};_acefb :=(_baaag -_afbeg )*0.5;for _cgddb :=0;_cgddb < 100&&_adf !=_dadf ;_cgddb ++{_adf ,_agcge =_fdbb (_afbb ,_fegd ,_gddc ,_acefb ,_dcdc ,_efbfg ,_ecfb );if _agcge .Type ==ResultTypeError {return _agcge ;};if _dadf ==_bebd {return MakeNumberResult (_afbeg );}else if _dadf ==_fcfc {return MakeNumberResult (_baaag );}else if _dadf ==_adf {return MakeNumberResult (_acefb );}else if _dadf < _fcfc {_baaag *=2.0;_fcfc ,_agcge =_fdbb (_afbb ,_fegd ,_gddc ,_baaag ,_dcdc ,_efbfg ,_ecfb );if _agcge .Type ==ResultTypeError {return _agcge ;};_acefb =(_baaag -_afbeg )*0.5;}else {if _dadf < _adf {_afbeg =_acefb ;_bebd =_adf ;}else {_baaag =_acefb ;_fcfc =_adf ;};_acefb =_baaag -(_baaag -_afbeg )*((_dadf -_fcfc )/(_bebd -_fcfc ));};};return MakeNumberResult (_acefb );};func _cagb (_efgeac string )(int ,int ,int ,bool ,Result ){_feeda :="";_bdda :=[]string {};for _fced ,_cbec :=range _fgddg {_bdda =_cbec .FindStringSubmatch (_efgeac );if len (_bdda )> 1{_feeda =_fced ;break ;};};if _feeda ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_ecbgd :=false ;var _gebd ,_bggf ,_ed int ;var _aaaa error ;switch _feeda {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_bggf ,_aaaa =_fbgg .Atoi (_bdda [1]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_ed ,_aaaa =_fbgg .Atoi (_bdda [3]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_gebd ,_aaaa =_fbgg .Atoi (_bdda [5]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};if _gebd < 0||_gebd > 9999||(_gebd > 99&&_gebd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_gebd =_bcad (_gebd );_ecbgd =_bdda [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_bggf =_febc [_bdda [1]];_ed ,_aaaa =_fbgg .Atoi (_bdda [14]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_gebd ,_aaaa =_fbgg .Atoi (_bdda [16]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};if _gebd < 0||_gebd > 9999||(_gebd > 99&&_gebd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_gebd =_bcad (_gebd );_ecbgd =_bdda [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_bgcf ,_febfc :=_fbgg .Atoi (_bdda [1]);if _febfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_cedfe ,_febfc :=_fbgg .Atoi (_bdda [3]);if _febfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_egfbd ,_febfc :=_fbgg .Atoi (_bdda [5]);if _febfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};if _bgcf >=1900&&_bgcf < 10000{_gebd =_bgcf ;_bggf =_cedfe ;_ed =_egfbd ;}else if _bgcf > 0&&_bgcf < 13{_bggf =_bgcf ;_ed =_cedfe ;_gebd =_egfbd ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_ecbgd =_bdda [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_gebd ,_aaaa =_fbgg .Atoi (_bdda [16]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_bggf =_febc [_bdda [3]];_ed ,_aaaa =_fbgg .Atoi (_bdda [1]);if _aaaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};_ecbgd =_bdda [19]=="";};if !_cdaf (_gebd ,_bggf ,_ed ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ecaff );};return _gebd ,_bggf ,_ed ,_ecbgd ,_bdgb ;};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ccacf :=args [0];switch _ccacf .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_fgfca :=_cad (_ccacf .ValueNumber );return MakeNumberResult (float64 (_fgfca .Month ()));case ResultTypeString :_aacd :=_fged .ToLower (_ccacf .ValueString );if !_becd (_aacd ){_ ,_ ,_ ,_ ,_eabcb ,_ec :=_bcaf (_aacd );if _ec .Type ==ResultTypeError {_ec .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _ec ;};if _eabcb {return MakeNumberResult (1);};};_ ,_afbac ,_ ,_ ,_bgcg :=_cagb (_aacd );if _bgcg .Type ==ResultTypeError {return _bgcg ;};return MakeNumberResult (float64 (_afbac ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};var _eggc =[...]uint8 {0,20,37,60,78,96};func _bfdbb (){_fgddg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_dfde .MustCompile ("\u005e"+_cdfb +_gdebb );_fgddg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_dfde .MustCompile ("\u005e"+_fcba +_gdebb );_fgddg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_dfde .MustCompile ("\u005e"+_gggd +_gdebb );_fgddg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_dfde .MustCompile ("\u005e"+_ffab +_gdebb );_agfcb ["\u0068\u0068"]=_dfde .MustCompile (_dgagf +_cdg +"\u0024");_agfcb ["\u0068\u0068\u003am\u006d"]=_dfde .MustCompile (_dgagf +_beeb +"\u0024");_agfcb ["\u006d\u006d\u003as\u0073"]=_dfde .MustCompile (_dgagf +_agef +"\u0024");_agfcb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_dfde .MustCompile (_dgagf +_beab +"\u0024");_afd =[]*_dfde .Regexp {_dfde .MustCompile ("\u005e"+_cdfb +"\u0024"),_dfde .MustCompile ("\u005e"+_fcba +"\u0024"),_dfde .MustCompile ("\u005e"+_gggd +"\u0024"),_dfde .MustCompile ("\u005e"+_ffab +"\u0024")};_dbgd =[]*_dfde .Regexp {_dfde .MustCompile ("\u005e"+_cdg +"\u0024"),_dfde .MustCompile ("\u005e"+_beeb +"\u0024"),_dfde .MustCompile ("\u005e"+_agef +"\u0024"),_dfde .MustCompile ("\u005e"+_beab +"\u0024")};};func (_afce *yyParserImpl )Parse (yylex yyLexer )int {var _dgc int ;var _bcgg yySymType ;var _fgeff []yySymType ;_ =_fgeff ;_egdc :=_afce ._fbfde [:];Nerrs :=0;Errflag :=0;_gcdbb :=0;_afce ._edcd =-1;_abc :=-1;defer func (){_gcdbb =-1;_afce ._edcd =-1;_abc =-1}();_gdf :=-1;goto _cbb ;_fedb :return 0;_bdbde :return 1;_cbb :if _ffeec >=4{_befc .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_dcdae (_abc ),_abaa (_gcdbb ));};_gdf ++;if _gdf >=len (_egdc ){_ddcd :=make ([]yySymType ,len (_egdc )*2);copy (_ddcd ,_egdc );_egdc =_ddcd ;};_egdc [_gdf ]=_bcgg ;_egdc [_gdf ]._fbecb =_gcdbb ;_ecaa :_dgc =_ce [_gcdbb ];if _dgc <=_fgab {goto _fbab ;};if _afce ._edcd < 0{_afce ._edcd ,_abc =_ecaeb (yylex ,&_afce ._ebfc );};_dgc +=_abc ;if _dgc < 0||_dgc >=_efcaf {goto _fbab ;};_dgc =_dafbg [_dgc ];if _beed [_dgc ]==_abc {_afce ._edcd =-1;_abc =-1;_bcgg =_afce ._ebfc ;_gcdbb =_dgc ;if Errflag > 0{Errflag --;};goto _cbb ;};_fbab :_dgc =_fdfa [_gcdbb ];if _dgc ==-2{if _afce ._edcd < 0{_afce ._edcd ,_abc =_ecaeb (yylex ,&_afce ._ebfc );};_bcbdd :=0;for {if _bffdb [_bcbdd +0]==-1&&_bffdb [_bcbdd +1]==_gcdbb {break ;};_bcbdd +=2;};for _bcbdd +=2;;_bcbdd +=2{_dgc =_bffdb [_bcbdd +0];if _dgc < 0||_dgc ==_abc {break ;};};_dgc =_bffdb [_bcbdd +1];if _dgc < 0{goto _fedb ;};};if _dgc ==0{switch Errflag {case 0:yylex .Error (_ddecc (_gcdbb ,_abc ));Nerrs ++;if _ffeec >=1{_befc .Printf ("\u0025\u0073",_abaa (_gcdbb ));_befc .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_dcdae (_abc ));};fallthrough;case 1,2:Errflag =3;for _gdf >=0{_dgc =_ce [_egdc [_gdf ]._fbecb ]+_bagea ;if _dgc >=0&&_dgc < _efcaf {_gcdbb =_dafbg [_dgc ];if _beed [_gcdbb ]==_bagea {goto _cbb ;};};if _ffeec >=2{_befc .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_egdc [_gdf ]._fbecb );};_gdf --;};goto _bdbde ;case 3:if _ffeec >=2{_befc .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_dcdae (_abc ));};if _abc ==_cfddf {goto _bdbde ;};_afce ._edcd =-1;_abc =-1;goto _ecaa ;};};if _ffeec >=2{_befc .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_dgc ,_abaa (_gcdbb ));};_bcfe :=_dgc ;_adaa :=_gdf ;_ =_adaa ;_gdf -=_agf [_dgc ];if _gdf +1>=len (_egdc ){_agbf :=make ([]yySymType ,len (_egdc )*2);copy (_agbf ,_egdc );_egdc =_agbf ;};_bcgg =_egdc [_gdf +1];_dgc =_bgaea [_dgc ];_bbec :=_egfb [_dgc ];_abbd :=_bbec +_egdc [_gdf ]._fbecb +1;if _abbd >=_efcaf {_gcdbb =_dafbg [_bbec ];}else {_gcdbb =_dafbg [_abbd ];if _beed [_gcdbb ]!=-_dgc {_gcdbb =_dafbg [_bbec ];};};switch _bcfe {case 1:_fgeff =_egdc [_adaa -1:_adaa +1];{yylex .(*plex )._gdba =_bcgg ._eadb ;};case 3:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =_fgeff [2]._eadb ;};case 4:_fgeff =_egdc [_adaa -4:_adaa +1];{};case 5:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewBool (_fgeff [1]._bbaf ._fddcc );};case 6:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewNumber (_fgeff [1]._bbaf ._fddcc );};case 7:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewString (_fgeff [1]._bbaf ._fddcc );};case 8:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewError (_fgeff [1]._bbaf ._fddcc );};case 9:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =_fgeff [2]._eadb ;};case 10:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =NewNegate (_fgeff [2]._eadb );};case 15:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =_fgeff [2]._eadb ;};case 17:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewConstArrayExpr (_fgeff [2]._ccbd );};case 18:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._ccbd =append (_bcgg ._ccbd ,_fgeff [1]._ebag );};case 19:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._ccbd =append (_fgeff [1]._ccbd ,_fgeff [3]._ebag );};case 20:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._ebag =append (_bcgg ._ebag ,_fgeff [1]._eadb );};case 21:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._ebag =append (_fgeff [1]._ebag ,_fgeff [3]._eadb );};case 23:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =NewPrefixExpr (_fgeff [1]._eadb ,_fgeff [2]._eadb );};case 25:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewSheetPrefixExpr (_fgeff [1]._bbaf ._fddcc );};case 26:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewCellRef (_fgeff [1]._bbaf ._fddcc );};case 27:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewRange (_fgeff [1]._eadb ,_fgeff [3]._eadb );};case 28:_fgeff =_egdc [_adaa -4:_adaa +1];{_bcgg ._eadb =NewPrefixRangeExpr (_fgeff [1]._eadb ,_fgeff [2]._eadb ,_fgeff [4]._eadb );};case 29:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewNamedRangeRef (_fgeff [1]._bbaf ._fddcc );};case 30:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewHorizontalRange (_fgeff [1]._bbaf ._fddcc );};case 31:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._eadb =NewVerticalRange (_fgeff [1]._bbaf ._fddcc );};case 32:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =NewPrefixHorizontalRange (_fgeff [1]._eadb ,_fgeff [2]._bbaf ._fddcc );};case 33:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =NewPrefixVerticalRange (_fgeff [1]._eadb ,_fgeff [2]._bbaf ._fddcc );};case 34:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypePlus ,_fgeff [3]._eadb );};case 35:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeMinus ,_fgeff [3]._eadb );};case 36:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeMult ,_fgeff [3]._eadb );};case 37:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeDiv ,_fgeff [3]._eadb );};case 38:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeExp ,_fgeff [3]._eadb );};case 39:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeLT ,_fgeff [3]._eadb );};case 40:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeGT ,_fgeff [3]._eadb );};case 41:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeLEQ ,_fgeff [3]._eadb );};case 42:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeGEQ ,_fgeff [3]._eadb );};case 43:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeEQ ,_fgeff [3]._eadb );};case 44:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeNE ,_fgeff [3]._eadb );};case 45:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewBinaryExpr (_fgeff [1]._eadb ,BinOpTypeConcat ,_fgeff [3]._eadb );};case 47:_fgeff =_egdc [_adaa -2:_adaa +1];{_bcgg ._eadb =NewFunction (_fgeff [1]._bbaf ._fddcc ,nil );};case 48:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._eadb =NewFunction (_fgeff [1]._bbaf ._fddcc ,_fgeff [2]._ebag );};case 49:_fgeff =_egdc [_adaa -1:_adaa +1];{_bcgg ._ebag =append (_bcgg ._ebag ,_fgeff [1]._eadb );};case 50:_fgeff =_egdc [_adaa -3:_adaa +1];{_bcgg ._ebag =append (_fgeff [1]._ebag ,_fgeff [3]._eadb );};case 53:_fgeff =_egdc [_adaa -0:_adaa +1];{_bcgg ._eadb =NewEmptyExpr ();};};goto _cbb ;};func (_cggebd HorizontalRange )horizontalRangeReference ()string {return _befc .Sprintf ("\u0025\u0064\u003a%\u0064",_cggebd ._gega ,_cggebd ._fbc );};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_faae :=args [0].AsString ();if _faae .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_daaaeb :=_ddfd .Buffer {};_bab :=false ;for _ ,_cabeb :=range _faae .ValueString {if !_bab &&_eacd .IsLetter (_cabeb ){_daaaeb .WriteRune (_eacd .ToUpper (_cabeb ));}else {_daaaeb .WriteRune (_eacd .ToLower (_cabeb ));};_bab =_eacd .IsLetter (_cabeb );};return MakeStringResult (_daaaeb .String ());};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _aea (args ,_gdga )};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_dgff ,_aeff ,_ace :=_bgaecg (args );if _ace .Type ==ResultTypeError {return _ace ;};return MakeNumberResult (_edcdc (_dgff )/_aeff );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_eda :=len (args );if _eda !=4&&_eda !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfc :=args [0].ValueNumber ;if _gfc < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcd :=args [1].ValueNumber ;if _egcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gffc :=args [2].ValueNumber ;if _gffc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbaab :=args [3].ValueNumber ;if _dbaab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _dbaab -_gffc > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_fefb :=12.0;if _eda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fefb =args [4].ValueNumber ;if _fefb < 1||_fefb > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _fefb ==12&&_dbaab > _gffc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _egcd >=_gfc {return MakeNumberResult (0);};_edff :=1-_cggd .Pow (_egcd /_gfc ,1/_gffc );_edff =float64 (int (_edff *1000+0.5))/1000;_gfab :=_gfc *_edff *_fefb /12;if _dbaab ==1{return MakeNumberResult (_gfab );};_e :=_gfab ;_eeacd :=0.0;_gbcgc :=_gffc ;if _gbcgc > _dbaab {_gbcgc =_dbaab ;};for _cbffc :=2.0;_cbffc <=_gbcgc ;_cbffc ++{_eeacd =(_gfc -_e )*_edff ;_e +=_eeacd ;};if _dbaab > _gffc {return MakeNumberResult ((_gfc -_e )*_edff *(12-_fefb )/12);};return MakeNumberResult (_eeacd );};type node struct{_bgff tokenType ;_fddcc string ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_fdda :=_fged .Split (v ,"\u003a");if len (_fdda )!=2{return nil ;};_fga ,_ :=_fbgg .Atoi (_fdda [0]);_faaga ,_ :=_fbgg .Atoi (_fdda [1]);return PrefixHorizontalRange {pfx ,_fga ,_faaga };};func (_ddgad *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func (_gfb *plex )Lex (lval *yySymType )int {_debg =true ;_eagg :=<-_gfb ._fbfc ;if _eagg !=nil {lval ._bbaf =_eagg ;return int (lval ._bbaf ._bgff );};return 0;};const _cabe ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";func _cad (_ecdc float64 )_gbcec .Time {_dbfb :=int64 ((_ecdc -_ceef )*_cage );return _gbcec .Unix (0,_dbfb );};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_gbde ,_aed :=_afaeb (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _aed .Type ==ResultTypeError {return _aed ;};_cdbg :=_gbde ._aacg ;_abbba :=_gbde ._gage ;_dbad :=_gbde ._fadc ;_agceg :=_gbde ._baab ;_fdc :=_gbde ._dccd ;_eb :=_gbde ._ecb ;if _eb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fdef :=_gbde ._bdebf ;_cggc :=1.0/_eb ;_gcaab :=2.5;if _cggc < 3{_gcaab =1;}else if _cggc < 5{_gcaab =1.5;}else if _cggc <=6{_gcaab =2;};_eb *=_gcaab ;_ccga ,_ffcd :=_gceb (_abbba ,_dbad ,_fdef );if _ffcd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_abad :=_cba (_ccga *_eb *_cdbg );_cdbg -=_abad ;_ddfc :=_cdbg -_agceg ;for _bdfd :=0;_bdfd < _fdc ;_bdfd ++{_abad =_cba (_eb *_cdbg );_ddfc -=_abad ;if _ddfc < 0{switch _fdc -_bdfd {case 0:case 1:return MakeNumberResult (_cba (_cdbg *0.5));default:return MakeNumberResult (0);};};_cdbg -=_abad ;};return MakeNumberResult (_abad );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_cccg :=len (args );if _cccg !=4&&_cccg !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acfdc ,_bccf ,_gfecg :=_bgacc (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _gfecg .Type ==ResultTypeError {return _gfecg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dfff :=args [2].ValueNumber ;if _dfff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_debb :=args [3].ValueNumber ;if _debb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_edee :=0;if _cccg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_edee =int (args [4].ValueNumber );if !_ebf (_edee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_afaa ,_gfecg :=_gceb (_acfdc ,_bccf ,_edee );if _gfecg .Type ==ResultTypeError {return _gfecg ;};return MakeNumberResult ((_debb -_dfff )/_dfff /_afaa );};func _ddac (_abbef ,_fbdbc int64 )float64 {return float64 (int (0.5+float64 ((_fbdbc -_abbef )/86400)))};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgb :=args [0].AsNumber ();if _cgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_cggd .Pi *_cgb .ValueNumber );};func _gaa (_efacc BinOpType ,_fgbc []Result ,_abed Result )Result {_ffefc :=[]Result {};switch _abed .Type {case ResultTypeNumber :_dfae :=_abed .ValueNumber ;for _gbedd :=range _fgbc {_dgfgg :=_fgbc [_gbedd ].AsNumber ();if _dgfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _efacc {case BinOpTypePlus :_ffefc =append (_ffefc ,MakeNumberResult (_dgfgg .ValueNumber +_dfae ));case BinOpTypeMinus :_ffefc =append (_ffefc ,MakeNumberResult (_dgfgg .ValueNumber -_dfae ));case BinOpTypeMult :_ffefc =append (_ffefc ,MakeNumberResult (_dgfgg .ValueNumber *_dfae ));case BinOpTypeDiv :if _dfae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ffefc =append (_ffefc ,MakeNumberResult (_dgfgg .ValueNumber /_dfae ));case BinOpTypeExp :_ffefc =append (_ffefc ,MakeNumberResult (_cggd .Pow (_dgfgg .ValueNumber ,_dfae )));case BinOpTypeLT :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber < _dfae ));case BinOpTypeGT :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber > _dfae ));case BinOpTypeEQ :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber ==_dfae ));case BinOpTypeLEQ :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber <=_dfae ));case BinOpTypeGEQ :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber >=_dfae ));case BinOpTypeNE :_ffefc =append (_ffefc ,MakeBoolResult (_dgfgg .ValueNumber !=_dfae ));default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_efacc ));};};case ResultTypeString :_agcda :=_abed .ValueString ;for _dgaa :=range _fgbc {_fadbe :=_fgbc [_dgaa ].AsString ();if _fadbe .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _efacc {case BinOpTypeLT :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString < _agcda ));case BinOpTypeGT :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString > _agcda ));case BinOpTypeEQ :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString ==_agcda ));case BinOpTypeLEQ :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString <=_agcda ));case BinOpTypeGEQ :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString >=_agcda ));case BinOpTypeNE :_ffefc =append (_ffefc ,MakeBoolResult (_fadbe .ValueString !=_agcda ));default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_efacc ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ffefc );};func _gfeca (_cfdd []Result )[]rangeIndex {_eebff :=[]rangeIndex {};_ccbbb :=len (_cfdd );for _ceec :=0;_ceec < _ccbbb -1;_ceec +=2{_gfa :=[]rangeIndex {};_ebaf :=_abgcd (_cfdd [_ceec ]);_baae :=_cffa (_cfdd [_ceec +1]);if _ceec ==0{for _aeeg ,_ggacg :=range _ebaf {for _bag ,_efga :=range _ggacg {if _feg (_efga ,_baae ){_gfa =append (_gfa ,rangeIndex {_aeeg ,_bag });};};};}else {for _ ,_ecfc :=range _eebff {_dffb :=_ebaf [_ecfc ._cebg ][_ecfc ._dbdfa ];if _feg (_dffb ,_baae ){_gfa =append (_gfa ,_ecfc );};};};if len (_gfa )==0{return []rangeIndex {};};_eebff =_gfa [:];};return _eebff ;};type countMode byte ;func _aefc (_gfdad []Result ,_ccaee bool )(float64 ,float64 ){_efe :=0.0;_cfec :=0.0;for _ ,_dcfeae :=range _gfdad {switch _dcfeae .Type {case ResultTypeNumber :if _ccaee ||!_dcfeae .IsBoolean {_cfec +=_dcfeae .ValueNumber ;_efe ++;};case ResultTypeList ,ResultTypeArray :_ffcef ,_edafg :=_aefc (_dcfeae .ListValues (),_ccaee );_cfec +=_ffcef ;_efe +=_edafg ;case ResultTypeString :if _ccaee {_efe ++;};case ResultTypeEmpty :};};return _cfec ,_efe ;};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_ffcdb ,_cgac :=_ggegd (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _cgac .Type ==ResultTypeError {return _cgac ;};_gbda :=_ffcdb ._gbdb ;_cbge :=_ffcdb ._faccc ;_bcba ,_cgac :=_bdae (_ffcdb ._bggc ,_ffcdb ._baac ,_gbda ,_cbge );if _cgac .Type ==ResultTypeError {return _cgac ;};return MakeNumberResult (_bcba );};func _dbcgc (_cdeb ,_gacf ,_cbac ,_fgdcf ,_gdbcd float64 ,_bfafg int )Result {_feb ,_eaeb :=_gceb (_cdeb ,_gacf ,_bfafg );if _eaeb .Type ==ResultTypeError {return _eaeb ;};_bacdf ,_ggef :=_bdae (_cdeb ,_gacf ,int (_gdbcd ),_bfafg );if _ggef .Type ==ResultTypeError {return _ggef ;};_ffdd :=0.0;_eccad :=0.0;_cbac *=100/_gdbcd ;_fgdcf /=_gdbcd ;_fgdcf ++;_eccf :=_feb *_gdbcd -_bacdf ;for _aabf :=1.0;_aabf < _bacdf ;_aabf ++{_dffa :=_aabf +_eccf ;_cgfg :=_cbac /_cggd .Pow (_fgdcf ,_dffa );_eccad +=_cgfg ;_ffdd +=_dffa *_cgfg ;};_cfe :=(_cbac +100)/_cggd .Pow (_fgdcf ,_bacdf +_eccf );_eccad +=_cfe ;_ffdd +=(_bacdf +_eccf )*_cfe ;_ffdd /=_eccad ;_ffdd /=_gdbcd ;return MakeNumberResult (_ffdd );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_degc :=args [0];switch _degc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_efc :=_cad (_degc .ValueNumber );return MakeNumberResult (float64 (_efc .Minute ()));case ResultTypeString :_agaf :=_fged .ToLower (_degc .ValueString );if !_bcdbd (_agaf ){_ ,_ ,_ ,_aeg ,_bedc :=_cagb (_agaf );if _bedc .Type ==ResultTypeError {_bedc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _bedc ;};if _aeg {return MakeNumberResult (0);};};_ ,_aadad ,_ ,_ ,_ ,_bbde :=_bcaf (_agaf );if _bbde .Type ==ResultTypeError {return _bbde ;};return MakeNumberResult (float64 (_aadad ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Eval evaluates the binary expression using the context given.
func (_geeg BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bgeb :=_geeg ._feaf .Eval (ctx ,ev );if _bgeb .Type ==ResultTypeError {return _bgeb ;};_fdae :=_geeg ._cfde .Eval (ctx ,ev );if _fdae .Type ==ResultTypeError {return _fdae ;};if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeArray {if !_bece (_bgeb .ValueArray ,_fdae .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _bfcc (_geeg ._ccae ,_bgeb .ValueArray ,_fdae .ValueArray );}else if _bgeb .Type ==ResultTypeList {if len (_bgeb .ValueList )!=len (_fdae .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _afae (_geeg ._ccae ,_bgeb .ValueList ,_fdae .ValueList );};}else if _bgeb .Type ==ResultTypeArray &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return _dfad (_geeg ._ccae ,_bgeb .ValueArray ,_fdae );}else if _bgeb .Type ==ResultTypeList &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return _gaa (_geeg ._ccae ,_bgeb .ValueList ,_fdae );};switch _geeg ._ccae {case BinOpTypePlus :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeNumberResult (_bgeb .ValueNumber +_fdae .ValueNumber );};};case BinOpTypeMinus :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeNumberResult (_bgeb .ValueNumber -_fdae .ValueNumber );};};case BinOpTypeMult :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeNumberResult (_bgeb .ValueNumber *_fdae .ValueNumber );};};case BinOpTypeDiv :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {if _fdae .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_bgeb .ValueNumber /_fdae .ValueNumber );};};case BinOpTypeExp :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeNumberResult (_cggd .Pow (_bgeb .ValueNumber ,_fdae .ValueNumber ));};};case BinOpTypeLT :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber < _fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString < _fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber > _fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString > _fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber ==_fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString ==_fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber )||(_bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (_fceag (_fdae ));}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (_fceag (_bgeb ));};case BinOpTypeNE :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber !=_fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString !=_fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber )||(_bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (!_fceag (_fdae ));}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (!_fceag (_bgeb ));};case BinOpTypeLEQ :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber <=_fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString <=_fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (_fceag (_fdae ));}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (_fceag (_bgeb ));};case BinOpTypeGEQ :if _bgeb .Type ==_fdae .Type {if _bgeb .Type ==ResultTypeNumber {return MakeBoolResult (_bgeb .ValueNumber >=_fdae .ValueNumber );};if _bgeb .Type ==ResultTypeString {return MakeBoolResult (_bgeb .ValueString >=_fdae .ValueString );};if _bgeb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bgeb .Type ==ResultTypeString &&_fdae .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bgeb .Type ==ResultTypeNumber &&_fdae .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bgeb .Type ==ResultTypeEmpty &&(_fdae .Type ==ResultTypeNumber ||_fdae .Type ==ResultTypeString ){return MakeBoolResult (_fceag (_fdae ));}else if (_bgeb .Type ==ResultTypeNumber ||_bgeb .Type ==ResultTypeString )&&_fdae .Type ==ResultTypeEmpty {return MakeBoolResult (_fceag (_bgeb ));};case BinOpTypeConcat :return MakeStringResult (_bgeb .Value ()+_fdae .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _ddd (_adcec ,_cgfga _gbcec .Time ,_fafd ,_eagc int )_gbcec .Time {_ffa :=_cgfga ;_bcee :=_adcec .Year ()-_cgfga .Year ();_ffa =_ffa .AddDate (_bcee ,0,0);if _adcec .After (_ffa ){_ffa =_ffa .AddDate (1,0,0);};_ecgf :=-12/_fafd ;for _ffa .After (_adcec ){_ffa =_ffa .AddDate (0,_ecgf ,0);};return _ffa ;};

// Eval evaluates and returns a boolean.
func (_bfaag Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_bfaag ._ddabg )};func _afae (_dacd BinOpType ,_gedd ,_ebfe []Result )Result {_fea :=[]Result {};for _dede :=range _gedd {_ccad :=_gedd [_dede ].AsNumber ();_fdaf :=_ebfe [_dede ].AsNumber ();if _ccad .Type !=ResultTypeNumber ||_fdaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dacd {case BinOpTypePlus :_fea =append (_fea ,MakeNumberResult (_ccad .ValueNumber +_fdaf .ValueNumber ));case BinOpTypeMinus :_fea =append (_fea ,MakeNumberResult (_ccad .ValueNumber -_fdaf .ValueNumber ));case BinOpTypeMult :_fea =append (_fea ,MakeNumberResult (_ccad .ValueNumber *_fdaf .ValueNumber ));case BinOpTypeDiv :if _fdaf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fea =append (_fea ,MakeNumberResult (_ccad .ValueNumber /_fdaf .ValueNumber ));case BinOpTypeExp :_fea =append (_fea ,MakeNumberResult (_cggd .Pow (_ccad .ValueNumber ,_fdaf .ValueNumber )));case BinOpTypeLT :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber < _fdaf .ValueNumber ));case BinOpTypeGT :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber > _fdaf .ValueNumber ));case BinOpTypeEQ :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber ==_fdaf .ValueNumber ));case BinOpTypeLEQ :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber <=_fdaf .ValueNumber ));case BinOpTypeGEQ :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber >=_fdaf .ValueNumber ));case BinOpTypeNE :_fea =append (_fea ,MakeBoolResult (_ccad .ValueNumber !=_fdaf .ValueNumber ));default:return MakeErrorResult (_befc .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dacd ));};};return MakeListResult (_fea );};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fggf :=int (args [0].ValueNumber );return MakeBoolResult (_fggf ==_fggf /2*2);};const _dffc =57352;var _bede =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bed :=args [0];if _bed .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgc :=len (_bed .ValueArray );for _ ,_degdc :=range _bed .ValueArray {if len (_degdc )!=_fgc {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_gbee (_bed .ValueArray ));};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_ddec Context ,_cedab Evaluator ,_agce []Result )Result ;var _ce =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbee ,_egef ,_deee :=_bgacc (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _deee .Type ==ResultTypeError {return _deee ;};_accc ,_deee :=_gccg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _deee .Type ==ResultTypeError {return _deee ;};if _accc >=_bbee {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_cefa :=args [3];if _cefa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_degg :=_cefa .ValueNumber ;if _degg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_acbgc :=args [4];if _acbgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebbfa :=_acbgc .ValueNumber ;if _ebbfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gcba :=args [5];if _gcba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_acedc :=_gcba .ValueNumber ;if _acedc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dedd :=args [6];if _dedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbgcb :=float64 (int (_dedd .ValueNumber ));if !_daedf (_bbgcb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ddede :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_gegec :=args [7];if _gegec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ddede =int (_gegec .ValueNumber );if !_ebf (_ddede ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_geagb ,_deee :=_gceb (_accc ,_egef ,_ddede );if _deee .Type ==ResultTypeError {return _deee ;};_geagb *=_bbgcb ;_dabg ,_deee :=_gceb (_bbee ,_egef ,_ddede );if _deee .Type ==ResultTypeError {return _deee ;};_dabg *=_bbgcb ;_ggefc ,_deee :=_gceb (_accc ,_bbee ,_ddede );if _deee .Type ==ResultTypeError {return _deee ;};_ggefc *=_bbgcb ;_fffb :=_acedc +_geagb *100*_degg /_bbgcb ;_fffb /=_dabg *_ebbfa /_bbgcb +1;_fffb -=_ggefc *100*_degg /_bbgcb ;return MakeNumberResult (_fffb );};type yySymType struct{_fbecb int ;_bbaf *node ;_eadb Expression ;_ebag []Expression ;_ccbd [][]Expression ;};func (_bfeb *Lexer )lex (_bbeb _begd .Reader ){_cbdgb ,_fgfg ,_aecfd :=0,0,0;_dcaa :=-1;_ebee ,_fagf ,_abfd :=0,0,0;_ =_abfd ;_cbgc :=1;_ =_cbgc ;_geed :=make ([]byte ,4096);_fddbd :=false ;for !_fddbd {_cda :=0;if _ebee > 0{_cda =_fgfg -_ebee ;};_fgfg =0;_cbcd ,_gggc :=_bbeb .Read (_geed [_cda :]);if _cbcd ==0||_gggc !=nil {_fddbd =true ;};_aecfd =_cbcd +_cda ;if _aecfd < len (_geed ){_dcaa =_aecfd ;};{_cbdgb =_aa ;_ebee =0;_fagf =0;_abfd =0;};{var _eedg int ;var _fdeg uint ;if _fgfg ==_aecfd {goto _cgbc ;};if _cbdgb ==0{goto _ceabc ;};_fcfff :_eedg =int (_aecb [_cbdgb ]);_fdeg =uint (_cecg [_eedg ]);_eedg ++;for ;_fdeg > 0;_fdeg --{_eedg ++;switch _cecg [_eedg -1]{case 2:_ebee =_fgfg ;};};switch _cbdgb {case 30:switch _geed [_fgfg ]{case 34:goto _cbfdg ;case 35:goto _acdf ;case 36:goto _aceb ;case 38:goto _gagcd ;case 39:goto _eaaa ;case 40:goto _eced ;case 41:goto _ffadc ;case 42:goto _fbfff ;case 43:goto _cedfc ;case 44:goto _cdac ;case 45:goto _bdgc ;case 47:goto _aac ;case 58:goto _deg ;case 59:goto _gafcea ;case 60:goto _adad ;case 61:goto _cfae ;case 62:goto _dbdb ;case 63:goto _cdcc ;case 70:goto _cgge ;case 84:goto _fdcff ;case 92:goto _affb ;case 94:goto _aaab ;case 95:goto _addd ;case 123:goto _ggab ;case 125:goto _ecdca ;};switch {case _geed [_fgfg ]< 65:switch {case _geed [_fgfg ]> 37:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _deab ;};case _geed [_fgfg ]>=33:goto _cdcc ;};case _geed [_fgfg ]> 90:switch {case _geed [_fgfg ]> 93:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bfdd ;};case _geed [_fgfg ]>=91:goto _cdcc ;};default:goto _daef ;};goto _ebabc ;case 1:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _fbd ;case 123:goto _fbd ;case 125:goto _fbd ;};switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _fbd ;};case _geed [_fgfg ]> 45:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _fbd ;};case _geed [_fgfg ]>=58:goto _fbd ;};default:goto _fbd ;};goto _ebabc ;case 0:goto _ceabc ;case 2:if _geed [_fgfg ]==34{goto _ceabf ;};goto _cbfdg ;case 31:if _geed [_fgfg ]==34{goto _cbfdg ;};goto _gbgda ;case 3:switch _geed [_fgfg ]{case 78:goto _efaa ;case 82:goto _efgef ;};goto _cdcc ;case 4:switch _geed [_fgfg ]{case 47:goto _afgb ;case 85:goto _feef ;};goto _cdcc ;case 5:if _geed [_fgfg ]==65{goto _cfba ;};goto _cdcc ;case 6:switch _geed [_fgfg ]{case 76:goto _aege ;case 77:goto _ffg ;};goto _cdcc ;case 7:if _geed [_fgfg ]==76{goto _ffg ;};goto _cdcc ;case 8:if _geed [_fgfg ]==33{goto _cfba ;};goto _cdcc ;case 9:if _geed [_fgfg ]==69{goto _aeed ;};goto _cdcc ;case 10:if _geed [_fgfg ]==70{goto _fgfb ;};goto _cdcc ;case 11:if _geed [_fgfg ]==33{goto _fbg ;};goto _cdcc ;case 12:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _cdcc ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _cdcc ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]< 65:if 58<=_geed [_fgfg ]&&_geed [_fgfg ]<=63{goto _cdcc ;};case _geed [_fgfg ]> 90:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _cdcc ;};default:goto _dgad ;};default:goto _dced ;};goto _ebabc ;case 13:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _cdcc ;case 58:goto _fgbca ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _cdcc ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _cdcc ;};case _geed [_fgfg ]>=59:goto _cdcc ;};default:goto _dced ;};goto _ebabc ;case 14:if _geed [_fgfg ]==36{goto _cgad ;};if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _eecf ;};goto _fbd ;case 15:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _eecf ;};goto _fbd ;case 32:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _eecf ;};goto _efgf ;case 16:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 47:goto _cdcc ;case 58:goto _dbfd ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 45:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _abcgg ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]> 90:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _cdcc ;};case _geed [_fgfg ]>=65:goto _dgad ;};default:goto _cdcc ;};goto _ebabc ;case 17:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _fbd ;case 123:goto _fbd ;case 125:goto _fbd ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _fbd ;};case _geed [_fgfg ]>=34:goto _fbd ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _fbd ;};case _geed [_fgfg ]>=58:goto _fbd ;};default:goto _abcgg ;};goto _ebabc ;case 33:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _bdaff ;case 123:goto _bdaff ;case 125:goto _bdaff ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _bdaff ;};case _geed [_fgfg ]>=34:goto _bdaff ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _bdaff ;};case _geed [_fgfg ]>=58:goto _bdaff ;};default:goto _abcgg ;};goto _ebabc ;case 18:if _geed [_fgfg ]==36{goto _dgagfa ;};if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _gbed ;};goto _fbd ;case 19:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _gbed ;};goto _fbd ;case 34:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _gbed ;};goto _adgd ;case 20:switch _geed [_fgfg ]{case 39:goto _cdcc ;case 42:goto _cdcc ;case 47:goto _cdcc ;case 58:goto _cdcc ;case 63:goto _cdcc ;};if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=93{goto _cdcc ;};goto _fadd ;case 21:switch _geed [_fgfg ]{case 39:goto _dbfc ;case 42:goto _cdcc ;case 47:goto _cdcc ;case 58:goto _cdcc ;case 63:goto _cdcc ;};if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=93{goto _cdcc ;};goto _fadd ;case 22:if _geed [_fgfg ]==33{goto _ffbg ;};goto _cdcc ;case 35:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _dbef ;case 58:goto _fgbca ;case 101:goto _ffce ;case 123:goto _dgbaa ;case 125:goto _dgbaa ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=47{goto _dgbaa ;};case _geed [_fgfg ]>=34:goto _dgbaa ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _dgbaa ;};case _geed [_fgfg ]>=59:goto _dgbaa ;};default:goto _deab ;};goto _ebabc ;case 36:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _dgbaa ;case 101:goto _ffce ;case 123:goto _dgbaa ;case 125:goto _dgbaa ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _dgbaa ;};case _geed [_fgfg ]>=34:goto _dgbaa ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _dgbaa ;};case _geed [_fgfg ]>=58:goto _dgbaa ;};default:goto _dbef ;};goto _ebabc ;case 23:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _fcgcb ;case 123:goto _fcgcb ;case 125:goto _fcgcb ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _fcgcb ;};case _geed [_fgfg ]>=34:goto _fcgcb ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _fcgcb ;};case _geed [_fgfg ]>=58:goto _fcgcb ;};default:goto _ffedb ;};goto _ebabc ;case 37:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 47:goto _dgbaa ;case 123:goto _dgbaa ;case 125:goto _dgbaa ;};switch {case _geed [_fgfg ]< 48:switch {case _geed [_fgfg ]> 35:if 37<=_geed [_fgfg ]&&_geed [_fgfg ]<=45{goto _dgbaa ;};case _geed [_fgfg ]>=34:goto _dgbaa ;};case _geed [_fgfg ]> 57:switch {case _geed [_fgfg ]> 63:if 91<=_geed [_fgfg ]&&_geed [_fgfg ]<=94{goto _dgbaa ;};case _geed [_fgfg ]>=58:goto _dgbaa ;};default:goto _ffedb ;};goto _ebabc ;case 38:switch _geed [_fgfg ]{case 61:goto _fdfgb ;case 62:goto _bcff ;};goto _fcag ;case 39:if _geed [_fgfg ]==61{goto _cadg ;};goto _gcga ;case 24:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _cdcc ;};default:goto _cdcc ;};goto _ebabc ;case 40:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 40:goto _cafe ;case 46:goto _cee ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cee ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _cee ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 41:switch _geed [_fgfg ]{case 46:goto _gedc ;case 92:goto _gedc ;case 95:goto _gedc ;};switch {case _geed [_fgfg ]< 65:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _gedc ;};case _geed [_fgfg ]> 90:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _gedc ;};default:goto _gedc ;};goto _eddd ;case 42:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 43:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 40:goto _cafe ;case 46:goto _cee ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _bdaff ;case 125:goto _bdaff ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _bdaff ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};default:goto _bdaff ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _cee ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _bdaff ;};default:goto _bdaff ;};goto _ebabc ;case 44:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _fbd ;case 125:goto _fbd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _fbd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _fbd ;};default:goto _fbd ;};goto _ebabc ;case 25:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 65:goto _dceb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 66<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _cdcc ;};default:goto _cdcc ;};goto _ebabc ;case 45:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 76:goto _gagaa ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 46:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 83:goto _gedfd ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 47:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 69:goto _cecb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 26:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 79:goto _gfbd ;case 82:goto _agfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _cdcc ;};default:goto _cdcc ;};goto _ebabc ;case 48:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 68:goto _gf ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 49:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 79:goto _cegc ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 50:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 36:goto _fedgg ;case 40:goto _cafe ;case 46:goto _cee ;case 58:goto _dbfd ;case 85:goto _gedfd ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 59:switch {case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _cea ;};case _geed [_fgfg ]>=34:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _aab ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 27:switch _geed [_fgfg ]{case 46:goto _gedc ;case 92:goto _gedc ;case 95:goto _gedc ;};switch {case _geed [_fgfg ]< 65:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _gedc ;};case _geed [_fgfg ]> 90:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _gedc ;};default:goto _gedc ;};goto _cdcc ;case 28:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 120:goto _aedae ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _cdcc ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _cdcc ;};default:goto _cdcc ;};goto _ebabc ;case 51:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 108:goto _ffb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 52:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 102:goto _egbaa ;case 110:goto _edaf ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 53:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 110:goto _abbc ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 54:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _aeaa ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 55:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _ffgg ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _ffgg ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 56:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 40:goto _cege ;case 46:goto _ffgg ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _ffgg ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _ffgg ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 57:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 109:goto _ebda ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 58:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _cecad ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _eddd ;case 125:goto _eddd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _eddd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _eddd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _eddd ;};default:goto _eddd ;};goto _ebabc ;case 59:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _badc ;case 123:goto _fbd ;case 125:goto _fbd ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _fbd ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _fbd ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _badc ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _fbd ;};default:goto _fbd ;};goto _ebabc ;case 29:switch _geed [_fgfg ]{case 33:goto _bgcc ;case 46:goto _bcfb ;case 92:goto _gedc ;case 95:goto _bcfb ;case 123:goto _cdcc ;case 125:goto _cdcc ;};switch {case _geed [_fgfg ]< 58:switch {case _geed [_fgfg ]< 37:if 34<=_geed [_fgfg ]&&_geed [_fgfg ]<=35{goto _cdcc ;};case _geed [_fgfg ]> 47:if 48<=_geed [_fgfg ]&&_geed [_fgfg ]<=57{goto _bcfb ;};default:goto _cdcc ;};case _geed [_fgfg ]> 63:switch {case _geed [_fgfg ]< 91:if 65<=_geed [_fgfg ]&&_geed [_fgfg ]<=90{goto _bcfb ;};case _geed [_fgfg ]> 94:if 97<=_geed [_fgfg ]&&_geed [_fgfg ]<=122{goto _bcfb ;};default:goto _cdcc ;};default:goto _cdcc ;};goto _ebabc ;};_cdcc :_cbdgb =0;goto _ffcde ;_ebabc :_cbdgb =1;goto _ffcde ;_cbfdg :_cbdgb =2;goto _ffcde ;_acdf :_cbdgb =3;goto _ffcde ;_efaa :_cbdgb =4;goto _ffcde ;_afgb :_cbdgb =5;goto _ffcde ;_feef :_cbdgb =6;goto _ffcde ;_aege :_cbdgb =7;goto _ffcde ;_ffg :_cbdgb =8;goto _ffcde ;_efgef :_cbdgb =9;goto _ffcde ;_aeed :_cbdgb =10;goto _ffcde ;_fgfb :_cbdgb =11;goto _ffcde ;_aceb :_cbdgb =12;goto _ffcde ;_dced :_cbdgb =13;goto _ffcde ;_fgbca :_cbdgb =14;goto _ffcde ;_cgad :_cbdgb =15;goto _ffcde ;_dgad :_cbdgb =16;goto _ffcde ;_fedgg :_cbdgb =17;goto _ffcde ;_dbfd :_cbdgb =18;goto _ffcde ;_dgagfa :_cbdgb =19;goto _ffcde ;_eaaa :_cbdgb =20;goto _ffcde ;_fadd :_cbdgb =21;goto _ffcde ;_dbfc :_cbdgb =22;goto _ffcde ;_ffce :_cbdgb =23;goto _ffcde ;_daef :_cbdgb =24;goto _ffcde ;_cgge :_cbdgb =25;goto _ffcde ;_fdcff :_cbdgb =26;goto _ffcde ;_affb :_cbdgb =27;goto _ffcde ;_addd :_cbdgb =28;goto _ffcde ;_bfdd :_cbdgb =29;goto _ffcde ;_fbd :_cbdgb =30;goto _gead ;_bgcc :_cbdgb =30;goto _cbdd ;_cfba :_cbdgb =30;goto _eccfg ;_fbg :_cbdgb =30;goto _abfgb ;_ffbg :_cbdgb =30;goto _cfbdd ;_fcgcb :_cbdgb =30;goto _bfed ;_cafe :_cbdgb =30;goto _faggd ;_gagcd :_cbdgb =30;goto _ffggd ;_eced :_cbdgb =30;goto _gea ;_ffadc :_cbdgb =30;goto _ega ;_fbfff :_cbdgb =30;goto _cdggg ;_cedfc :_cbdgb =30;goto _gfae ;_cdac :_cbdgb =30;goto _ddge ;_bdgc :_cbdgb =30;goto _gdea ;_aac :_cbdgb =30;goto _fab ;_deg :_cbdgb =30;goto _bbbb ;_gafcea :_cbdgb =30;goto _bgede ;_cfae :_cbdgb =30;goto _bffae ;_aaab :_cbdgb =30;goto _degd ;_ggab :_cbdgb =30;goto _bgbb ;_ecdca :_cbdgb =30;goto _bcdd ;_gbgda :_cbdgb =30;goto _fbed ;_efgf :_cbdgb =30;goto _gafd ;_bdaff :_cbdgb =30;goto _eeagd ;_adgd :_cbdgb =30;goto _fbce ;_dgbaa :_cbdgb =30;goto _cbc ;_fcag :_cbdgb =30;goto _fcfea ;_fdfgb :_cbdgb =30;goto _bccb ;_bcff :_cbdgb =30;goto _bdac ;_gcga :_cbdgb =30;goto _bdgd ;_cadg :_cbdgb =30;goto _gfafb ;_eddd :_cbdgb =30;goto _beceg ;_cege :_cbdgb =30;goto _ebad ;_ceabf :_cbdgb =31;goto _cgaa ;_eecf :_cbdgb =32;goto _ffcde ;_abcgg :_cbdgb =33;goto _aedc ;_gbed :_cbdgb =34;goto _ffcde ;_deab :_cbdgb =35;goto _gffd ;_dbef :_cbdgb =36;goto _gffd ;_ffedb :_cbdgb =37;goto _gffd ;_adad :_cbdgb =38;goto _ffcde ;_dbdb :_cbdgb =39;goto _ffcde ;_cee :_cbdgb =40;goto _dda ;_gedc :_cbdgb =41;goto _ffcde ;_bcfb :_cbdgb =42;goto _dda ;_cea :_cbdgb =43;goto _aedc ;_aab :_cbdgb =44;goto _dda ;_cecb :_cbdgb =44;goto _cggeb ;_cegc :_cbdgb =44;goto _dggga ;_dceb :_cbdgb =45;goto _dda ;_gagaa :_cbdgb =46;goto _dda ;_gedfd :_cbdgb =47;goto _dda ;_gfbd :_cbdgb =48;goto _dda ;_gf :_cbdgb =49;goto _dda ;_agfb :_cbdgb =50;goto _dda ;_aedae :_cbdgb =51;goto _dda ;_ffb :_cbdgb =52;goto _dda ;_egbaa :_cbdgb =53;goto _dda ;_abbc :_cbdgb =54;goto _dda ;_aeaa :_cbdgb =55;goto _dda ;_ffgg :_cbdgb =56;goto _dda ;_edaf :_cbdgb =57;goto _dda ;_ebda :_cbdgb =58;goto _dda ;_cecad :_cbdgb =59;goto _dda ;_badc :_cbdgb =59;goto _bbgeb ;_eccfg :_eedg =3;goto _edggb ;_abfgb :_eedg =5;goto _edggb ;_cbdd :_eedg =7;goto _edggb ;_cfbdd :_eedg =9;goto _edggb ;_faggd :_eedg =11;goto _edggb ;_ebad :_eedg =13;goto _edggb ;_ffggd :_eedg =15;goto _edggb ;_bgbb :_eedg =17;goto _edggb ;_bcdd :_eedg =19;goto _edggb ;_gea :_eedg =21;goto _edggb ;_ega :_eedg =23;goto _edggb ;_gfae :_eedg =25;goto _edggb ;_gdea :_eedg =27;goto _edggb ;_cdggg :_eedg =29;goto _edggb ;_fab :_eedg =31;goto _edggb ;_degd :_eedg =33;goto _edggb ;_bffae :_eedg =35;goto _edggb ;_bccb :_eedg =37;goto _edggb ;_gfafb :_eedg =39;goto _edggb ;_bdac :_eedg =41;goto _edggb ;_bbbb :_eedg =43;goto _edggb ;_bgede :_eedg =45;goto _edggb ;_ddge :_eedg =47;goto _edggb ;_cbc :_eedg =49;goto _edggb ;_eeagd :_eedg =51;goto _edggb ;_gafd :_eedg =53;goto _edggb ;_fbce :_eedg =55;goto _edggb ;_beceg :_eedg =57;goto _edggb ;_fbed :_eedg =59;goto _edggb ;_fcfea :_eedg =61;goto _edggb ;_bdgd :_eedg =63;goto _edggb ;_bfed :_eedg =65;goto _edggb ;_gead :_eedg =67;goto _edggb ;_cggeb :_eedg =72;goto _edggb ;_gffd :_eedg =75;goto _edggb ;_aedc :_eedg =78;goto _edggb ;_dggga :_eedg =81;goto _edggb ;_bbgeb :_eedg =84;goto _edggb ;_dda :_eedg =87;goto _edggb ;_cgaa :_eedg =90;goto _edggb ;_edggb :_fdeg =uint (_cecg [_eedg ]);_eedg ++;for ;_fdeg > 0;_fdeg --{_eedg ++;switch _cecg [_eedg -1]{case 3:_fagf =_fgfg +1;case 4:_abfd =1;case 5:_abfd =2;case 6:_abfd =3;case 7:_abfd =4;case 8:_abfd =11;case 9:_abfd =14;case 10:_abfd =15;case 11:_fagf =_fgfg +1;{_bfeb .emit (_fecg ,_geed [_ebee :_fagf ]);};case 12:_fagf =_fgfg +1;{_bfeb .emit (_ceeff ,_geed [_ebee :_fagf ]);};case 13:_fagf =_fgfg +1;{_bfeb .emit (_bgcd ,_geed [_ebee :_fagf -1]);};case 14:_fagf =_fgfg +1;{_bfeb .emit (_bgcd ,_geed [_ebee +1:_fagf -2]);};case 15:_fagf =_fgfg +1;{_bfeb .emit (_afbce ,_geed [_ebee :_fagf -1]);};case 16:_fagf =_fgfg +1;{_bfeb .emit (_afbce ,_geed [_ebee :_fagf -1]);};case 17:_fagf =_fgfg +1;{_bfeb .emit (_dcga ,_geed [_ebee :_fagf ]);};case 18:_fagf =_fgfg +1;{_bfeb .emit (_fbga ,_geed [_ebee :_fagf ]);};case 19:_fagf =_fgfg +1;{_bfeb .emit (_aecga ,_geed [_ebee :_fagf ]);};case 20:_fagf =_fgfg +1;{_bfeb .emit (_befe ,_geed [_ebee :_fagf ]);};case 21:_fagf =_fgfg +1;{_bfeb .emit (_abbde ,_geed [_ebee :_fagf ]);};case 22:_fagf =_fgfg +1;{_bfeb .emit (_eab ,_geed [_ebee :_fagf ]);};case 23:_fagf =_fgfg +1;{_bfeb .emit (_dac ,_geed [_ebee :_fagf ]);};case 24:_fagf =_fgfg +1;{_bfeb .emit (_cead ,_geed [_ebee :_fagf ]);};case 25:_fagf =_fgfg +1;{_bfeb .emit (_aefgd ,_geed [_ebee :_fagf ]);};case 26:_fagf =_fgfg +1;{_bfeb .emit (_ffdb ,_geed [_ebee :_fagf ]);};case 27:_fagf =_fgfg +1;{_bfeb .emit (_gcca ,_geed [_ebee :_fagf ]);};case 28:_fagf =_fgfg +1;{_bfeb .emit (_fabd ,_geed [_ebee :_fagf ]);};case 29:_fagf =_fgfg +1;{_bfeb .emit (_bdb ,_geed [_ebee :_fagf ]);};case 30:_fagf =_fgfg +1;{_bfeb .emit (_bbdf ,_geed [_ebee :_fagf ]);};case 31:_fagf =_fgfg +1;{_bfeb .emit (_ccec ,_geed [_ebee :_fagf ]);};case 32:_fagf =_fgfg +1;{_bfeb .emit (_fdgc ,_geed [_ebee :_fagf ]);};case 33:_fagf =_fgfg +1;{_bfeb .emit (_fgeb ,_geed [_ebee :_fagf ]);};case 34:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_ccdfe ,_geed [_ebee :_fagf ]);};case 35:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_baef ,_geed [_ebee :_fagf ]);};case 36:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_dfeefc ,_geed [_ebee :_fagf ]);};case 37:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_fabgd ,_geed [_ebee :_fagf ]);};case 38:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_cfddg ,_geed [_ebee :_fagf ]);};case 39:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_gfea ,_geed [_ebee +1:_fagf -1]);};case 40:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_abcg ,_geed [_ebee :_fagf ]);};case 41:_fagf =_fgfg ;_fgfg --;{_bfeb .emit (_ffad ,_geed [_ebee :_fagf ]);};case 42:_fgfg =(_fagf )-1;{_bfeb .emit (_ccdfe ,_geed [_ebee :_fagf ]);};case 43:switch _abfd {case 0:{_cbdgb =0;goto _ffcde ;};case 1:{_fgfg =(_fagf )-1;_bfeb .emit (_dffc ,_geed [_ebee :_fagf ]);};case 2:{_fgfg =(_fagf )-1;_bfeb .emit (_ccdfe ,_geed [_ebee :_fagf ]);};case 3:{_fgfg =(_fagf )-1;_bfeb .emit (_baef ,_geed [_ebee :_fagf ]);};case 4:{_fgfg =(_fagf )-1;_bfeb .emit (_afcdc ,_geed [_ebee :_fagf ]);};case 11:{_fgfg =(_fagf )-1;_bfeb .emit (_cdgfa ,_geed [_ebee :_fagf ]);};case 14:{_fgfg =(_fagf )-1;_bfeb .emit (_cfddg ,_geed [_ebee :_fagf ]);};case 15:{_fgfg =(_fagf )-1;_bfeb .emit (_gfea ,_geed [_ebee +1:_fagf -1]);};};};};goto _ffcde ;_ffcde :_eedg =int (_cgdfe [_cbdgb ]);_fdeg =uint (_cecg [_eedg ]);_eedg ++;for ;_fdeg > 0;_fdeg --{_eedg ++;switch _cecg [_eedg -1]{case 0:_ebee =0;case 1:_abfd =0;};};if _cbdgb ==0{goto _ceabc ;};if _fgfg ++;_fgfg !=_aecfd {goto _fcfff ;};_cgbc :{};if _fgfg ==_dcaa {switch _cbdgb {case 1:goto _fbd ;case 2:goto _fbd ;case 31:goto _gbgda ;case 14:goto _fbd ;case 15:goto _fbd ;case 32:goto _efgf ;case 17:goto _fbd ;case 33:goto _bdaff ;case 18:goto _fbd ;case 19:goto _fbd ;case 34:goto _adgd ;case 35:goto _dgbaa ;case 36:goto _dgbaa ;case 23:goto _fcgcb ;case 37:goto _dgbaa ;case 38:goto _fcag ;case 39:goto _gcga ;case 40:goto _eddd ;case 41:goto _eddd ;case 42:goto _eddd ;case 43:goto _bdaff ;case 44:goto _fbd ;case 45:goto _eddd ;case 46:goto _eddd ;case 47:goto _eddd ;case 48:goto _eddd ;case 49:goto _eddd ;case 50:goto _eddd ;case 51:goto _eddd ;case 52:goto _eddd ;case 53:goto _eddd ;case 54:goto _eddd ;case 55:goto _eddd ;case 56:goto _eddd ;case 57:goto _eddd ;case 58:goto _eddd ;case 59:goto _fbd ;};};_ceabc :{};};if _ebee > 0{copy (_geed [0:],_geed [_ebee :]);};};_ =_dcaa ;if _cbdgb ==_ggdd {_bfeb .emit (_dedg ,nil );};close (_bfeb ._adce );};

// Update updates references in the PrefixExpr after removing a row/column.
func (_afcbf PrefixExpr )Update (q *_cdd .UpdateQuery )Expression {_facb :=_afcbf ;_eccd :=_afcbf ._aeag .String ();if _eccd ==q .SheetToUpdate {_cgffc :=*q ;_cgffc .UpdateCurrentSheet =true ;_facb ._eeecd =_afcbf ._eeecd .Update (&_cgffc );};return _facb ;};type defEval struct{evCache ;_ebg bool ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_feaf ,_cfde Expression ;_ccae BinOpType ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ffgea :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_cdfbc :=args [1].ValueNumber !=0;_bdfa :=_gaea (args [2:],[]string {},_cdfbc );return MakeStringResult (_fged .Join (_bdfa ,_ffgea ));};const _aa int =30;func _gccg (_aeca Result ,_fgfc ,_ggaec string )(float64 ,Result ){var _gcfg float64 ;switch _aeca .Type {case ResultTypeNumber :_gcfg =float64 (int (_aeca .ValueNumber ));case ResultTypeString :_cecc :=DateValue ([]Result {_aeca });if _cecc .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fgfc +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_ggaec );};_gcfg =_cecc .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_ggaec );};if _gcfg < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fgfc +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _gcfg ,_bdgb ;};func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_fged .NewReader (s ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bfgdgb Result )ListValues ()[]Result {if _bfgdgb .Type ==ResultTypeArray {_bfabd :=[]Result {};for _ ,_bdfab :=range _bfgdgb .ValueArray {for _ ,_dcfcb :=range _bdfab {_bfabd =append (_bfabd ,_dcfcb );};};return _bfabd ;};if _bfgdgb .Type ==ResultTypeList {return _bfgdgb .ValueList ;};return nil ;};func _eegc (_fbdd ,_gc []string )[]string {for _ ,_ebab :=range _gc {_fbdd =append (_fbdd ,_ebab );};return _fbdd ;};func _dfad (_acgd BinOpType ,_dbdf [][]Result ,_gddeg Result )Result {_dcd :=[][]Result {};for _gcff :=range _dbdf {_dae :=_gaa (_acgd ,_dbdf [_gcff ],_gddeg );if _dae .Type ==ResultTypeError {return _dae ;};_dcd =append (_dcd ,_dae .ValueList );};return MakeArrayResult (_dcd );};func _cbba (_acef Result ,_afge *criteriaParsed )bool {_eaafb :=_fged .ToLower (_acef .ValueString );_abea :=_afge ._ecgbg ._cbccg ;_cbdb :=_afge ._ecgbg ._bgef ;if _abea ==_bc {return _eaafb ==_cbdb ||_ege .Match (_cbdb ,_eaafb );};if _acef .Type !=ResultTypeEmpty {if _eaafb ==_afge ._aaae ||_ege .Match (_afge ._aaae ,_eaafb ){return true ;};if _ ,_gddg :=_fbgg .ParseFloat (_cbdb ,64);_gddg ==nil {return false ;};switch _abea {case _eddfa :return _eaafb <=_cbdb ;case _baaaf :return _eaafb >=_cbdb ;case _ccff :return _eaafb < _cbdb ;case _ceda :return _eaafb > _cbdb ;};};return false ;};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ebcgef :=args [0];if _ebcgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dge :=int (_ebcgef .ValueNumber );if len (args )<=_dge {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_dge ];};const _fdfcd int =30;

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbf :=args [0].AsNumber ();if _gbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cebc :=float64 (1);_gbdf :=args [1].AsNumber ();if _gbdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cebc =_gbdf .ValueNumber ;if _cebc < 0&&_gbf .ValueNumber > 0||_cebc > 0&&_gbf .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_dagbcf :=_gbf .ValueNumber ;_dagbcf ,_afgd :=_cggd .Modf (_dagbcf /_cebc );if _cggd .Trunc (_afgd +0.5)> 0{_dagbcf ++;};return MakeNumberResult (_dagbcf *_cebc );};const _aefgd =57367;

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fag :=args [0].AsNumber ();if _fag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_caaf :=10.0;if len (args )> 1{_gddf :=args [1].AsNumber ();if _gddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_caaf =args [1].ValueNumber ;};if _fag .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _caaf ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_cggd .Log (_fag .ValueNumber )/_cggd .Log (_caaf ));};type xargs struct{_cbe []float64 ;_ebcga []float64 ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {pfx ,exp }};

// String returns a string representation for Bool.
func (_acf Bool )String ()string {if _acf ._ddabg {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// HasFormula returns FALSE for the invalid reference context.
func (_badb *ivr )HasFormula (cellRef string )bool {return false };const _cfddf =1;func _ffaag (_bfcg yyLexer )int {return _addb ().Parse (_bfcg )};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbg :=args [0].AsNumber ();if _gbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_badg :=float64 (1);if _gbg .ValueNumber < 0{_badg =-1;};if len (args )> 1{_cbdg :=args [1].AsNumber ();if _cbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_badg =_cbdg .ValueNumber ;};_ebcca :=float64 (1);if len (args )> 2{_baga :=args [2].AsNumber ();if _baga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_ebcca =_baga .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cggd .Ceil (_gbg .ValueNumber ));};_eedd :=_gbg .ValueNumber ;_eedd ,_ffbgf :=_cggd .Modf (_eedd /_badg );if _ffbgf !=0{if _gbg .ValueNumber > 0{_eedd ++;}else if _ebcca < 0{_eedd --;};};return MakeNumberResult (_eedd *_badg );};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fdebe :=args [1].ValueNumber ;_ecfa :=args [0];var _gdcg float64 ;switch _ecfa .Type {case ResultTypeEmpty :_gdcg =0;case ResultTypeNumber :_gdcg =_ecfa .ValueNumber ;case ResultTypeString :_cdcgc :=DateValue ([]Result {args [0]});if _cdcgc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gdcg =_cdcgc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fdbc :=_cad (_gdcg );_edd :=_fdbc .AddDate (0,int (_fdebe +1),0);_gdbad ,_aaede ,_ :=_edd .Date ();_fbf :=_dfcaa (_gdbad ,int (_aaede ),0);if _fbf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _gdbad ==1900&&_aaede ==3{_fbf --;};return MakeNumberResult (_fbf );};const _dfeefc =57346;func (_cce PrefixHorizontalRange )horizontalRangeReference (_gga string )string {return _befc .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_gga ,_cce ._ebbd ,_cce ._eecfd );};func _fbfe (_deb ,_bfac ,_bfge ,_gbce int )int {if !_fdfd (_gbce ){return _bfge ;};_ffbdd :=_bfge ;_bcgae :=_fcaa (_deb ,_bfac );if _ffbdd > 30||_bfge >=_bcgae ||_ffbdd >=_bcgae {_ffbdd =30;};return _ffbdd ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbe :=_dfce (args );_ae .Float64s (_cgbe );var _fcfd float64 ;if len (_cgbe )%2==0{_fcfd =(_cgbe [len (_cgbe )/2-1]+_cgbe [len (_cgbe )/2])/2;}else {_fcfd =_cgbe [len (_cgbe )/2];};return MakeNumberResult (_fcfd );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cgba (args ,false )};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_eeaa :=&defEval {};_eeaa .evCache =_ddbf ();return _eeaa };func _gd (_fgbb string ,_bdecd []Result )(*parsedSearchObject ,Result ){_dbcc :=len (_bdecd );if _dbcc !=2&&_dbcc !=3{return nil ,MakeErrorResult (_fgbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbbf :=_bdecd [0];if _bbbf .Type ==ResultTypeError {return nil ,_bbbf ;};if _bbbf .Type !=ResultTypeString &&_bbbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_eeddc :=_bdecd [1];if _eeddc .Type ==ResultTypeError {return nil ,_eeddc ;};if _eeddc .Type !=ResultTypeString &&_eeddc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_effbc :=_eeddc .Value ();_bebb :=_bbbf .Value ();_aag :=1;if _dbcc ==3&&_bdecd [2].Type !=ResultTypeEmpty {_edbd :=_bdecd [2];if _edbd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_aag =int (_edbd .ValueNumber );if _aag < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _aag > len (_effbc ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bebb ,_effbc ,_aag },_bdgb ;};var _febc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbgc :=args [0];_egdf :=args [1];if _egdf .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dgee :=args [2].AsNumber ();if _dgee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffeede :=false ;if len (args )==4{_bcab :=args [3].AsNumber ();if _bcab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bcab .ValueNumber ==0{_ffeede =true ;};};_bbddf :=-1;_ddebc :=false ;if len (_egdf .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_gaf :=_egdf .ValueArray [0];_ffac :for _dcbg ,_cega :=range _gaf {switch _fcfe (_cega ,_dbgc ,false ,_ffeede ){case _fgdeg :_bbddf =_dcbg ;case _ddgada :_bbddf =_dcbg ;_ddebc =true ;break _ffac ;};};if _bbddf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cbca :=int (_dgee .ValueNumber )-1;if _cbca < 0||_cbca > len (_egdf .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_gaf =_egdf .ValueArray [_cbca ];if _bbddf < 0||_bbddf >=len (_gaf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ddebc ||!_ffeede {return _gaf [_bbddf ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// GetLocked returns FALSE for the invalid reference context.
func (_fgd *ivr )GetLocked (cellRef string )bool {return false };

// Update updates references in the VerticalRange after removing a row/column.
func (_dgcf VerticalRange )Update (q *_cdd .UpdateQuery )Expression {if q .UpdateType ==_cdd .UpdateActionRemoveColumn {_ecbg :=_dgcf ;if q .UpdateCurrentSheet {_abfba :=q .ColumnIdx ;_ecbg ._gdgf =_bec (_dgcf ._gdgf ,_abfba );_ecbg ._gggg =_bec (_dgcf ._gggg ,_abfba );};return _ecbg ;};return _dgcf ;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aaed :=[]float64 {};for _ ,_bga :=range args {switch _bga .Type {case ResultTypeString :_gcfb :=_bga .AsNumber ();if _gcfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aaed =append (_aaed ,_gcfb .ValueNumber );case ResultTypeList :_fdegd :=LCM (_bga .ValueList );if _fdegd .Type !=ResultTypeNumber {return _fdegd ;};_aaed =append (_aaed ,_fdegd .ValueNumber );case ResultTypeNumber :_aaed =append (_aaed ,_bga .ValueNumber );case ResultTypeError :return _bga ;};};if _aaed [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_aaed )==1{return MakeNumberResult (_aaed [0]);};_egedc :=_aaed [0];for _dfab :=1;_dfab < len (_aaed );_dfab ++{if _aaed [_dfab ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egedc =_fgff (_egedc ,_aaed [_dfab ]);};return MakeNumberResult (_egedc );};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_gagafd ,_gbad :=_gd ("\u0046\u0049\u004e\u0044",args );if _gbad .Type !=ResultTypeEmpty {return _gbad ;};_bgfc :=_gagafd ._cge ;if _bgfc ==""{return MakeNumberResult (1.0);};_fbdde :=_gagafd ._ffed ;_adea :=_gagafd ._ffcdg ;_gdeaf :=1;for _fcaf :=range _fbdde {if _gdeaf < _adea {_gdeaf ++;continue ;};_gedf :=_fged .Index (_fbdde [_fcaf :],_bgfc );if _gedf ==0{return MakeNumberResult (float64 (_gdeaf ));};_gdeaf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};type couponArgs struct{_bggc float64 ;_baac float64 ;_gbdb int ;_faccc int ;};func _feg (_aadfd Result ,_agaeg *criteriaParsed )bool {if _aadfd .IsBoolean {return false ;};_eabb :=_aadfd .Type ;if _agaeg ._ecfaf {return _eabb ==ResultTypeNumber &&_aadfd .ValueNumber ==_agaeg ._dabb ;}else if _eabb ==ResultTypeNumber {return _fbagg (_aadfd .ValueNumber ,_agaeg ._ecgbg );};return _cbba (_aadfd ,_agaeg );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfea :=args [0].AsString ();if _bfea .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbcg :=_ddfd .Buffer {};for _ ,_adefa :=range _bfea .ValueString {if _eacd .IsPrint (_adefa ){_bbcg .WriteRune (_adefa );};};return MakeStringResult (_bbcg .String ());};

// GetFilename returns an empty string for the invalid reference context.
func (_ddda *ivr )GetFilename ()string {return ""};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);