//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ada "bytes";_cdeb "fmt";_bdd "github.com/unidoc/unioffice";_dbe "io";_deb "math";_bcbff "strconv";_ddef "strings";_eed "time";);func _ab (_fe []byte )[]byte {_ee :=len (_fe );_bcag :=false ;_bfbe :=false ;for _bdf :=len (_fe )-1;_bdf >=0;_bdf --{if _fe [_bdf ]=='0'&&!_bfbe &&!_bcag {_ee =_bdf ;}else if _fe [_bdf ]=='.'{_bcag =true ;}else {_bfbe =true ;};};if _bcag &&_bfbe {if _fe [_ee -1]=='.'{_ee --;};return _fe [0:_ee ];};return _fe ;};func _da (_dgf []byte )[]byte {for _ffg :=0;_ffg < len (_dgf )/2;_ffg ++{_aebf :=len (_dgf )-1-_ffg ;_dgf [_ffg ],_dgf [_aebf ]=_dgf [_aebf ],_dgf [_ffg ];};return _dgf ;};func _dcdc (_cede []byte )[]byte {for _aad :=len (_cede )-1;_aad > 0;_aad --{if _cede [_aad ]=='9'+1{_cede [_aad ]='0';if _cede [_aad -1]=='.'{_aad --;};_cede [_aad -1]++;};};if _cede [0]=='9'+1{_cede [0]='0';copy (_cede [1:],_cede [0:]);_cede [0]='1';};return _cede ;};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;const _efe =1e11;const _ceb int =34;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_fegg :=Parse (f );var _cd Format ;if len (_fegg )==1{_cd =_fegg [0];}else if len (_fegg )==4{_cd =_fegg [3];};_fae :=false ;for _ ,_gde :=range _cd .Whole {if _gde .Type ==FmtTypeText {_fae =true ;};};if !_fae {return v ;};_efb :=_ada .Buffer {};for _ ,_bfaa :=range _cd .Whole {switch _bfaa .Type {case FmtTypeLiteral :_efb .WriteByte (_bfaa .Literal );case FmtTypeText :_efb .WriteString (v );};};return _efb .String ();};func _agc (_cbgd _eed .Time ,_ace string )[]byte {_dcb :=[]byte {};_ed :=0;for _dbg :=0;_dbg < len (_ace );_dbg ++{var _acd string ;if _ace [_dbg ]=='/'{_acd =string (_ace [_ed :_dbg ]);_ed =_dbg +1;}else if _dbg ==len (_ace )-1{_acd =string (_ace [_ed :_dbg +1]);}else {continue ;};switch _acd {case "\u0079\u0079":_dcb =_cbgd .AppendFormat (_dcb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_dcb =_cbgd .AppendFormat (_dcb ,"\u0032\u0030\u0030\u0036");case "\u006d":_dcb =_cbgd .AppendFormat (_dcb ,"\u0031");case "\u006d\u006d":_dcb =_cbgd .AppendFormat (_dcb ,"\u0030\u0031");case "\u006d\u006d\u006d":_dcb =_cbgd .AppendFormat (_dcb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_dcb =_cbgd .AppendFormat (_dcb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _cbgd .Month (){case _eed .January ,_eed .July ,_eed .June :_dcb =append (_dcb ,'J');case _eed .February :_dcb =append (_dcb ,'M');case _eed .March ,_eed .May :_dcb =append (_dcb ,'M');case _eed .April ,_eed .August :_dcb =append (_dcb ,'A');case _eed .September :_dcb =append (_dcb ,'S');case _eed .October :_dcb =append (_dcb ,'O');case _eed .November :_dcb =append (_dcb ,'N');case _eed .December :_dcb =append (_dcb ,'D');};case "\u0064":_dcb =_cbgd .AppendFormat (_dcb ,"\u0032");case "\u0064\u0064":_dcb =_cbgd .AppendFormat (_dcb ,"\u0030\u0032");case "\u0064\u0064\u0064":_dcb =_cbgd .AppendFormat (_dcb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_dcb =_cbgd .AppendFormat (_dcb ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_bdd .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_acd );};if _ace [_dbg ]=='/'{_dcb =append (_dcb ,'/');};};return _dcb ;};func _cfea (_eafe ,_fgd float64 ,_bad Format )[]byte {if len (_bad .Fractional )==0{return nil ;};_dgcg :=_bcbff .AppendFloat (nil ,_eafe ,'f',-1,64);if len (_dgcg )> 2{_dgcg =_dgcg [2:];}else {_dgcg =nil ;};_bcfe :=make ([]byte ,0,len (_dgcg ));_bcfe =append (_bcfe ,'.');_adfe :=0;_gga :for _cgf :=0;_cgf < len (_bad .Fractional );_cgf ++{_gbge :=_cgf ;_f :=_bad .Fractional [_cgf ];switch _f .Type {case FmtTypeDigit :if _gbge < len (_dgcg ){_bcfe =append (_bcfe ,_dgcg [_gbge ]);_adfe ++;}else {_bcfe =append (_bcfe ,'0');};case FmtTypeDigitOpt :if _gbge >=0{_bcfe =append (_bcfe ,_dgcg [_gbge ]);_adfe ++;}else {break _gga ;};case FmtTypeLiteral :_bcfe =append (_bcfe ,_f .Literal );default:_bdd .Log ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_f );};};return _bcfe ;};const _acf int =0;func _gdf (_bff ,_ccac float64 ,_fdc Format )[]byte {if len (_fdc .Whole )==0{return nil ;};_cfb :=_eed .Date (1899,12,30,0,0,0,0,_eed .UTC );_dgb :=_cfb .Add (_eed .Duration (_ccac *float64 (24*_eed .Hour )));_dgb =_gd (_dgb );_abf :=_bcbff .AppendFloat (nil ,_bff ,'f',-1,64);_fgff :=make ([]byte ,0,len (_abf ));_fddef :=0;_aed :=1;_df :for _cea :=len (_fdc .Whole )-1;_cea >=0;_cea --{_ge :=len (_abf )-1-_fddef ;_gba :=_fdc .Whole [_cea ];switch _gba .Type {case FmtTypeDigit :if _ge >=0{_fgff =append (_fgff ,_abf [_ge ]);_fddef ++;_aed =_cea ;}else {_fgff =append (_fgff ,'0');};case FmtTypeDigitOpt :if _ge >=0{_fgff =append (_fgff ,_abf [_ge ]);_fddef ++;_aed =_cea ;}else {for _edf :=_cea ;_edf >=0;_edf --{_gc :=_fdc .Whole [_edf ];if _gc .Type ==FmtTypeLiteral {_fgff =append (_fgff ,_gc .Literal );};};break _df ;};case FmtTypeDollar :for _daeg :=_fddef ;_daeg < len (_abf );_daeg ++{_fgff =append (_fgff ,_abf [len (_abf )-1-_daeg ]);_fddef ++;};_fgff =append (_fgff ,'$');case FmtTypeComma :if !_fdc ._fcge {_fgff =append (_fgff ,',');};case FmtTypeLiteral :_fgff =append (_fgff ,_gba .Literal );case FmtTypeDate :_fgff =append (_fgff ,_da (_agc (_dgb ,_gba .DateTime ))...);case FmtTypeTime :_fgff =append (_fgff ,_da (_dcc (_dgb ,_ccac ,_gba .DateTime ))...);default:_bdd .Log ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_gba );};};_eadf :=_da (_fgff );if _fddef < len (_abf )&&(_fddef !=0||_fdc ._dec ){_ddeg :=len (_abf )-_fddef ;_ef :=make ([]byte ,len (_eadf )+_ddeg );copy (_ef ,_eadf [0:_aed ]);copy (_ef [_aed :],_abf [0:]);copy (_ef [_aed +_ddeg :],_eadf [_aed :]);_eadf =_ef ;};if _fdc ._fcge {_dde :=_ada .Buffer {};_bgd :=0;for _bbe :=len (_eadf )-1;_bbe >=0;_bbe --{if !(_eadf [_bbe ]>='0'&&_eadf [_bbe ]<='9'){_bgd ++;}else {break ;};};for _efa :=0;_efa < len (_eadf );_efa ++{_cegg :=(len (_eadf )-_efa -_bgd );if _cegg %3==0&&_cegg !=0&&_efa !=0{_dde .WriteByte (',');};_dde .WriteByte (_eadf [_efa ]);};_eadf =_dde .Bytes ();};return _eadf ;};func _fcf (_fdf float64 )string {_feda :=_bcbff .FormatFloat (_fdf ,'E',-1,64);_cdcc :=_bcbff .FormatFloat (_fdf ,'E',5,64);if len (_feda )< len (_cdcc ){return _bcbff .FormatFloat (_fdf ,'E',2,64);};return _cdcc ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_cfc :=Parse (f );if len (_cfc )==1{return _fb (v ,_cfc [0],false );}else if len (_cfc )> 1&&v < 0{return _fb (v ,_cfc [1],true );}else if len (_cfc )> 2&&v ==0{return _fb (v ,_cfc [2],false );};return _fb (v ,_cfc [0],false );};func _fb (_bgac float64 ,_fag Format ,_fgf bool )string {if _fag ._gcf {return NumberGeneric (_bgac );};_edeg :=make ([]byte ,0,20);_fgfc :=_deb .Signbit (_bgac );_bdag :=_deb .Abs (_bgac );_af :=int64 (0);_dgc :=int64 (0);if _fag .IsExponential {for _bdag >=10{_dgc ++;_bdag /=10;};for _bdag < 1{_dgc --;_bdag *=10;};}else if _fag ._dbf {_bdag *=100;}else if _fag ._aada {if _fag ._ccfg ==0{_egd :=_deb .Pow (10,float64 (_fag ._eba ));_cegf ,_feeg :=1.0,1.0;_ =_cegf ;for _edd :=1.0;_edd < _egd ;_edd ++{_ ,_gda :=_deb .Modf (_bdag *float64 (_edd ));if _gda < _feeg {_feeg =_gda ;_cegf =_edd ;if _gda ==0{break ;};};};_fag ._ccfg =int64 (_cegf );};_af =int64 (_bdag *float64 (_fag ._ccfg )+0.5);if len (_fag .Whole )> 0&&_af > _fag ._ccfg {_af =int64 (_bdag *float64 (_fag ._ccfg ))%_fag ._ccfg ;_bdag -=float64 (_af )/float64 (_fag ._ccfg );}else {_bdag -=float64 (_af )/float64 (_fag ._ccfg );if _deb .Abs (_bdag )< 1{_dda :=true ;for _ ,_fccg :=range _fag .Whole {if _fccg .Type ==FmtTypeDigitOpt {continue ;};if _fccg .Type ==FmtTypeLiteral &&_fccg .Literal ==' '{continue ;};_dda =false ;};if _dda {_fag .Whole =nil ;};};};};_cb :=1;for _ ,_ggc :=range _fag .Fractional {if _ggc .Type ==FmtTypeDigit ||_ggc .Type ==FmtTypeDigitOpt {_cb ++;};};_bdag +=5*_deb .Pow10 (-_cb );_cde ,_eec :=_deb .Modf (_bdag );_edeg =append (_edeg ,_gdf (_cde ,_bgac ,_fag )...);_edeg =append (_edeg ,_cfea (_eec ,_bgac ,_fag )...);_edeg =append (_edeg ,_gce (_dgc ,_fag )...);if _fag ._aada {_edeg =_bcbff .AppendInt (_edeg ,_af ,10);_edeg =append (_edeg ,'/');_edeg =_bcbff .AppendInt (_edeg ,_fag ._ccfg ,10);};if !_fgf &&_fgfc {return "\u002d"+string (_edeg );};return string (_edeg );};func _gce (_cbf int64 ,_gbff Format )[]byte {if !_gbff .IsExponential ||len (_gbff .Exponent )==0{return nil ;};_eca :=_bcbff .AppendInt (nil ,_fbf (_cbf ),10);_gegd :=make ([]byte ,0,len (_eca )+2);_gegd =append (_gegd ,'E');if _cbf >=0{_gegd =append (_gegd ,'+');}else {_gegd =append (_gegd ,'-');_cbf *=-1;};_eef :=0;_abe :for _bcbe :=len (_gbff .Exponent )-1;_bcbe >=0;_bcbe --{_dce :=len (_eca )-1-_eef ;_gaa :=_gbff .Exponent [_bcbe ];switch _gaa .Type {case FmtTypeDigit :if _dce >=0{_gegd =append (_gegd ,_eca [_dce ]);_eef ++;}else {_gegd =append (_gegd ,'0');};case FmtTypeDigitOpt :if _dce >=0{_gegd =append (_gegd ,_eca [_dce ]);_eef ++;}else {for _cga :=_bcbe ;_cga >=0;_cga --{_ffag :=_gbff .Exponent [_cga ];if _ffag .Type ==FmtTypeLiteral {_gegd =append (_gegd ,_ffag .Literal );};};break _abe ;};case FmtTypeLiteral :_gegd =append (_gegd ,_gaa .Literal );default:_bdd .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_gaa );};};if _eef < len (_eca ){_gegd =append (_gegd ,_eca [len (_eca )-_eef -1:_eef -1]...);};_da (_gegd [2:]);return _gegd ;};const _geef int =34;func (_ggaa *Lexer )nextFmt (){_ggaa ._bfb =append (_ggaa ._bfb ,_ggaa ._abfga );_ggaa ._abfga =Format {}};func _fbf (_edc int64 )int64 {if _edc < 0{return -_edc ;};return _edc ;};type Lexer struct{_abfga Format ;_bfb []Format ;};

// AddToken adds a format token to the format.
func (_ad *Format )AddToken (t FmtType ,l []byte ){if _ad ._dff {_ad ._dff =false ;return ;};switch t {case FmtTypeDecimal :_ad ._dec =true ;case FmtTypeUnderscore :_ad ._dff =true ;case FmtTypeText :_ad .Whole =append (_ad .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_ad .Whole =append (_ad .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_ad ._dbf =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_bcf :=range l {if _ad .IsExponential {_ad .Exponent =append (_ad .Exponent ,Token {Type :t ,Literal :_bcf });}else if !_ad ._dec {_ad .Whole =append (_ad .Whole ,Token {Type :t ,Literal :_bcf });}else {_ad .Fractional =append (_ad .Fractional ,Token {Type :t ,Literal :_bcf });};};case FmtTypeDigitOptThousands :_ad ._fcge =true ;case FmtTypeFraction :_ddd :=_ddef .Split (string (l ),"\u002f");if len (_ddd )==2{_ad ._aada =true ;_ad ._ccfg ,_ =_bcbff .ParseInt (_ddd [1],10,64);for _ ,_bfdb :=range _ddd [1]{if _bfdb =='?'||_bfdb =='0'{_ad ._eba ++;};};};default:_bdd .Log ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};const _fbc int =-1;const _adg int =0;const _ebaa int =-1;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _deb .Abs (v )>=_efe ||_deb .Abs (v )<=_geed &&v !=0{return _fcf (v );};_cec :=make ([]byte ,0,15);_cec =_bcbff .AppendFloat (_cec ,v ,'f',-1,64);if len (_cec )> 11{_fadb :=_cec [11]-'0';if _fadb >=5&&_fadb <=9{_cec [10]++;_cec =_cec [0:11];_cec =_dcdc (_cec );};_cec =_cec [0:11];}else if len (_cec )==11{if _cec [len (_cec )-1]=='9'{_cec [len (_cec )-1]++;_cec =_dcdc (_cec );};};_cec =_ab (_cec );return string (_cec );};func _gd (_aea _eed .Time )_eed .Time {_aea =_aea .UTC ();return _eed .Date (_aea .Year (),_aea .Month (),_aea .Day (),_aea .Hour (),_aea .Minute (),_aea .Second (),_aea .Nanosecond (),_eed .Local );};const _adf int =0;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_aada bool ;_dbf bool ;_gcf bool ;_fcge bool ;_dff bool ;_dec bool ;_ccfg int64 ;_eba int ;};func _dcc (_cgcd _eed .Time ,_agfb float64 ,_adb string )[]byte {_bac :=[]byte {};_bfe :=0;for _bfde :=0;_bfde < len (_adb );_bfde ++{var _fgc string ;if _adb [_bfde ]==':'{_fgc =string (_adb [_bfe :_bfde ]);_bfe =_bfde +1;}else if _bfde ==len (_adb )-1{_fgc =string (_adb [_bfe :_bfde +1]);}else {continue ;};switch _fgc {case "\u0064":_bac =_cgcd .AppendFormat (_bac ,"\u0032");case "\u0068":_bac =_cgcd .AppendFormat (_bac ,"\u0033");case "\u0068\u0068":_bac =_cgcd .AppendFormat (_bac ,"\u0031\u0035");case "\u006d":_bac =_cgcd .AppendFormat (_bac ,"\u0034");case "\u006d\u006d":_bac =_cgcd .AppendFormat (_bac ,"\u0030\u0034");case "\u0073":_bac =_cgcd .Round (_eed .Second ).AppendFormat (_bac ,"\u0035");case "\u0073\u002e\u0030":_bac =_cgcd .Round (_eed .Second /10).AppendFormat (_bac ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_bac =_cgcd .Round (_eed .Second /100).AppendFormat (_bac ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_bac =_cgcd .Round (_eed .Second /1000).AppendFormat (_bac ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_bac =_cgcd .Round (_eed .Second ).AppendFormat (_bac ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_bac =_cgcd .Round (_eed .Second /10).AppendFormat (_bac ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_bac =_cgcd .Round (_eed .Second /100).AppendFormat (_bac ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_bac =_cgcd .Round (_eed .Second /1000).AppendFormat (_bac ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_bac =_cgcd .AppendFormat (_bac ,"\u0050\u004d");case "\u005b\u0068\u005d":_bac =_bcbff .AppendInt (_bac ,int64 (_agfb *24),10);case "\u005b\u006d\u005d":_bac =_bcbff .AppendInt (_bac ,int64 (_agfb *24*60),10);case "\u005b\u0073\u005d":_bac =_bcbff .AppendInt (_bac ,int64 (_agfb *24*60*60),10);case "":default:_bdd .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_fgc );};if _adb [_bfde ]==':'{_bac =append (_bac ,':');};};return _bac ;};func Parse (s string )[]Format {_ccc :=Lexer {};_ccc .Lex (_ddef .NewReader (s ));_ccc ._bfb =append (_ccc ._bfb ,_ccc ._abfga );return _ccc ._bfb ;};const _bfd ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";func (_cfcf *Lexer )Lex (r _dbe .Reader ){_gecg ,_ade ,_gdgd :=0,0,0;_dgeg :=-1;_ebcc ,_bec ,_bfa :=0,0,0;_ =_bec ;_ =_bfa ;_ebb :=1;_ =_ebb ;_cbdg :=make ([]byte ,4096);_aadf :=false ;for !_aadf {_adfc :=0;if _ebcc > 0{_adfc =_ade -_ebcc ;};_ade =0;_edfb ,_gee :=r .Read (_cbdg [_adfc :]);if _edfb ==0||_gee !=nil {_aadf =true ;};_gdgd =_edfb +_adfc ;if _gdgd < len (_cbdg ){_dgeg =_gdgd ;};{_gecg =_ceb ;_ebcc =0;_bec =0;_bfa =0;};{if _ade ==_gdgd {goto _bcbf ;};switch _gecg {case 34:goto _ddag ;case 35:goto _bga ;case 0:goto _abfg ;case 36:goto _dfd ;case 37:goto _bbb ;case 1:goto _egbc ;case 2:goto _daf ;case 38:goto _cef ;case 3:goto _ga ;case 4:goto _eab ;case 39:goto _bcd ;case 5:goto _dgfb ;case 6:goto _ded ;case 7:goto _db ;case 8:goto _fbe ;case 40:goto _bag ;case 9:goto _fed ;case 41:goto _egf ;case 10:goto _fc ;case 42:goto _dgag ;case 11:goto _ebg ;case 43:goto _bfce ;case 44:goto _bce ;case 45:goto _afdd ;case 12:goto _gcg ;case 46:goto _dg ;case 13:goto _afa ;case 14:goto _ec ;case 15:goto _dadf ;case 16:goto _acde ;case 47:goto _beed ;case 17:goto _dba ;case 48:goto _dcag ;case 18:goto _fac ;case 19:goto _dcee ;case 20:goto _fga ;case 49:goto _bfg ;case 50:goto _dfe ;case 21:goto _cbd ;case 22:goto _fda ;case 23:goto _gdae ;case 24:goto _aaf ;case 25:goto _bgea ;case 51:goto _geaa ;case 26:goto _dad ;case 52:goto _cac ;case 53:goto _feec ;case 54:goto _baeg ;case 55:goto _dbcf ;case 56:goto _feee ;case 57:goto _fcfa ;case 27:goto _fcc ;case 28:goto _cad ;case 29:goto _be ;case 30:goto _eaba ;case 31:goto _aeaf ;case 58:goto _ca ;case 32:goto _ea ;case 59:goto _ccaa ;case 33:goto _efgg ;case 60:goto _bffa ;case 61:goto _cebb ;case 62:goto _fdgd ;};goto _dac ;_bca :switch _bfa {case 2:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeDigit ,nil );};case 3:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_ade =(_bec )-1;};case 8:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypePercent ,nil );};case 13:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeFraction ,_cbdg [_ebcc :_bec ]);};case 14:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeDate ,_cbdg [_ebcc :_bec ]);};case 15:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeTime ,_cbdg [_ebcc :_bec ]);};case 16:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeTime ,_cbdg [_ebcc :_bec ]);};case 18:{_ade =(_bec )-1;};case 20:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc :_bec ]);};case 21:{_ade =(_bec )-1;_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc +1:_bec -1]);};};goto _bda ;_afe :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeFraction ,_cbdg [_ebcc :_bec ]);};goto _bda ;_fa :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeDigitOpt ,nil );};goto _bda ;_dedb :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeDigitOptThousands ,nil );};goto _bda ;_dea :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypePercent ,nil );};goto _bda ;_fdg :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeDate ,_cbdg [_ebcc :_bec ]);};goto _bda ;_fgb :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeDigit ,nil );};goto _bda ;_bcc :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeTime ,_cbdg [_ebcc :_bec ]);};goto _bda ;_fab :_ade =(_bec )-1;{_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc :_bec ]);};goto _bda ;_fdde :_bec =_ade +1;{_cfcf ._abfga ._gcf =true ;};goto _bda ;_cda :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc :_bec ]);};goto _bda ;_aag :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeDollar ,nil );};goto _bda ;_ebdb :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeComma ,nil );};goto _bda ;_ceg :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeDecimal ,nil );};goto _bda ;_dd :_bec =_ade +1;{_cfcf .nextFmt ();};goto _bda ;_cab :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeText ,nil );};goto _bda ;_badb :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeUnderscore ,nil );};goto _bda ;_fdb :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc :_bec ]);};goto _bda ;_acb :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc +1:_bec -1]);};goto _bda ;_egee :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeDigitOpt ,nil );};goto _bda ;_gdag :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeFraction ,_cbdg [_ebcc :_bec ]);};goto _bda ;_bb :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypePercent ,nil );};goto _bda ;_bge :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeDate ,_cbdg [_ebcc :_bec ]);};goto _bda ;_fg :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeDigit ,nil );};goto _bda ;_bfc :_bec =_ade ;_ade --;{_cfcf ._abfga .AddToken (FmtTypeTime ,_cbdg [_ebcc :_bec ]);};goto _bda ;_cag :_bec =_ade ;_ade --;{};goto _bda ;_gg :_bec =_ade +1;{_cfcf ._abfga .IsExponential =true ;};goto _bda ;_ggd :_bec =_ade +1;{_cfcf ._abfga .AddToken (FmtTypeLiteral ,_cbdg [_ebcc +1:_bec ]);};goto _bda ;_bda :_ebcc =0;if _ade ++;_ade ==_gdgd {goto _cfe ;};_ddag :_ebcc =_ade ;switch _cbdg [_ade ]{case 34:goto _edcc ;case 35:goto _ba ;case 36:goto _aag ;case 37:goto _cc ;case 44:goto _ebdb ;case 46:goto _ceg ;case 47:goto _abfe ;case 48:goto _beeg ;case 58:goto _efg ;case 59:goto _dd ;case 63:goto _egc ;case 64:goto _cab ;case 65:goto _dfg ;case 69:goto _edag ;case 71:goto _abef ;case 91:goto _bggd ;case 92:goto _gbg ;case 95:goto _badb ;case 100:goto _abfe ;case 104:goto _efg ;case 109:goto _eaf ;case 115:goto _eag ;case 121:goto _fgca ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _bea ;};goto _cda ;_edcc :_bec =_ade +1;_bfa =20;goto _dfcd ;_dfcd :if _ade ++;_ade ==_gdgd {goto _cfg ;};_bga :if _cbdg [_ade ]==34{goto _gdga ;};goto _fdd ;_fdd :if _ade ++;_ade ==_gdgd {goto _bc ;};_abfg :if _cbdg [_ade ]==34{goto _gdga ;};goto _fdd ;_gdga :_bec =_ade +1;_bfa =21;goto _dag ;_dag :if _ade ++;_ade ==_gdgd {goto _bcbd ;};_dfd :if _cbdg [_ade ]==34{goto _fdd ;};goto _acb ;_ba :_bec =_ade +1;_bfa =3;goto _ffd ;_ffd :if _ade ++;_ade ==_gdgd {goto _de ;};_bbb :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _gf ;case 44:goto _geg ;case 47:goto _ddbb ;case 48:goto _gf ;case 63:goto _gf ;};goto _egee ;_gf :if _ade ++;_ade ==_gdgd {goto _bg ;};_egbc :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _gf ;case 47:goto _ddbb ;case 48:goto _gf ;case 63:goto _gf ;};goto _bca ;_ddbb :if _ade ++;_ade ==_gdgd {goto _aab ;};_daf :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _ede ;case 48:goto _gfe ;case 63:goto _dfce ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _gbc ;};goto _bca ;_dfce :_bec =_ade +1;goto _gdc ;_gdc :if _ade ++;_ade ==_gdgd {goto _egfa ;};_cef :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _dfce ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _dfce ;case 63:goto _dfce ;case 65:goto _c ;};goto _gdag ;_c :if _ade ++;_ade ==_gdgd {goto _cccg ;};_ga :switch _cbdg [_ade ]{case 47:goto _cgc ;case 77:goto _acc ;};goto _afe ;_cgc :if _ade ++;_ade ==_gdgd {goto _ebdbb ;};_eab :if _cbdg [_ade ]==80{goto _b ;};goto _afe ;_b :_bec =_ade +1;goto _dfb ;_dfb :if _ade ++;_ade ==_gdgd {goto _acdc ;};_bcd :if _cbdg [_ade ]==65{goto _c ;};goto _gdag ;_acc :if _ade ++;_ade ==_gdgd {goto _abd ;};_dgfb :if _cbdg [_ade ]==47{goto _ebc ;};goto _afe ;_ebc :if _ade ++;_ade ==_gdgd {goto _eeg ;};_ded :if _cbdg [_ade ]==80{goto _cca ;};goto _afe ;_cca :if _ade ++;_ade ==_gdgd {goto _ccf ;};_db :if _cbdg [_ade ]==77{goto _b ;};goto _afe ;_ede :if _ade ++;_ade ==_gdgd {goto _ebd ;};_fbe :switch _cbdg [_ade ]{case 35:goto _ead ;case 37:goto _aff ;case 63:goto _ead ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _aa ;};goto _bca ;_ead :_bec =_ade +1;goto _fbg ;_fbg :if _ade ++;_ade ==_gdgd {goto _ddb ;};_bag :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _ff ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _dfce ;case 63:goto _dfce ;case 65:goto _c ;};goto _gdag ;_ff :if _ade ++;_ade ==_gdgd {goto _fbgd ;};_fed :switch _cbdg [_ade ]{case 35:goto _gddc ;case 44:goto _gddc ;case 46:goto _gddc ;case 48:goto _gddc ;case 63:goto _gddc ;};goto _afe ;_gddc :_bec =_ade +1;goto _cefa ;_cefa :if _ade ++;_ade ==_gdgd {goto _aec ;};_egf :switch _cbdg [_ade ]{case 35:goto _gddc ;case 44:goto _gddc ;case 46:goto _gddc ;case 48:goto _gddc ;case 63:goto _gddc ;case 65:goto _c ;};goto _gdag ;_aff :if _ade ++;_ade ==_gdgd {goto _egb ;};_fc :if _cbdg [_ade ]==37{goto _aff ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _aa ;};goto _bca ;_aa :_bec =_ade +1;_bfa =13;goto _gae ;_gae :if _ade ++;_ade ==_gdgd {goto _agf ;};_dgag :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _efc ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _dge ;case 63:goto _dfce ;case 65:goto _c ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _aa ;};goto _gdag ;_efc :if _ade ++;_ade ==_gdgd {goto _gfd ;};_ebg :switch _cbdg [_ade ]{case 35:goto _gddc ;case 37:goto _aff ;case 44:goto _gddc ;case 46:goto _gddc ;case 63:goto _gddc ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _aa ;};goto _afe ;_dge :_bec =_ade +1;goto _afea ;_afea :if _ade ++;_ade ==_gdgd {goto _abefa ;};_bfce :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _dge ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _dge ;case 63:goto _dfce ;case 65:goto _c ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _aa ;};goto _gdag ;_gfe :_bec =_ade +1;goto _efd ;_efd :if _ade ++;_ade ==_gdgd {goto _eda ;};_bce :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _dge ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _gfe ;case 63:goto _dfce ;case 65:goto _c ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _gbc ;};goto _gdag ;_gbc :_bec =_ade +1;goto _eabe ;_eabe :if _ade ++;_ade ==_gdgd {goto _ce ;};_afdd :switch _cbdg [_ade ]{case 35:goto _dfce ;case 37:goto _aa ;case 44:goto _dfce ;case 46:goto _dfce ;case 48:goto _gfe ;case 63:goto _dfce ;case 65:goto _c ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _gbc ;};goto _gdag ;_geg :if _ade ++;_ade ==_gdgd {goto _decb ;};_gcg :if _cbdg [_ade ]==35{goto _dedb ;};goto _fa ;_cc :_bec =_ade +1;_bfa =8;goto _ege ;_ege :if _ade ++;_ade ==_gdgd {goto _dgbe ;};_dg :switch _cbdg [_ade ]{case 35:goto _beg ;case 37:goto _ac ;case 48:goto _cbg ;case 63:goto _beg ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _dbdb ;};goto _bb ;_beg :if _ade ++;_ade ==_gdgd {goto _gcd ;};_afa :switch _cbdg [_ade ]{case 35:goto _beg ;case 47:goto _ddbb ;case 48:goto _beg ;case 63:goto _beg ;};goto _dea ;_ac :if _ade ++;_ade ==_gdgd {goto _aaa ;};_ec :if _cbdg [_ade ]==37{goto _ac ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _dbdb ;};goto _bca ;_dbdb :if _ade ++;_ade ==_gdgd {goto _eddb ;};_dadf :switch _cbdg [_ade ]{case 37:goto _ac ;case 47:goto _ddbb ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _dbdb ;};goto _bca ;_cbg :if _ade ++;_ade ==_gdgd {goto _dcd ;};_acde :switch _cbdg [_ade ]{case 35:goto _beg ;case 37:goto _ac ;case 47:goto _ddbb ;case 48:goto _cbg ;case 63:goto _beg ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _dbdb ;};goto _dea ;_abfe :_bec =_ade +1;goto _eggb ;_eggb :if _ade ++;_ade ==_gdgd {goto _ebfd ;};_beed :switch _cbdg [_ade ]{case 47:goto _abfe ;case 100:goto _abfe ;case 109:goto _abfe ;case 121:goto _cege ;};goto _bge ;_cege :if _ade ++;_ade ==_gdgd {goto _bccc ;};_dba :if _cbdg [_ade ]==121{goto _abfe ;};goto _fdg ;_beeg :_bec =_ade +1;_bfa =2;goto _dbdf ;_dbdf :if _ade ++;_ade ==_gdgd {goto _bcce ;};_dcag :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _bdcf ;case 47:goto _ddbb ;case 48:goto _d ;case 63:goto _gf ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _bae ;};goto _fg ;_bdcf :if _ade ++;_ade ==_gdgd {goto _gdca ;};_fac :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _bdcf ;case 47:goto _ddbb ;case 48:goto _bdcf ;case 63:goto _gf ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _dbdb ;};goto _fgb ;_d :if _ade ++;_ade ==_gdgd {goto _add ;};_dcee :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _bdcf ;case 47:goto _ddbb ;case 48:goto _d ;case 63:goto _gf ;};if 49<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _bae ;};goto _fgb ;_bae :if _ade ++;_ade ==_gdgd {goto _gbb ;};_fga :switch _cbdg [_ade ]{case 37:goto _dbdb ;case 47:goto _ddbb ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _bae ;};goto _bca ;_bea :_bec =_ade +1;_bfa =20;goto _fad ;_fad :if _ade ++;_ade ==_gdgd {goto _bf ;};_bfg :switch _cbdg [_ade ]{case 37:goto _dbdb ;case 47:goto _ddbb ;};if 48<=_cbdg [_ade ]&&_cbdg [_ade ]<=57{goto _bae ;};goto _fdb ;_efg :_bec =_ade +1;_bfa =15;goto _agg ;_agg :if _ade ++;_ade ==_gdgd {goto _gag ;};_dfe :switch _cbdg [_ade ]{case 58:goto _efg ;case 65:goto _bed ;case 104:goto _efg ;case 109:goto _efg ;case 115:goto _eag ;};goto _bfc ;_bed :if _ade ++;_ade ==_gdgd {goto _daeb ;};_cbd :switch _cbdg [_ade ]{case 47:goto _gaf ;case 77:goto _ag ;};goto _bca ;_gaf :if _ade ++;_ade ==_gdgd {goto _aeb ;};_fda :if _cbdg [_ade ]==80{goto _efg ;};goto _bca ;_ag :if _ade ++;_ade ==_gdgd {goto _ffa ;};_gdae :if _cbdg [_ade ]==47{goto _egce ;};goto _bca ;_egce :if _ade ++;_ade ==_gdgd {goto _dae ;};_aaf :if _cbdg [_ade ]==80{goto _a ;};goto _bca ;_a :if _ade ++;_ade ==_gdgd {goto _ecgb ;};_bgea :if _cbdg [_ade ]==77{goto _efg ;};goto _bca ;_eag :_bec =_ade +1;_bfa =15;goto _cedf ;_cedf :if _ade ++;_ade ==_gdgd {goto _aef ;};_geaa :switch _cbdg [_ade ]{case 46:goto _cbda ;case 58:goto _efg ;case 65:goto _bed ;case 104:goto _efg ;case 109:goto _efg ;case 115:goto _eag ;};goto _bfc ;_cbda :if _ade ++;_ade ==_gdgd {goto _fdca ;};_dad :if _cbdg [_ade ]==48{goto _efab ;};goto _bcc ;_efab :_bec =_ade +1;_bfa =15;goto _afff ;_afff :if _ade ++;_ade ==_gdgd {goto _eb ;};_cac :switch _cbdg [_ade ]{case 48:goto _fcg ;case 58:goto _efg ;case 65:goto _bed ;case 104:goto _efg ;case 109:goto _efg ;case 115:goto _eag ;};goto _bfc ;_fcg :_bec =_ade +1;_bfa =15;goto _dcf ;_dcf :if _ade ++;_ade ==_gdgd {goto _abb ;};_feec :switch _cbdg [_ade ]{case 48:goto _efg ;case 58:goto _efg ;case 65:goto _bed ;case 104:goto _efg ;case 109:goto _efg ;case 115:goto _eag ;};goto _bfc ;_egc :_bec =_ade +1;_bfa =5;goto _eee ;_eee :if _ade ++;_ade ==_gdgd {goto _fee ;};_baeg :switch _cbdg [_ade ]{case 35:goto _gf ;case 37:goto _gf ;case 47:goto _ddbb ;case 48:goto _gf ;case 63:goto _gf ;};goto _cag ;_dfg :_bec =_ade +1;_bfa =20;goto _cdc ;_cdc :if _ade ++;_ade ==_gdgd {goto _bfcf ;};_dbcf :switch _cbdg [_ade ]{case 47:goto _gaf ;case 77:goto _ag ;};goto _fdb ;_edag :if _ade ++;_ade ==_gdgd {goto _gdaf ;};_feee :switch _cbdg [_ade ]{case 43:goto _gg ;case 45:goto _gg ;};goto _fdb ;_abef :_bec =_ade +1;goto _fdge ;_fdge :if _ade ++;_ade ==_gdgd {goto _ccd ;};_fcfa :if _cbdg [_ade ]==101{goto _eecc ;};goto _fdb ;_eecc :if _ade ++;_ade ==_gdgd {goto _dca ;};_fcc :if _cbdg [_ade ]==110{goto _daa ;};goto _fab ;_daa :if _ade ++;_ade ==_gdgd {goto _efcb ;};_cad :if _cbdg [_ade ]==101{goto _dab ;};goto _fab ;_dab :if _ade ++;_ade ==_gdgd {goto _aggb ;};_be :if _cbdg [_ade ]==114{goto _gec ;};goto _fab ;_gec :if _ade ++;_ade ==_gdgd {goto _ecg ;};_eaba :if _cbdg [_ade ]==97{goto _dbd ;};goto _fab ;_dbd :if _ade ++;_ade ==_gdgd {goto _cgd ;};_aeaf :if _cbdg [_ade ]==108{goto _fdde ;};goto _fab ;_bggd :_bec =_ade +1;_bfa =20;goto _ggb ;_ggb :if _ade ++;_ade ==_gdgd {goto _dece ;};_ca :switch _cbdg [_ade ]{case 104:goto _bgg ;case 109:goto _bgg ;case 115:goto _bgg ;};goto _ggag ;_ggag :if _ade ++;_ade ==_gdgd {goto _acff ;};_ea :if _cbdg [_ade ]==93{goto _ebf ;};goto _ggag ;_ebf :_bec =_ade +1;_bfa =18;goto _efeb ;_dfc :_bec =_ade +1;_bfa =16;goto _efeb ;_efeb :if _ade ++;_ade ==_gdgd {goto _baf ;};_ccaa :if _cbdg [_ade ]==93{goto _ebf ;};goto _ggag ;_bgg :if _ade ++;_ade ==_gdgd {goto _adaf ;};_efgg :if _cbdg [_ade ]==93{goto _dfc ;};goto _ggag ;_gbg :if _ade ++;_ade ==_gdgd {goto _dcge ;};_bffa :goto _ggd ;_eaf :_bec =_ade +1;_bfa =14;goto _e ;_e :if _ade ++;_ade ==_gdgd {goto _dc ;};_cebb :switch _cbdg [_ade ]{case 47:goto _abfe ;case 58:goto _efg ;case 65:goto _bed ;case 100:goto _abfe ;case 104:goto _efg ;case 109:goto _eaf ;case 115:goto _eag ;case 121:goto _cege ;};goto _bge ;_fgca :if _ade ++;_ade ==_gdgd {goto _ae ;};_fdgd :if _cbdg [_ade ]==121{goto _abfe ;};goto _fdb ;_dac :_cfe :_gecg =34;goto _bcbf ;_cfg :_gecg =35;goto _bcbf ;_bc :_gecg =0;goto _bcbf ;_bcbd :_gecg =36;goto _bcbf ;_de :_gecg =37;goto _bcbf ;_bg :_gecg =1;goto _bcbf ;_aab :_gecg =2;goto _bcbf ;_egfa :_gecg =38;goto _bcbf ;_cccg :_gecg =3;goto _bcbf ;_ebdbb :_gecg =4;goto _bcbf ;_acdc :_gecg =39;goto _bcbf ;_abd :_gecg =5;goto _bcbf ;_eeg :_gecg =6;goto _bcbf ;_ccf :_gecg =7;goto _bcbf ;_ebd :_gecg =8;goto _bcbf ;_ddb :_gecg =40;goto _bcbf ;_fbgd :_gecg =9;goto _bcbf ;_aec :_gecg =41;goto _bcbf ;_egb :_gecg =10;goto _bcbf ;_agf :_gecg =42;goto _bcbf ;_gfd :_gecg =11;goto _bcbf ;_abefa :_gecg =43;goto _bcbf ;_eda :_gecg =44;goto _bcbf ;_ce :_gecg =45;goto _bcbf ;_decb :_gecg =12;goto _bcbf ;_dgbe :_gecg =46;goto _bcbf ;_gcd :_gecg =13;goto _bcbf ;_aaa :_gecg =14;goto _bcbf ;_eddb :_gecg =15;goto _bcbf ;_dcd :_gecg =16;goto _bcbf ;_ebfd :_gecg =47;goto _bcbf ;_bccc :_gecg =17;goto _bcbf ;_bcce :_gecg =48;goto _bcbf ;_gdca :_gecg =18;goto _bcbf ;_add :_gecg =19;goto _bcbf ;_gbb :_gecg =20;goto _bcbf ;_bf :_gecg =49;goto _bcbf ;_gag :_gecg =50;goto _bcbf ;_daeb :_gecg =21;goto _bcbf ;_aeb :_gecg =22;goto _bcbf ;_ffa :_gecg =23;goto _bcbf ;_dae :_gecg =24;goto _bcbf ;_ecgb :_gecg =25;goto _bcbf ;_aef :_gecg =51;goto _bcbf ;_fdca :_gecg =26;goto _bcbf ;_eb :_gecg =52;goto _bcbf ;_abb :_gecg =53;goto _bcbf ;_fee :_gecg =54;goto _bcbf ;_bfcf :_gecg =55;goto _bcbf ;_gdaf :_gecg =56;goto _bcbf ;_ccd :_gecg =57;goto _bcbf ;_dca :_gecg =27;goto _bcbf ;_efcb :_gecg =28;goto _bcbf ;_aggb :_gecg =29;goto _bcbf ;_ecg :_gecg =30;goto _bcbf ;_cgd :_gecg =31;goto _bcbf ;_dece :_gecg =58;goto _bcbf ;_acff :_gecg =32;goto _bcbf ;_baf :_gecg =59;goto _bcbf ;_adaf :_gecg =33;goto _bcbf ;_dcge :_gecg =60;goto _bcbf ;_dc :_gecg =61;goto _bcbf ;_ae :_gecg =62;goto _bcbf ;_bcbf :{};if _ade ==_dgeg {switch _gecg {case 35:goto _fdb ;case 0:goto _bca ;case 36:goto _acb ;case 37:goto _egee ;case 1:goto _bca ;case 2:goto _bca ;case 38:goto _gdag ;case 3:goto _afe ;case 4:goto _afe ;case 39:goto _gdag ;case 5:goto _afe ;case 6:goto _afe ;case 7:goto _afe ;case 8:goto _bca ;case 40:goto _gdag ;case 9:goto _afe ;case 41:goto _gdag ;case 10:goto _bca ;case 42:goto _gdag ;case 11:goto _afe ;case 43:goto _gdag ;case 44:goto _gdag ;case 45:goto _gdag ;case 12:goto _fa ;case 46:goto _bb ;case 13:goto _dea ;case 14:goto _bca ;case 15:goto _bca ;case 16:goto _dea ;case 47:goto _bge ;case 17:goto _fdg ;case 48:goto _fg ;case 18:goto _fgb ;case 19:goto _fgb ;case 20:goto _bca ;case 49:goto _fdb ;case 50:goto _bfc ;case 21:goto _bca ;case 22:goto _bca ;case 23:goto _bca ;case 24:goto _bca ;case 25:goto _bca ;case 51:goto _bfc ;case 26:goto _bcc ;case 52:goto _bfc ;case 53:goto _bfc ;case 54:goto _cag ;case 55:goto _fdb ;case 56:goto _fdb ;case 57:goto _fdb ;case 27:goto _fab ;case 28:goto _fab ;case 29:goto _fab ;case 30:goto _fab ;case 31:goto _fab ;case 58:goto _fdb ;case 32:goto _bca ;case 59:goto _bca ;case 33:goto _fab ;case 60:goto _fdb ;case 61:goto _bge ;case 62:goto _fdb ;};};};if _ebcc > 0{copy (_cbdg [0:],_cbdg [_ebcc :]);};};_ =_dgeg ;if _gecg ==_ebaa {_bdd .Log ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};var _bbd =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _cdcce int =34;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_ffe ,_ :=_bcbff .ParseFloat (v ,64);return Number (_ffe ,f );};return String (v ,f );};func IsNumber (data string )(_fef bool ){_fgac ,_dbga ,_gdfg :=0,0,len (data );_gfde :=len (data );_gdg ,_agdg ,_affa :=0,0,0;_ =_agdg ;_ =_affa ;_ =_gdg ;{_fgac =_adg ;_gdg =0;_agdg =0;_affa =0;};{if _dbga ==_gdfg {goto _gb ;};switch _fgac {case 0:goto _ega ;case 1:goto _dccf ;case 2:goto _agd ;case 3:goto _fdcb ;case 4:goto _fbfc ;case 5:goto _cgcdg ;case 6:goto _dbc ;case 7:goto _daab ;};goto _gecf ;_dcfc :_agdg =_dbga ;_dbga --;{_fef =false ;};goto _fdgb ;_bgc :_agdg =_dbga ;_dbga --;{_fef =_agdg ==len (data );};goto _fdgb ;_eefe :_agdg =_dbga ;_dbga --;{_fef =_agdg ==len (data );};goto _fdgb ;_bcae :switch _affa {case 2:{_dbga =(_agdg )-1;_fef =_agdg ==len (data );};case 3:{_dbga =(_agdg )-1;_fef =false ;};};goto _fdgb ;_fdgb :_gdg =0;if _dbga ++;_dbga ==_gdfg {goto _efga ;};_ega :_gdg =_dbga ;switch data [_dbga ]{case 43:goto _dagd ;case 45:goto _dagd ;};if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _cfef ;};goto _fd ;_fd :if _dbga ++;_dbga ==_gdfg {goto _eff ;};_dccf :goto _fd ;_dagd :if _dbga ++;_dbga ==_gdfg {goto _bd ;};_agd :if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _cfef ;};goto _fd ;_cfef :if _dbga ++;_dbga ==_gdfg {goto _egg ;};_fdcb :if data [_dbga ]==46{goto _gbf ;};if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _cfef ;};goto _fd ;_gbf :if _dbga ++;_dbga ==_gdfg {goto _edfd ;};_fbfc :if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _cdd ;};goto _fd ;_cdd :if _dbga ++;_dbga ==_gdfg {goto _dcg ;};_cgcdg :if data [_dbga ]==69{goto _adbf ;};if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _cdd ;};goto _fd ;_adbf :if _dbga ++;_dbga ==_gdfg {goto _ecc ;};_dbc :switch data [_dbga ]{case 43:goto _bee ;case 45:goto _bee ;};goto _fd ;_bee :_agdg =_dbga +1;_affa =3;goto _ebad ;_g :_agdg =_dbga +1;_affa =2;goto _ebad ;_ebad :if _dbga ++;_dbga ==_gdfg {goto _ddbe ;};_daab :if 48<=data [_dbga ]&&data [_dbga ]<=57{goto _g ;};goto _fd ;_gecf :_efga :_fgac =0;goto _gb ;_eff :_fgac =1;goto _gb ;_bd :_fgac =2;goto _gb ;_egg :_fgac =3;goto _gb ;_edfd :_fgac =4;goto _gb ;_dcg :_fgac =5;goto _gb ;_ecc :_fgac =6;goto _gb ;_ddbe :_fgac =7;goto _gb ;_gb :{};if _dbga ==_gfde {switch _fgac {case 1:goto _dcfc ;case 2:goto _dcfc ;case 3:goto _bgc ;case 4:goto _dcfc ;case 5:goto _eefe ;case 6:goto _dcfc ;case 7:goto _bcae ;};};};if _fgac ==_ebaa {return false ;};return ;};const _geed =1e-10;func (_ced FmtType )String ()string {if _ced >=FmtType (len (_bbd )-1){return _cdeb .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ced );};return _bfd [_bbd [_ced ]:_bbd [_ced +1]];};