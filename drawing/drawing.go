//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_ee "github.com/unidoc/unioffice";_cad "github.com/unidoc/unioffice/color";_ff "github.com/unidoc/unioffice/measurement";_aca "github.com/unidoc/unioffice/schema/soo/dml";);

// X returns the inner wrapped XML type.
func (_fgd LineProperties )X ()*_aca .CT_LineProperties {return _fgd ._cfe };type ShapeProperties struct{_fa *_aca .CT_ShapeProperties };func (_fgde ShapeProperties )LineProperties ()LineProperties {if _fgde ._fa .Ln ==nil {_fgde ._fa .Ln =_aca .NewCT_LineProperties ();};return LineProperties {_fgde ._fa .Ln };};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_aca .EG_TextRun )Run {return Run {x }};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_aca .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// X returns the inner wrapped XML type.
func (_cf ParagraphProperties )X ()*_aca .CT_TextParagraphProperties {return _cf ._a };

// SetSize sets the font size of the run text
func (_c RunProperties )SetSize (sz _ff .Distance ){_c ._df .SzAttr =_ee .Int32 (int32 (sz /_ff .HundredthPoint ));};

// X returns the inner wrapped XML type.
func (_dc Paragraph )X ()*_aca .CT_TextParagraph {return _dc ._dcd };

// SetBulletChar sets the bullet character for the paragraph.
func (_de ParagraphProperties )SetBulletChar (c string ){if c ==""{_de ._a .BuChar =nil ;}else {_de ._a .BuChar =_aca .NewCT_TextCharBullet ();_de ._a .BuChar .CharAttr =c ;};};

// SetSolidFill controls the text color of a run.
func (_bd RunProperties )SetSolidFill (c _cad .Color ){_bd ._df .NoFill =nil ;_bd ._df .BlipFill =nil ;_bd ._df .GradFill =nil ;_bd ._df .GrpFill =nil ;_bd ._df .PattFill =nil ;_bd ._df .SolidFill =_aca .NewCT_SolidColorFillProperties ();_bd ._df .SolidFill .SrgbClr =_aca .NewCT_SRgbColor ();_bd ._df .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetJoin sets the line join style.
func (_g LineProperties )SetJoin (e LineJoin ){_g ._cfe .Round =nil ;_g ._cfe .Miter =nil ;_g ._cfe .Bevel =nil ;switch e {case LineJoinRound :_g ._cfe .Round =_aca .NewCT_LineJoinRound ();case LineJoinBevel :_g ._cfe .Bevel =_aca .NewCT_LineJoinBevel ();case LineJoinMiter :_g ._cfe .Miter =_aca .NewCT_LineJoinMiterProperties ();};};type LineProperties struct{_cfe *_aca .CT_LineProperties };

// SetAlign controls the paragraph alignment
func (_ab ParagraphProperties )SetAlign (a _aca .ST_TextAlignType ){_ab ._a .AlgnAttr =a };

// RunProperties controls the run properties.
type RunProperties struct{_df *_aca .CT_TextCharacterProperties ;};

// Run is a run within a paragraph.
type Run struct{_ac *_aca .EG_TextRun };

// LineJoin is the type of line join
type LineJoin byte ;

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_b LineProperties )SetWidth (w _ff .Distance ){_b ._cfe .WAttr =_ee .Int32 (int32 (w /_ff .EMU ))};

// AddBreak adds a new line break to a paragraph.
func (_fg Paragraph )AddBreak (){_ad :=_aca .NewEG_TextRun ();_ad .Br =_aca .NewCT_TextLineBreak ();_fg ._dcd .EG_TextRun =append (_fg ._dcd .EG_TextRun ,_ad );};func MakeShapeProperties (x *_aca .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};

// AddRun adds a new run to a paragraph.
func (_ca Paragraph )AddRun ()Run {_cd :=MakeRun (_aca .NewEG_TextRun ());_ca ._dcd .EG_TextRun =append (_ca ._dcd .EG_TextRun ,_cd .X ());return _cd ;};

// SetFont controls the font of a run.
func (_bc RunProperties )SetFont (s string ){_bc ._df .Latin =_aca .NewCT_TextFont ();_bc ._df .Latin .TypefaceAttr =s ;};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_ed ShapeProperties )SetFlipHorizontal (b bool ){_ed .ensureXfrm ();if !b {_ed ._fa .Xfrm .FlipHAttr =nil ;}else {_ed ._fa .Xfrm .FlipHAttr =_ee .Bool (true );};};

// Properties returns the paragraph properties.
func (_f Paragraph )Properties ()ParagraphProperties {if _f ._dcd .PPr ==nil {_f ._dcd .PPr =_aca .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_f ._dcd .PPr );};

// SetFlipVertical controls if the shape is flipped vertically.
func (_ag ShapeProperties )SetFlipVertical (b bool ){_ag .ensureXfrm ();if !b {_ag ._fa .Xfrm .FlipVAttr =nil ;}else {_ag ._fa .Xfrm .FlipVAttr =_ee .Bool (true );};};

// SetGeometry sets the shape type of the shape
func (_fge ShapeProperties )SetGeometry (g _aca .ST_ShapeType ){if _fge ._fa .PrstGeom ==nil {_fge ._fa .PrstGeom =_aca .NewCT_PresetGeometry2D ();};_fge ._fa .PrstGeom .PrstAttr =g ;};func (_af ShapeProperties )clearFill (){_af ._fa .NoFill =nil ;_af ._fa .BlipFill =nil ;_af ._fa .GradFill =nil ;_af ._fa .GrpFill =nil ;_af ._fa .SolidFill =nil ;_af ._fa .PattFill =nil ;};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_a *_aca .CT_TextParagraphProperties ;};

// SetText sets the run's text contents.
func (_be Run )SetText (s string ){_be ._ac .Br =nil ;_be ._ac .Fld =nil ;if _be ._ac .R ==nil {_be ._ac .R =_aca .NewCT_RegularTextRun ();};_be ._ac .R .T =s ;};

// Paragraph is a paragraph within a document.
type Paragraph struct{_dcd *_aca .CT_TextParagraph };

// SetPosition sets the position of the shape.
func (_dfc ShapeProperties )SetPosition (x ,y _ff .Distance ){_dfc .ensureXfrm ();if _dfc ._fa .Xfrm .Off ==nil {_dfc ._fa .Xfrm .Off =_aca .NewCT_Point2D ();};_dfc ._fa .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ee .Int64 (int64 (x /_ff .EMU ));_dfc ._fa .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ee .Int64 (int64 (y /_ff .EMU ));};

// SetLevel sets the level of indentation of a paragraph.
func (_gf ParagraphProperties )SetLevel (idx int32 ){_gf ._a .LvlAttr =_ee .Int32 (idx )};

// SetSize sets the width and height of the shape.
func (_aac ShapeProperties )SetSize (w ,h _ff .Distance ){_aac .SetWidth (w );_aac .SetHeight (h )};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);

// SetWidth sets the width of the shape.
func (_gfd ShapeProperties )SetWidth (w _ff .Distance ){_gfd .ensureXfrm ();if _gfd ._fa .Xfrm .Ext ==nil {_gfd ._fa .Xfrm .Ext =_aca .NewCT_PositiveSize2D ();};_gfd ._fa .Xfrm .Ext .CxAttr =int64 (w /_ff .EMU );};

// Properties returns the run's properties.
func (_ba Run )Properties ()RunProperties {if _ba ._ac .R ==nil {_ba ._ac .R =_aca .NewCT_RegularTextRun ();};if _ba ._ac .R .RPr ==nil {_ba ._ac .R .RPr =_aca .NewCT_TextCharacterProperties ();};return RunProperties {_ba ._ac .R .RPr };};func (_baa LineProperties )clearFill (){_baa ._cfe .NoFill =nil ;_baa ._cfe .GradFill =nil ;_baa ._cfe .SolidFill =nil ;_baa ._cfe .PattFill =nil ;};func (_bcb ShapeProperties )SetSolidFill (c _cad .Color ){_bcb .clearFill ();_bcb ._fa .SolidFill =_aca .NewCT_SolidColorFillProperties ();_bcb ._fa .SolidFill .SrgbClr =_aca .NewCT_SRgbColor ();_bcb ._fa .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};func (_fc ShapeProperties )ensureXfrm (){if _fc ._fa .Xfrm ==nil {_fc ._fa .Xfrm =_aca .NewCT_Transform2D ();};};

// X returns the inner wrapped XML type.
func (_cg ShapeProperties )X ()*_aca .CT_ShapeProperties {return _cg ._fa };

// SetHeight sets the height of the shape.
func (_da ShapeProperties )SetHeight (h _ff .Distance ){_da .ensureXfrm ();if _da ._fa .Xfrm .Ext ==nil {_da ._fa .Xfrm .Ext =_aca .NewCT_PositiveSize2D ();};_da ._fa .Xfrm .Ext .CyAttr =int64 (h /_ff .EMU );};

// X returns the inner wrapped XML type.
func (_e Run )X ()*_aca .EG_TextRun {return _e ._ac };

// SetBulletFont controls the font for the bullet character.
func (_d ParagraphProperties )SetBulletFont (f string ){if f ==""{_d ._a .BuFont =nil ;}else {_d ._a .BuFont =_aca .NewCT_TextFont ();_d ._a .BuFont .TypefaceAttr =f ;};};

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_aca .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_aca .CT_TextParagraph )Paragraph {return Paragraph {x }};func (_aa ShapeProperties )SetNoFill (){_aa .clearFill ();_aa ._fa .NoFill =_aca .NewCT_NoFillProperties ();};

// SetNumbered controls if bullets are numbered or not.
func (_bg ParagraphProperties )SetNumbered (scheme _aca .ST_TextAutonumberScheme ){if scheme ==_aca .ST_TextAutonumberSchemeUnset {_bg ._a .BuAutoNum =nil ;}else {_bg ._a .BuAutoNum =_aca .NewCT_TextAutonumberBullet ();_bg ._a .BuAutoNum .TypeAttr =scheme ;};};

// SetBold controls the bolding of a run.
func (_dg RunProperties )SetBold (b bool ){_dg ._df .BAttr =_ee .Bool (b )};func (_ec LineProperties )SetNoFill (){_ec .clearFill ();_ec ._cfe .NoFill =_aca .NewCT_NoFillProperties ();};func (_db LineProperties )SetSolidFill (c _cad .Color ){_db .clearFill ();_db ._cfe .SolidFill =_aca .NewCT_SolidColorFillProperties ();_db ._cfe .SolidFill .SrgbClr =_aca .NewCT_SRgbColor ();_db ._cfe .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};