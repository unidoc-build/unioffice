//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_f "encoding/xml";_ea "fmt";_a "github.com/unidoc/unioffice";);

// Validate validates the Any and its children
func (_gf *Any )Validate ()error {return _gf .ValidateWithPath ("\u0041\u006e\u0079")};func (_daf *ElementsGroupChoice )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {if _daf .Any !=nil {_cda :=_f .StartElement {Name :_f .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};for _ ,_ee :=range _daf .Any {e .EncodeElement (_ee ,_cda );};};return nil ;};func (_cde *ElementContainer )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_ed :for {_fd ,_cc :=d .Token ();if _cc !=nil {return _cc ;};switch _fe :=_fd .(type ){case _f .StartElement :switch _fe .Name {case _f .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_daa :=NewElementsGroupChoice ();if _daaf :=d .DecodeElement (&_daa .Any ,&_fe );_daaf !=nil {return _daaf ;};_cde .Choice =append (_cde .Choice ,_daa );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_fe .Name );if _edb :=d .Skip ();_edb !=nil {return _edb ;};};case _f .EndElement :break _ed ;case _f .CharData :};};return nil ;};func NewSimpleLiteral ()*SimpleLiteral {_ba :=&SimpleLiteral {};return _ba };func (_ecg *SimpleLiteral )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {for {_cbc ,_eff :=d .Token ();if _eff !=nil {return _ea .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_eff );};if _dce ,_abg :=_cbc .(_f .EndElement );_abg &&_dce .Name ==start .Name {break ;};};return nil ;};

// Validate validates the SimpleLiteral and its children
func (_fcb *SimpleLiteral )Validate ()error {return _fcb .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func (_fg *ElementsGroup )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_afe :for {_eb ,_gb :=d .Token ();if _gb !=nil {return _gb ;};switch _fbg :=_eb .(type ){case _f .StartElement :switch _fbg .Name {case _f .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_cac :=NewElementsGroupChoice ();if _db :=d .DecodeElement (&_cac .Any ,&_fbg );_db !=nil {return _db ;};_fg .Choice =append (_fg .Choice ,_cac );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_fbg .Name );if _fea :=d .Skip ();_fea !=nil {return _fea ;};};case _f .EndElement :break _afe ;case _f .CharData :};};return nil ;};type ElementsGroup struct{Choice []*ElementsGroupChoice ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_ad *ElementsGroup )ValidateWithPath (path string )error {for _bd ,_gc :=range _ad .Choice {if _eba :=_gc .ValidateWithPath (_ea .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_bd ));_eba !=nil {return _eba ;};};return nil ;};

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_ca *ElementContainer )ValidateWithPath (path string )error {for _bg ,_afb :=range _ca .Choice {if _egf :=_afb .ValidateWithPath (_ea .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_bg ));_egf !=nil {return _egf ;};};return nil ;};

// Validate validates the ElementsGroup and its children
func (_dab *ElementsGroup )Validate ()error {return _dab .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};func NewElementsGroup ()*ElementsGroup {_cbd :=&ElementsGroup {};return _cbd };func NewElementContainer ()*ElementContainer {_cb :=&ElementContainer {};return _cb };type ElementsGroupChoice struct{Any []*Any ;};type ElementContainer struct{Choice []*ElementsGroupChoice ;};func (_eee *SimpleLiteral )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {e .EncodeToken (start );e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};type Any struct{SimpleLiteral };func NewElementsGroupChoice ()*ElementsGroupChoice {_ae :=&ElementsGroupChoice {};return _ae };func (_ef *ElementsGroup )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {if _ef .Choice !=nil {for _ ,_cag :=range _ef .Choice {_cag .MarshalXML (e ,_f .StartElement {});};};return nil ;};

// ValidateWithPath validates the ElementsGroupChoice and its children, prefixing error messages with path
func (_efg *ElementsGroupChoice )ValidateWithPath (path string )error {for _bb ,_ebe :=range _efg .Any {if _dc :=_ebe .ValidateWithPath (_ea .Sprintf ("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d",path ,_bb ));_dc !=nil {return _dc ;};};return nil ;};func NewAny ()*Any {_g :=&Any {};_g .SimpleLiteral =*NewSimpleLiteral ();return _g };

// Validate validates the ElementsGroupChoice and its children
func (_cdec *ElementsGroupChoice )Validate ()error {return _cdec .ValidateWithPath ("\u0045\u006c\u0065\u006den\u0074\u0073\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u006f\u0069\u0063\u0065");};func (_ge *Any )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {return _ge .SimpleLiteral .MarshalXML (e ,start );};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_da *Any )ValidateWithPath (path string )error {if _c :=_da .SimpleLiteral .ValidateWithPath (path );_c !=nil {return _c ;};return nil ;};func (_d *Any )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_d .SimpleLiteral =*NewSimpleLiteral ();for {_fc ,_eac :=d .Token ();if _eac !=nil {return _ea .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_eac );};if _b ,_ab :=_fc .(_f .EndElement );_ab &&_b .Name ==start .Name {break ;};};return nil ;};type SimpleLiteral struct{};func (_be *ElementsGroupChoice )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_bdc :for {_aea ,_bf :=d .Token ();if _bf !=nil {return _bf ;};switch _aa :=_aea .(type ){case _f .StartElement :switch _aa .Name {case _f .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_ec :=NewAny ();if _eed :=d .DecodeElement (_ec ,&_aa );_eed !=nil {return _eed ;};_be .Any =append (_be .Any ,_ec );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072ou\u0070\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076",_aa .Name );if _afg :=d .Skip ();_afg !=nil {return _afg ;};};case _f .EndElement :break _bdc ;case _f .CharData :};};return nil ;};func (_fb *ElementContainer )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _fb .Choice !=nil {for _ ,_af :=range _fb .Choice {_af .MarshalXML (e ,_f .StartElement {});};};e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementContainer and its children
func (_eg *ElementContainer )Validate ()error {return _eg .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_ce *SimpleLiteral )ValidateWithPath (path string )error {return nil };func init (){_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );};