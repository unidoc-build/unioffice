//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_fcec "archive/zip";_fggf "bytes";_aaaa "errors";_ggab "fmt";_ffgg "github.com/unidoc/unioffice";_cagf "github.com/unidoc/unioffice/color";_dfge "github.com/unidoc/unioffice/common";_ccgf "github.com/unidoc/unioffice/common/license";_ff "github.com/unidoc/unioffice/measurement";_begd "github.com/unidoc/unioffice/schema/soo/dml";_egd "github.com/unidoc/unioffice/schema/soo/dml/picture";_bcff "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_dfaa "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_fdcbg "github.com/unidoc/unioffice/schema/soo/wml";_gbac "github.com/unidoc/unioffice/zippkg";_eag "image";_adg "image/jpeg";_dgfe "io";_gdf "io/ioutil";_dbga "log";_ffc "math/rand";_ddgee "os";_gegaa "path/filepath";_badb "runtime/debug";_aedca "strings";_ee "unicode";);

// Properties returns the table properties.
func (_cbcb Table )Properties ()TableProperties {if _cbcb ._d .TblPr ==nil {_cbcb ._d .TblPr =_fdcbg .NewCT_TblPr ();};return TableProperties {_cbcb ._d .TblPr };};var _baaa =false ;

// SetOutline sets the run to outlined text.
func (_edba RunProperties )SetOutline (b bool ){if !b {_edba ._adde .Outline =nil ;}else {_edba ._adde .Outline =_fdcbg .NewCT_OnOff ();};};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_daac ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_daac ._bae .PageBreakBefore =nil ;}else {_daac ._bae .PageBreakBefore =_fdcbg .NewCT_OnOff ();};};

// Name returns the name of the field.
func (_bdd FormField )Name ()string {return *_bdd ._cab .Name [0].ValAttr };

// Spacing returns the paragraph spacing settings.
func (_fdfb ParagraphProperties )Spacing ()ParagraphSpacing {if _fdfb ._bae .Spacing ==nil {_fdfb ._bae .Spacing =_fdcbg .NewCT_Spacing ();};return ParagraphSpacing {_fdfb ._bae .Spacing };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_dbce CellBorders )SetBottom (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_dbce ._fa .Bottom =_fdcbg .NewCT_Border ();_gcfg (_dbce ._fa .Bottom ,t ,c ,thickness );};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_dcb NumberingDefinition )AddLevel ()NumberingLevel {_bdaag :=_fdcbg .NewCT_Lvl ();_bdaag .Start =&_fdcbg .CT_DecimalNumber {ValAttr :1};_bdaag .IlvlAttr =int64 (len (_dcb ._cagfe .Lvl ));_dcb ._cagfe .Lvl =append (_dcb ._cagfe .Lvl ,_bdaag );return NumberingLevel {_bdaag };};

// AddField adds a field (automatically computed text) to the document.
func (_adac Run )AddField (code string ){_adac .AddFieldWithFormatting (code ,"",true )};

// Footers returns the footers defined in the document.
func (_bfb *Document )Footers ()[]Footer {_bbag :=[]Footer {};for _ ,_efdd :=range _bfb ._ae {_bbag =append (_bbag ,Footer {_bfb ,_efdd });};return _bbag ;};

// X returns the inner wrapped XML type.
func (_edfd InlineDrawing )X ()*_fdcbg .WdInline {return _edfd ._cga };func (_acae *Document )onNewRelationship (_cdda *_gbac .DecodeMap ,_fadg ,_bfga string ,_becf []*_fcec .File ,_bgcee *_dfaa .Relationship ,_bgf _gbac .Target )error {_ebecg :=_ffgg .DocTypeDocument ;switch _bfga {case _ffgg .OfficeDocumentType ,_ffgg .OfficeDocumentTypeStrict :_acae ._begc =_fdcbg .NewDocument ();_cdda .AddTarget (_fadg ,_acae ._begc ,_bfga ,0);_cdda .AddTarget (_gbac .RelationsPathFor (_fadg ),_acae ._aggd .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .CorePropertiesType :_cdda .AddTarget (_fadg ,_acae .CoreProperties .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .CustomPropertiesType :_cdda .AddTarget (_fadg ,_acae .CustomProperties .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .ExtendedPropertiesType ,_ffgg .ExtendedPropertiesTypeStrict :_cdda .AddTarget (_fadg ,_acae .AppProperties .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .ThumbnailType ,_ffgg .ThumbnailTypeStrict :for _edec ,_eabg :=range _becf {if _eabg ==nil {continue ;};if _eabg .Name ==_fadg {_bage ,_fdceb :=_eabg .Open ();if _fdceb !=nil {return _ggab .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_fdceb );};_acae .Thumbnail ,_ ,_fdceb =_eag .Decode (_bage );_bage .Close ();if _fdceb !=nil {return _ggab .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_fdceb );};_becf [_edec ]=nil ;};};case _ffgg .SettingsType ,_ffgg .SettingsTypeStrict :_cdda .AddTarget (_fadg ,_acae .Settings .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .NumberingType ,_ffgg .NumberingTypeStrict :_acae .Numbering =NewNumbering ();_cdda .AddTarget (_fadg ,_acae .Numbering .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .StylesType ,_ffgg .StylesTypeStrict :_acae .Styles .Clear ();_cdda .AddTarget (_fadg ,_acae .Styles .X (),_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .HeaderType ,_ffgg .HeaderTypeStrict :_ddd :=_fdcbg .NewHdr ();_cdda .AddTarget (_fadg ,_ddd ,_bfga ,uint32 (len (_acae ._abb )));_acae ._abb =append (_acae ._abb ,_ddd );_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,len (_acae ._abb ));_cbdb :=_dfge .NewRelationships ();_cdda .AddTarget (_gbac .RelationsPathFor (_fadg ),_cbdb .X (),_bfga ,0);_acae ._ddec =append (_acae ._ddec ,_cbdb );case _ffgg .FooterType ,_ffgg .FooterTypeStrict :_aacd :=_fdcbg .NewFtr ();_cdda .AddTarget (_fadg ,_aacd ,_bfga ,uint32 (len (_acae ._ae )));_acae ._ae =append (_acae ._ae ,_aacd );_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,len (_acae ._ae ));_bgc :=_dfge .NewRelationships ();_cdda .AddTarget (_gbac .RelationsPathFor (_fadg ),_bgc .X (),_bfga ,0);_acae ._eg =append (_acae ._eg ,_bgc );case _ffgg .ThemeType ,_ffgg .ThemeTypeStrict :_gfad :=_begd .NewTheme ();_cdda .AddTarget (_fadg ,_gfad ,_bfga ,uint32 (len (_acae ._abfgd )));_acae ._abfgd =append (_acae ._abfgd ,_gfad );_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,len (_acae ._abfgd ));case _ffgg .WebSettingsType ,_ffgg .WebSettingsTypeStrict :_acae ._caf =_fdcbg .NewWebSettings ();_cdda .AddTarget (_fadg ,_acae ._caf ,_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .FontTableType ,_ffgg .FontTableTypeStrict :_acae ._eddb =_fdcbg .NewFonts ();_cdda .AddTarget (_fadg ,_acae ._eddb ,_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .EndNotesType ,_ffgg .EndNotesTypeStrict :_acae ._bgad =_fdcbg .NewEndnotes ();_cdda .AddTarget (_fadg ,_acae ._bgad ,_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .FootNotesType ,_ffgg .FootNotesTypeStrict :_acae ._ecda =_fdcbg .NewFootnotes ();_cdda .AddTarget (_fadg ,_acae ._ecda ,_bfga ,0);_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,0);case _ffgg .ImageType ,_ffgg .ImageTypeStrict :var _cddc _dfge .ImageRef ;for _aagf ,_baeg :=range _becf {if _baeg ==nil {continue ;};if _baeg .Name ==_fadg {_cefbb ,_babbf :=_gbac .ExtractToDiskTmp (_baeg ,_acae .TmpPath );if _babbf !=nil {return _babbf ;};_cfbd ,_babbf :=_dfge .ImageFromFile (_cefbb );if _babbf !=nil {return _babbf ;};_cddc =_dfge .MakeImageRef (_cfbd ,&_acae .DocBase ,_acae ._aggd );_acae .Images =append (_acae .Images ,_cddc );_becf [_aagf ]=nil ;};};_bffe :="\u002e"+_aedca .ToLower (_cddc .Format ());_bgcee .TargetAttr =_ffgg .RelativeFilename (_ebecg ,_bgf .Typ ,_bfga ,len (_acae .Images ));if _gcad :=_gegaa .Ext (_bgcee .TargetAttr );_gcad !=_bffe {_bgcee .TargetAttr =_bgcee .TargetAttr [0:len (_bgcee .TargetAttr )-len (_gcad )]+_bffe ;};default:_ffgg .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_bfga ,_fadg );};return nil ;};

// GetOrCreateCustomProperties returns the custom properties of the document (and if they not exist yet, creating them first)
func (_cage *Document )GetOrCreateCustomProperties ()_dfge .CustomProperties {if _cage .CustomProperties .X ()==nil {_cage .createCustomProperties ();};return _cage .CustomProperties ;};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_dbcbc :=_fdcbg .NewSettings ();_dbcbc .Compat =_fdcbg .NewCT_Compat ();_bgcfg :=_fdcbg .NewCT_CompatSetting ();_bgcfg .NameAttr =_ffgg .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_bgcfg .UriAttr =_ffgg .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_bgcfg .ValAttr =_ffgg .String ("\u0031\u0035");_dbcbc .Compat .CompatSetting =append (_dbcbc .Compat .CompatSetting ,_bgcfg );return Settings {_dbcbc };};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_bcabf Document )SetStrict (strict bool ){if strict {_bcabf ._begc .ConformanceAttr =_bcff .ST_ConformanceClassStrict ;}else {_bcabf ._begc .ConformanceAttr =_bcff .ST_ConformanceClassTransitional ;};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_eefae RunProperties )CharacterSpacingMeasure ()string {if _dec :=_eefae ._adde .Spacing ;_dec !=nil {_becc :=_dec .ValAttr ;if _becc .ST_UniversalMeasure !=nil {return *_becc .ST_UniversalMeasure ;};};return "";};

// StyleID returns the style ID.
func (_gfbd Style )StyleID ()string {if _gfbd ._cgcg .StyleIdAttr ==nil {return "";};return *_gfbd ._cgcg .StyleIdAttr ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_adbd ParagraphSpacing )SetLineSpacing (d _ff .Distance ,rule _fdcbg .ST_LineSpacingRule ){if rule ==_fdcbg .ST_LineSpacingRuleUnset {_adbd ._ebc .LineRuleAttr =_fdcbg .ST_LineSpacingRuleUnset ;_adbd ._ebc .LineAttr =nil ;}else {_adbd ._ebc .LineRuleAttr =rule ;_adbd ._ebc .LineAttr =&_fdcbg .ST_SignedTwipsMeasure {};_adbd ._ebc .LineAttr .Int64 =_ffgg .Int64 (int64 (d /_ff .Twips ));};};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_dc *Document )HasFootnotes ()bool {return _dc ._ecda !=nil };

// SetHANSITheme sets the font H ANSI Theme.
func (_gaeaa Fonts )SetHANSITheme (t _fdcbg .ST_Theme ){_gaeaa ._bbgg .HAnsiThemeAttr =t };

// Clear resets the numbering.
func (_fgbg Numbering )Clear (){_fgbg ._efde .AbstractNum =nil ;_fgbg ._efde .Num =nil ;_fgbg ._efde .NumIdMacAtCleanup =nil ;_fgbg ._efde .NumPicBullet =nil ;};

// SetBottom sets the cell bottom margin
func (_begb CellMargins )SetBottom (d _ff .Distance ){_begb ._fcggg .Bottom =_fdcbg .NewCT_TblWidth ();_bgcc (_begb ._fcggg .Bottom ,d );};

// Underline returns the type of paragraph underline.
func (_ffae ParagraphProperties )Underline ()_fdcbg .ST_Underline {if _agafc :=_ffae ._bae .RPr .U ;_agafc !=nil {return _agafc .ValAttr ;};return 0;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_cdg RunProperties )RStyle ()string {if _cdg ._adde .RStyle !=nil {return _cdg ._adde .RStyle .ValAttr ;};return "";};

// SetNextStyle sets the style that the next paragraph will use.
func (_dabd Style )SetNextStyle (name string ){if name ==""{_dabd ._cgcg .Next =nil ;}else {_dabd ._cgcg .Next =_fdcbg .NewCT_String ();_dabd ._cgcg .Next .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_agga Settings )X ()*_fdcbg .Settings {return _agga ._egf };

// Outline returns true if run outline is on.
func (_gbf RunProperties )Outline ()bool {return _bgfdb (_gbf ._adde .Outline )};

// SetWidthPercent sets the cell to a width percentage.
func (_fbde CellProperties )SetWidthPercent (pct float64 ){_fbde ._dfa .TcW =_fdcbg .NewCT_TblWidth ();_fbde ._dfa .TcW .TypeAttr =_fdcbg .ST_TblWidthPct ;_fbde ._dfa .TcW .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_fbde ._dfa .TcW .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_fbde ._dfa .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (pct *50));};

// X returns the inner wrapped XML type.
func (_gccg Color )X ()*_fdcbg .CT_Color {return _gccg ._bfdf };

// ParagraphProperties returns the paragraph style properties.
func (_aceg Style )ParagraphProperties ()ParagraphStyleProperties {if _aceg ._cgcg .PPr ==nil {_aceg ._cgcg .PPr =_fdcbg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_aceg ._cgcg .PPr };};

// HyperLink is a link within a document.
type HyperLink struct{_ggcd *Document ;_egcc *_fdcbg .CT_Hyperlink ;};

// SetWidthPercent sets the table to a width percentage.
func (_ddge TableProperties )SetWidthPercent (pct float64 ){_ddge ._fecdg .TblW =_fdcbg .NewCT_TblWidth ();_ddge ._fecdg .TblW .TypeAttr =_fdcbg .ST_TblWidthPct ;_ddge ._fecdg .TblW .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_ddge ._fecdg .TblW .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_ddge ._fecdg .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (pct *50));};

// SetAlignment controls the paragraph alignment
func (_edbg ParagraphProperties )SetAlignment (align _fdcbg .ST_Jc ){if align ==_fdcbg .ST_JcUnset {_edbg ._bae .Jc =nil ;}else {_edbg ._bae .Jc =_fdcbg .NewCT_Jc ();_edbg ._bae .Jc .ValAttr =align ;};};

// SetBefore sets the spacing that comes before the paragraph.
func (_ebff ParagraphSpacing )SetBefore (before _ff .Distance ){_ebff ._ebc .BeforeAttr =&_bcff .ST_TwipsMeasure {};_ebff ._ebc .BeforeAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (before /_ff .Twips ));};

// SetHighlight highlights text in a specified color.
func (_cffb RunProperties )SetHighlight (c _fdcbg .ST_HighlightColor ){_cffb ._adde .Highlight =_fdcbg .NewCT_Highlight ();_cffb ._adde .Highlight .ValAttr =c ;};

// X returns the inner wrapped XML type.
func (_gce Styles )X ()*_fdcbg .Styles {return _gce ._ddg };

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_bbgf Paragraph )AddHyperLink ()HyperLink {_aeec :=_fdcbg .NewEG_PContent ();_bbgf ._gcd .EG_PContent =append (_bbgf ._gcd .EG_PContent ,_aeec );_aeec .Hyperlink =_fdcbg .NewCT_Hyperlink ();return HyperLink {_bbgf ._fda ,_aeec .Hyperlink };};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_bbfd *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _bbfd .insertParagraph (relativeTo ,true );};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_abg AnchoredDrawing )SetTextWrapNone (){_abg ._dafb .Choice =&_fdcbg .WdEG_WrapTypeChoice {};_abg ._dafb .Choice .WrapNone =_fdcbg .NewWdCT_WrapNone ();};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// Properties returns the row properties.
func (_dceg Row )Properties ()RowProperties {if _dceg ._affg .TrPr ==nil {_dceg ._affg .TrPr =_fdcbg .NewCT_TrPr ();};return RowProperties {_dceg ._affg .TrPr };};

// SetLeft sets the left border to a specified type, color and thickness.
func (_bbfc CellBorders )SetLeft (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_bbfc ._fa .Left =_fdcbg .NewCT_Border ();_gcfg (_bbfc ._fa .Left ,t ,c ,thickness );};

// SetTop sets the cell top margin
func (_eaca CellMargins )SetTop (d _ff .Distance ){_eaca ._fcggg .Top =_fdcbg .NewCT_TblWidth ();_bgcc (_eaca ._fcggg .Top ,d );};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_ddg *_fdcbg .Styles };

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_abd TableStyleProperties )SetCellSpacingPercent (pct float64 ){_abd ._eafbb .TblCellSpacing =_fdcbg .NewCT_TblWidth ();_abd ._eafbb .TblCellSpacing .TypeAttr =_fdcbg .ST_TblWidthPct ;_abd ._eafbb .TblCellSpacing .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_abd ._eafbb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_abd ._eafbb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (pct *50));};

// Strike returns true if run is striked.
func (_fb RunProperties )Strike ()bool {return _bgfdb (_fb ._adde .Strike )};func (_dcceb *Document )createCustomProperties (){_dcceb .CustomProperties =_dfge .NewCustomProperties ();_dcceb .addCustomRelationships ();};

// IsItalic returns true if the run has been set to italics.
func (_afed RunProperties )IsItalic ()bool {return _afed .ItalicValue ()==OnOffValueOn };func (_bffb Paragraph )insertRun (_dag Run ,_bede bool )Run {for _ ,_aed :=range _bffb ._gcd .EG_PContent {for _gdbg ,_dgde :=range _aed .EG_ContentRunContent {if _dgde .R ==_dag .X (){_gega :=_fdcbg .NewCT_R ();_aed .EG_ContentRunContent =append (_aed .EG_ContentRunContent ,nil );if _bede {copy (_aed .EG_ContentRunContent [_gdbg +1:],_aed .EG_ContentRunContent [_gdbg :]);_aed .EG_ContentRunContent [_gdbg ]=_fdcbg .NewEG_ContentRunContent ();_aed .EG_ContentRunContent [_gdbg ].R =_gega ;}else {copy (_aed .EG_ContentRunContent [_gdbg +2:],_aed .EG_ContentRunContent [_gdbg +1:]);_aed .EG_ContentRunContent [_gdbg +1]=_fdcbg .NewEG_ContentRunContent ();_aed .EG_ContentRunContent [_gdbg +1].R =_gega ;};return Run {_bffb ._fda ,_gega };};if _dgde .Sdt !=nil &&_dgde .Sdt .SdtContent !=nil {for _ ,_ecaf :=range _dgde .Sdt .SdtContent .EG_ContentRunContent {if _ecaf .R ==_dag .X (){_cegf :=_fdcbg .NewCT_R ();_dgde .Sdt .SdtContent .EG_ContentRunContent =append (_dgde .Sdt .SdtContent .EG_ContentRunContent ,nil );if _bede {copy (_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg +1:],_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg :]);_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg ]=_fdcbg .NewEG_ContentRunContent ();_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg ].R =_cegf ;}else {copy (_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg +2:],_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg +1:]);_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg +1]=_fdcbg .NewEG_ContentRunContent ();_dgde .Sdt .SdtContent .EG_ContentRunContent [_gdbg +1].R =_cegf ;};return Run {_bffb ._fda ,_cegf };};};};};};return _bffb .AddRun ();};

// SetAlignment controls the paragraph alignment
func (_ffggb ParagraphStyleProperties )SetAlignment (align _fdcbg .ST_Jc ){if align ==_fdcbg .ST_JcUnset {_ffggb ._cgce .Jc =nil ;}else {_ffggb ._cgce .Jc =_fdcbg .NewCT_Jc ();_ffggb ._cgce .Jc .ValAttr =align ;};};type mergeFieldInfo struct{_bffg string ;_gb string ;_ccgb string ;_edab bool ;_cgeg bool ;_fd bool ;_deba bool ;_af Paragraph ;_dffd ,_cfca ,_ecdf int ;_beef *_fdcbg .EG_PContent ;_ddf bool ;};

// Bookmarks returns all of the bookmarks defined in the document.
func (_fbdb Document )Bookmarks ()[]Bookmark {if _fbdb ._begc .Body ==nil {return nil ;};_ggef :=[]Bookmark {};for _ ,_ffce :=range _fbdb ._begc .Body .EG_BlockLevelElts {for _ ,_ggbba :=range _ffce .EG_ContentBlockContent {for _ ,_fc :=range _cefe (_ggbba ){_ggef =append (_ggef ,_fc );};};};return _ggef ;};

// SetColumnBandSize sets the number of Columns in the column band
func (_fdfc TableStyleProperties )SetColumnBandSize (cols int64 ){_fdfc ._eafbb .TblStyleColBandSize =_fdcbg .NewCT_DecimalNumber ();_fdfc ._eafbb .TblStyleColBandSize .ValAttr =cols ;};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_bddb Header )Index ()int {for _dbgf ,_cecac :=range _bddb ._edgg ._abb {if _cecac ==_bddb ._afac {return _dbgf ;};};return -1;};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_ggeg TableLook )SetVerticalBanding (on bool ){if !on {_ggeg ._ecad .NoVBandAttr =&_bcff .ST_OnOff {};_ggeg ._ecad .NoVBandAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;}else {_ggeg ._ecad .NoVBandAttr =&_bcff .ST_OnOff {};_ggeg ._ecad .NoVBandAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;};};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_fabee Run )AddDrawingAnchored (img _dfge .ImageRef )(AnchoredDrawing ,error ){_fceb :=_fabee .newIC ();_fceb .Drawing =_fdcbg .NewCT_Drawing ();_edadb :=_fdcbg .NewWdAnchor ();_dbcf :=AnchoredDrawing {_fabee ._gdaf ,_edadb };_edadb .SimplePosAttr =_ffgg .Bool (false );_edadb .AllowOverlapAttr =true ;_edadb .CNvGraphicFramePr =_begd .NewCT_NonVisualGraphicFrameProperties ();_fceb .Drawing .Anchor =append (_fceb .Drawing .Anchor ,_edadb );_edadb .Graphic =_begd .NewGraphic ();_edadb .Graphic .GraphicData =_begd .NewCT_GraphicalObjectData ();_edadb .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_edadb .SimplePos .XAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_edadb .SimplePos .YAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_edadb .PositionH .RelativeFromAttr =_fdcbg .WdST_RelFromHPage ;_edadb .PositionH .Choice =&_fdcbg .WdCT_PosHChoice {};_edadb .PositionH .Choice .PosOffset =_ffgg .Int32 (0);_edadb .PositionV .RelativeFromAttr =_fdcbg .WdST_RelFromVPage ;_edadb .PositionV .Choice =&_fdcbg .WdCT_PosVChoice {};_edadb .PositionV .Choice .PosOffset =_ffgg .Int32 (0);_edadb .Extent .CxAttr =int64 (float64 (img .Size ().X *_ff .Pixel72 )/_ff .EMU );_edadb .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ff .Pixel72 )/_ff .EMU );_edadb .Choice =&_fdcbg .WdEG_WrapTypeChoice {};_edadb .Choice .WrapSquare =_fdcbg .NewWdCT_WrapSquare ();_edadb .Choice .WrapSquare .WrapTextAttr =_fdcbg .WdST_WrapTextBothSides ;_eeef :=0x7FFFFFFF&_ffc .Uint32 ();_edadb .DocPr .IdAttr =_eeef ;_fcea :=_egd .NewPic ();_fcea .NvPicPr .CNvPr .IdAttr =_eeef ;_deac :=img .RelID ();if _deac ==""{return _dbcf ,_aaaa .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_edadb .Graphic .GraphicData .Any =append (_edadb .Graphic .GraphicData .Any ,_fcea );_fcea .BlipFill =_begd .NewCT_BlipFillProperties ();_fcea .BlipFill .Blip =_begd .NewCT_Blip ();_fcea .BlipFill .Blip .EmbedAttr =&_deac ;_fcea .BlipFill .Stretch =_begd .NewCT_StretchInfoProperties ();_fcea .BlipFill .Stretch .FillRect =_begd .NewCT_RelativeRect ();_fcea .SpPr =_begd .NewCT_ShapeProperties ();_fcea .SpPr .Xfrm =_begd .NewCT_Transform2D ();_fcea .SpPr .Xfrm .Off =_begd .NewCT_Point2D ();_fcea .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_fcea .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_fcea .SpPr .Xfrm .Ext =_begd .NewCT_PositiveSize2D ();_fcea .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ff .Point );_fcea .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ff .Point );_fcea .SpPr .PrstGeom =_begd .NewCT_PresetGeometry2D ();_fcea .SpPr .PrstGeom .PrstAttr =_begd .ST_ShapeTypeRect ;return _dbcf ,nil ;};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_eadb CellProperties )SetVerticalAlignment (align _fdcbg .ST_VerticalJc ){if align ==_fdcbg .ST_VerticalJcUnset {_eadb ._dfa .VAlign =nil ;}else {_eadb ._dfa .VAlign =_fdcbg .NewCT_VerticalJc ();_eadb ._dfa .VAlign .ValAttr =align ;};};func (_dddaf Styles )initializeStyleDefaults (){_begf :=_dddaf .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_fdcbg .ST_StyleTypeParagraph ,true );_begf .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_begf .SetPrimaryStyle (true );_aca :=_dddaf .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_fdcbg .ST_StyleTypeCharacter ,true );_aca .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_aca .SetUISortOrder (1);_aca .SetSemiHidden (true );_aca .SetUnhideWhenUsed (true );_fdg :=_dddaf .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_fdcbg .ST_StyleTypeCharacter ,false );_fdg .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_fdg .SetBasedOn (_aca .StyleID ());_fdg .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_fdg .SetUISortOrder (10);_fdg .RunProperties ().Fonts ().SetASCIITheme (_fdcbg .ST_ThemeMajorAscii );_fdg .RunProperties ().Fonts ().SetEastAsiaTheme (_fdcbg .ST_ThemeMajorEastAsia );_fdg .RunProperties ().Fonts ().SetHANSITheme (_fdcbg .ST_ThemeMajorHAnsi );_fdg .RunProperties ().Fonts ().SetCSTheme (_fdcbg .ST_ThemeMajorBidi );_fdg .RunProperties ().SetSize (28*_ff .Point );_fdg .RunProperties ().SetKerning (14*_ff .Point );_fdg .RunProperties ().SetCharacterSpacing (-10*_ff .Twips );_adc :=_dddaf .AddStyle ("\u0054\u0069\u0074l\u0065",_fdcbg .ST_StyleTypeParagraph ,false );_adc .SetName ("\u0054\u0069\u0074l\u0065");_adc .SetBasedOn (_begf .StyleID ());_adc .SetNextStyle (_begf .StyleID ());_adc .SetLinkedStyle (_fdg .StyleID ());_adc .SetUISortOrder (10);_adc .SetPrimaryStyle (true );_adc .ParagraphProperties ().SetContextualSpacing (true );_adc .RunProperties ().Fonts ().SetASCIITheme (_fdcbg .ST_ThemeMajorAscii );_adc .RunProperties ().Fonts ().SetEastAsiaTheme (_fdcbg .ST_ThemeMajorEastAsia );_adc .RunProperties ().Fonts ().SetHANSITheme (_fdcbg .ST_ThemeMajorHAnsi );_adc .RunProperties ().Fonts ().SetCSTheme (_fdcbg .ST_ThemeMajorBidi );_adc .RunProperties ().SetSize (28*_ff .Point );_adc .RunProperties ().SetKerning (14*_ff .Point );_adc .RunProperties ().SetCharacterSpacing (-10*_ff .Twips );_gba :=_dddaf .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_fdcbg .ST_StyleTypeTable ,false );_gba .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_gba .SetUISortOrder (99);_gba .SetSemiHidden (true );_gba .SetUnhideWhenUsed (true );_gba .X ().TblPr =_fdcbg .NewCT_TblPrBase ();_cca :=NewTableWidth ();_gba .X ().TblPr .TblInd =_cca .X ();_cca .SetValue (0*_ff .Dxa );_gba .X ().TblPr .TblCellMar =_fdcbg .NewCT_TblCellMar ();_cca =NewTableWidth ();_gba .X ().TblPr .TblCellMar .Top =_cca .X ();_cca .SetValue (0*_ff .Dxa );_cca =NewTableWidth ();_gba .X ().TblPr .TblCellMar .Bottom =_cca .X ();_cca .SetValue (0*_ff .Dxa );_cca =NewTableWidth ();_gba .X ().TblPr .TblCellMar .Left =_cca .X ();_cca .SetValue (108*_ff .Dxa );_cca =NewTableWidth ();_gba .X ().TblPr .TblCellMar .Right =_cca .X ();_cca .SetValue (108*_ff .Dxa );_bggg :=_dddaf .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_fdcbg .ST_StyleTypeNumbering ,false );_bggg .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_bggg .SetUISortOrder (1);_bggg .SetSemiHidden (true );_bggg .SetUnhideWhenUsed (true );_aeg :=[]_ff .Distance {16,13,12,11,11,11,11,11,11};_cbg :=[]_ff .Distance {240,40,40,40,40,40,40,40,40};for _fcgf :=0;_fcgf < 9;_fcgf ++{_bffcd :=_ggab .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_fcgf +1);_beba :=_dddaf .AddStyle (_bffcd +"\u0043\u0068\u0061\u0072",_fdcbg .ST_StyleTypeCharacter ,false );_beba .SetName (_ggab .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_fcgf +1));_beba .SetBasedOn (_aca .StyleID ());_beba .SetLinkedStyle (_bffcd );_beba .SetUISortOrder (9+_fcgf );_beba .RunProperties ().SetSize (_aeg [_fcgf ]*_ff .Point );_gbcg :=_dddaf .AddStyle (_bffcd ,_fdcbg .ST_StyleTypeParagraph ,false );_gbcg .SetName (_ggab .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_fcgf +1));_gbcg .SetNextStyle (_begf .StyleID ());_gbcg .SetLinkedStyle (_gbcg .StyleID ());_gbcg .SetUISortOrder (9+_fcgf );_gbcg .SetPrimaryStyle (true );_gbcg .ParagraphProperties ().SetKeepNext (true );_gbcg .ParagraphProperties ().SetSpacing (_cbg [_fcgf ]*_ff .Twips ,0);_gbcg .ParagraphProperties ().SetOutlineLevel (_fcgf );_gbcg .RunProperties ().SetSize (_aeg [_fcgf ]*_ff .Point );};};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_daf *Document )GetImageByRelID (relID string )(_dfge .ImageRef ,bool ){for _ ,_bgd :=range _daf .Images {if _bgd .RelID ()==relID {return _bgd ,true ;};};return _dfge .ImageRef {},false ;};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_acc ParagraphProperties )AddSection (t _fdcbg .ST_SectionMark )Section {_acc ._bae .SectPr =_fdcbg .NewCT_SectPr ();if t !=_fdcbg .ST_SectionMarkUnset {_acc ._bae .SectPr .Type =_fdcbg .NewCT_SectType ();_acc ._bae .SectPr .Type .ValAttr =t ;};return Section {_acc ._cbdf ,_acc ._bae .SectPr };};

// Strike returns true if paragraph is striked.
func (_gacc ParagraphProperties )Strike ()bool {return _bgfdb (_gacc ._bae .RPr .Strike )};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_cbed Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_cbed .ensurePPr ();if _cbed ._gcd .PPr .NumPr ==nil {_cbed ._gcd .PPr .NumPr =_fdcbg .NewCT_NumPr ();};_age :=_fdcbg .NewCT_DecimalNumber ();_ec :=int64 (-1);for _ ,_adgg :=range _cbed ._fda .Numbering ._efde .Num {if _adgg .AbstractNumId !=nil &&_adgg .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_ec =_adgg .NumIdAttr ;};};if _ec ==-1{_eea :=_fdcbg .NewCT_Num ();_cbed ._fda .Numbering ._efde .Num =append (_cbed ._fda .Numbering ._efde .Num ,_eea );_eea .NumIdAttr =int64 (len (_cbed ._fda .Numbering ._efde .Num ));_eea .AbstractNumId =_fdcbg .NewCT_DecimalNumber ();_eea .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_age .ValAttr =_ec ;_cbed ._gcd .PPr .NumPr .NumId =_age ;};func (_bbed *Document )validateTableCells ()error {for _ ,_ggbf :=range _bbed ._begc .Body .EG_BlockLevelElts {for _ ,_gfcb :=range _ggbf .EG_ContentBlockContent {for _ ,_dbggc :=range _gfcb .Tbl {for _ ,_efa :=range _dbggc .EG_ContentRowContent {for _ ,_bbdb :=range _efa .Tr {_cgaaf :=false ;for _ ,_cedf :=range _bbdb .EG_ContentCellContent {_fgg :=false ;for _ ,_bcfd :=range _cedf .Tc {_cgaaf =true ;for _ ,_edda :=range _bcfd .EG_BlockLevelElts {for _ ,_cabe :=range _edda .EG_ContentBlockContent {if len (_cabe .P )> 0{_fgg =true ;break ;};};};};if !_fgg {return _aaaa .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_cgaaf {return _aaaa .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// Definitions returns the defined numbering definitions.
func (_ad Numbering )Definitions ()[]NumberingDefinition {_fca :=[]NumberingDefinition {};for _ ,_a :=range _ad ._efde .AbstractNum {_fca =append (_fca ,NumberingDefinition {_a });};return _fca ;};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown.  For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_dacg FormField )SetValue (v string ){if _dacg ._cab .DdList !=nil {for _ceece ,_cgbf :=range _dacg .PossibleValues (){if _cgbf ==v {_dacg ._cab .DdList .Result =_fdcbg .NewCT_DecimalNumber ();_dacg ._cab .DdList .Result .ValAttr =int64 (_ceece );break ;};};}else if _dacg ._cab .TextInput !=nil {_dacg ._bdff .T =_fdcbg .NewCT_Text ();_dacg ._bdff .T .Content =v ;};};

// SetTarget sets the URL target of the hyperlink.
func (_bfcc HyperLink )SetTarget (url string ){_ggag :=_bfcc ._ggcd .AddHyperlink (url );_bfcc ._egcc .IdAttr =_ffgg .String (_dfge .Relationship (_ggag ).ID ());_bfcc ._egcc .AnchorAttr =nil ;};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_cab *_fdcbg .CT_FFData ;_bdff *_fdcbg .EG_RunInnerContent ;};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_aecd TableLook )SetFirstColumn (on bool ){if !on {_aecd ._ecad .FirstColumnAttr =&_bcff .ST_OnOff {};_aecd ._ecad .FirstColumnAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;}else {_aecd ._ecad .FirstColumnAttr =&_bcff .ST_OnOff {};_aecd ._ecad .FirstColumnAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;};};

// X returns the inner wrapped XML type.
func (_fabe CellProperties )X ()*_fdcbg .CT_TcPr {return _fabe ._dfa };

// Color controls the run or styles color.
type Color struct{_bfdf *_fdcbg .CT_Color };

// Properties returns the cell properties.
func (_ceaf Cell )Properties ()CellProperties {if _ceaf ._bba .TcPr ==nil {_ceaf ._bba .TcPr =_fdcbg .NewCT_TcPr ();};return CellProperties {_ceaf ._bba .TcPr };};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_cbbb TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _cbbb ._gffd .PPr ==nil {_cbbb ._gffd .PPr =_fdcbg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cbbb ._gffd .PPr };};func (_fgcg *Document )addCustomRelationships (){_fgcg .ContentTypes .AddOverride ("/\u0064o\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063u\u0073\u0074\u006f\u006d.x\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065n\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u0075\u0073\u0074\u006f\u006d\u002d\u0070r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073+\u0078\u006d\u006c");_fgcg .Rels .AddRelationship ("\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c",_ffgg .CustomPropertiesType );};

// Borders allows manipulation of the table borders.
func (_gac TableStyleProperties )Borders ()TableBorders {if _gac ._eafbb .TblBorders ==nil {_gac ._eafbb .TblBorders =_fdcbg .NewCT_TblBorders ();};return TableBorders {_gac ._eafbb .TblBorders };};

// SetVerticalMerge controls the vertical merging of cells.
func (_adad CellProperties )SetVerticalMerge (mergeVal _fdcbg .ST_Merge ){if mergeVal ==_fdcbg .ST_MergeUnset {_adad ._dfa .VMerge =nil ;}else {_adad ._dfa .VMerge =_fdcbg .NewCT_VMerge ();_adad ._dfa .VMerge .ValAttr =mergeVal ;};};

// Footer is a footer for a document section.
type Footer struct{_ccag *Document ;_fcgb *_fdcbg .Ftr ;};

// Row is a row within a table within a document.
type Row struct{_dgg *Document ;_affg *_fdcbg .CT_Row ;};

// Color returns the style's Color.
func (_bdbc RunProperties )Color ()Color {if _bdbc ._adde .Color ==nil {_bdbc ._adde .Color =_fdcbg .NewCT_Color ();};return Color {_bdbc ._adde .Color };};

// Type returns the type of the style.
func (_bagf Style )Type ()_fdcbg .ST_StyleType {return _bagf ._cgcg .TypeAttr };

// X returns the inner wrapped XML type.
func (_aceb Endnote )X ()*_fdcbg .CT_FtnEdn {return _aceb ._fgdc };

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_cadg Paragraph )AddEndnote (text string )Endnote {var _bda int64 ;if _cadg ._fda .HasEndnotes (){for _ ,_fdd :=range _cadg ._fda .Endnotes (){if _fdd .id ()> _bda {_bda =_fdd .id ();};};_bda ++;}else {_bda =0;_cadg ._fda ._bgad =&_fdcbg .Endnotes {};};_cegg :=_fdcbg .NewCT_FtnEdn ();_bagd :=_fdcbg .NewCT_FtnEdnRef ();_bagd .IdAttr =_bda ;_cadg ._fda ._bgad .CT_Endnotes .Endnote =append (_cadg ._fda ._bgad .CT_Endnotes .Endnote ,_cegg );_ddde :=_cadg .AddRun ();_efag :=_ddde .Properties ();_efag .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_ddde ._dgf .EG_RunInnerContent =[]*_fdcbg .EG_RunInnerContent {_fdcbg .NewEG_RunInnerContent ()};_ddde ._dgf .EG_RunInnerContent [0].EndnoteReference =_bagd ;_fcad :=Endnote {_cadg ._fda ,_cegg };_fcad ._fgdc .IdAttr =_bda ;_fcad ._fgdc .EG_BlockLevelElts =[]*_fdcbg .EG_BlockLevelElts {_fdcbg .NewEG_BlockLevelElts ()};_faeb :=_fcad .AddParagraph ();_faeb .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_faeb ._gcd .PPr .RPr =_fdcbg .NewCT_ParaRPr ();_fege :=_faeb .AddRun ();_fege .AddTab ();_fege .AddText (text );return _fcad ;};

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_abc Document )AddHyperlink (url string )_dfge .Hyperlink {return _abc ._aggd .AddHyperlink (url )};

// Italic returns true if paragraph font is italic.
func (_ceaa ParagraphProperties )Italic ()bool {_debf :=_ceaa ._bae .RPr ;return _bgfdb (_debf .I )||_bgfdb (_debf .ICs );};

// SetLinkedStyle sets the style that this style is linked to.
func (_gcdeg Style )SetLinkedStyle (name string ){if name ==""{_gcdeg ._cgcg .Link =nil ;}else {_gcdeg ._cgcg .Link =_fdcbg .NewCT_String ();_gcdeg ._cgcg .Link .ValAttr =name ;};};

// SetSmallCaps sets the run to small caps.
func (_gcbee RunProperties )SetSmallCaps (b bool ){if !b {_gcbee ._adde .SmallCaps =nil ;}else {_gcbee ._adde .SmallCaps =_fdcbg .NewCT_OnOff ();};};

// SetEmboss sets the run to embossed text.
func (_ggc RunProperties )SetEmboss (b bool ){if !b {_ggc ._adde .Emboss =nil ;}else {_ggc ._adde .Emboss =_fdcbg .NewCT_OnOff ();};};

// Caps returns true if paragraph font is capitalized.
func (_dgeb ParagraphProperties )Caps ()bool {return _bgfdb (_dgeb ._bae .RPr .Caps )};

// SetColor sets a specific color or auto.
func (_effe Color )SetColor (v _cagf .Color ){if v .IsAuto (){_effe ._bfdf .ValAttr .ST_HexColorAuto =_fdcbg .ST_HexColorAutoAuto ;_effe ._bfdf .ValAttr .ST_HexColorRGB =nil ;}else {_effe ._bfdf .ValAttr .ST_HexColorAuto =_fdcbg .ST_HexColorAutoUnset ;_effe ._bfdf .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};

// SetCSTheme sets the font complex script theme.
func (_ccde Fonts )SetCSTheme (t _fdcbg .ST_Theme ){_ccde ._bbgg .CsthemeAttr =t };

// SetName sets the name of the style.
func (_cee Style )SetName (name string ){_cee ._cgcg .Name =_fdcbg .NewCT_String ();_cee ._cgcg .Name .ValAttr =name ;};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_faa TableProperties )SetCellSpacingPercent (pct float64 ){_faa ._fecdg .TblCellSpacing =_fdcbg .NewCT_TblWidth ();_faa ._fecdg .TblCellSpacing .TypeAttr =_fdcbg .ST_TblWidthPct ;_faa ._fecdg .TblCellSpacing .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_faa ._fecdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_faa ._fecdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (pct *50));};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new gooxml document support headings
// from level 1 to 8.
func (_eee ParagraphProperties )SetHeadingLevel (idx int ){_eee .SetStyle (_ggab .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _eee ._bae .NumPr ==nil {_eee ._bae .NumPr =_fdcbg .NewCT_NumPr ();};_eee ._bae .NumPr .Ilvl =_fdcbg .NewCT_DecimalNumber ();_eee ._bae .NumPr .Ilvl .ValAttr =int64 (idx );};

// SetAlignment sets the paragraph alignment
func (_gefaa NumberingLevel )SetAlignment (j _fdcbg .ST_Jc ){if j ==_fdcbg .ST_JcUnset {_gefaa ._bcag .LvlJc =nil ;}else {_gefaa ._bcag .LvlJc =_fdcbg .NewCT_Jc ();_gefaa ._bcag .LvlJc .ValAttr =j ;};};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_cdb *Document ;_bd *_fdcbg .CT_SdtBlock ;};

// RemoveParagraph removes a paragraph from a document.
func (_dbggb *Document )RemoveParagraph (p Paragraph ){if _dbggb ._begc .Body ==nil {return ;};for _ ,_agc :=range _dbggb ._begc .Body .EG_BlockLevelElts {for _ ,_dacf :=range _agc .EG_ContentBlockContent {for _acbg ,_cce :=range _dacf .P {if _cce ==p ._gcd {copy (_dacf .P [_acbg :],_dacf .P [_acbg +1:]);_dacf .P =_dacf .P [0:len (_dacf .P )-1];return ;};};if _dacf .Sdt !=nil &&_dacf .Sdt .SdtContent !=nil &&_dacf .Sdt .SdtContent .P !=nil {for _ceba ,_debe :=range _dacf .Sdt .SdtContent .P {if _debe ==p ._gcd {copy (_dacf .P [_ceba :],_dacf .P [_ceba +1:]);_dacf .P =_dacf .P [0:len (_dacf .P )-1];return ;};};};};};};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_cged FormField )SetChecked (b bool ){if _cged ._cab .CheckBox ==nil {return ;};if !b {_cged ._cab .CheckBox .Checked =nil ;}else {_cged ._cab .CheckBox .Checked =_fdcbg .NewCT_OnOff ();};};

// Endnotes returns the endnotes defined in the document.
func (_bef *Document )Endnotes ()[]Endnote {_geaa :=[]Endnote {};for _ ,_gef :=range _bef ._bgad .CT_Endnotes .Endnote {_geaa =append (_geaa ,Endnote {_bef ,_gef });};return _geaa ;};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_eeaf RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_eeaf ._adde .Dstrike =nil ;}else {_eeaf ._adde .Dstrike =_fdcbg .NewCT_OnOff ();};};

// SetText sets the text to be used in bullet mode.
func (_egb NumberingLevel )SetText (t string ){if t ==""{_egb ._bcag .LvlText =nil ;}else {_egb ._bcag .LvlText =_fdcbg .NewCT_LevelText ();_egb ._bcag .LvlText .ValAttr =_ffgg .String (t );};};

// UnderlineColor returns the hex color value of paragraph underline.
func (_gadde ParagraphProperties )UnderlineColor ()string {if _agde :=_gadde ._bae .RPr .U ;_agde !=nil {_abcg :=_agde .ColorAttr ;if _abcg !=nil &&_abcg .ST_HexColorRGB !=nil {return *_abcg .ST_HexColorRGB ;};};return "";};

// Paragraphs returns the paragraphs defined in a header.
func (_deda Header )Paragraphs ()[]Paragraph {_bac :=[]Paragraph {};for _ ,_ddbe :=range _deda ._afac .EG_ContentBlockContent {for _ ,_dbad :=range _ddbe .P {_bac =append (_bac ,Paragraph {_deda ._edgg ,_dbad });};};for _ ,_bdce :=range _deda .Tables (){for _ ,_daee :=range _bdce .Rows (){for _ ,_aedc :=range _daee .Cells (){_bac =append (_bac ,_aedc .Paragraphs ()...);};};};return _bac ;};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_efde *_fdcbg .Numbering };

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_gffd *_fdcbg .CT_TblStylePr };

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_dfaab HyperLink )SetTargetBookmark (bm Bookmark ){_dfaab ._egcc .AnchorAttr =_ffgg .String (bm .Name ());_dfaab ._egcc .IdAttr =nil ;};

// ParagraphStyles returns only the paragraph styles.
func (_fcgg Styles )ParagraphStyles ()[]Style {_cg :=[]Style {};for _ ,_fdcb :=range _fcgg ._ddg .Style {if _fdcb .TypeAttr !=_fdcbg .ST_StyleTypeParagraph {continue ;};_cg =append (_cg ,Style {_fdcb });};return _cg ;};func (_ccc Endnote )id ()int64 {return _ccc ._fgdc .IdAttr };

// X returns the inner wrapped XML type.
func (_dfcb Bookmark )X ()*_fdcbg .CT_Bookmark {return _dfcb ._gaeb };func (_fadd *Document )insertParagraph (_afacf Paragraph ,_fed bool )Paragraph {if _fadd ._begc .Body ==nil {return _fadd .AddParagraph ();};_dfbb :=_afacf .X ();for _ ,_edc :=range _fadd ._begc .Body .EG_BlockLevelElts {for _ ,_gbb :=range _edc .EG_ContentBlockContent {for _aba ,_fba :=range _gbb .P {if _fba ==_dfbb {_g :=_fdcbg .NewCT_P ();_gbb .P =append (_gbb .P ,nil );if _fed {copy (_gbb .P [_aba +1:],_gbb .P [_aba :]);_gbb .P [_aba ]=_g ;}else {copy (_gbb .P [_aba +2:],_gbb .P [_aba +1:]);_gbb .P [_aba +1]=_g ;};return Paragraph {_fadd ,_g };};};for _ ,_dbcd :=range _gbb .Tbl {for _ ,_fdf :=range _dbcd .EG_ContentRowContent {for _ ,_gebd :=range _fdf .Tr {for _ ,_afc :=range _gebd .EG_ContentCellContent {for _ ,_bace :=range _afc .Tc {for _ ,_daab :=range _bace .EG_BlockLevelElts {for _ ,_dfb :=range _daab .EG_ContentBlockContent {for _ffad ,_aff :=range _dfb .P {if _aff ==_dfbb {_bdc :=_fdcbg .NewCT_P ();_dfb .P =append (_dfb .P ,nil );if _fed {copy (_dfb .P [_ffad +1:],_dfb .P [_ffad :]);_dfb .P [_ffad ]=_bdc ;}else {copy (_dfb .P [_ffad +2:],_dfb .P [_ffad +1:]);_dfb .P [_ffad +1]=_bdc ;};return Paragraph {_fadd ,_bdc };};};};};};};};};};if _gbb .Sdt !=nil &&_gbb .Sdt .SdtContent !=nil &&_gbb .Sdt .SdtContent .P !=nil {for _eecd ,_gbfe :=range _gbb .Sdt .SdtContent .P {if _gbfe ==_dfbb {_dbea :=_fdcbg .NewCT_P ();_gbb .Sdt .SdtContent .P =append (_gbb .Sdt .SdtContent .P ,nil );if _fed {copy (_gbb .Sdt .SdtContent .P [_eecd +1:],_gbb .Sdt .SdtContent .P [_eecd :]);_gbb .Sdt .SdtContent .P [_eecd ]=_dbea ;}else {copy (_gbb .Sdt .SdtContent .P [_eecd +2:],_gbb .Sdt .SdtContent .P [_eecd +1:]);_gbb .Sdt .SdtContent .P [_eecd +1]=_dbea ;};return Paragraph {_fadd ,_dbea };};};};};};return _fadd .AddParagraph ();};

// ClearColor clears the text color.
func (_dcbgg RunProperties )ClearColor (){_dcbgg ._adde .Color =nil };

// SetYOffset sets the Y offset for an image relative to the origin.
func (_ebe AnchoredDrawing )SetYOffset (y _ff .Distance ){_ebe ._dafb .PositionV .Choice =&_fdcbg .WdCT_PosVChoice {};_ebe ._dafb .PositionV .Choice .PosOffset =_ffgg .Int32 (int32 (y /_ff .EMU ));};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_eafbb *_fdcbg .CT_TblPrBase };func _ead (_afccg *_fdcbg .CT_OnOff )OnOffValue {if _afccg ==nil {return OnOffValueUnset ;};if _afccg .ValAttr !=nil &&_afccg .ValAttr .Bool !=nil &&*_afccg .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SizeValue returns the value of run font size in points.
func (_bfca RunProperties )SizeValue ()float64 {if _gged :=_bfca ._adde .Sz ;_gged !=nil {_dcbb :=_gged .ValAttr ;if _dcbb .ST_UnsignedDecimalNumber !=nil {return float64 (*_dcbb .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// X returns the inner wrapped XML type.
func (_bga *Document )X ()*_fdcbg .Document {return _bga ._begc };func (_cgegf Styles )initializeDocDefaults (){_cgegf ._ddg .DocDefaults =_fdcbg .NewCT_DocDefaults ();_cgegf ._ddg .DocDefaults .RPrDefault =_fdcbg .NewCT_RPrDefault ();_cgegf ._ddg .DocDefaults .RPrDefault .RPr =_fdcbg .NewCT_RPr ();_cgdf :=RunProperties {_cgegf ._ddg .DocDefaults .RPrDefault .RPr };_cgdf .SetSize (12*_ff .Point );_cgdf .Fonts ().SetASCIITheme (_fdcbg .ST_ThemeMajorAscii );_cgdf .Fonts ().SetEastAsiaTheme (_fdcbg .ST_ThemeMajorEastAsia );_cgdf .Fonts ().SetHANSITheme (_fdcbg .ST_ThemeMajorHAnsi );_cgdf .Fonts ().SetCSTheme (_fdcbg .ST_ThemeMajorBidi );_cgdf .X ().Lang =_fdcbg .NewCT_Language ();_cgdf .X ().Lang .ValAttr =_ffgg .String ("\u0065\u006e\u002dU\u0053");_cgdf .X ().Lang .EastAsiaAttr =_ffgg .String ("\u0065\u006e\u002dU\u0053");_cgdf .X ().Lang .BidiAttr =_ffgg .String ("\u0061\u0072\u002dS\u0041");_cgegf ._ddg .DocDefaults .PPrDefault =_fdcbg .NewCT_PPrDefault ();};

// X returns the inner wrapped XML type.
func (_afccd NumberingLevel )X ()*_fdcbg .CT_Lvl {return _afccd ._bcag };

// AddParagraph adds a new paragraph to the document body.
func (_dcgf *Document )AddParagraph ()Paragraph {_cfda :=_fdcbg .NewEG_BlockLevelElts ();_dcgf ._begc .Body .EG_BlockLevelElts =append (_dcgf ._begc .Body .EG_BlockLevelElts ,_cfda );_fe :=_fdcbg .NewEG_ContentBlockContent ();_cfda .EG_ContentBlockContent =append (_cfda .EG_ContentBlockContent ,_fe );_eded :=_fdcbg .NewCT_P ();_fe .P =append (_fe .P ,_eded );return Paragraph {_dcgf ,_eded };};

// Footnotes returns the footnotes defined in the document.
func (_dce *Document )Footnotes ()[]Footnote {_badbf :=[]Footnote {};for _ ,_aga :=range _dce ._ecda .CT_Footnotes .Footnote {_badbf =append (_badbf ,Footnote {_dce ,_aga });};return _badbf ;};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_de RunProperties )SetVerticalAlignment (v _bcff .ST_VerticalAlignRun ){if v ==_bcff .ST_VerticalAlignRunUnset {_de ._adde .VertAlign =nil ;}else {_de ._adde .VertAlign =_fdcbg .NewCT_VerticalAlignRun ();_de ._adde .VertAlign .ValAttr =v ;};};

// Properties returns the numbering level paragraph properties.
func (_gd NumberingLevel )Properties ()ParagraphStyleProperties {if _gd ._bcag .PPr ==nil {_gd ._bcag .PPr =_fdcbg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_gd ._bcag .PPr };};func _bgcc (_bfab *_fdcbg .CT_TblWidth ,_dedd _ff .Distance ){_bfab .TypeAttr =_fdcbg .ST_TblWidthDxa ;_bfab .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_bfab .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_bfab .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (_dedd /_ff .Dxa ));};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_abe CellBorders )SetInsideVertical (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_abe ._fa .InsideV =_fdcbg .NewCT_Border ();_gcfg (_abe ._fa .InsideV ,t ,c ,thickness );};

// InitializeDefault constructs the default styles.
func (_eca Styles )InitializeDefault (){_eca .initializeDocDefaults ();_eca .initializeStyleDefaults ()};

// SetAll sets all of the borders to a given value.
func (_fcbff CellBorders )SetAll (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_fcbff .SetBottom (t ,c ,thickness );_fcbff .SetLeft (t ,c ,thickness );_fcbff .SetRight (t ,c ,thickness );_fcbff .SetTop (t ,c ,thickness );_fcbff .SetInsideHorizontal (t ,c ,thickness );_fcbff .SetInsideVertical (t ,c ,thickness );};

// SetHeader sets a section header.
func (_gadd Section )SetHeader (h Header ,t _fdcbg .ST_HdrFtr ){_baca :=_fdcbg .NewEG_HdrFtrReferences ();_gadd ._defe .EG_HdrFtrReferences =append (_gadd ._defe .EG_HdrFtrReferences ,_baca );_baca .HeaderReference =_fdcbg .NewCT_HdrFtrRef ();_baca .HeaderReference .TypeAttr =t ;_ebde :=_gadd ._begg ._aggd .FindRIDForN (h .Index (),_ffgg .HeaderType );if _ebde ==""{_dbga .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_baca .HeaderReference .IdAttr =_ebde ;};

// Header is a header for a document section.
type Header struct{_edgg *Document ;_afac *_fdcbg .Hdr ;};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_cddg *Document )HasEndnotes ()bool {return _cddg ._bgad !=nil };

// Underline returns the type of run underline.
func (_dccf RunProperties )Underline ()_fdcbg .ST_Underline {if _dfbg :=_dccf ._adde .U ;_dfbg !=nil {return _dfbg .ValAttr ;};return 0;};

// SetOutlineLevel sets the outline level of this style.
func (_abbc ParagraphStyleProperties )SetOutlineLevel (lvl int ){_abbc ._cgce .OutlineLvl =_fdcbg .NewCT_DecimalNumber ();_abbc ._cgce .OutlineLvl .ValAttr =int64 (lvl );};

// SetMultiLevelType sets the multilevel type.
func (_gdee NumberingDefinition )SetMultiLevelType (t _fdcbg .ST_MultiLevelType ){if t ==_fdcbg .ST_MultiLevelTypeUnset {_gdee ._cagfe .MultiLevelType =nil ;}else {_gdee ._cagfe .MultiLevelType =_fdcbg .NewCT_MultiLevelType ();_gdee ._cagfe .MultiLevelType .ValAttr =t ;};};

// Section is the beginning of a new section.
type Section struct{_begg *Document ;_defe *_fdcbg .CT_SectPr ;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_fagf FormField )Value ()string {if _fagf ._cab .TextInput !=nil &&_fagf ._bdff .T !=nil {return _fagf ._bdff .T .Content ;}else if _fagf ._cab .DdList !=nil &&_fagf ._cab .DdList .Result !=nil {_bfba :=_fagf .PossibleValues ();_adbe :=int (_fagf ._cab .DdList .Result .ValAttr );if _adbe < len (_bfba ){return _bfba [_adbe ];};}else if _fagf ._cab .CheckBox !=nil {if _fagf .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// X returns the inner wrapped XML type.
func (_edb Footnote )X ()*_fdcbg .CT_FtnEdn {return _edb ._eegd };func (_fad Footnote )id ()int64 {return _fad ._eegd .IdAttr };

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_afca ParagraphProperties )AddTabStop (position _ff .Distance ,justificaton _fdcbg .ST_TabJc ,leader _fdcbg .ST_TabTlc ){if _afca ._bae .Tabs ==nil {_afca ._bae .Tabs =_fdcbg .NewCT_Tabs ();};_aef :=_fdcbg .NewCT_TabStop ();_aef .LeaderAttr =leader ;_aef .ValAttr =justificaton ;_aef .PosAttr .Int64 =_ffgg .Int64 (int64 (position /_ff .Twips ));_afca ._bae .Tabs .Tab =append (_afca ._bae .Tabs .Tab ,_aef );};

// AddTabStop adds a tab stop to the paragraph.
func (_bbbe ParagraphStyleProperties )AddTabStop (position _ff .Distance ,justificaton _fdcbg .ST_TabJc ,leader _fdcbg .ST_TabTlc ){if _bbbe ._cgce .Tabs ==nil {_bbbe ._cgce .Tabs =_fdcbg .NewCT_Tabs ();};_eaec :=_fdcbg .NewCT_TabStop ();_eaec .LeaderAttr =leader ;_eaec .ValAttr =justificaton ;_eaec .PosAttr .Int64 =_ffgg .Int64 (int64 (position /_ff .Twips ));_bbbe ._cgce .Tabs .Tab =append (_bbbe ._cgce .Tabs .Tab ,_eaec );};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_dbg InlineDrawing )GetImage ()(_dfge .ImageRef ,bool ){_cbbf :=_dbg ._cga .Graphic .GraphicData .Any ;if len (_cbbf )> 0{_fbg ,_cdcb :=_cbbf [0].(*_egd .Pic );if _cdcb {if _fbg .BlipFill !=nil &&_fbg .BlipFill .Blip !=nil &&_fbg .BlipFill .Blip .EmbedAttr !=nil {return _dbg ._acg .GetImageByRelID (*_fbg .BlipFill .Blip .EmbedAttr );};};};return _dfge .ImageRef {},false ;};

// New constructs an empty document that content can be added to.
func New ()*Document {_aea :=&Document {_begc :_fdcbg .NewDocument ()};_aea .ContentTypes =_dfge .NewContentTypes ();_aea ._begc .Body =_fdcbg .NewCT_Body ();_aea ._begc .ConformanceAttr =_bcff .ST_ConformanceClassTransitional ;_aea ._aggd =_dfge .NewRelationships ();_aea .AppProperties =_dfge .NewAppProperties ();_aea .CoreProperties =_dfge .NewCoreProperties ();_aea .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_aea .Settings =NewSettings ();_aea ._aggd .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_ffgg .SettingsType );_aea .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_aea .Rels =_dfge .NewRelationships ();_aea .Rels .AddRelationship (_ffgg .RelativeFilename (_ffgg .DocTypeDocument ,"",_ffgg .CorePropertiesType ,0),_ffgg .CorePropertiesType );_aea .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_ffgg .ExtendedPropertiesType );_aea .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_ffgg .OfficeDocumentType );_aea .Numbering =NewNumbering ();_aea .Numbering .InitializeDefault ();_aea .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_aea ._aggd .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_ffgg .NumberingType );_aea .Styles =NewStyles ();_aea .Styles .InitializeDefault ();_aea .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_aea ._aggd .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_ffgg .StylesType );_aea ._begc .Body =_fdcbg .NewCT_Body ();return _aea ;};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_bbad Paragraph )InsertRunBefore (relativeTo Run )Run {return _bbad .insertRun (relativeTo ,true )};

// RemoveParagraph removes a paragraph from a footer.
func (_aeea Footer )RemoveParagraph (p Paragraph ){for _ ,_fbf :=range _aeea ._fcgb .EG_ContentBlockContent {for _cafc ,_ebd :=range _fbf .P {if _ebd ==p ._gcd {copy (_fbf .P [_cafc :],_fbf .P [_cafc +1:]);_fbf .P =_fbf .P [0:len (_fbf .P )-1];return ;};};};};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_ggdbf *Document )Endnote (id int64 )Endnote {for _ ,_acdb :=range _ggdbf .Endnotes (){if _acdb .id ()==id {return _acdb ;};};return Endnote {};};

// SetHeight allows controlling the height of a row within a table.
func (_dggd RowProperties )SetHeight (ht _ff .Distance ,rule _fdcbg .ST_HeightRule ){if rule ==_fdcbg .ST_HeightRuleUnset {_dggd ._eedec .TrHeight =nil ;}else {_cedd :=_fdcbg .NewCT_Height ();_cedd .HRuleAttr =rule ;_cedd .ValAttr =&_bcff .ST_TwipsMeasure {};_cedd .ValAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (ht /_ff .Twips ));_dggd ._eedec .TrHeight =[]*_fdcbg .CT_Height {_cedd };};};

// SetShadow sets the run to shadowed text.
func (_eddc RunProperties )SetShadow (b bool ){if !b {_eddc ._adde .Shadow =nil ;}else {_eddc ._adde .Shadow =_fdcbg .NewCT_OnOff ();};};

// Tables returns the tables defined in the header.
func (_eaeg Header )Tables ()[]Table {_acea :=[]Table {};if _eaeg ._afac ==nil {return nil ;};for _ ,_ba :=range _eaeg ._afac .EG_ContentBlockContent {for _ ,_bad :=range _eaeg ._edgg .tables (_ba ){_acea =append (_acea ,_bad );};};return _acea ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_cacb TableBorders )SetBottom (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_cacb ._aad .Bottom =_fdcbg .NewCT_Border ();_gcfg (_cacb ._aad .Bottom ,t ,c ,thickness );};

// AddParagraph adds a paragraph to the footer.
func (_dbadc Footer )AddParagraph ()Paragraph {_eaeb :=_fdcbg .NewEG_ContentBlockContent ();_dbadc ._fcgb .EG_ContentBlockContent =append (_dbadc ._fcgb .EG_ContentBlockContent ,_eaeb );_gdca :=_fdcbg .NewCT_P ();_eaeb .P =append (_eaeb .P ,_gdca );return Paragraph {_dbadc ._ccag ,_gdca };};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_fcggg *_fdcbg .CT_TcMar };

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_fdcbg .NewCT_TblWidth ()}};

// UnderlineColor returns the hex color value of run underline.
func (_cebff RunProperties )UnderlineColor ()string {if _gfdbc :=_cebff ._adde .U ;_gfdbc !=nil {_aaa :=_gfdbc .ColorAttr ;if _aaa !=nil &&_aaa .ST_HexColorRGB !=nil {return *_aaa .ST_HexColorRGB ;};};return "";};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_ggeb ParagraphStyleProperties )SetHangingIndent (m _ff .Distance ){if _ggeb ._cgce .Ind ==nil {_ggeb ._cgce .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_ggeb ._cgce .Ind .HangingAttr =nil ;}else {_ggeb ._cgce .Ind .HangingAttr =&_bcff .ST_TwipsMeasure {};_ggeb ._cgce .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (m /_ff .Twips ));};};

// SetStyle sets the font size.
func (_dcaa RunProperties )SetStyle (style string ){if style ==""{_dcaa ._adde .RStyle =nil ;}else {_dcaa ._adde .RStyle =_fdcbg .NewCT_String ();_dcaa ._adde .RStyle .ValAttr =style ;};};

// SetBasedOn sets the style that this style is based on.
func (_bge Style )SetBasedOn (name string ){if name ==""{_bge ._cgcg .BasedOn =nil ;}else {_bge ._cgcg .BasedOn =_fdcbg .NewCT_String ();_bge ._cgcg .BasedOn .ValAttr =name ;};};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_ceef TableLook )SetHorizontalBanding (on bool ){if !on {_ceef ._ecad .NoHBandAttr =&_bcff .ST_OnOff {};_ceef ._ecad .NoHBandAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;}else {_ceef ._ecad .NoHBandAttr =&_bcff .ST_OnOff {};_ceef ._ecad .NoHBandAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_feca ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_feca ._bae .KeepLines =nil ;}else {_feca ._bae .KeepLines =_fdcbg .NewCT_OnOff ();};};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_cdbc AnchoredDrawing )SetHAlignment (h _fdcbg .WdST_AlignH ){_cdbc ._dafb .PositionH .Choice =&_fdcbg .WdCT_PosHChoice {};_cdbc ._dafb .PositionH .Choice .Align =h ;};

// X returns the inner wrapped XML type.
func (_cgc Paragraph )X ()*_fdcbg .CT_P {return _cgc ._gcd };

// SetWidthAuto sets the the cell width to automatic.
func (_ffe CellProperties )SetWidthAuto (){_ffe ._dfa .TcW =_fdcbg .NewCT_TblWidth ();_ffe ._dfa .TcW .TypeAttr =_fdcbg .ST_TblWidthAuto ;};func (_gege FormFieldType )String ()string {if _gege >=FormFieldType (len (_gaea )-1){return _ggab .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gege );};return _abfg [_gaea [_gege ]:_gaea [_gege +1]];};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_cgce *_fdcbg .CT_PPrGeneral };

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_ded ParagraphProperties )SetHangingIndent (m _ff .Distance ){if _ded ._bae .Ind ==nil {_ded ._bae .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_ded ._bae .Ind .HangingAttr =nil ;}else {_ded ._bae .Ind .HangingAttr =&_bcff .ST_TwipsMeasure {};_ded ._bae .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (m /_ff .Twips ));};};

// Outline returns true if paragraph outline is on.
func (_cggba ParagraphProperties )Outline ()bool {return _bgfdb (_cggba ._bae .RPr .Outline )};

// RemoveMailMerge removes any mail merge settings
func (_dage Settings )RemoveMailMerge (){_dage ._egf .MailMerge =nil };

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bgbf RunProperties )SizeMeasure ()string {if _aaaf :=_bgbf ._adde .Sz ;_aaaf !=nil {_fge :=_aaaf .ValAttr ;if _fge .ST_PositiveUniversalMeasure !=nil {return *_fge .ST_PositiveUniversalMeasure ;};};return "";};

// AddParagraph adds a paragraph to the table cell.
func (_bbb Cell )AddParagraph ()Paragraph {_afbe :=_fdcbg .NewEG_BlockLevelElts ();_bbb ._bba .EG_BlockLevelElts =append (_bbb ._bba .EG_BlockLevelElts ,_afbe );_ffg :=_fdcbg .NewEG_ContentBlockContent ();_afbe .EG_ContentBlockContent =append (_afbe .EG_ContentBlockContent ,_ffg );_eabd :=_fdcbg .NewCT_P ();_ffg .P =append (_ffg .P ,_eabd );return Paragraph {_bbb ._ggea ,_eabd };};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dgee Header )AddImage (i _dfge .Image )(_dfge .ImageRef ,error ){var _abea _dfge .Relationships ;for _bgebf ,_dbfe :=range _dgee ._edgg ._abb {if _dbfe ==_dgee ._afac {_abea =_dgee ._edgg ._ddec [_bgebf ];};};_gbcc :=_dfge .MakeImageRef (i ,&_dgee ._edgg .DocBase ,_abea );if i .Data ==nil &&i .Path ==""{return _gbcc ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _gbcc ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _gbcc ,_aaaa .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_dgee ._edgg .Images =append (_dgee ._edgg .Images ,_gbcc );_gfgeb :=_ggab .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_dgee ._edgg .Images ),i .Format );_gab :=_abea .AddRelationship (_gfgeb ,_ffgg .ImageType );_gbcc .SetRelID (_gab .X ().IdAttr );return _gbcc ,nil ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_cccc CellBorders )SetInsideHorizontal (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_cccc ._fa .InsideH =_fdcbg .NewCT_Border ();_gcfg (_cccc ._fa .InsideH ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_aaag ParagraphStyleProperties )X ()*_fdcbg .CT_PPrGeneral {return _aaag ._cgce };

// Properties returns the run properties.
func (_eaa Run )Properties ()RunProperties {if _eaa ._dgf .RPr ==nil {_eaa ._dgf .RPr =_fdcbg .NewCT_RPr ();};return RunProperties {_eaa ._dgf .RPr };};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_cad TableLook )SetLastRow (on bool ){if !on {_cad ._ecad .LastRowAttr =&_bcff .ST_OnOff {};_cad ._ecad .LastRowAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;}else {_cad ._ecad .LastRowAttr =&_bcff .ST_OnOff {};_cad ._ecad .LastRowAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;};};

// Italic returns true if run font is italic.
func (_fgbf RunProperties )Italic ()bool {_eaaeb :=_fgbf ._adde ;return _bgfdb (_eaaeb .I )||_bgfdb (_eaaeb .ICs );};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_fegg *Document )Paragraphs ()[]Paragraph {_baeb :=[]Paragraph {};if _fegg ._begc .Body ==nil {return nil ;};for _ ,_gag :=range _fegg ._begc .Body .EG_BlockLevelElts {for _ ,_eff :=range _gag .EG_ContentBlockContent {for _ ,_dcecc :=range _eff .P {_baeb =append (_baeb ,Paragraph {_fegg ,_dcecc });};};};for _ ,_ffaeb :=range _fegg .Tables (){for _ ,_dcgc :=range _ffaeb .Rows (){for _ ,_ccg :=range _dcgc .Cells (){_baeb =append (_baeb ,_ccg .Paragraphs ()...);};};};return _baeb ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_gfb CellBorders )SetTop (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_gfb ._fa .Top =_fdcbg .NewCT_Border ();_gcfg (_gfb ._fa .Top ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_gdag NumberingDefinition )X ()*_fdcbg .CT_AbstractNum {return _gdag ._cagfe };

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_fdea NumberingDefinition )AbstractNumberID ()int64 {return _fdea ._cagfe .AbstractNumIdAttr };

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_bbee CellProperties )SetColumnSpan (cols int ){if cols ==0{_bbee ._dfa .GridSpan =nil ;}else {_bbee ._dfa .GridSpan =_fdcbg .NewCT_DecimalNumber ();_bbee ._dfa .GridSpan .ValAttr =int64 (cols );};};

// X returns the inner wrapped XML type.
func (_ceab Run )X ()*_fdcbg .CT_R {return _ceab ._dgf };

// SetToolTip sets the tooltip text for a hyperlink.
func (_eacb HyperLink )SetToolTip (text string ){if text ==""{_eacb ._egcc .TooltipAttr =nil ;}else {_eacb ._egcc .TooltipAttr =_ffgg .String (text );};};

// SetStartIndent controls the start indentation.
func (_ca ParagraphProperties )SetStartIndent (m _ff .Distance ){if _ca ._bae .Ind ==nil {_ca ._bae .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_ca ._bae .Ind .StartAttr =nil ;}else {_ca ._bae .Ind .StartAttr =&_fdcbg .ST_SignedTwipsMeasure {};_ca ._bae .Ind .StartAttr .Int64 =_ffgg .Int64 (int64 (m /_ff .Twips ));};};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_fcecc ParagraphSpacing )SetBeforeAuto (b bool ){if b {_fcecc ._ebc .BeforeAutospacingAttr =&_bcff .ST_OnOff {};_fcecc ._ebc .BeforeAutospacingAttr .Bool =_ffgg .Bool (true );}else {_fcecc ._ebc .BeforeAutospacingAttr =nil ;};};

// Shadow returns true if paragraph shadow is on.
func (_fdfbf ParagraphProperties )Shadow ()bool {return _bgfdb (_fdfbf ._bae .RPr .Shadow )};

// Clear clears the styes.
func (_gbae Styles )Clear (){_gbae ._ddg .DocDefaults =nil ;_gbae ._ddg .LatentStyles =nil ;_gbae ._ddg .Style =nil ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_bab Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_bab .ensurePPr ();if _bab ._gcd .PPr .NumPr ==nil {_bab ._gcd .PPr .NumPr =_fdcbg .NewCT_NumPr ();};_bdfd :=_fdcbg .NewCT_DecimalNumber ();_bdfd .ValAttr =int64 (abstractNumberID );_bab ._gcd .PPr .NumPr .NumId =_bdfd ;};

// AddRun adds a run to a paragraph.
func (_dcbbf Paragraph )AddRun ()Run {_degf :=_fdcbg .NewEG_PContent ();_dcbbf ._gcd .EG_PContent =append (_dcbbf ._gcd .EG_PContent ,_degf );_efcg :=_fdcbg .NewEG_ContentRunContent ();_degf .EG_ContentRunContent =append (_degf .EG_ContentRunContent ,_efcg );_cdd :=_fdcbg .NewCT_R ();_efcg .R =_cdd ;return Run {_dcbbf ._fda ,_cdd };};func _bgfdb (_bg *_fdcbg .CT_OnOff )bool {return _bg !=nil };

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_bacdb *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _bacdb .insertParagraph (relativeTo ,false );};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_dceb TableProperties )TableLook ()TableLook {if _dceb ._fecdg .TblLook ==nil {_dceb ._fecdg .TblLook =_fdcbg .NewCT_TblLook ();};return TableLook {_dceb ._fecdg .TblLook };};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_aad *_fdcbg .CT_TblBorders };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bgeb *Document )AddImage (i _dfge .Image )(_dfge .ImageRef ,error ){_edfa :=_dfge .MakeImageRef (i ,&_bgeb .DocBase ,_bgeb ._aggd );if i .Data ==nil &&i .Path ==""{return _edfa ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _edfa ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _edfa ,_aaaa .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_bgeb .Images =append (_bgeb .Images ,_edfa );_cbee :=_ggab .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_bgeb .Images ),i .Format );_bdbg :=_bgeb ._aggd .AddRelationship (_cbee ,_ffgg .ImageType );_bgeb .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bgeb .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bgeb .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bgeb .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_bgeb .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_edfa .SetRelID (_bdbg .X ().IdAttr );return _edfa ,nil ;};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_eade TableStyleProperties )SetTableIndent (ind _ff .Distance ){_eade ._eafbb .TblInd =_fdcbg .NewCT_TblWidth ();_eade ._eafbb .TblInd .TypeAttr =_fdcbg .ST_TblWidthDxa ;_eade ._eafbb .TblInd .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_eade ._eafbb .TblInd .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_eade ._eafbb .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (ind /_ff .Dxa ));};func (_dabb Paragraph )ensurePPr (){if _dabb ._gcd .PPr ==nil {_dabb ._gcd .PPr =_fdcbg .NewCT_PPr ();};};

// Paragraphs returns the paragraphs defined in the cell.
func (_beb Cell )Paragraphs ()[]Paragraph {_agee :=[]Paragraph {};for _ ,_aac :=range _beb ._bba .EG_BlockLevelElts {for _ ,_bafc :=range _aac .EG_ContentBlockContent {for _ ,_fdca :=range _bafc .P {_agee =append (_agee ,Paragraph {_beb ._ggea ,_fdca });};};};return _agee ;};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_fgd Run )IsFootnote ()(bool ,int64 ){if _fgd ._dgf .EG_RunInnerContent !=nil {if _fgd ._dgf .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_fgd ._dgf .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_dagg ParagraphProperties )SizeMeasure ()string {if _bdb :=_dagg ._bae .RPr .Sz ;_bdb !=nil {_fcd :=_bdb .ValAttr ;if _fcd .ST_PositiveUniversalMeasure !=nil {return *_fcd .ST_PositiveUniversalMeasure ;};};return "";};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// SetLeftIndent controls the left indent of the paragraph.
func (_bgce ParagraphStyleProperties )SetLeftIndent (m _ff .Distance ){if _bgce ._cgce .Ind ==nil {_bgce ._cgce .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_bgce ._cgce .Ind .LeftAttr =nil ;}else {_bgce ._cgce .Ind .LeftAttr =&_fdcbg .ST_SignedTwipsMeasure {};_bgce ._cgce .Ind .LeftAttr .Int64 =_ffgg .Int64 (int64 (m /_ff .Twips ));};};

// Levels returns all of the numbering levels defined in the definition.
func (_cba NumberingDefinition )Levels ()[]NumberingLevel {_gfedf :=[]NumberingLevel {};for _ ,_ebcb :=range _cba ._cagfe .Lvl {_gfedf =append (_gfedf ,NumberingLevel {_ebcb });};return _gfedf ;};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_gdcb TableLook )SetFirstRow (on bool ){if !on {_gdcb ._ecad .FirstRowAttr =&_bcff .ST_OnOff {};_gdcb ._ecad .FirstRowAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;}else {_gdcb ._ecad .FirstRowAttr =&_bcff .ST_OnOff {};_gdcb ._ecad .FirstRowAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;};};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_bgfa ParagraphProperties )EastAsiaFont ()string {if _bcdd :=_bgfa ._bae .RPr .RFonts ;_bcdd !=nil {if _bcdd .EastAsiaAttr !=nil {return *_bcdd .EastAsiaAttr ;};};return "";};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// AddTable adds a new table to the document body.
func (_edca *Document )AddTable ()Table {_fcdg :=_fdcbg .NewEG_BlockLevelElts ();_edca ._begc .Body .EG_BlockLevelElts =append (_edca ._begc .Body .EG_BlockLevelElts ,_fcdg );_dfde :=_fdcbg .NewEG_ContentBlockContent ();_fcdg .EG_ContentBlockContent =append (_fcdg .EG_ContentBlockContent ,_dfde );_edgf :=_fdcbg .NewCT_Tbl ();_dfde .Tbl =append (_dfde .Tbl ,_edgf );return Table {_edca ,_edgf };};

// Margins allows controlling individual cell margins.
func (_gga CellProperties )Margins ()CellMargins {if _gga ._dfa .TcMar ==nil {_gga ._dfa .TcMar =_fdcbg .NewCT_TcMar ();};return CellMargins {_gga ._dfa .TcMar };};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_fga ParagraphProperties )RStyle ()string {if _fga ._bae .RPr .RStyle !=nil {return _fga ._bae .RPr .RStyle .ValAttr ;};return "";};

// Rows returns the rows defined in the table.
func (_edcd Table )Rows ()[]Row {_gffc :=[]Row {};for _ ,_cbae :=range _edcd ._d .EG_ContentRowContent {for _ ,_fbbc :=range _cbae .Tr {_gffc =append (_gffc ,Row {_edcd ._bgbb ,_fbbc });};if _cbae .Sdt !=nil &&_cbae .Sdt .SdtContent !=nil {for _ ,_ffdc :=range _cbae .Sdt .SdtContent .Tr {_gffc =append (_gffc ,Row {_edcd ._bgbb ,_ffdc });};};};return _gffc ;};func (_fcda *Document )InsertTableBefore (relativeTo Paragraph )Table {return _fcda .insertTable (relativeTo ,true );};func init (){_cefb ()};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_cbcf :=_fdcbg .NewNumbering ();return Numbering {_cbcf }};

// SetRight sets the right border to a specified type, color and thickness.
func (_gfcf CellBorders )SetRight (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_gfcf ._fa .Right =_fdcbg .NewCT_Border ();_gcfg (_gfcf ._fa .Right ,t ,c ,thickness );};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_gfbf ParagraphProperties )CharacterSpacingValue ()int64 {if _dcfa :=_gfbf ._bae .RPr .Spacing ;_dcfa !=nil {_cebf :=_dcfa .ValAttr ;if _cebf .Int64 !=nil {return *_cebf .Int64 ;};};return int64 (0);};

// SetColor sets the text color.
func (_dda RunProperties )SetColor (c _cagf .Color ){_dda ._adde .Color =_fdcbg .NewCT_Color ();_dda ._adde .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_babf ParagraphProperties )SetKeepWithNext (b bool ){if !b {_babf ._bae .KeepNext =nil ;}else {_babf ._bae .KeepNext =_fdcbg .NewCT_OnOff ();};};

// AddTable adds a table to the table cell.
func (_dfeg Cell )AddTable ()Table {_feec :=_fdcbg .NewEG_BlockLevelElts ();_dfeg ._bba .EG_BlockLevelElts =append (_dfeg ._bba .EG_BlockLevelElts ,_feec );_dfca :=_fdcbg .NewEG_ContentBlockContent ();_feec .EG_ContentBlockContent =append (_feec .EG_ContentBlockContent ,_dfca );_geg :=_fdcbg .NewCT_Tbl ();_dfca .Tbl =append (_dfca .Tbl ,_geg );return Table {_dfeg ._ggea ,_geg };};

// RunProperties returns the run properties controlling text formatting within the table.
func (_cgd TableConditionalFormatting )RunProperties ()RunProperties {if _cgd ._gffd .RPr ==nil {_cgd ._gffd .RPr =_fdcbg .NewCT_RPr ();};return RunProperties {_cgd ._gffd .RPr };};

// SetRightPct sets the cell right margin
func (_gfa CellMargins )SetRightPct (pct float64 ){_gfa ._fcggg .Right =_fdcbg .NewCT_TblWidth ();_gcbeg (_gfa ._fcggg .Right ,pct );};

// SetLeft sets the left border to a specified type, color and thickness.
func (_gee TableBorders )SetLeft (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_gee ._aad .Left =_fdcbg .NewCT_Border ();_gcfg (_gee ._aad .Left ,t ,c ,thickness );};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_baed ParagraphStyleProperties )SetSpacing (before ,after _ff .Distance ){if _baed ._cgce .Spacing ==nil {_baed ._cgce .Spacing =_fdcbg .NewCT_Spacing ();};if before ==_ff .Zero {_baed ._cgce .Spacing .BeforeAttr =nil ;}else {_baed ._cgce .Spacing .BeforeAttr =&_bcff .ST_TwipsMeasure {};_baed ._cgce .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (before /_ff .Twips ));};if after ==_ff .Zero {_baed ._cgce .Spacing .AfterAttr =nil ;}else {_baed ._cgce .Spacing .AfterAttr =&_bcff .ST_TwipsMeasure {};_baed ._cgce .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (after /_ff .Twips ));};};

// RemoveRun removes a child run from a paragraph.
func (_aabf Paragraph )RemoveRun (r Run ){for _ ,_cbc :=range _aabf ._gcd .EG_PContent {for _agf ,_fee :=range _cbc .EG_ContentRunContent {if _fee .R ==r ._dgf {copy (_cbc .EG_ContentRunContent [_agf :],_cbc .EG_ContentRunContent [_agf +1:]);_cbc .EG_ContentRunContent =_cbc .EG_ContentRunContent [0:len (_cbc .EG_ContentRunContent )-1];};if _fee .Sdt !=nil &&_fee .Sdt .SdtContent !=nil {for _baff ,_egce :=range _fee .Sdt .SdtContent .EG_ContentRunContent {if _egce .R ==r ._dgf {copy (_fee .Sdt .SdtContent .EG_ContentRunContent [_baff :],_fee .Sdt .SdtContent .EG_ContentRunContent [_baff +1:]);_fee .Sdt .SdtContent .EG_ContentRunContent =_fee .Sdt .SdtContent .EG_ContentRunContent [0:len (_fee .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// Clear removes all of the content from within a run.
func (_gcb Run )Clear (){_gcb ._dgf .EG_RunInnerContent =nil };

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_gfcc TableProperties )SetCellSpacingAuto (){_gfcc ._fecdg .TblCellSpacing =_fdcbg .NewCT_TblWidth ();_gfcc ._fecdg .TblCellSpacing .TypeAttr =_fdcbg .ST_TblWidthAuto ;};

// X returns the internally wrapped *wml.CT_SectPr.
func (_dcec Section )X ()*_fdcbg .CT_SectPr {return _dcec ._defe };

// SetStyle sets the table style name.
func (_dgfd TableProperties )SetStyle (name string ){if name ==""{_dgfd ._fecdg .TblStyle =nil ;}else {_dgfd ._fecdg .TblStyle =_fdcbg .NewCT_String ();_dgfd ._fecdg .TblStyle .ValAttr =name ;};};func _eegb (_ace string )mergeFieldInfo {_fedd :=[]string {};_ggcg :=_fggf .Buffer {};_ceec :=-1;for _gda ,_gbed :=range _ace {switch _gbed {case ' ':if _ggcg .Len ()!=0{_fedd =append (_fedd ,_ggcg .String ());};_ggcg .Reset ();case '"':if _ceec !=-1{_fedd =append (_fedd ,_ace [_ceec +1:_gda ]);_ceec =-1;}else {_ceec =_gda ;};default:_ggcg .WriteRune (_gbed );};};if _ggcg .Len ()!=0{_fedd =append (_fedd ,_ggcg .String ());};_gc :=mergeFieldInfo {};for _dfcf :=0;_dfcf < len (_fedd )-1;_dfcf ++{_babbb :=_fedd [_dfcf ];switch _babbb {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_gc ._bffg =_fedd [_dfcf +1];_dfcf ++;case "\u005c\u0066":_gc ._gb =_fedd [_dfcf +1];_dfcf ++;case "\u005c\u0062":_gc ._ccgb =_fedd [_dfcf +1];_dfcf ++;case "\u005c\u002a":switch _fedd [_dfcf +1]{case "\u0055\u0070\u0070e\u0072":_gc ._edab =true ;case "\u004c\u006f\u0077e\u0072":_gc ._cgeg =true ;case "\u0043\u0061\u0070\u0073":_gc ._deba =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_gc ._fd =true ;};_dfcf ++;};};return _gc ;};

// RunProperties returns the run style properties.
func (_ecg Style )RunProperties ()RunProperties {if _ecg ._cgcg .RPr ==nil {_ecg ._cgcg .RPr =_fdcbg .NewCT_RPr ();};return RunProperties {_ecg ._cgcg .RPr };};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_fde ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_fde ._cgce .ContextualSpacing =nil ;}else {_fde ._cgce .ContextualSpacing =_fdcbg .NewCT_OnOff ();};};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_dfab Paragraph )SetNumberingLevel (listLevel int ){_dfab .ensurePPr ();if _dfab ._gcd .PPr .NumPr ==nil {_dfab ._gcd .PPr .NumPr =_fdcbg .NewCT_NumPr ();};_caca :=_fdcbg .NewCT_DecimalNumber ();_caca .ValAttr =int64 (listLevel );_dfab ._gcd .PPr .NumPr .Ilvl =_caca ;};

// TableWidth controls width values in table settings.
type TableWidth struct{_baec *_fdcbg .CT_TblWidth };

// X returns the inner wrapped XML type.
func (_fgge TableStyleProperties )X ()*_fdcbg .CT_TblPrBase {return _fgge ._eafbb };

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_dde TableBorders )SetInsideHorizontal (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_dde ._aad .InsideH =_fdcbg .NewCT_Border ();_gcfg (_dde ._aad .InsideH ,t ,c ,thickness );};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_gfdf RunProperties )ComplexSizeMeasure ()string {if _adgc :=_gfdf ._adde .SzCs ;_adgc !=nil {_dfaf :=_adgc .ValAttr ;if _dfaf .ST_PositiveUniversalMeasure !=nil {return *_dfaf .ST_PositiveUniversalMeasure ;};};return "";};

// IsBold returns true if the run has been set to bold.
func (_ccbg RunProperties )IsBold ()bool {return _ccbg .BoldValue ()==OnOffValueOn };

// Name returns the name of the style if set.
func (_abdc Style )Name ()string {if _abdc ._cgcg .Name ==nil {return "";};return _abdc ._cgcg .Name .ValAttr ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_dfge .DocBase ;_begc *_fdcbg .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_abb []*_fdcbg .Hdr ;_ddec []_dfge .Relationships ;_ae []*_fdcbg .Ftr ;_eg []_dfge .Relationships ;_aggd _dfge .Relationships ;_abfgd []*_begd .Theme ;_caf *_fdcbg .WebSettings ;_eddb *_fdcbg .Fonts ;_bgad *_fdcbg .Endnotes ;_ecda *_fdcbg .Footnotes ;};

// Emboss returns true if paragraph emboss is on.
func (_cd ParagraphProperties )Emboss ()bool {return _bgfdb (_cd ._bae .RPr .Emboss )};

// Shadow returns true if run shadow is on.
func (_aec RunProperties )Shadow ()bool {return _bgfdb (_aec ._adde .Shadow )};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_dgaa Run )DrawingAnchored ()[]AnchoredDrawing {_cgge :=[]AnchoredDrawing {};for _ ,_adba :=range _dgaa ._dgf .EG_RunInnerContent {if _adba .Drawing ==nil {continue ;};for _ ,_ggdg :=range _adba .Drawing .Anchor {_cgge =append (_cgge ,AnchoredDrawing {_dgaa ._gdaf ,_ggdg });};};return _cgge ;};

// X returns the inner wrapped XML type.
func (_ggf Footer )X ()*_fdcbg .Ftr {return _ggf ._fcgb };

// SetBold sets the run to bold.
func (_cdaaf RunProperties )SetBold (b bool ){if !b {_cdaaf ._adde .B =nil ;_cdaaf ._adde .BCs =nil ;}else {_cdaaf ._adde .B =_fdcbg .NewCT_OnOff ();_cdaaf ._adde .BCs =_fdcbg .NewCT_OnOff ();};};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_acb Paragraph )RemoveFootnote (id int64 ){_dfag :=_acb ._fda ._ecda ;var _cdga int ;for _cdbe ,_gceg :=range _dfag .CT_Footnotes .Footnote {if _gceg .IdAttr ==id {_cdga =_cdbe ;};};_cdga =0;_dfag .CT_Footnotes .Footnote [_cdga ]=nil ;_dfag .CT_Footnotes .Footnote [_cdga ]=_dfag .CT_Footnotes .Footnote [len (_dfag .CT_Footnotes .Footnote )-1];_dfag .CT_Footnotes .Footnote =_dfag .CT_Footnotes .Footnote [:len (_dfag .CT_Footnotes .Footnote )-1];var _cgfe Run ;for _ ,_badd :=range _acb .Runs (){if _bdaf ,_cfbe :=_badd .IsFootnote ();_bdaf {if _cfbe ==id {_cgfe =_badd ;};};};_acb .RemoveRun (_cgfe );};

// X returns the inner wrapped XML type.
func (_agcg Row )X ()*_fdcbg .CT_Row {return _agcg ._affg };

// X returns the inner wrapped XML type.
func (_dge Header )X ()*_fdcbg .Hdr {return _dge ._afac };

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_bdba AnchoredDrawing )SetAlignment (h _fdcbg .WdST_AlignH ,v _fdcbg .WdST_AlignV ){_bdba .SetHAlignment (h );_bdba .SetVAlignment (v );};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_dcc NumberingLevel )RunProperties ()RunProperties {if _dcc ._bcag .RPr ==nil {_dcc ._bcag .RPr =_fdcbg .NewCT_RPr ();};return RunProperties {_dcc ._bcag .RPr };};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// SetStrikeThrough sets the run to strike-through.
func (_ggge RunProperties )SetStrikeThrough (b bool ){if !b {_ggge ._adde .Strike =nil ;}else {_ggge ._adde .Strike =_fdcbg .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_gafab Fonts )X ()*_fdcbg .CT_Fonts {return _gafab ._bbgg };

// SetPageMargins sets the page margins for a section
func (_bfd Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _ff .Distance ){_dffa :=_fdcbg .NewCT_PageMar ();_dffa .TopAttr .Int64 =_ffgg .Int64 (int64 (top /_ff .Twips ));_dffa .BottomAttr .Int64 =_ffgg .Int64 (int64 (bottom /_ff .Twips ));_dffa .RightAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (right /_ff .Twips ));_dffa .LeftAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (left /_ff .Twips ));_dffa .HeaderAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (header /_ff .Twips ));_dffa .FooterAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (footer /_ff .Twips ));_dffa .GutterAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (gutter /_ff .Twips ));_bfd ._defe .PgMar =_dffa ;};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_gaeb *_fdcbg .CT_Bookmark };

// SetUISortOrder controls the order the style is displayed in the UI.
func (_fbfc Style )SetUISortOrder (order int ){_fbfc ._cgcg .UiPriority =_fdcbg .NewCT_DecimalNumber ();_fbfc ._cgcg .UiPriority .ValAttr =int64 (order );};

// SetLeftPct sets the cell left margin
func (_caaf CellMargins )SetLeftPct (pct float64 ){_caaf ._fcggg .Left =_fdcbg .NewCT_TblWidth ();_gcbeg (_caaf ._fcggg .Left ,pct );};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_fecdf AnchoredDrawing )SetOrigin (h _fdcbg .WdST_RelFromH ,v _fdcbg .WdST_RelFromV ){_fecdf ._dafb .PositionH .RelativeFromAttr =h ;_fecdf ._dafb .PositionV .RelativeFromAttr =v ;};

// SetThemeShade sets the shade based off the theme color.
func (_egea Color )SetThemeShade (s uint8 ){_dcga :=_ggab .Sprintf ("\u0025\u0030\u0032\u0078",s );_egea ._bfdf .ThemeShadeAttr =&_dcga ;};

// Font returns the name of run font family.
func (_bcdb RunProperties )Font ()string {if _gbbe :=_bcdb ._adde .RFonts ;_gbbe !=nil {if _gbbe .AsciiAttr !=nil {return *_gbbe .AsciiAttr ;}else if _gbbe .HAnsiAttr !=nil {return *_gbbe .HAnsiAttr ;}else if _gbbe .CsAttr !=nil {return *_gbbe .CsAttr ;};};return "";};

// SetThemeColor sets the color from the theme.
func (_bcdc Color )SetThemeColor (t _fdcbg .ST_ThemeColor ){_bcdc ._bfdf .ThemeColorAttr =t };

// Emboss returns true if run emboss is on.
func (_afgb RunProperties )Emboss ()bool {return _bgfdb (_afgb ._adde .Emboss )};

// GetColor returns the color.Color object representing the run color.
func (_baddg ParagraphProperties )GetColor ()_cagf .Color {if _fceae :=_baddg ._bae .RPr .Color ;_fceae !=nil {_dff :=_fceae .ValAttr ;if _dff .ST_HexColorRGB !=nil {return _cagf .FromHex (*_dff .ST_HexColorRGB );};};return _cagf .Color {};};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_ccd *Document )Validate ()error {if _ccd ==nil ||_ccd ._begc ==nil {return _aaaa .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_fdgc :=range []func ()error {_ccd .validateTableCells ,_ccd .validateBookmarks }{if _bde :=_fdgc ();_bde !=nil {return _bde ;};};if _ebac :=_ccd ._begc .Validate ();_ebac !=nil {return _ebac ;};return nil ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_ed TableStyleProperties )SetCellSpacingAuto (){_ed ._eafbb .TblCellSpacing =_fdcbg .NewCT_TblWidth ();_ed ._eafbb .TblCellSpacing .TypeAttr =_fdcbg .ST_TblWidthAuto ;};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_cefc TableProperties )SetLayout (l _fdcbg .ST_TblLayoutType ){if l ==_fdcbg .ST_TblLayoutTypeUnset ||l ==_fdcbg .ST_TblLayoutTypeAutofit {_cefc ._fecdg .TblLayout =nil ;}else {_cefc ._fecdg .TblLayout =_fdcbg .NewCT_TblLayoutType ();_cefc ._fecdg .TblLayout .TypeAttr =l ;};};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_bfgf NumberingDefinition )MultiLevelType ()_fdcbg .ST_MultiLevelType {if _bfgf ._cagfe .MultiLevelType !=nil {return _bfgf ._cagfe .MultiLevelType .ValAttr ;}else {return _fdcbg .ST_MultiLevelTypeUnset ;};};func (_cebd *Document )InsertTableAfter (relativeTo Paragraph )Table {return _cebd .insertTable (relativeTo ,false );};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_bgdb ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_bgdb ._cgce .KeepLines =nil ;}else {_bgdb ._cgce .KeepLines =_fdcbg .NewCT_OnOff ();};};

// SetSemiHidden controls if the style is hidden in the UI.
func (_bfbed Style )SetSemiHidden (b bool ){if b {_bfbed ._cgcg .SemiHidden =_fdcbg .NewCT_OnOff ();}else {_bfbed ._cgcg .SemiHidden =nil ;};};

// Properties returns the paragraph properties.
func (_fbbe Paragraph )Properties ()ParagraphProperties {_fbbe .ensurePPr ();return ParagraphProperties {_fbbe ._fda ,_fbbe ._gcd .PPr };};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_edg Run )AddDrawingInline (img _dfge .ImageRef )(InlineDrawing ,error ){_ffb :=_edg .newIC ();_ffb .Drawing =_fdcbg .NewCT_Drawing ();_cge :=_fdcbg .NewWdInline ();_afcg :=InlineDrawing {_edg ._gdaf ,_cge };_cge .CNvGraphicFramePr =_begd .NewCT_NonVisualGraphicFrameProperties ();_ffb .Drawing .Inline =append (_ffb .Drawing .Inline ,_cge );_cge .Graphic =_begd .NewGraphic ();_cge .Graphic .GraphicData =_begd .NewCT_GraphicalObjectData ();_cge .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_cge .DistTAttr =_ffgg .Uint32 (0);_cge .DistLAttr =_ffgg .Uint32 (0);_cge .DistBAttr =_ffgg .Uint32 (0);_cge .DistRAttr =_ffgg .Uint32 (0);_cge .Extent .CxAttr =int64 (float64 (img .Size ().X *_ff .Pixel72 )/_ff .EMU );_cge .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ff .Pixel72 )/_ff .EMU );_bcdbe :=0x7FFFFFFF&_ffc .Uint32 ();_cge .DocPr .IdAttr =_bcdbe ;_gbe :=_egd .NewPic ();_gbe .NvPicPr .CNvPr .IdAttr =_bcdbe ;_eeea :=img .RelID ();if _eeea ==""{return _afcg ,_aaaa .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_cge .Graphic .GraphicData .Any =append (_cge .Graphic .GraphicData .Any ,_gbe );_gbe .BlipFill =_begd .NewCT_BlipFillProperties ();_gbe .BlipFill .Blip =_begd .NewCT_Blip ();_gbe .BlipFill .Blip .EmbedAttr =&_eeea ;_gbe .BlipFill .Stretch =_begd .NewCT_StretchInfoProperties ();_gbe .BlipFill .Stretch .FillRect =_begd .NewCT_RelativeRect ();_gbe .SpPr =_begd .NewCT_ShapeProperties ();_gbe .SpPr .Xfrm =_begd .NewCT_Transform2D ();_gbe .SpPr .Xfrm .Off =_begd .NewCT_Point2D ();_gbe .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_gbe .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_ffgg .Int64 (0);_gbe .SpPr .Xfrm .Ext =_begd .NewCT_PositiveSize2D ();_gbe .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ff .Point );_gbe .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ff .Point );_gbe .SpPr .PrstGeom =_begd .NewCT_PresetGeometry2D ();_gbe .SpPr .PrstGeom .PrstAttr =_begd .ST_ShapeTypeRect ;return _afcg ,nil ;};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_gced RunProperties )ComplexSizeValue ()float64 {if _egga :=_gced ._adde .SzCs ;_egga !=nil {_bfc :=_egga .ValAttr ;if _bfc .ST_UnsignedDecimalNumber !=nil {return float64 (*_bfc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};func (_gccc Run )newIC ()*_fdcbg .EG_RunInnerContent {_agb :=_fdcbg .NewEG_RunInnerContent ();_gccc ._dgf .EG_RunInnerContent =append (_gccc ._dgf .EG_RunInnerContent ,_agb );return _agb ;};

// X returns the inner wrapped XML type.
func (_edcac ParagraphProperties )X ()*_fdcbg .CT_PPr {return _edcac ._bae };

// X returns the inner wrapped XML type.
func (_gafae TableLook )X ()*_fdcbg .CT_TblLook {return _gafae ._ecad };

// AddParagraph adds a paragraph to the header.
func (_bedg Header )AddParagraph ()Paragraph {_gbef :=_fdcbg .NewEG_ContentBlockContent ();_bedg ._afac .EG_ContentBlockContent =append (_bedg ._afac .EG_ContentBlockContent ,_gbef );_bbdg :=_fdcbg .NewCT_P ();_gbef .P =append (_gbef .P ,_bbdg );return Paragraph {_bedg ._edgg ,_bbdg };};

// InsertRowBefore inserts a row before another row
func (_faegc Table )InsertRowBefore (r Row )Row {for _fgdf ,_ade :=range _faegc ._d .EG_ContentRowContent {if len (_ade .Tr )> 0&&r .X ()==_ade .Tr [0]{_ddca :=_fdcbg .NewEG_ContentRowContent ();_faegc ._d .EG_ContentRowContent =append (_faegc ._d .EG_ContentRowContent ,nil );copy (_faegc ._d .EG_ContentRowContent [_fgdf +1:],_faegc ._d .EG_ContentRowContent [_fgdf :]);_faegc ._d .EG_ContentRowContent [_fgdf ]=_ddca ;_dbcb :=_fdcbg .NewCT_Row ();_ddca .Tr =append (_ddca .Tr ,_dbcb );return Row {_faegc ._bgbb ,_dbcb };};};return _faegc .AddRow ();};

// Paragraph is a paragraph within a document.
type Paragraph struct{_fda *Document ;_gcd *_fdcbg .CT_P ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_dcegf TableBorders )SetInsideVertical (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_dcegf ._aad .InsideV =_fdcbg .NewCT_Border ();_gcfg (_dcegf ._aad .InsideV ,t ,c ,thickness );};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_ggea *Document ;_bba *_fdcbg .CT_Tc ;};func _cefe (_aegc *_fdcbg .EG_ContentBlockContent )[]Bookmark {_cffbd :=[]Bookmark {};for _ ,_aag :=range _aegc .P {for _ ,_dfbcb :=range _aag .EG_PContent {for _ ,_fgdg :=range _dfbcb .EG_ContentRunContent {for _ ,_egceg :=range _fgdg .EG_RunLevelElts {for _ ,_feegf :=range _egceg .EG_RangeMarkupElements {if _feegf .BookmarkStart !=nil {_cffbd =append (_cffbd ,Bookmark {_feegf .BookmarkStart });};};};};};};for _ ,_edcb :=range _aegc .EG_RunLevelElts {for _ ,_fbb :=range _edcb .EG_RangeMarkupElements {if _fbb .BookmarkStart !=nil {_cffbd =append (_cffbd ,Bookmark {_fbb .BookmarkStart });};};};for _ ,_bec :=range _aegc .Tbl {for _ ,_egca :=range _bec .EG_ContentRowContent {for _ ,_ddb :=range _egca .Tr {for _ ,_bbe :=range _ddb .EG_ContentCellContent {for _ ,_baf :=range _bbe .Tc {for _ ,_cbef :=range _baf .EG_BlockLevelElts {for _ ,_cda :=range _cbef .EG_ContentBlockContent {for _ ,_eda :=range _cefe (_cda ){_cffbd =append (_cffbd ,_eda );};};};};};};};};return _cffbd ;};

// SetLeft sets the cell left margin
func (_fgdeb CellMargins )SetLeft (d _ff .Distance ){_fgdeb ._fcggg .Left =_fdcbg .NewCT_TblWidth ();_bgcc (_fgdeb ._fcggg .Left ,d );};

// Tables returns the tables defined in the document.
func (_eed *Document )Tables ()[]Table {_cafcd :=[]Table {};if _eed ._begc .Body ==nil {return nil ;};for _ ,_aeb :=range _eed ._begc .Body .EG_BlockLevelElts {for _ ,_bbf :=range _aeb .EG_ContentBlockContent {for _ ,_fbab :=range _eed .tables (_bbf ){_cafcd =append (_cafcd ,_fbab );};};};return _cafcd ;};

// AddParagraph adds a paragraph to the footnote.
func (_gffe Footnote )AddParagraph ()Paragraph {_ddeg :=_fdcbg .NewEG_ContentBlockContent ();_agg :=len (_gffe ._eegd .EG_BlockLevelElts [0].EG_ContentBlockContent );_gffe ._eegd .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_gffe ._eegd .EG_BlockLevelElts [0].EG_ContentBlockContent ,_ddeg );_cada :=_fdcbg .NewCT_P ();var _cb *_fdcbg .CT_String ;if _agg !=0{_bbgfg :=len (_gffe ._eegd .EG_BlockLevelElts [0].EG_ContentBlockContent [_agg -1].P );_cb =_gffe ._eegd .EG_BlockLevelElts [0].EG_ContentBlockContent [_agg -1].P [_bbgfg -1].PPr .PStyle ;}else {_cb =_fdcbg .NewCT_String ();_cb .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_ddeg .P =append (_ddeg .P ,_cada );_c :=Paragraph {_gffe ._bed ,_cada };_c ._gcd .PPr =_fdcbg .NewCT_PPr ();_c ._gcd .PPr .PStyle =_cb ;_c ._gcd .PPr .RPr =_fdcbg .NewCT_ParaRPr ();return _c ;};

// SetBottomPct sets the cell bottom margin
func (_adbdc CellMargins )SetBottomPct (pct float64 ){_adbdc ._fcggg .Bottom =_fdcbg .NewCT_TblWidth ();_gcbeg (_adbdc ._fcggg .Bottom ,pct );};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_bfdec ,_cgfd :=_ddgee .Open (filename );if _cgfd !=nil {return nil ,_ggab .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cgfd );};defer _bfdec .Close ();_bfgb ,_cgfd :=_ddgee .Stat (filename );if _cgfd !=nil {return nil ,_ggab .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cgfd );};_ =_bfgb ;return Read (_bfdec ,_bfgb .Size ());};

// TableProperties are the properties for a table within a document
type TableProperties struct{_fecdg *_fdcbg .CT_TblPr };

// AddBreak adds a line break to a run.
func (_acab Run )AddBreak (){_dbgg :=_acab .newIC ();_dbgg .Br =_fdcbg .NewCT_Br ()};

// Cells returns the cells defined in the table.
func (_edad Row )Cells ()[]Cell {_fagg :=[]Cell {};for _ ,_ecgg :=range _edad ._affg .EG_ContentCellContent {for _ ,_afaf :=range _ecgg .Tc {_fagg =append (_fagg ,Cell {_edad ._dgg ,_afaf });};if _ecgg .Sdt !=nil &&_ecgg .Sdt .SdtContent !=nil {for _ ,_afdf :=range _ecgg .Sdt .SdtContent .Tc {_fagg =append (_fagg ,Cell {_edad ._dgg ,_afdf });};};};return _fagg ;};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_ccb RunProperties )CharacterSpacingValue ()int64 {if _edgb :=_ccb ._adde .Spacing ;_edgb !=nil {_cccb :=_edgb .ValAttr ;if _cccb .Int64 !=nil {return *_cccb .Int64 ;};};return int64 (0);};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_fabd Run )ClearContent (){_fabd ._dgf .EG_RunInnerContent =nil };

// AddRow adds a row to a table.
func (_acac Table )AddRow ()Row {_bcb :=_fdcbg .NewEG_ContentRowContent ();_acac ._d .EG_ContentRowContent =append (_acac ._d .EG_ContentRowContent ,_bcb );_fgag :=_fdcbg .NewCT_Row ();_bcb .Tr =append (_bcb .Tr ,_fgag );return Row {_acac ._bgbb ,_fgag };};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_gcbc ,_feega :=Open (filename );if _feega !=nil {return nil ,_feega ;};_gcbc ._begc .Body =_fdcbg .NewCT_Body ();return _gcbc ,nil ;};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_bdag Style )SetUnhideWhenUsed (b bool ){if b {_bdag ._cgcg .UnhideWhenUsed =_fdcbg .NewCT_OnOff ();}else {_bdag ._cgcg .UnhideWhenUsed =nil ;};};

// X returns the inner wrapped XML type.
func (_ab Cell )X ()*_fdcbg .CT_Tc {return _ab ._bba };

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_bffc Run )IsEndnote ()(bool ,int64 ){if _bffc ._dgf .EG_RunInnerContent !=nil {if _bffc ._dgf .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_bffc ._dgf .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};

// RemoveParagraph removes a paragraph from a footer.
func (_gbd Header )RemoveParagraph (p Paragraph ){for _ ,_ffa :=range _gbd ._afac .EG_ContentBlockContent {for _bfa ,_gde :=range _ffa .P {if _gde ==p ._gcd {copy (_ffa .P [_bfa :],_ffa .P [_bfa +1:]);_ffa .P =_ffa .P [0:len (_ffa .P )-1];return ;};};};};

// SetKerning sets the run's font kerning.
func (_ede RunProperties )SetKerning (size _ff .Distance ){_ede ._adde .Kern =_fdcbg .NewCT_HpsMeasure ();_ede ._adde .Kern .ValAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (size /_ff .HalfPoint ));};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_ebc *_fdcbg .CT_Spacing };

// SetShading controls the cell shading.
func (_cegfg CellProperties )SetShading (shd _fdcbg .ST_Shd ,foreground ,fill _cagf .Color ){if shd ==_fdcbg .ST_ShdUnset {_cegfg ._dfa .Shd =nil ;}else {_cegfg ._dfa .Shd =_fdcbg .NewCT_Shd ();_cegfg ._dfa .Shd .ValAttr =shd ;_cegfg ._dfa .Shd .ColorAttr =&_fdcbg .ST_HexColor {};if foreground .IsAuto (){_cegfg ._dfa .Shd .ColorAttr .ST_HexColorAuto =_fdcbg .ST_HexColorAutoAuto ;}else {_cegfg ._dfa .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_cegfg ._dfa .Shd .FillAttr =&_fdcbg .ST_HexColor {};if fill .IsAuto (){_cegfg ._dfa .Shd .FillAttr .ST_HexColorAuto =_fdcbg .ST_HexColorAutoAuto ;}else {_cegfg ._dfa .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to dispay on a separate page.
func (_ggba ParagraphProperties )SetWindowControl (b bool ){if !b {_ggba ._bae .WidowControl =nil ;}else {_ggba ._bae .WidowControl =_fdcbg .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_gade Style )X ()*_fdcbg .CT_Style {return _gade ._cgcg };

// SetRowBandSize sets the number of Rows in the row band
func (_fdfd TableStyleProperties )SetRowBandSize (rows int64 ){_fdfd ._eafbb .TblStyleRowBandSize =_fdcbg .NewCT_DecimalNumber ();_fdfd ._eafbb .TblStyleRowBandSize .ValAttr =rows ;};

// InsertRowAfter inserts a row after another row
func (_aabfc Table )InsertRowAfter (r Row )Row {for _ece ,_faac :=range _aabfc ._d .EG_ContentRowContent {if len (_faac .Tr )> 0&&r .X ()==_faac .Tr [0]{_dbf :=_fdcbg .NewEG_ContentRowContent ();if len (_aabfc ._d .EG_ContentRowContent )<=_ece +2{return _aabfc .AddRow ();};_aabfc ._d .EG_ContentRowContent =append (_aabfc ._d .EG_ContentRowContent ,nil );copy (_aabfc ._d .EG_ContentRowContent [_ece +2:],_aabfc ._d .EG_ContentRowContent [_ece +1:]);_aabfc ._d .EG_ContentRowContent [_ece +1]=_dbf ;_deb :=_fdcbg .NewCT_Row ();_dbf .Tr =append (_dbf .Tr ,_deb );return Row {_aabfc ._bgbb ,_deb };};};return _aabfc .AddRow ();};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_ecad *_fdcbg .CT_TblLook };

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_aegb Document )SetConformance (conformanceAttr _bcff .ST_ConformanceClass ){_aegb ._begc .ConformanceAttr =conformanceAttr ;};

// Clear clears all content within a footer
func (_dgea Footer )Clear (){_dgea ._fcgb .EG_ContentBlockContent =nil };

// TableProperties returns the table style properties.
func (_fcb Style )TableProperties ()TableStyleProperties {if _fcb ._cgcg .TblPr ==nil {_fcb ._cgcg .TblPr =_fdcbg .NewCT_TblPrBase ();};return TableStyleProperties {_fcb ._cgcg .TblPr };};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_cdff AnchoredDrawing )SetTextWrapSquare (t _fdcbg .WdST_WrapText ){_cdff ._dafb .Choice =&_fdcbg .WdEG_WrapTypeChoice {};_cdff ._dafb .Choice .WrapSquare =_fdcbg .NewWdCT_WrapSquare ();_cdff ._dafb .Choice .WrapSquare .WrapTextAttr =t ;};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_afd RunProperties )SetFontFamily (family string ){if _afd ._adde .RFonts ==nil {_afd ._adde .RFonts =_fdcbg .NewCT_Fonts ();};_afd ._adde .RFonts .AsciiAttr =_ffgg .String (family );_afd ._adde .RFonts .HAnsiAttr =_ffgg .String (family );_afd ._adde .RFonts .EastAsiaAttr =_ffgg .String (family );};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_afeab Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_ccbc :=_afeab .newIC ();_ccbc .FldChar =_fdcbg .NewCT_FldChar ();_ccbc .FldChar .FldCharTypeAttr =_fdcbg .ST_FldCharTypeBegin ;if isDirty {_ccbc .FldChar .DirtyAttr =&_bcff .ST_OnOff {};_ccbc .FldChar .DirtyAttr .Bool =_ffgg .Bool (true );};_ccbc =_afeab .newIC ();_ccbc .InstrText =_fdcbg .NewCT_Text ();if fmt !=""{_ccbc .InstrText .Content =code +"\u0020"+fmt ;}else {_ccbc .InstrText .Content =code ;};_ccbc =_afeab .newIC ();_ccbc .FldChar =_fdcbg .NewCT_FldChar ();_ccbc .FldChar .FldCharTypeAttr =_fdcbg .ST_FldCharTypeEnd ;};

// GetColor returns the color.Color object representing the run color.
func (_feg RunProperties )GetColor ()_cagf .Color {if _ggabec :=_feg ._adde .Color ;_ggabec !=nil {_dcfg :=_ggabec .ValAttr ;if _dcfg .ST_HexColorRGB !=nil {return _cagf .FromHex (*_dcfg .ST_HexColorRGB );};};return _cagf .Color {};};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_dfdf Bookmark )SetName (name string ){_dfdf ._gaeb .NameAttr =name };

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_cc RunProperties )ItalicValue ()OnOffValue {return _ead (_cc ._adde .I )};

// Paragraphs returns the paragraphs within a structured document tag.
func (_ffdd StructuredDocumentTag )Paragraphs ()[]Paragraph {if _ffdd ._bd .SdtContent ==nil {return nil ;};_aabg :=[]Paragraph {};for _ ,_ggec :=range _ffdd ._bd .SdtContent .P {_aabg =append (_aabg ,Paragraph {_ffdd ._cdb ,_ggec });};return _aabg ;};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_cef *Document ;_fgdc *_fdcbg .CT_FtnEdn ;};

// Tables returns the tables defined in the footer.
func (_faeg Footer )Tables ()[]Table {_gcbf :=[]Table {};if _faeg ._fcgb ==nil {return nil ;};for _ ,_fedb :=range _faeg ._fcgb .EG_ContentBlockContent {for _ ,_bbgb :=range _faeg ._ccag .tables (_fedb ){_gcbf =append (_gcbf ,_bbgb );};};return _gcbf ;};

// DoubleStrike returns true if run is double striked.
func (_caddg RunProperties )DoubleStrike ()bool {return _bgfdb (_caddg ._adde .Dstrike )};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_acg *Document ;_cga *_fdcbg .WdInline ;};

// SetImprint sets the run to imprinted text.
func (_cbda RunProperties )SetImprint (b bool ){if !b {_cbda ._adde .Imprint =nil ;}else {_cbda ._adde .Imprint =_fdcbg .NewCT_OnOff ();};};

// SetWidthAuto sets the the table width to automatic.
func (_edd TableProperties )SetWidthAuto (){_edd ._fecdg .TblW =_fdcbg .NewCT_TblWidth ();_edd ._fecdg .TblW .TypeAttr =_fdcbg .ST_TblWidthAuto ;};func (_gdb *Document )validateBookmarks ()error {_gcbg :=make (map[string ]struct{});for _ ,_cea :=range _gdb .Bookmarks (){if _ ,_acff :=_gcbg [_cea .Name ()];_acff {return _ggab .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_cea .Name ());};_gcbg [_cea .Name ()]=struct{}{};};return nil ;};

// Table is a table within a document.
type Table struct{_bgbb *Document ;_d *_fdcbg .CT_Tbl ;};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// SetFooter sets a section footer.
func (_cac Section )SetFooter (f Footer ,t _fdcbg .ST_HdrFtr ){_fgde :=_fdcbg .NewEG_HdrFtrReferences ();_cac ._defe .EG_HdrFtrReferences =append (_cac ._defe .EG_HdrFtrReferences ,_fgde );_fgde .FooterReference =_fdcbg .NewCT_HdrFtrRef ();_fgde .FooterReference .TypeAttr =t ;_cgf :=_cac ._begg ._aggd .FindRIDForN (f .Index (),_ffgg .FooterType );if _cgf ==""{_dbga .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_fgde .FooterReference .IdAttr =_cgf ;};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_agec Paragraph )Style ()string {if _agec ._gcd .PPr !=nil &&_agec ._gcd .PPr .PStyle !=nil {return _agec ._gcd .PPr .PStyle .ValAttr ;};return "";};

// AddParagraph adds a paragraph to the endnote.
func (_gge Endnote )AddParagraph ()Paragraph {_gcbe :=_fdcbg .NewEG_ContentBlockContent ();_eac :=len (_gge ._fgdc .EG_BlockLevelElts [0].EG_ContentBlockContent );_gge ._fgdc .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_gge ._fgdc .EG_BlockLevelElts [0].EG_ContentBlockContent ,_gcbe );_cadd :=_fdcbg .NewCT_P ();var _gcga *_fdcbg .CT_String ;if _eac !=0{_eebe :=len (_gge ._fgdc .EG_BlockLevelElts [0].EG_ContentBlockContent [_eac -1].P );_gcga =_gge ._fgdc .EG_BlockLevelElts [0].EG_ContentBlockContent [_eac -1].P [_eebe -1].PPr .PStyle ;}else {_gcga =_fdcbg .NewCT_String ();_gcga .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_gcbe .P =append (_gcbe .P ,_cadd );_aedb :=Paragraph {_gge ._cef ,_cadd };_aedb ._gcd .PPr =_fdcbg .NewCT_PPr ();_aedb ._gcd .PPr .PStyle =_gcga ;_aedb ._gcd .PPr .RPr =_fdcbg .NewCT_ParaRPr ();return _aedb ;};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_cbdf *Document ;_bae *_fdcbg .CT_PPr ;};

// SetCellSpacing sets the cell spacing within a table.
func (_abfb TableProperties )SetCellSpacing (m _ff .Distance ){_abfb ._fecdg .TblCellSpacing =_fdcbg .NewCT_TblWidth ();_abfb ._fecdg .TblCellSpacing .TypeAttr =_fdcbg .ST_TblWidthDxa ;_abfb ._fecdg .TblCellSpacing .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_abfb ._fecdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_abfb ._fecdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (m /_ff .Dxa ));};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_bbgg *_fdcbg .CT_Fonts };

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_eefc Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_eefc ._egf .UpdateFields =nil ;}else {_eefc ._egf .UpdateFields =_fdcbg .NewCT_OnOff ();};};

// Paragraphs returns the paragraphs defined in a footnote.
func (_fbcd Footnote )Paragraphs ()[]Paragraph {_edde :=[]Paragraph {};for _ ,_bbdc :=range _fbcd .content (){for _ ,_caad :=range _bbdc .P {_edde =append (_edde ,Paragraph {_fbcd ._bed ,_caad });};};return _edde ;};

// RunProperties controls run styling properties
type RunProperties struct{_adde *_fdcbg .CT_RPr };

// RightToLeft returns true if run text goes from right to left.
func (_acbb RunProperties )RightToLeft ()bool {return _bgfdb (_acbb ._adde .Rtl )};

// X returns the inner wrapped XML type.
func (_bfde TableConditionalFormatting )X ()*_fdcbg .CT_TblStylePr {return _bfde ._gffd };func _gcbeg (_ffdf *_fdcbg .CT_TblWidth ,_gcf float64 ){_ffdf .TypeAttr =_fdcbg .ST_TblWidthPct ;_ffdf .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_ffdf .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_ffdf .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (_gcf *50));};

// SetStart sets the cell start margin
func (_cf CellMargins )SetStart (d _ff .Distance ){_cf ._fcggg .Start =_fdcbg .NewCT_TblWidth ();_bgcc (_cf ._fcggg .Start ,d );};

// RemoveParagraph removes a paragraph from the footnote.
func (_ce Footnote )RemoveParagraph (p Paragraph ){for _ ,_cde :=range _ce .content (){for _gece ,_ggaf :=range _cde .P {if _ggaf ==p ._gcd {copy (_cde .P [_gece :],_cde .P [_gece +1:]);_cde .P =_cde .P [0:len (_cde .P )-1];return ;};};};};

// X returns the inner wrapped XML type.
func (_fecb TableWidth )X ()*_fdcbg .CT_TblWidth {return _fecb ._baec };

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_fdcbg .NewStyles ()}};

// EastAsiaFont returns the name of run font family for East Asia.
func (_eeb RunProperties )EastAsiaFont ()string {if _eefa :=_eeb ._adde .RFonts ;_eefa !=nil {if _eefa .EastAsiaAttr !=nil {return *_eefa .EastAsiaAttr ;};};return "";};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_fbce *Document )AddHeader ()Header {_fbae :=_fdcbg .NewHdr ();_fbce ._abb =append (_fbce ._abb ,_fbae );_cced :=_ggab .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_fbce ._abb ));_fbce ._aggd .AddRelationship (_cced ,_ffgg .HeaderType );_fbce .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cced ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_fbce ._ddec =append (_fbce ._ddec ,_dfge .NewRelationships ());return Header {_fbce ,_fbae };};

// SetStartPct sets the cell start margin
func (_eeed CellMargins )SetStartPct (pct float64 ){_eeed ._fcggg .Start =_fdcbg .NewCT_TblWidth ();_gcbeg (_eeed ._fcggg .Start ,pct );};

// SetSize sets the size of the displayed image on the page.
func (_dfef AnchoredDrawing )SetSize (w ,h _ff .Distance ){_dfef ._dafb .Extent .CxAttr =int64 (float64 (w *_ff .Pixel72 )/_ff .EMU );_dfef ._dafb .Extent .CyAttr =int64 (float64 (h *_ff .Pixel72 )/_ff .EMU );};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_ccbe ParagraphProperties )CharacterSpacingMeasure ()string {if _be :=_ccbe ._bae .RPr .Spacing ;_be !=nil {_eaae :=_be .ValAttr ;if _eaae .ST_UniversalMeasure !=nil {return *_eaae .ST_UniversalMeasure ;};};return "";};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_cffg *Document )MailMerge (mergeContent map[string ]string ){_afge :=_cffg .mergeFields ();_fgf :=map[Paragraph ][]Run {};for _ ,_gdeb :=range _afge {_ea ,_efge :=mergeContent [_gdeb ._bffg ];if _efge {if _gdeb ._edab {_ea =_aedca .ToUpper (_ea );}else if _gdeb ._cgeg {_ea =_aedca .ToLower (_ea );}else if _gdeb ._deba {_ea =_aedca .Title (_ea );}else if _gdeb ._fd {_deg :=_fggf .Buffer {};for _caef ,_gccf :=range _ea {if _caef ==0{_deg .WriteRune (_ee .ToUpper (_gccf ));}else {_deg .WriteRune (_gccf );};};_ea =_deg .String ();};if _ea !=""&&_gdeb ._ccgb !=""{_ea =_gdeb ._ccgb +_ea ;};if _ea !=""&&_gdeb ._gb !=""{_ea =_ea +_gdeb ._gb ;};};if _gdeb ._ddf {if len (_gdeb ._beef .FldSimple )==1&&len (_gdeb ._beef .FldSimple [0].EG_PContent )==1&&len (_gdeb ._beef .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_fegd :=&_fdcbg .EG_ContentRunContent {};_fegd .R =_gdeb ._beef .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_gdeb ._beef .FldSimple =nil ;_gfed :=Run {_cffg ,_fegd .R };_gfed .ClearContent ();_gfed .AddText (_ea );_gdeb ._beef .EG_ContentRunContent =append (_gdeb ._beef .EG_ContentRunContent ,_fegd );};}else {_bgca :=_gdeb ._af .Runs ();for _dcce :=_gdeb ._dffd ;_dcce <=_gdeb ._ecdf ;_dcce ++{if _dcce ==_gdeb ._cfca +1{_bgca [_dcce ].ClearContent ();_bgca [_dcce ].AddText (_ea );}else {_fgf [_gdeb ._af ]=append (_fgf [_gdeb ._af ],_bgca [_dcce ]);};};};};for _fedc ,_gfcg :=range _fgf {for _ ,_fdcd :=range _gfcg {_fedc .RemoveRun (_fdcd );};};_cffg .Settings .RemoveMailMerge ();};

// SetWidth sets the table with to a specified width.
func (_cbgfa TableProperties )SetWidth (d _ff .Distance ){_cbgfa ._fecdg .TblW =_fdcbg .NewCT_TblWidth ();_cbgfa ._fecdg .TblW .TypeAttr =_fdcbg .ST_TblWidthDxa ;_cbgfa ._fecdg .TblW .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_cbgfa ._fecdg .TblW .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_cbgfa ._fecdg .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (d /_ff .Twips ));};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_ebec Bookmark )Name ()string {return _ebec ._gaeb .NameAttr };

// AddText adds tet to a run.
func (_bff Run )AddText (s string ){_bag :=_fdcbg .NewEG_RunInnerContent ();_bff ._dgf .EG_RunInnerContent =append (_bff ._dgf .EG_RunInnerContent ,_bag );_bag .T =_fdcbg .NewCT_Text ();if _ffgg .NeedsSpacePreserve (s ){_agbb :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_bag .T .SpaceAttr =&_agbb ;};_bag .T .Content =s ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_dab ParagraphProperties )SetSpacing (before ,after _ff .Distance ){if _dab ._bae .Spacing ==nil {_dab ._bae .Spacing =_fdcbg .NewCT_Spacing ();};_dab ._bae .Spacing .BeforeAttr =&_bcff .ST_TwipsMeasure {};_dab ._bae .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (before /_ff .Twips ));_dab ._bae .Spacing .AfterAttr =&_bcff .ST_TwipsMeasure {};_dab ._bae .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (after /_ff .Twips ));};

// Styles returns all styles.
func (_gbbb Styles )Styles ()[]Style {_ecge :=[]Style {};for _ ,_dee :=range _gbbb ._ddg .Style {_ecge =append (_ecge ,Style {_dee });};return _ecge ;};

// Save writes the document to an io.Writer in the Zip package format.
func (_ebga *Document )Save (w _dgfe .Writer )error {if _gcc :=_ebga ._begc .Validate ();_gcc !=nil {_ffgg .Log ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_gcc );};_abce :=_ffgg .DocTypeDocument ;if !_ccgf .GetLicenseKey ().IsLicensed ()&&!_baaa {_ggab .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_ggab .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _aaaa .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_afea :=_fcec .NewWriter (w );defer _afea .Close ();if _fec :=_gbac .MarshalXML (_afea ,_ffgg .BaseRelsFilename ,_ebga .Rels .X ());_fec !=nil {return _fec ;};if _ceb :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .ExtendedPropertiesType ,_ebga .AppProperties .X ());_ceb !=nil {return _ceb ;};if _eeec :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .CorePropertiesType ,_ebga .CoreProperties .X ());_eeec !=nil {return _eeec ;};if _ebga .CustomProperties .X ()!=nil {if _cggb :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .CustomPropertiesType ,_ebga .CustomProperties .X ());_cggb !=nil {return _cggb ;};};if _ebga .Thumbnail !=nil {_gfab ,_bdf :=_afea .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _bdf !=nil {return _bdf ;};if _eebc :=_adg .Encode (_gfab ,_ebga .Thumbnail ,nil );_eebc !=nil {return _eebc ;};};if _bacd :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .SettingsType ,_ebga .Settings .X ());_bacd !=nil {return _bacd ;};_dbee :=_ffgg .AbsoluteFilename (_abce ,_ffgg .OfficeDocumentType ,0);if _fae :=_gbac .MarshalXML (_afea ,_dbee ,_ebga ._begc );_fae !=nil {return _fae ;};if _fadf :=_gbac .MarshalXML (_afea ,_gbac .RelationsPathFor (_dbee ),_ebga ._aggd .X ());_fadf !=nil {return _fadf ;};if _ebga .Numbering .X ()!=nil {if _agfg :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .NumberingType ,_ebga .Numbering .X ());_agfg !=nil {return _agfg ;};};if _dgd :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .StylesType ,_ebga .Styles .X ());_dgd !=nil {return _dgd ;};if _ebga ._caf !=nil {if _aaf :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .WebSettingsType ,_ebga ._caf );_aaf !=nil {return _aaf ;};};if _ebga ._eddb !=nil {if _bdg :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .FontTableType ,_ebga ._eddb );_bdg !=nil {return _bdg ;};};if _ebga ._bgad !=nil {if _egg :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .EndNotesType ,_ebga ._bgad );_egg !=nil {return _egg ;};};if _ebga ._ecda !=nil {if _gae :=_gbac .MarshalXMLByType (_afea ,_abce ,_ffgg .FootNotesType ,_ebga ._ecda );_gae !=nil {return _gae ;};};for _bgfd ,_bbagd :=range _ebga ._abfgd {if _bgdc :=_gbac .MarshalXMLByTypeIndex (_afea ,_abce ,_ffgg .ThemeType ,_bgfd +1,_bbagd );_bgdc !=nil {return _bgdc ;};};for _ecd ,_da :=range _ebga ._abb {_eccf :=_ffgg .AbsoluteFilename (_abce ,_ffgg .HeaderType ,_ecd +1);if _ceg :=_gbac .MarshalXML (_afea ,_eccf ,_da );_ceg !=nil {return _ceg ;};if !_ebga ._ddec [_ecd ].IsEmpty (){_gbac .MarshalXML (_afea ,_gbac .RelationsPathFor (_eccf ),_ebga ._ddec [_ecd ].X ());};};for _ddga ,_bcagf :=range _ebga ._ae {_afe :=_ffgg .AbsoluteFilename (_abce ,_ffgg .FooterType ,_ddga +1);if _gbfec :=_gbac .MarshalXMLByTypeIndex (_afea ,_abce ,_ffgg .FooterType ,_ddga +1,_bcagf );_gbfec !=nil {return _gbfec ;};if !_ebga ._eg [_ddga ].IsEmpty (){_gbac .MarshalXML (_afea ,_gbac .RelationsPathFor (_afe ),_ebga ._eg [_ddga ].X ());};};for _gefa ,_cbgg :=range _ebga .Images {if _gaag :=_dfge .AddImageToZip (_afea ,_cbgg ,_gefa +1,_ffgg .DocTypeDocument );_gaag !=nil {return _gaag ;};};if _dgec :=_gbac .MarshalXML (_afea ,_ffgg .ContentTypesFilename ,_ebga .ContentTypes .X ());_dgec !=nil {return _dgec ;};if _fbdg :=_ebga .WriteExtraFiles (_afea );_fbdg !=nil {return _fbdg ;};return _afea .Close ();};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_aae Paragraph )RemoveEndnote (id int64 ){_dgebd :=_aae ._fda ._bgad ;var _cbce int ;for _deee ,_bbg :=range _dgebd .CT_Endnotes .Endnote {if _bbg .IdAttr ==id {_cbce =_deee ;};};_cbce =0;_dgebd .CT_Endnotes .Endnote [_cbce ]=nil ;_dgebd .CT_Endnotes .Endnote [_cbce ]=_dgebd .CT_Endnotes .Endnote [len (_dgebd .CT_Endnotes .Endnote )-1];_dgebd .CT_Endnotes .Endnote =_dgebd .CT_Endnotes .Endnote [:len (_dgebd .CT_Endnotes .Endnote )-1];var _fedbb Run ;for _ ,_abf :=range _aae .Runs (){if _fgb ,_ggd :=_abf .IsEndnote ();_fgb {if _ggd ==id {_fedbb =_abf ;};};};_aae .RemoveRun (_fedbb );};

// SaveToFile writes the document out to a file.
func (_baceg *Document )SaveToFile (path string )error {_dedg ,_egee :=_ddgee .Create (path );if _egee !=nil {return _egee ;};defer _dedg .Close ();return _baceg .Save (_dedg );};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_aabe TableLook )SetLastColumn (on bool ){if !on {_aabe ._ecad .LastColumnAttr =&_bcff .ST_OnOff {};_aabe ._ecad .LastColumnAttr .ST_OnOff1 =_bcff .ST_OnOff1Off ;}else {_aabe ._ecad .LastColumnAttr =&_bcff .ST_OnOff {};_aabe ._ecad .LastColumnAttr .ST_OnOff1 =_bcff .ST_OnOff1On ;};};

// SizeValue returns the value of paragraph font size in points.
func (_cgegc ParagraphProperties )SizeValue ()float64 {if _bfef :=_cgegc ._bae .RPr .Sz ;_bfef !=nil {_gfff :=_bfef .ValAttr ;if _gfff .ST_UnsignedDecimalNumber !=nil {return float64 (*_gfff .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetStyle sets the style of a paragraph.
func (_dg ParagraphProperties )SetStyle (s string ){if s ==""{_dg ._bae .PStyle =nil ;}else {_dg ._bae .PStyle =_fdcbg .NewCT_String ();_dg ._bae .PStyle .ValAttr =s ;};};

// Bold returns true if paragraph font is bold.
func (_efad ParagraphProperties )Bold ()bool {_eae :=_efad ._bae .RPr ;return _bgfdb (_eae .B )||_bgfdb (_eae .BCs );};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_bcag *_fdcbg .CT_Lvl };

// SetXOffset sets the X offset for an image relative to the origin.
func (_dddb AnchoredDrawing )SetXOffset (x _ff .Distance ){_dddb ._dafb .PositionH .Choice =&_fdcbg .WdCT_PosHChoice {};_dddb ._dafb .PositionH .Choice .PosOffset =_ffgg .Int32 (int32 (x /_ff .EMU ));};func (_afce *Document )insertTable (_ddaa Paragraph ,_fce bool )Table {_afeg :=_afce ._begc .Body ;if _afeg ==nil {return _afce .AddTable ();};_gfge :=_ddaa .X ();for _ecfe ,_faf :=range _afeg .EG_BlockLevelElts {for _ ,_eada :=range _faf .EG_ContentBlockContent {for _febc ,_ccgg :=range _eada .P {if _ccgg ==_gfge {_decc :=_fdcbg .NewCT_Tbl ();_gbag :=_fdcbg .NewEG_BlockLevelElts ();_afef :=_fdcbg .NewEG_ContentBlockContent ();_gbag .EG_ContentBlockContent =append (_gbag .EG_ContentBlockContent ,_afef );_afef .Tbl =append (_afef .Tbl ,_decc );_afeg .EG_BlockLevelElts =append (_afeg .EG_BlockLevelElts ,nil );if _fce {copy (_afeg .EG_BlockLevelElts [_ecfe +1:],_afeg .EG_BlockLevelElts [_ecfe :]);_afeg .EG_BlockLevelElts [_ecfe ]=_gbag ;if _febc !=0{_fdb :=_fdcbg .NewEG_BlockLevelElts ();_fea :=_fdcbg .NewEG_ContentBlockContent ();_fdb .EG_ContentBlockContent =append (_fdb .EG_ContentBlockContent ,_fea );_fea .P =_eada .P [:_febc ];_afeg .EG_BlockLevelElts =append (_afeg .EG_BlockLevelElts ,nil );copy (_afeg .EG_BlockLevelElts [_ecfe +1:],_afeg .EG_BlockLevelElts [_ecfe :]);_afeg .EG_BlockLevelElts [_ecfe ]=_fdb ;};_eada .P =_eada .P [_febc :];}else {copy (_afeg .EG_BlockLevelElts [_ecfe +2:],_afeg .EG_BlockLevelElts [_ecfe +1:]);_afeg .EG_BlockLevelElts [_ecfe +1]=_gbag ;if _febc !=len (_eada .P )-1{_cec :=_fdcbg .NewEG_BlockLevelElts ();_dbd :=_fdcbg .NewEG_ContentBlockContent ();_cec .EG_ContentBlockContent =append (_cec .EG_ContentBlockContent ,_dbd );_dbd .P =_eada .P [_febc +1:];_afeg .EG_BlockLevelElts =append (_afeg .EG_BlockLevelElts ,nil );copy (_afeg .EG_BlockLevelElts [_ecfe +3:],_afeg .EG_BlockLevelElts [_ecfe +2:]);_afeg .EG_BlockLevelElts [_ecfe +2]=_cec ;};_eada .P =_eada .P [:_febc +1];};return Table {_afce ,_decc };};};for _ ,_gfec :=range _eada .Tbl {for _ ,_dba :=range _gfec .EG_ContentRowContent {for _ ,_effb :=range _dba .Tr {for _ ,_cace :=range _effb .EG_ContentCellContent {for _ ,_fdbf :=range _cace .Tc {for _dffc ,_ddea :=range _fdbf .EG_BlockLevelElts {for _ ,_aadgb :=range _ddea .EG_ContentBlockContent {for _baab ,_agaf :=range _aadgb .P {if _agaf ==_gfge {_bfg :=_fdcbg .NewEG_BlockLevelElts ();_eeg :=_fdcbg .NewEG_ContentBlockContent ();_bfg .EG_ContentBlockContent =append (_bfg .EG_ContentBlockContent ,_eeg );_fcge :=_fdcbg .NewCT_Tbl ();_eeg .Tbl =append (_eeg .Tbl ,_fcge );_fdbf .EG_BlockLevelElts =append (_fdbf .EG_BlockLevelElts ,nil );if _fce {copy (_fdbf .EG_BlockLevelElts [_dffc +1:],_fdbf .EG_BlockLevelElts [_dffc :]);_fdbf .EG_BlockLevelElts [_dffc ]=_bfg ;if _baab !=0{_feb :=_fdcbg .NewEG_BlockLevelElts ();_acce :=_fdcbg .NewEG_ContentBlockContent ();_feb .EG_ContentBlockContent =append (_feb .EG_ContentBlockContent ,_acce );_acce .P =_aadgb .P [:_baab ];_fdbf .EG_BlockLevelElts =append (_fdbf .EG_BlockLevelElts ,nil );copy (_fdbf .EG_BlockLevelElts [_dffc +1:],_fdbf .EG_BlockLevelElts [_dffc :]);_fdbf .EG_BlockLevelElts [_dffc ]=_feb ;};_aadgb .P =_aadgb .P [_baab :];}else {copy (_fdbf .EG_BlockLevelElts [_dffc +2:],_fdbf .EG_BlockLevelElts [_dffc +1:]);_fdbf .EG_BlockLevelElts [_dffc +1]=_bfg ;if _baab !=len (_eada .P )-1{_fbfd :=_fdcbg .NewEG_BlockLevelElts ();_db :=_fdcbg .NewEG_ContentBlockContent ();_fbfd .EG_ContentBlockContent =append (_fbfd .EG_ContentBlockContent ,_db );_db .P =_aadgb .P [_baab +1:];_fdbf .EG_BlockLevelElts =append (_fdbf .EG_BlockLevelElts ,nil );copy (_fdbf .EG_BlockLevelElts [_dffc +3:],_fdbf .EG_BlockLevelElts [_dffc +2:]);_fdbf .EG_BlockLevelElts [_dffc +2]=_fbfd ;};_aadgb .P =_aadgb .P [:_baab +1];};return Table {_afce ,_fcge };};};};};};};};};};};};return _afce .AddTable ();};

// AddDefinition adds a new numbering definition.
func (_cgcd Numbering )AddDefinition ()NumberingDefinition {_caa :=_fdcbg .NewCT_Num ();_bdfb :=int64 (1);for _ ,_gca :=range _cgcd .Definitions (){if _gca .AbstractNumberID ()>=_bdfb {_bdfb =_gca .AbstractNumberID ()+1;};};_ggabe :=int64 (1);for _ ,_gea :=range _cgcd .X ().Num {if _gea .NumIdAttr >=_ggabe {_ggabe =_gea .NumIdAttr +1;};};_caa .NumIdAttr =_ggabe ;_caa .AbstractNumId =_fdcbg .NewCT_DecimalNumber ();_caa .AbstractNumId .ValAttr =_bdfb ;_fbgb :=_fdcbg .NewCT_AbstractNum ();_fbgb .AbstractNumIdAttr =_bdfb ;_cgcd ._efde .AbstractNum =append (_cgcd ._efde .AbstractNum ,_fbgb );_cgcd ._efde .Num =append (_cgcd ._efde .Num ,_caa );return NumberingDefinition {_fbgb };};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_e Footer )Index ()int {for _fagb ,_gec :=range _e ._ccag ._ae {if _gec ==_e ._fcgb {return _fagb ;};};return -1;};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_bed *Document ;_eegd *_fdcbg .CT_FtnEdn ;};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_ecf *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_geba :=[]StructuredDocumentTag {};for _ ,_bgg :=range _ecf ._begc .Body .EG_BlockLevelElts {for _ ,_eabf :=range _bgg .EG_ContentBlockContent {if _eabf .Sdt !=nil {_geba =append (_geba ,StructuredDocumentTag {_ecf ,_eabf .Sdt });};};};return _geba ;};

// SetAll sets all of the borders to a given value.
func (_aee TableBorders )SetAll (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_aee .SetBottom (t ,c ,thickness );_aee .SetLeft (t ,c ,thickness );_aee .SetRight (t ,c ,thickness );_aee .SetTop (t ,c ,thickness );_aee .SetInsideHorizontal (t ,c ,thickness );_aee .SetInsideVertical (t ,c ,thickness );};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_efbc ParagraphSpacing )SetAfterAuto (b bool ){if b {_efbc ._ebc .AfterAutospacingAttr =&_bcff .ST_OnOff {};_efbc ._ebc .AfterAutospacingAttr .Bool =_ffgg .Bool (true );}else {_efbc ._ebc .AfterAutospacingAttr =nil ;};};

// SetAfter sets the spacing that comes after the paragraph.
func (_abdg ParagraphSpacing )SetAfter (after _ff .Distance ){_abdg ._ebc .AfterAttr =&_bcff .ST_TwipsMeasure {};_abdg ._ebc .AfterAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (after /_ff .Twips ));};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_cfce RunProperties )BoldValue ()OnOffValue {return _ead (_cfce ._adde .B )};

// X returns the inner wrapped XML type.
func (_edac Numbering )X ()*_fdcbg .Numbering {return _edac ._efde };

// CellProperties returns the cell properties.
func (_ebg TableConditionalFormatting )CellProperties ()CellProperties {if _ebg ._gffd .TcPr ==nil {_ebg ._gffd .TcPr =_fdcbg .NewCT_TcPr ();};return CellProperties {_ebg ._gffd .TcPr };};

// Runs returns all of the runs in a paragraph.
func (_bf Paragraph )Runs ()[]Run {_ebef :=[]Run {};for _ ,_dd :=range _bf ._gcd .EG_PContent {for _ ,_fgad :=range _dd .EG_ContentRunContent {if _fgad .R !=nil {_ebef =append (_ebef ,Run {_bf ._fda ,_fgad .R });};if _fgad .Sdt !=nil &&_fgad .Sdt .SdtContent !=nil {for _ ,_aeedd :=range _fgad .Sdt .SdtContent .EG_ContentRunContent {if _aeedd .R !=nil {_ebef =append (_ebef ,Run {_bf ._fda ,_aeedd .R });};};};};};return _ebef ;};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_dbcc ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_dbcc ._cgce .KeepNext =nil ;}else {_dbcc ._cgce .KeepNext =_fdcbg .NewCT_OnOff ();};};

// SetAlignment sets the alignment of a table within the page.
func (_gfe TableProperties )SetAlignment (align _fdcbg .ST_JcTable ){if align ==_fdcbg .ST_JcTableUnset {_gfe ._fecdg .Jc =nil ;}else {_gfe ._fecdg .Jc =_fdcbg .NewCT_JcTable ();_gfe ._fecdg .Jc .ValAttr =align ;};};func (_ac *Document )tables (_afba *_fdcbg .EG_ContentBlockContent )[]Table {_fdgb :=[]Table {};for _ ,_gbdc :=range _afba .Tbl {_fdgb =append (_fdgb ,Table {_ac ,_gbdc });for _ ,_gfca :=range _gbdc .EG_ContentRowContent {for _ ,_dfd :=range _gfca .Tr {for _ ,_feeg :=range _dfd .EG_ContentCellContent {for _ ,_dceba :=range _feeg .Tc {for _ ,_efbbb :=range _dceba .EG_BlockLevelElts {for _ ,_gacb :=range _efbbb .EG_ContentBlockContent {for _ ,_dcag :=range _ac .tables (_gacb ){_fdgb =append (_fdgb ,_dcag );};};};};};};};};return _fdgb ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_ebfb *Document )FormFields ()[]FormField {_ced :=[]FormField {};for _ ,_daeea :=range _ebfb .Paragraphs (){_cbb :=_daeea .Runs ();for _aafa ,_eb :=range _cbb {for _ ,_gfdg :=range _eb ._dgf .EG_RunInnerContent {if _gfdg .FldChar ==nil ||_gfdg .FldChar .FfData ==nil {continue ;};if _gfdg .FldChar .FldCharTypeAttr ==_fdcbg .ST_FldCharTypeBegin {if len (_gfdg .FldChar .FfData .Name )==0||_gfdg .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_agbda :=FormField {_cab :_gfdg .FldChar .FfData };if _gfdg .FldChar .FfData .TextInput !=nil {for _ggdb :=_aafa +1;_ggdb < len (_cbb )-1;_ggdb ++{if len (_cbb [_ggdb ]._dgf .EG_RunInnerContent )==0{continue ;};_agcc :=_cbb [_ggdb ]._dgf .EG_RunInnerContent [0];if _agcc .FldChar !=nil &&_agcc .FldChar .FldCharTypeAttr ==_fdcbg .ST_FldCharTypeSeparate {if len (_cbb [_ggdb +1]._dgf .EG_RunInnerContent )==0{continue ;};if _cbb [_ggdb +1]._dgf .EG_RunInnerContent [0].FldChar ==nil {_agbda ._bdff =_cbb [_ggdb +1]._dgf .EG_RunInnerContent [0];break ;};};};};_ced =append (_ced ,_agbda );};};};};return _ced ;};

// Caps returns true if run font is capitalized.
func (_dfe RunProperties )Caps ()bool {return _bgfdb (_dfe ._adde .Caps )};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_eeeg ParagraphProperties )ComplexSizeValue ()float64 {if _cfb :=_eeeg ._bae .RPr .SzCs ;_cfb !=nil {_ccgc :=_cfb .ValAttr ;if _ccgc .ST_UnsignedDecimalNumber !=nil {return float64 (*_ccgc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// X returns the inner wrapped type
func (_ged CellBorders )X ()*_fdcbg .CT_TcBorders {return _ged ._fa };

// MergeFields returns the list of all mail merge fields found in the document.
func (_beg Document )MergeFields ()[]string {_ceca :=map[string ]struct{}{};for _ ,_ddc :=range _beg .mergeFields (){_ceca [_ddc ._bffg ]=struct{}{};};_geff :=[]string {};for _ddfa :=range _ceca {_geff =append (_geff ,_ddfa );};return _geff ;};

// VerticalAlign returns the value of paragraph vertical align.
func (_eab ParagraphProperties )VerticalAlignment ()_bcff .ST_VerticalAlignRun {if _acda :=_eab ._bae .RPr .VertAlign ;_acda !=nil {return _acda .ValAttr ;};return 0;};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_gcg FormField )PossibleValues ()[]string {if _gcg ._cab .DdList ==nil {return nil ;};_eeag :=[]string {};for _ ,_baad :=range _gcg ._cab .DdList .ListEntry {if _baad ==nil {continue ;};_eeag =append (_eeag ,_baad .ValAttr );};return _eeag ;};

// SetRight sets the cell right margin
func (_cdeb CellMargins )SetRight (d _ff .Distance ){_cdeb ._fcggg .Right =_fdcbg .NewCT_TblWidth ();_bgcc (_cdeb ._fcggg .Right ,d );};var _gaea =[...]uint8 {0,20,37,58,79};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_bgdd AnchoredDrawing )SetVAlignment (v _fdcbg .WdST_AlignV ){_bgdd ._dafb .PositionV .Choice =&_fdcbg .WdCT_PosVChoice {};_bgdd ._dafb .PositionV .Choice .Align =v ;};

// InitializeDefault constructs a default numbering.
func (_bfe Numbering )InitializeDefault (){_afdfb :=_fdcbg .NewCT_AbstractNum ();_afdfb .MultiLevelType =_fdcbg .NewCT_MultiLevelType ();_afdfb .MultiLevelType .ValAttr =_fdcbg .ST_MultiLevelTypeHybridMultilevel ;_bfe ._efde .AbstractNum =append (_bfe ._efde .AbstractNum ,_afdfb );_afdfb .AbstractNumIdAttr =1;const _effee =720;const _fab =720;const _bcgc =360;for _gafa :=0;_gafa < 9;_gafa ++{_edff :=_fdcbg .NewCT_Lvl ();_edff .IlvlAttr =int64 (_gafa );_edff .Start =_fdcbg .NewCT_DecimalNumber ();_edff .Start .ValAttr =1;_edff .NumFmt =_fdcbg .NewCT_NumFmt ();_edff .NumFmt .ValAttr =_fdcbg .ST_NumberFormatBullet ;_edff .Suff =_fdcbg .NewCT_LevelSuffix ();_edff .Suff .ValAttr =_fdcbg .ST_LevelSuffixNothing ;_edff .LvlText =_fdcbg .NewCT_LevelText ();_edff .LvlText .ValAttr =_ffgg .String ("\uf0b7");_edff .LvlJc =_fdcbg .NewCT_Jc ();_edff .LvlJc .ValAttr =_fdcbg .ST_JcLeft ;_edff .RPr =_fdcbg .NewCT_RPr ();_edff .RPr .RFonts =_fdcbg .NewCT_Fonts ();_edff .RPr .RFonts .AsciiAttr =_ffgg .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_edff .RPr .RFonts .HAnsiAttr =_ffgg .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_edff .RPr .RFonts .HintAttr =_fdcbg .ST_HintDefault ;_edff .PPr =_fdcbg .NewCT_PPrGeneral ();_gefe :=int64 (_gafa *_fab +_effee );_edff .PPr .Ind =_fdcbg .NewCT_Ind ();_edff .PPr .Ind .LeftAttr =&_fdcbg .ST_SignedTwipsMeasure {};_edff .PPr .Ind .LeftAttr .Int64 =_ffgg .Int64 (_gefe );_edff .PPr .Ind .HangingAttr =&_bcff .ST_TwipsMeasure {};_edff .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (_bcgc ));_afdfb .Lvl =append (_afdfb .Lvl ,_edff );};_dfbc :=_fdcbg .NewCT_Num ();_dfbc .NumIdAttr =1;_dfbc .AbstractNumId =_fdcbg .NewCT_DecimalNumber ();_dfbc .AbstractNumId .ValAttr =1;_bfe ._efde .Num =append (_bfe ._efde .Num ,_dfbc );};

// X returns the inner wml.CT_TblBorders
func (_gdagd TableBorders )X ()*_fdcbg .CT_TblBorders {return _gdagd ._aad };func _gcfg (_cdbf *_fdcbg .CT_Border ,_cefa _fdcbg .ST_Border ,_gaa _cagf .Color ,_bcf _ff .Distance ){_cdbf .ValAttr =_cefa ;_cdbf .ColorAttr =&_fdcbg .ST_HexColor {};if _gaa .IsAuto (){_cdbf .ColorAttr .ST_HexColorAuto =_fdcbg .ST_HexColorAutoAuto ;}else {_cdbf .ColorAttr .ST_HexColorRGB =_gaa .AsRGBString ();};if _bcf !=_ff .Zero {_cdbf .SzAttr =_ffgg .Uint64 (uint64 (_bcf /_ff .Point *8));};};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_aeaf *Document ;_dafb *_fdcbg .WdAnchor ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_edbc TableBorders )SetTop (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_edbc ._aad .Top =_fdcbg .NewCT_Border ();_gcfg (_edbc ._aad .Top ,t ,c ,thickness );};

// Paragraphs returns the paragraphs defined in a footer.
func (_fbd Footer )Paragraphs ()[]Paragraph {_ef :=[]Paragraph {};for _ ,_ecgf :=range _fbd ._fcgb .EG_ContentBlockContent {for _ ,_gcde :=range _ecgf .P {_ef =append (_ef ,Paragraph {_fbd ._ccag ,_gcde });};};for _ ,_cdacc :=range _fbd .Tables (){for _ ,_aeed :=range _cdacc .Rows (){for _ ,_dffca :=range _aeed .Cells (){_ef =append (_ef ,_dffca .Paragraphs ()...);};};};return _ef ;};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_cae Run )AddTab (){_afa :=_cae .newIC ();_afa .Tab =_fdcbg .NewCT_Empty ()};

// SetStartIndent controls the start indent of the paragraph.
func (_bfbe ParagraphStyleProperties )SetStartIndent (m _ff .Distance ){if _bfbe ._cgce .Ind ==nil {_bfbe ._cgce .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_bfbe ._cgce .Ind .StartAttr =nil ;}else {_bfbe ._cgce .Ind .StartAttr =&_fdcbg .ST_SignedTwipsMeasure {};_bfbe ._cgce .Ind .StartAttr .Int64 =_ffgg .Int64 (int64 (m /_ff .Twips ));};};

// Font returns the name of paragraph font family.
func (_dfc ParagraphProperties )Font ()string {if _fdcaf :=_dfc ._bae .RPr .RFonts ;_fdcaf !=nil {if _fdcaf .AsciiAttr !=nil {return *_fdcaf .AsciiAttr ;}else if _fdcaf .HAnsiAttr !=nil {return *_fdcaf .HAnsiAttr ;}else if _fdcaf .CsAttr !=nil {return *_fdcaf .CsAttr ;};};return "";};

// SetPrimaryStyle marks the style as a primary style.
func (_dbc Style )SetPrimaryStyle (b bool ){if b {_dbc ._cgcg .QFormat =_fdcbg .NewCT_OnOff ();}else {_dbc ._cgcg .QFormat =nil ;};};

// SetASCIITheme sets the font ASCII Theme.
func (_ggbab Fonts )SetASCIITheme (t _fdcbg .ST_Theme ){_ggbab ._bbgg .AsciiThemeAttr =t };

// SetFormat sets the numbering format.
func (_aede NumberingLevel )SetFormat (f _fdcbg .ST_NumberFormat ){if _aede ._bcag .NumFmt ==nil {_aede ._bcag .NumFmt =_fdcbg .NewCT_NumFmt ();};_aede ._bcag .NumFmt .ValAttr =f ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_dggf AnchoredDrawing )GetImage ()(_dfge .ImageRef ,bool ){_fbcc :=_dggf ._dafb .Graphic .GraphicData .Any ;if len (_fbcc )> 0{_dea ,_faad :=_fbcc [0].(*_egd .Pic );if _faad {if _dea .BlipFill !=nil &&_dea .BlipFill .Blip !=nil &&_dea .BlipFill .Blip .EmbedAttr !=nil {return _dggf ._aeaf .GetImageByRelID (*_dea .BlipFill .Blip .EmbedAttr );};};};return _dfge .ImageRef {},false ;};

// SetUnderline controls underline for a run style.
func (_acga RunProperties )SetUnderline (style _fdcbg .ST_Underline ,c _cagf .Color ){if style ==_fdcbg .ST_UnderlineUnset {_acga ._adde .U =nil ;}else {_acga ._adde .U =_fdcbg .NewCT_Underline ();_acga ._adde .U .ColorAttr =&_fdcbg .ST_HexColor {};_acga ._adde .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_acga ._adde .U .ValAttr =style ;};};

// Clear clears all content within a header
func (_aadg Header )Clear (){_aadg ._afac .EG_ContentBlockContent =nil };

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_gdd ParagraphProperties )SetFirstLineIndent (m _ff .Distance ){if _gdd ._bae .Ind ==nil {_gdd ._bae .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_gdd ._bae .Ind .FirstLineAttr =nil ;}else {_gdd ._bae .Ind .FirstLineAttr =&_bcff .ST_TwipsMeasure {};_gdd ._bae .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (m /_ff .Twips ));};};const _abfg ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";

// X returns the inner wrapped XML type.
func (_dbgaa Table )X ()*_fdcbg .CT_Tbl {return _dbgaa ._d };

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_gdaf *Document ;_dgf *_fdcbg .CT_R ;};

// Headers returns the headers defined in the document.
func (_f *Document )Headers ()[]Header {_gdcd :=[]Header {};for _ ,_addf :=range _f ._abb {_gdcd =append (_gdcd ,Header {_f ,_addf });};return _gdcd ;};

// CellBorders are the borders for an individual
type CellBorders struct{_fa *_fdcbg .CT_TcBorders };

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_efd Paragraph )AddFootnote (text string )Footnote {var _cggc int64 ;if _efd ._fda .HasFootnotes (){for _ ,_fcc :=range _efd ._fda .Footnotes (){if _fcc .id ()> _cggc {_cggc =_fcc .id ();};};_cggc ++;}else {_cggc =0;_efd ._fda ._ecda =&_fdcbg .Footnotes {};_efd ._fda ._ecda .CT_Footnotes =_fdcbg .CT_Footnotes {};_efd ._fda ._ecda .Footnote =make ([]*_fdcbg .CT_FtnEdn ,0);};_dae :=_fdcbg .NewCT_FtnEdn ();_bgfe :=_fdcbg .NewCT_FtnEdnRef ();_bgfe .IdAttr =_cggc ;_efd ._fda ._ecda .CT_Footnotes .Footnote =append (_efd ._fda ._ecda .CT_Footnotes .Footnote ,_dae );_cdfg :=_efd .AddRun ();_fddf :=_cdfg .Properties ();_fddf .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_cdfg ._dgf .EG_RunInnerContent =[]*_fdcbg .EG_RunInnerContent {_fdcbg .NewEG_RunInnerContent ()};_cdfg ._dgf .EG_RunInnerContent [0].FootnoteReference =_bgfe ;_cbgf :=Footnote {_efd ._fda ,_dae };_cbgf ._eegd .IdAttr =_cggc ;_cbgf ._eegd .EG_BlockLevelElts =[]*_fdcbg .EG_BlockLevelElts {_fdcbg .NewEG_BlockLevelElts ()};_egfg :=_cbgf .AddParagraph ();_egfg .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_egfg ._gcd .PPr .RPr =_fdcbg .NewCT_ParaRPr ();_fag :=_egfg .AddRun ();_fag .AddTab ();_fag .AddText (text );return _cbgf ;};func (_agcb Endnote )content ()[]*_fdcbg .EG_ContentBlockContent {var _bgcf []*_fdcbg .EG_ContentBlockContent ;for _ ,_cabeg :=range _agcb ._fgdc .EG_BlockLevelElts {_bgcf =append (_bgcf ,_cabeg .EG_ContentBlockContent ...);};return _bgcf ;};

// SetItalic sets the run to italic.
func (_cedc RunProperties )SetItalic (b bool ){if !b {_cedc ._adde .I =nil ;_cedc ._adde .ICs =nil ;}else {_cedc ._adde .I =_fdcbg .NewCT_OnOff ();_cedc ._adde .ICs =_fdcbg .NewCT_OnOff ();};};

// SetSize sets the size of the displayed image on the page.
func (_gaff InlineDrawing )SetSize (w ,h _ff .Distance ){_gaff ._cga .Extent .CxAttr =int64 (float64 (w *_ff .Pixel72 )/_ff .EMU );_gaff ._cga .Extent .CyAttr =int64 (float64 (h *_ff .Pixel72 )/_ff .EMU );};

// SetSize sets the font size for a run.
func (_ebgb RunProperties )SetSize (size _ff .Distance ){_ebgb ._adde .Sz =_fdcbg .NewCT_HpsMeasure ();_ebgb ._adde .Sz .ValAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (size /_ff .HalfPoint ));_ebgb ._adde .SzCs =_fdcbg .NewCT_HpsMeasure ();_ebgb ._adde .SzCs .ValAttr .ST_UnsignedDecimalNumber =_ffgg .Uint64 (uint64 (size /_ff .HalfPoint ));};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_def AnchoredDrawing )SetOffset (x ,y _ff .Distance ){_def .SetXOffset (x );_def .SetYOffset (y )};

// AddStyle adds a new empty style.
func (_bbd Styles )AddStyle (styleID string ,t _fdcbg .ST_StyleType ,isDefault bool )Style {_bafa :=_fdcbg .NewCT_Style ();_bafa .TypeAttr =t ;if isDefault {_bafa .DefaultAttr =&_bcff .ST_OnOff {};_bafa .DefaultAttr .Bool =_ffgg .Bool (isDefault );};_bafa .StyleIdAttr =_ffgg .String (styleID );_bbd ._ddg .Style =append (_bbd ._ddg .Style ,_bafa );return Style {_bafa };};

// X returns the inner wrapped XML type.
func (_fef AnchoredDrawing )X ()*_fdcbg .WdAnchor {return _fef ._dafb };

// SetTopPct sets the cell top margin
func (_edf CellMargins )SetTopPct (pct float64 ){_edf ._fcggg .Top =_fdcbg .NewCT_TblWidth ();_gcbeg (_edf ._fcggg .Top ,pct );};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_afcc AnchoredDrawing )SetName (name string ){_afcc ._dafb .DocPr .NameAttr =name ;for _ ,_gdc :=range _afcc ._dafb .Graphic .GraphicData .Any {if _ffab ,_ada :=_gdc .(*_egd .Pic );_ada {_ffab .NvPicPr .CNvPr .DescrAttr =_ffgg .String (name );};};};

// Type returns the type of the field.
func (_cbeg FormField )Type ()FormFieldType {if _cbeg ._cab .TextInput !=nil {return FormFieldTypeText ;}else if _cbeg ._cab .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _cbeg ._cab .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};

// X returns the inner wrapped XML type.
func (_gdce TableProperties )X ()*_fdcbg .CT_TblPr {return _gdce ._fecdg };

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_eaf FormField )IsChecked ()bool {if _eaf ._cab .CheckBox ==nil {return false ;};if _eaf ._cab .CheckBox .Checked !=nil {return true ;};return false ;};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_gcab *Document )Footnote (id int64 )Footnote {for _ ,_fdce :=range _gcab .Footnotes (){if _fdce .id ()==id {return _fdce ;};};return Footnote {};};

// SetValue sets the width value.
func (_ccf TableWidth )SetValue (m _ff .Distance ){_ccf ._baec .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_ccf ._baec .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_ccf ._baec .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (m /_ff .Twips ));_ccf ._baec .TypeAttr =_fdcbg .ST_TblWidthDxa ;};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_dabf HyperLink )AddRun ()Run {_cgb :=_fdcbg .NewEG_ContentRunContent ();_dabf ._egcc .EG_ContentRunContent =append (_dabf ._egcc .EG_ContentRunContent ,_cgb );_eba :=_fdcbg .NewCT_R ();_cgb .R =_eba ;return Run {_dabf ._ggcd ,_eba };};

// Paragraphs returns the paragraphs defined in an endnote.
func (_fbcef Endnote )Paragraphs ()[]Paragraph {_bcc :=[]Paragraph {};for _ ,_ecga :=range _fbcef .content (){for _ ,_ccbd :=range _ecga .P {_bcc =append (_bcc ,Paragraph {_fbcef ._cef ,_ccbd });};};return _bcc ;};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_cagfe *_fdcbg .CT_AbstractNum };

// RemoveParagraph removes a paragraph from the endnote.
func (_efg Endnote )RemoveParagraph (p Paragraph ){for _ ,_gdae :=range _efg .content (){for _abbd ,_eaecd :=range _gdae .P {if _eaecd ==p ._gcd {copy (_gdae .P [_abbd :],_gdae .P [_abbd +1:]);_gdae .P =_gdae .P [0:len (_gdae .P )-1];return ;};};};};

// AddCell adds a cell to a row and returns it
func (_eafd Row )AddCell ()Cell {_efbb :=_fdcbg .NewEG_ContentCellContent ();_eafd ._affg .EG_ContentCellContent =append (_eafd ._affg .EG_ContentCellContent ,_efbb );_adb :=_fdcbg .NewCT_Tc ();_efbb .Tc =append (_efbb .Tc ,_adb );return Cell {_eafd ._dgg ,_adb };};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_bea *Document )BodySection ()Section {if _bea ._begc .Body .SectPr ==nil {_bea ._begc .Body .SectPr =_fdcbg .NewCT_SectPr ();};return Section {_bea ,_bea ._begc .Body .SectPr };};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_dca *Document )AddFooter ()Footer {_fbfb :=_fdcbg .NewFtr ();_dca ._ae =append (_dca ._ae ,_fbfb );_bcbe :=_ggab .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_dca ._ae ));_dca ._aggd .AddRelationship (_bcbe ,_ffgg .FooterType );_dca .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bcbe ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_dca ._eg =append (_dca ._eg ,_dfge .NewRelationships ());return Footer {_dca ,_fbfb };};

// Settings controls the document settings.
type Settings struct{_egf *_fdcbg .Settings };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_cfa Footer )AddImage (i _dfge .Image )(_dfge .ImageRef ,error ){var _gcec _dfge .Relationships ;for _cabg ,_ffgd :=range _cfa ._ccag ._ae {if _ffgd ==_cfa ._fcgb {_gcec =_cfa ._ccag ._eg [_cabg ];};};_dfga :=_dfge .MakeImageRef (i ,&_cfa ._ccag .DocBase ,_gcec );if i .Data ==nil &&i .Path ==""{return _dfga ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _dfga ,_aaaa .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _dfga ,_aaaa .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_cfa ._ccag .Images =append (_cfa ._ccag .Images ,_dfga );_cfcb :=_ggab .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_cfa ._ccag .Images ),i .Format );_ffea :=_gcec .AddRelationship (_cfcb ,_ffgg .ImageType );_dfga .SetRelID (_ffea .X ().IdAttr );return _dfga ,nil ;};

// SetWidth sets the cell width to a specified width.
func (_bgb CellProperties )SetWidth (d _ff .Distance ){_bgb ._dfa .TcW =_fdcbg .NewCT_TblWidth ();_bgb ._dfa .TcW .TypeAttr =_fdcbg .ST_TblWidthDxa ;_bgb ._dfa .TcW .WAttr =&_fdcbg .ST_MeasurementOrPercent {};_bgb ._dfa .TcW .WAttr .ST_DecimalNumberOrPercent =&_fdcbg .ST_DecimalNumberOrPercent {};_bgb ._dfa .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_ffgg .Int64 (int64 (d /_ff .Twips ));};

// X returns the inner wrapped XML type.
func (_cacf RunProperties )X ()*_fdcbg .CT_RPr {return _cacf ._adde };func _cefb (){_bcd ,_fecc :=_badb .ReadBuildInfo ();if !_fecc {if !_baaa {_ggab .Printf ("\u0042\u0075i\u006c\u0064\u0020\u0069n\u0066\u006fr\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0045\u0078\u0069\u0074i\u006e\u0067\u0031\u000a");_ddgee .Exit (1);}else {return ;};};_ddfab :=0;for _ ,_fdcac :=range _bcd .Deps {if _fdcac .Path =="g\u0069\u0074\u0068\u0075\u0062\u002ec\u006f\u006d\u002f\u0075\u006e\u0069\u0064\u006f\u0063/\u0075\u006e\u0069o\u0066f\u0069\u0063\u0065"&&_fdcac .Replace ==nil {_ddfab =1;};};_cff :=_baaa ;if _aedca .HasPrefix (_bcd .Path ,"\u0067i\u0074h\u0075\u0062\u002e\u0063\u006fm\u002f\u0075n\u0069\u0064\u006f\u0063\u002f"){_cff =true ;};if _ddfab !=1&&!_cff {_ggab .Printf ("\u0050\u0061\u0063\u006b\u0061\u0067\u0065\u0020\u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u002d\u0020E\u0078\u0069t\u0069\u006e\u0067\u000a");_ddgee .Exit (1);};};func (_fcbf Footnote )content ()[]*_fdcbg .EG_ContentBlockContent {var _deccd []*_fdcbg .EG_ContentBlockContent ;for _ ,_cbga :=range _fcbf ._eegd .EG_BlockLevelElts {_deccd =append (_deccd ,_cbga .EG_ContentBlockContent ...);};return _deccd ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_ggg TableBorders )SetRight (t _fdcbg .ST_Border ,c _cagf .Color ,thickness _ff .Distance ){_ggg ._aad .Right =_fdcbg .NewCT_Border ();_gcfg (_ggg ._aad .Right ,t ,c ,thickness );};

// Borders allows controlling individual cell borders.
func (_cceb CellProperties )Borders ()CellBorders {if _cceb ._dfa .TcBorders ==nil {_cceb ._dfa .TcBorders =_fdcbg .NewCT_TcBorders ();};return CellBorders {_cceb ._dfa .TcBorders };};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_dbag Paragraph )InsertRunAfter (relativeTo Run )Run {return _dbag .insertRun (relativeTo ,false )};

// X returns the inner wrapped XML type.
func (_bfgad HyperLink )X ()*_fdcbg .CT_Hyperlink {return _bfgad ._egcc };

// Borders allows manipulation of the table borders.
func (_agbc TableProperties )Borders ()TableBorders {if _agbc ._fecdg .TblBorders ==nil {_agbc ._fecdg .TblBorders =_fdcbg .NewCT_TblBorders ();};return TableBorders {_agbc ._fecdg .TblBorders };};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_aeeag ParagraphProperties )Style ()string {if _aeeag ._bae .PStyle !=nil {return _aeeag ._bae .PStyle .ValAttr ;};return "";};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_abcb Style )TableConditionalFormatting (typ _fdcbg .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_geee :=range _abcb ._cgcg .TblStylePr {if _geee .TypeAttr ==typ {return TableConditionalFormatting {_geee };};};_dgff :=_fdcbg .NewCT_TblStylePr ();_dgff .TypeAttr =typ ;_abcb ._cgcg .TblStylePr =append (_abcb ._cgcg .TblStylePr ,_dgff );return TableConditionalFormatting {_dgff };};

// Read reads a document from an io.Reader.
func Read (r _dgfe .ReaderAt ,size int64 )(*Document ,error ){_caceg :=New ();_caceg .Numbering ._efde =nil ;_bb ,_baea :=_gdf .TempDir ("","g\u006f\u006f\u0078\u006d\u006c\u002d\u0064\u006f\u0063\u0078");if _baea !=nil {return nil ,_baea ;};_caceg .TmpPath =_bb ;_ffec ,_baea :=_fcec .NewReader (r ,size );if _baea !=nil {return nil ,_ggab .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_baea );};_aeae :=[]*_fcec .File {};_aeae =append (_aeae ,_ffec .File ...);_bacg :=false ;for _ ,_dgfg :=range _aeae {if _dgfg .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_bacg =true ;break ;};};if _bacg {_caceg .createCustomProperties ();};_gaec :=_caceg ._begc .ConformanceAttr ;_bcde :=_gbac .DecodeMap {};_bcde .SetOnNewRelationshipFunc (_caceg .onNewRelationship );_bcde .AddTarget (_ffgg .ContentTypesFilename ,_caceg .ContentTypes .X (),"",0);_bcde .AddTarget (_ffgg .BaseRelsFilename ,_caceg .Rels .X (),"",0);if _fbc :=_bcde .Decode (_aeae );_fbc !=nil {return nil ,_fbc ;};_caceg ._begc .ConformanceAttr =_gaec ;for _ ,_fff :=range _aeae {if _fff ==nil {continue ;};if _gg :=_caceg .AddExtraFileFromZip (_fff );_gg !=nil {return nil ,_gg ;};};if _bacg {_aebe :=false ;for _ ,_gebe :=range _caceg .Rels .X ().Relationship {if _gebe .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aebe =true ;break ;};};if !_aebe {_caceg .addCustomRelationships ();};};return _caceg ,nil ;};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_dac Fonts )SetEastAsiaTheme (t _fdcbg .ST_Theme ){_dac ._bbgg .EastAsiaThemeAttr =t };

// Style is a style within the styles.xml file.
type Style struct{_cgcg *_fdcbg .CT_Style };

// RowProperties are the properties for a row within a table
type RowProperties struct{_eedec *_fdcbg .CT_TrPr };

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_abgb Paragraph )SetStyle (s string ){_abgb .ensurePPr ();if s ==""{_abgb ._gcd .PPr .PStyle =nil ;}else {_abgb ._gcd .PPr .PStyle =_fdcbg .NewCT_String ();_abgb ._gcd .PPr .PStyle .ValAttr =s ;};};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_cgec HyperLink )SetTargetByRef (link _dfge .Hyperlink ){_cgec ._egcc .IdAttr =_ffgg .String (_dfge .Relationship (link ).ID ());_cgec ._egcc .AnchorAttr =nil ;};

// SetAllCaps sets the run to all caps.
func (_efc RunProperties )SetAllCaps (b bool ){if !b {_efc ._adde .Caps =nil ;}else {_efc ._adde .Caps =_fdcbg .NewCT_OnOff ();};};

// SetEndIndent controls the end indentation.
func (_cagfb ParagraphProperties )SetEndIndent (m _ff .Distance ){if _cagfb ._bae .Ind ==nil {_cagfb ._bae .Ind =_fdcbg .NewCT_Ind ();};if m ==_ff .Zero {_cagfb ._bae .Ind .EndAttr =nil ;}else {_cagfb ._bae .Ind .EndAttr =&_fdcbg .ST_SignedTwipsMeasure {};_cagfb ._bae .Ind .EndAttr .Int64 =_ffgg .Int64 (int64 (m /_ff .Twips ));};};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_dfa *_fdcbg .CT_TcPr };

// Bold returns true if run font is bold.
func (_ecgc RunProperties )Bold ()bool {_aa :=_ecgc ._adde ;return _bgfdb (_aa .B )||_bgfdb (_aa .BCs )};func (_fadfc Document )mergeFields ()[]mergeFieldInfo {_acd :=[]Paragraph {};_gfbg :=[]mergeFieldInfo {};for _ ,_cfc :=range _fadfc .Tables (){for _ ,_bbc :=range _cfc .Rows (){for _ ,_dbeb :=range _bbc .Cells (){_acd =append (_acd ,_dbeb .Paragraphs ()...);};};};_acd =append (_acd ,_fadfc .Paragraphs ()...);for _ ,_dgcc :=range _acd {_gbcd :=_dgcc .Runs ();_dbe :=-1;_fcg :=-1;_gebb :=-1;_dedca :=mergeFieldInfo {};for _ ,_ggb :=range _dgcc ._gcd .EG_PContent {for _ ,_bgfae :=range _ggb .FldSimple {if _aedca .Contains (_bgfae .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_aggg :=_eegb (_bgfae .InstrAttr );_aggg ._ddf =true ;_aggg ._af =_dgcc ;_aggg ._beef =_ggb ;_gfbg =append (_gfbg ,_aggg );};};};for _dafg :=0;_dafg < len (_gbcd );_dafg ++{_ddda :=_gbcd [_dafg ];for _ ,_fdc :=range _ddda .X ().EG_RunInnerContent {if _fdc .FldChar !=nil {switch _fdc .FldChar .FldCharTypeAttr {case _fdcbg .ST_FldCharTypeBegin :_dbe =_dafg ;case _fdcbg .ST_FldCharTypeSeparate :_fcg =_dafg ;case _fdcbg .ST_FldCharTypeEnd :_gebb =_dafg ;if _dedca ._bffg !=""{_dedca ._af =_dgcc ;_dedca ._dffd =_dbe ;_dedca ._ecdf =_gebb ;_dedca ._cfca =_fcg ;_gfbg =append (_gfbg ,_dedca );};_dbe =-1;_fcg =-1;_gebb =-1;_dedca =mergeFieldInfo {};};}else if _fdc .InstrText !=nil &&_aedca .Contains (_fdc .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _dbe !=-1&&_gebb ==-1{_dedca =_eegb (_fdc .InstrText .Content );};};};};};return _gfbg ;};

// DoubleStrike returns true if paragraph is double striked.
func (_dedc ParagraphProperties )DoubleStrike ()bool {return _bgfdb (_dedc ._bae .RPr .Dstrike )};

// RightToLeft returns true if paragraph text goes from right to left.
func (_ccab ParagraphProperties )RightToLeft ()bool {return _bgfdb (_ccab ._bae .RPr .Rtl )};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_geac Paragraph )AddBookmark (name string )Bookmark {_cgfac :=_fdcbg .NewEG_PContent ();_dcdc :=_fdcbg .NewEG_ContentRunContent ();_cgfac .EG_ContentRunContent =append (_cgfac .EG_ContentRunContent ,_dcdc );_effbd :=_fdcbg .NewEG_RunLevelElts ();_dcdc .EG_RunLevelElts =append (_dcdc .EG_RunLevelElts ,_effbd );_cgcc :=_fdcbg .NewEG_RangeMarkupElements ();_fafg :=_fdcbg .NewCT_Bookmark ();_cgcc .BookmarkStart =_fafg ;_effbd .EG_RangeMarkupElements =append (_effbd .EG_RangeMarkupElements ,_cgcc );_cgcc =_fdcbg .NewEG_RangeMarkupElements ();_cgcc .BookmarkEnd =_fdcbg .NewCT_MarkupRange ();_effbd .EG_RangeMarkupElements =append (_effbd .EG_RangeMarkupElements ,_cgcc );_geac ._gcd .EG_PContent =append (_geac ._gcd .EG_PContent ,_cgfac );_bgdg :=Bookmark {_fafg };_bgdg .SetName (name );return _bgdg ;};

// SetEffect sets a text effect on the run.
func (_cefg RunProperties )SetEffect (e _fdcbg .ST_TextEffect ){if e ==_fdcbg .ST_TextEffectUnset {_cefg ._adde .Effect =nil ;}else {_cefg ._adde .Effect =_fdcbg .NewCT_TextEffect ();_cefg ._adde .Effect .ValAttr =_fdcbg .ST_TextEffectShimmer ;};};

// Text returns the underlying tet in the run.
func (_ga Run )Text ()string {if len (_ga ._dgf .EG_RunInnerContent )==0{return "";};_eaad :=_fggf .Buffer {};for _ ,_cgfa :=range _ga ._dgf .EG_RunInnerContent {if _cgfa .T !=nil {_eaad .WriteString (_cgfa .T .Content );};if _cgfa .Tab !=nil {_eaad .WriteByte ('\t');};};return _eaad .String ();};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_fac RunProperties )SetCharacterSpacing (size _ff .Distance ){_fac ._adde .Spacing =_fdcbg .NewCT_SignedTwipsMeasure ();_fac ._adde .Spacing .ValAttr .Int64 =_ffgg .Int64 (int64 (size /_ff .Twips ));};

// VerticalAlign returns the value of run vertical align.
func (_eegf RunProperties )VerticalAlignment ()_bcff .ST_VerticalAlignRun {if _deab :=_eegf ._adde .VertAlign ;_deab !=nil {return _deab .ValAttr ;};return 0;};

// Fonts returns the style's Fonts.
func (_gad RunProperties )Fonts ()Fonts {if _gad ._adde .RFonts ==nil {_gad ._adde .RFonts =_fdcbg .NewCT_Fonts ();};return Fonts {_gad ._adde .RFonts };};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bc ParagraphProperties )ComplexSizeMeasure ()string {if _gfdb :=_bc ._bae .RPr .SzCs ;_gfdb !=nil {_dgc :=_gfdb .ValAttr ;if _dgc .ST_PositiveUniversalMeasure !=nil {return *_dgc .ST_PositiveUniversalMeasure ;};};return "";};

// AddPageBreak adds a page break to a run.
func (_agbd Run )AddPageBreak (){_fdeff :=_agbd .newIC ();_fdeff .Br =_fdcbg .NewCT_Br ();_fdeff .Br .TypeAttr =_fdcbg .ST_BrTypePage ;};