//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_bab "fmt";_fbcc "github.com/unidoc/unioffice";_ccc "github.com/unidoc/unioffice/color";_edc "github.com/unidoc/unioffice/drawing";_dfafd "github.com/unidoc/unioffice/measurement";_gfeb "github.com/unidoc/unioffice/schema/soo/dml";_ad "github.com/unidoc/unioffice/schema/soo/dml/chart";_aa "math/rand";);

// InitializeDefaults the Bubble chart to its defaults
func (_gbb BubbleChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_agc Pie3DChart )X ()*_ad .CT_Pie3DChart {return _agc ._cbd };

// Values returns the value data source.
func (_gef BubbleChartSeries )Values ()NumberDataSource {if _gef ._cdfe .YVal ==nil {_gef ._cdfe .YVal =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_gef ._cdfe .YVal );};

// X returns the inner wrapped XML type.
func (_adb GridLines )X ()*_ad .CT_ChartLines {return _adb ._egd };

// AddSeries adds a default series to a bar chart.
func (_eggc Bar3DChart )AddSeries ()BarChartSeries {_adad :=_eggc .nextColor (len (_eggc ._dcd .Ser ));_fafc :=_ad .NewCT_BarSer ();_eggc ._dcd .Ser =append (_eggc ._dcd .Ser ,_fafc );_fafc .Idx .ValAttr =uint32 (len (_eggc ._dcd .Ser )-1);_fafc .Order .ValAttr =uint32 (len (_eggc ._dcd .Ser )-1);_da :=BarChartSeries {_fafc };_da .InitializeDefaults ();_da .Properties ().SetSolidFill (_adad );return _da ;};func MakeNumberDataSource (x *_ad .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// SetText sets the series text
func (_eabe ScatterChartSeries )SetText (s string ){_eabe ._bceb .Tx =_ad .NewCT_SerTx ();_eabe ._bceb .Tx .Choice .V =&s ;};func MakeChart (x *_ad .ChartSpace )Chart {return Chart {x }};func (_aab Bar3DChart )AddAxis (axis Axis ){_bce :=_ad .NewCT_UnsignedInt ();_bce .ValAttr =axis .AxisID ();_aab ._dcd .AxId =append (_aab ._dcd .AxId ,_bce );};var NullAxis Axis =nullAxis (0);

// X returns the inner wrapped XML type.
func (_gfgc AreaChart )X ()*_ad .CT_AreaChart {return _gfgc ._dfaf };

// InitializeDefaults the bar chart to its defaults
func (_a PieOfPieChart )InitializeDefaults (){_a ._eff .VaryColors =_ad .NewCT_Boolean ();_a ._eff .VaryColors .ValAttr =_fbcc .Bool (true );_a .SetType (_ad .ST_OfPieTypePie );_a ._eff .SecondPieSize =_ad .NewCT_SecondPieSize ();_a ._eff .SecondPieSize .ValAttr =&_ad .ST_SecondPieSize {};_a ._eff .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_fbcc .Uint16 (75);_gab :=_ad .NewCT_ChartLines ();_gab .SpPr =_gfeb .NewCT_ShapeProperties ();_eg :=_edc .MakeShapeProperties (_gab .SpPr );_eg .LineProperties ().SetSolidFill (_ccc .Auto );_a ._eff .SerLines =append (_a ._eff .SerLines ,_gab );};

// Values returns the value data source.
func (_bba AreaChartSeries )Values ()NumberDataSource {if _bba ._ecf .Val ==nil {_bba ._ecf .Val =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_bba ._ecf .Val );};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_d nullAxis )AxisID ()uint32 {return 0};

// SetText sets the series text.
func (_gfag BubbleChartSeries )SetText (s string ){_gfag ._cdfe .Tx =_ad .NewCT_SerTx ();_gfag ._cdfe .Tx .Choice .V =&s ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cbd *_ad .CT_Pie3DChart ;};

// X returns the inner wrapped XML type.
func (_aef BarChart )X ()*_ad .CT_BarChart {return _aef ._fg };

// AddLineChart adds a new line chart to a chart.
func (_gge Chart )AddLineChart ()LineChart {_ebec :=_ad .NewCT_PlotAreaChoice ();_gge ._fbe .Chart .PlotArea .Choice =append (_gge ._fbe .Chart .PlotArea .Choice ,_ebec );_ebec .LineChart =_ad .NewCT_LineChart ();_ebec .LineChart .Grouping =_ad .NewCT_Grouping ();_ebec .LineChart .Grouping .ValAttr =_ad .ST_GroupingStandard ;return LineChart {_gda :_ebec .LineChart };};

// InitializeDefaults the bar chart to its defaults
func (_dca PieChart )InitializeDefaults (){_dca ._baeg .VaryColors =_ad .NewCT_Boolean ();_dca ._baeg .VaryColors .ValAttr =_fbcc .Bool (true );};

// X returns the inner wrapped XML type.
func (_ceab BubbleChart )X ()*_ad .CT_BubbleChart {return _ceab ._fc };func (_efag Title )RunProperties ()_edc .RunProperties {if _efag ._gcdg .Tx ==nil {_efag .SetText ("");};if _efag ._gcdg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_efag ._gcdg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_gfeb .NewCT_TextCharacterProperties ();};return _edc .MakeRunProperties (_efag ._gcdg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};

// SetType sets the type the secone pie to either pie or bar
func (_fbc PieOfPieChart )SetType (t _ad .ST_OfPieType ){_fbc ._eff .OfPieType .ValAttr =t };

// CategoryAxis returns the category data source.
func (_cgc RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cgc ._fda .Cat ==nil {_cgc ._fda .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_cgc ._fda .Cat );};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_gbgd Chart )AddSurface3DChart ()Surface3DChart {_agg :=_ad .NewCT_PlotAreaChoice ();_gbgd ._fbe .Chart .PlotArea .Choice =append (_gbgd ._fbe .Chart .PlotArea .Choice ,_agg );_agg .Surface3DChart =_ad .NewCT_Surface3DChart ();_adec (_gbgd ._fbe .Chart );_dac :=Surface3DChart {_ge :_agg .Surface3DChart };_dac .InitializeDefaults ();return _dac ;};func (_db Legend )SetPosition (p _ad .ST_LegendPos ){if p ==_ad .ST_LegendPosUnset {_db ._dadd .LegendPos =nil ;}else {_db ._dadd .LegendPos =_ad .NewCT_LegendPos ();_db ._dadd .LegendPos .ValAttr =p ;};};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_fdf *_ad .CT_LineSer };type CategoryAxis struct{_fgg *_ad .CT_CatAx };func MakeLegend (l *_ad .CT_Legend )Legend {return Legend {l }};

// X returns the inner wrapped XML type.
func (_cac SurfaceChart )X ()*_ad .CT_SurfaceChart {return _cac ._gdc };

// Values returns the value data source.
func (_cge PieChartSeries )Values ()NumberDataSource {if _cge ._aca .Val ==nil {_cge ._aca .Val =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_cge ._aca .Val );};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_bcd Chart )AddLine3DChart ()Line3DChart {_adec (_bcd ._fbe .Chart );_cab :=_ad .NewCT_PlotAreaChoice ();_bcd ._fbe .Chart .PlotArea .Choice =append (_bcd ._fbe .Chart .PlotArea .Choice ,_cab );_cab .Line3DChart =_ad .NewCT_Line3DChart ();_cab .Line3DChart .Grouping =_ad .NewCT_Grouping ();_cab .Line3DChart .Grouping .ValAttr =_ad .ST_GroupingStandard ;return Line3DChart {_bcgg :_cab .Line3DChart };};

// Properties returns the Bubble chart series shape properties.
func (_efb BubbleChartSeries )Properties ()_edc .ShapeProperties {if _efb ._cdfe .SpPr ==nil {_efb ._cdfe .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_efb ._cdfe .SpPr );};func (_edda DateAxis )SetCrosses (axis Axis ){_edda ._gae .CrossAx .ValAttr =axis .AxisID ()};type Line3DChart struct{chartBase ;_bcgg *_ad .CT_Line3DChart ;};

// Properties returns the chart's shape properties.
func (_ecad Chart )Properties ()_edc .ShapeProperties {if _ecad ._fbe .SpPr ==nil {_ecad ._fbe .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_ecad ._fbe .SpPr );};func (_gccd SeriesAxis )AxisID ()uint32 {return _gccd ._bdf .AxId .ValAttr };

// Properties returns the bar chart series shape properties.
func (_agac RadarChartSeries )Properties ()_edc .ShapeProperties {if _agac ._fda .SpPr ==nil {_agac ._fda .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_agac ._fda .SpPr );};

// AddSeries adds a default series to a Bubble chart.
func (_b BubbleChart )AddSeries ()BubbleChartSeries {_bcfa :=_b .nextColor (len (_b ._fc .Ser ));_gbbg :=_ad .NewCT_BubbleSer ();_b ._fc .Ser =append (_b ._fc .Ser ,_gbbg );_gbbg .Idx .ValAttr =uint32 (len (_b ._fc .Ser )-1);_gbbg .Order .ValAttr =uint32 (len (_b ._fc .Ser )-1);_ceg :=BubbleChartSeries {_gbbg };_ceg .InitializeDefaults ();_ceg .Properties ().SetSolidFill (_bcfa );return _ceg ;};func (_bf DataLabels )SetShowCategoryName (b bool ){_bf .ensureChoice ();_bf ._aeed .Choice .ShowCatName =_ad .NewCT_Boolean ();_bf ._aeed .Choice .ShowCatName .ValAttr =_fbcc .Bool (b );};

// SetOrder sets the order of the series
func (_ecfa SurfaceChartSeries )SetOrder (idx uint32 ){_ecfa ._ede .Order .ValAttr =idx };type ValueAxis struct{_abf *_ad .CT_ValAx };func (_fef ValueAxis )SetCrosses (axis Axis ){_fef ._abf .CrossAx .ValAttr =axis .AxisID ()};

// AddScatterChart adds a scatter (X/Y) chart.
func (_ggd Chart )AddScatterChart ()ScatterChart {_abc :=_ad .NewCT_PlotAreaChoice ();_ggd ._fbe .Chart .PlotArea .Choice =append (_ggd ._fbe .Chart .PlotArea .Choice ,_abc );_abc .ScatterChart =_ad .NewCT_ScatterChart ();_gbd :=ScatterChart {_egdfb :_abc .ScatterChart };_gbd .InitializeDefaults ();return _gbd ;};

// AddPie3DChart adds a new pie chart to a chart.
func (_fca Chart )AddPie3DChart ()Pie3DChart {_adec (_fca ._fbe .Chart );_cbb :=_ad .NewCT_PlotAreaChoice ();_fca ._fbe .Chart .PlotArea .Choice =append (_fca ._fbe .Chart .PlotArea .Choice ,_cbb );_cbb .Pie3DChart =_ad .NewCT_Pie3DChart ();_bcfc :=Pie3DChart {_cbd :_cbb .Pie3DChart };_bcfc .InitializeDefaults ();return _bcfc ;};func (_ef ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ef ._bceb .XVal ==nil {_ef ._bceb .XVal =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_ef ._bceb .XVal );};var _fed =[]_ccc .Color {_ccc .RGB (0x33,0x66,0xcc),_ccc .RGB (0xDC,0x39,0x12),_ccc .RGB (0xFF,0x99,0x00),_ccc .RGB (0x10,0x96,0x18),_ccc .RGB (0x99,0x00,0x99),_ccc .RGB (0x3B,0x3E,0xAC),_ccc .RGB (0x00,0x99,0xC6),_ccc .RGB (0xDD,0x44,0x77),_ccc .RGB (0x66,0xAA,0x00),_ccc .RGB (0xB8,0x2E,0x2E),_ccc .RGB (0x31,0x63,0x95),_ccc .RGB (0x99,0x44,0x99),_ccc .RGB (0x22,0xAA,0x99),_ccc .RGB (0xAA,0xAA,0x11),_ccc .RGB (0x66,0x33,0xCC),_ccc .RGB (0xE6,0x73,0x00),_ccc .RGB (0x8B,0x07,0x07),_ccc .RGB (0x32,0x92,0x62),_ccc .RGB (0x55,0x74,0xA6),_ccc .RGB (0x3B,0x3E,0xAC)};

// AddAreaChart adds a new area chart to a chart.
func (_gbcg Chart )AddAreaChart ()AreaChart {_gc :=_ad .NewCT_PlotAreaChoice ();_gbcg ._fbe .Chart .PlotArea .Choice =append (_gbcg ._fbe .Chart .PlotArea .Choice ,_gc );_gc .AreaChart =_ad .NewCT_AreaChart ();_ada :=AreaChart {_dfaf :_gc .AreaChart };_ada .InitializeDefaults ();return _ada ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_agd BarChart )SetDirection (d _ad .ST_BarDir ){_agd ._fg .BarDir .ValAttr =d };

// InitializeDefaults the bar chart to its defaults
func (_ca DoughnutChart )InitializeDefaults (){_ca ._fae .VaryColors =_ad .NewCT_Boolean ();_ca ._fae .VaryColors .ValAttr =_fbcc .Bool (true );_ca ._fae .HoleSize =_ad .NewCT_HoleSize ();_ca ._fae .HoleSize .ValAttr =&_ad .ST_HoleSize {};_ca ._fae .HoleSize .ValAttr .ST_HoleSizeUByte =_fbcc .Uint8 (50);};

// AddBarChart adds a new bar chart to a chart.
func (_gdf Chart )AddBarChart ()BarChart {_fcc :=_ad .NewCT_PlotAreaChoice ();_gdf ._fbe .Chart .PlotArea .Choice =append (_gdf ._fbe .Chart .PlotArea .Choice ,_fcc );_fcc .BarChart =_ad .NewCT_BarChart ();_fcc .BarChart .Grouping =_ad .NewCT_BarGrouping ();_fcc .BarChart .Grouping .ValAttr =_ad .ST_BarGroupingStandard ;_de :=BarChart {_fg :_fcc .BarChart };_de .InitializeDefaults ();return _de ;};

// X returns the inner wrapped XML type.
func (_fec Title )X ()*_ad .CT_Title {return _fec ._gcdg };

// Values returns the value data source.
func (_fccc BarChartSeries )Values ()NumberDataSource {if _fccc ._ced .Val ==nil {_fccc ._ced .Val =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_fccc ._ced .Val );};func MakeDataLabels (x *_ad .CT_DLbls )DataLabels {return DataLabels {x }};

// X returns the inner wrapped XML type.
func (_ed BarChartSeries )X ()*_ad .CT_BarSer {return _ed ._ced };func (_efee DataLabels )SetPosition (p _ad .ST_DLblPos ){_efee .ensureChoice ();_efee ._aeed .Choice .DLblPos =_ad .NewCT_DLblPos ();_efee ._aeed .Choice .DLblPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_dfgc RadarChart )X ()*_ad .CT_RadarChart {return _dfgc ._cgdf };

// X returns the inner wrapped XML type.
func (_f Surface3DChart )X ()*_ad .CT_Surface3DChart {return _f ._ge };

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_bfe *_ad .CT_AxDataSource };

// X returns the inner wrapped XML type.
func (_cccf Area3DChart )X ()*_ad .CT_Area3DChart {return _cccf ._efc };func (_gaa AreaChart )AddAxis (axis Axis ){_ffc :=_ad .NewCT_UnsignedInt ();_ffc .ValAttr =axis .AxisID ();_gaa ._dfaf .AxId =append (_gaa ._dfaf .AxId ,_ffc );};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_bceb *_ad .CT_ScatterSer };

// AddSeries adds a default series to an Pie chart.
func (_fe PieChart )AddSeries ()PieChartSeries {_gcb :=_ad .NewCT_PieSer ();_fe ._baeg .Ser =append (_fe ._baeg .Ser ,_gcb );_gcb .Idx .ValAttr =uint32 (len (_fe ._baeg .Ser )-1);_gcb .Order .ValAttr =uint32 (len (_fe ._baeg .Ser )-1);_cc :=PieChartSeries {_gcb };_cc .InitializeDefaults ();return _cc ;};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_fc *_ad .CT_BubbleChart ;};func (_bfa CategoryAxis )SetMajorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_bfa ._fgg .MajorTickMark =nil ;}else {_bfa ._fgg .MajorTickMark =_ad .NewCT_TickMark ();_bfa ._fgg .MajorTickMark .ValAttr =m ;};};func (_gace LineChartSeries )Values ()NumberDataSource {if _gace ._fdf .Val ==nil {_gace ._fdf .Val =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_gace ._fdf .Val );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_eff *_ad .CT_OfPieChart ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_fgfc Bar3DChart )SetDirection (d _ad .ST_BarDir ){_fgfc ._dcd .BarDir .ValAttr =d };

// X returns the inner wrapped XML type.
func (_ceda LineChart )X ()*_ad .CT_LineChart {return _ceda ._gda };func (_aba SurfaceChartSeries )Values ()NumberDataSource {if _aba ._ede .Val ==nil {_aba ._ede .Val =_ad .NewCT_NumDataSource ();};_cead :=MakeNumberDataSource (_aba ._ede .Val );_cead .CreateEmptyNumberCache ();return _cead ;};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_ced *_ad .CT_BarSer };type chartBase struct{};

// InitializeDefaults the bar chart to its defaults
func (_agb Pie3DChart )InitializeDefaults (){_agb ._cbd .VaryColors =_ad .NewCT_Boolean ();_agb ._cbd .VaryColors .ValAttr =_fbcc .Bool (true );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_ge *_ad .CT_Surface3DChart ;};type GridLines struct{_egd *_ad .CT_ChartLines };

// SetValues is used to set the source data to a set of values.
func (_bcfd CategoryAxisDataSource )SetValues (v []string ){_bcfd ._bfe .Choice =_ad .NewCT_AxDataSourceChoice ();_bcfd ._bfe .Choice .StrLit =_ad .NewCT_StrData ();_bcfd ._bfe .Choice .StrLit .PtCount =_ad .NewCT_UnsignedInt ();_bcfd ._bfe .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _gbe ,_bcb :=range v {_bcfd ._bfe .Choice .StrLit .Pt =append (_bcfd ._bfe .Choice .StrLit .Pt ,&_ad .CT_StrVal {IdxAttr :uint32 (_gbe ),V :_bcb });};};func (_gad Chart )AddSeriesAxis ()SeriesAxis {_bcab :=_ad .NewCT_SerAx ();if _gad ._fbe .Chart .PlotArea .CChoice ==nil {_gad ._fbe .Chart .PlotArea .CChoice =_ad .NewCT_PlotAreaChoice1 ();};_bcab .AxId =_ad .NewCT_UnsignedInt ();_bcab .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_gad ._fbe .Chart .PlotArea .CChoice .SerAx =append (_gad ._fbe .Chart .PlotArea .CChoice .SerAx ,_bcab );_bcab .Delete =_ad .NewCT_Boolean ();_bcab .Delete .ValAttr =_fbcc .Bool (false );_bgeg :=MakeSeriesAxis (_bcab );_bgeg .InitializeDefaults ();return _bgeg ;};func MakeValueAxis (x *_ad .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_bcf DataLabels )SetShowValue (b bool ){_bcf .ensureChoice ();_bcf ._aeed .Choice .ShowVal =_ad .NewCT_Boolean ();_bcf ._aeed .Choice .ShowVal .ValAttr =_fbcc .Bool (b );};

// X returns the inner wrapped XML type.
func (_deg Bar3DChart )X ()*_ad .CT_Bar3DChart {return _deg ._dcd };func (_abe CategoryAxis )SetCrosses (axis Axis ){_abe ._fgg .Choice =_ad .NewEG_AxSharedChoice ();_abe ._fgg .Choice .Crosses =_ad .NewCT_Crosses ();_abe ._fgg .Choice .Crosses .ValAttr =_ad .ST_CrossesAutoZero ;_abe ._fgg .CrossAx .ValAttr =axis .AxisID ();};

// AddSeries adds a default series to a Surface chart.
func (_fcf Surface3DChart )AddSeries ()SurfaceChartSeries {_bed :=_fcf .nextColor (len (_fcf ._ge .Ser ));_eafc :=_ad .NewCT_SurfaceSer ();_fcf ._ge .Ser =append (_fcf ._ge .Ser ,_eafc );_eafc .Idx .ValAttr =uint32 (len (_fcf ._ge .Ser )-1);_eafc .Order .ValAttr =uint32 (len (_fcf ._ge .Ser )-1);_dgb :=SurfaceChartSeries {_eafc };_dgb .InitializeDefaults ();_dgb .Properties ().LineProperties ().SetSolidFill (_bed );return _dgb ;};func (_gfe Title )SetText (s string ){if _gfe ._gcdg .Tx ==nil {_gfe ._gcdg .Tx =_ad .NewCT_Tx ();};if _gfe ._gcdg .Tx .Choice .Rich ==nil {_gfe ._gcdg .Tx .Choice .Rich =_gfeb .NewCT_TextBody ();};var _ag *_gfeb .CT_TextParagraph ;if len (_gfe ._gcdg .Tx .Choice .Rich .P )==0{_ag =_gfeb .NewCT_TextParagraph ();_gfe ._gcdg .Tx .Choice .Rich .P =[]*_gfeb .CT_TextParagraph {_ag };}else {_ag =_gfe ._gcdg .Tx .Choice .Rich .P [0];};var _bfec *_gfeb .EG_TextRun ;if len (_ag .EG_TextRun )==0{_bfec =_gfeb .NewEG_TextRun ();_ag .EG_TextRun =[]*_gfeb .EG_TextRun {_bfec };}else {_bfec =_ag .EG_TextRun [0];};if _bfec .R ==nil {_bfec .R =_gfeb .NewCT_RegularTextRun ();};_bfec .R .T =s ;};

// Values returns the bubble size data source.
func (_ade BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ade ._cdfe .BubbleSize ==nil {_ade ._cdfe .BubbleSize =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_ade ._cdfe .BubbleSize );};

// AddSeries adds a default series to an Doughnut chart.
func (_eab DoughnutChart )AddSeries ()PieChartSeries {_gec :=_ad .NewCT_PieSer ();_eab ._fae .Ser =append (_eab ._fae .Ser ,_gec );_gec .Idx .ValAttr =uint32 (len (_eab ._fae .Ser )-1);_gec .Order .ValAttr =uint32 (len (_eab ._fae .Ser )-1);_bdfb :=PieChartSeries {_gec };_bdfb .InitializeDefaults ();return _bdfb ;};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_aca *_ad .CT_PieSer };type LineChart struct{chartBase ;_gda *_ad .CT_LineChart ;};

// RemoveTitle removes any existing title from the chart.
func (_fdae Chart )RemoveTitle (){_fdae ._fbe .Chart .Title =nil ;_fdae ._fbe .Chart .AutoTitleDeleted =_ad .NewCT_Boolean ();_fdae ._fbe .Chart .AutoTitleDeleted .ValAttr =_fbcc .Bool (true );};func (_gabf Surface3DChart )InitializeDefaults (){_gabf ._ge .Wireframe =_ad .NewCT_Boolean ();_gabf ._ge .Wireframe .ValAttr =_fbcc .Bool (false );_gabf ._ge .BandFmts =_ad .NewCT_BandFmts ();for _acdc :=0;_acdc < 15;_acdc ++{_aceb :=_ad .NewCT_BandFmt ();_aceb .Idx .ValAttr =uint32 (_acdc );_aceb .SpPr =_gfeb .NewCT_ShapeProperties ();_acc :=_edc .MakeShapeProperties (_aceb .SpPr );_acc .SetSolidFill (_gabf .nextColor (_acdc ));_gabf ._ge .BandFmts .BandFmt =append (_gabf ._ge .BandFmts .BandFmt ,_aceb );};};

// AddSeries adds a default series to a line chart.
func (_beag Line3DChart )AddSeries ()LineChartSeries {_ebg :=_beag .nextColor (len (_beag ._bcgg .Ser ));_bee :=_ad .NewCT_LineSer ();_beag ._bcgg .Ser =append (_beag ._bcgg .Ser ,_bee );_bee .Idx .ValAttr =uint32 (len (_beag ._bcgg .Ser )-1);_bee .Order .ValAttr =uint32 (len (_beag ._bcgg .Ser )-1);_fbb :=LineChartSeries {_bee };_fbb .InitializeDefaults ();_fbb .Properties ().LineProperties ().SetSolidFill (_ebg );_fbb .Properties ().SetSolidFill (_ebg );return _fbb ;};

// AddSeries adds a default series to a Scatter chart.
func (_bcef ScatterChart )AddSeries ()ScatterChartSeries {_ecdb :=_bcef .nextColor (len (_bcef ._egdfb .Ser ));_gga :=_ad .NewCT_ScatterSer ();_bcef ._egdfb .Ser =append (_bcef ._egdfb .Ser ,_gga );_gga .Idx .ValAttr =uint32 (len (_bcef ._egdfb .Ser )-1);_gga .Order .ValAttr =uint32 (len (_bcef ._egdfb .Ser )-1);_fbab :=ScatterChartSeries {_gga };_fbab .InitializeDefaults ();_fbab .Marker ().Properties ().LineProperties ().SetSolidFill (_ecdb );_fbab .Marker ().Properties ().SetSolidFill (_ecdb );return _fbab ;};

// AddRadarChart adds a new radar chart to a chart.
func (_eb Chart )AddRadarChart ()RadarChart {_bgc :=_ad .NewCT_PlotAreaChoice ();_eb ._fbe .Chart .PlotArea .Choice =append (_eb ._fbe .Chart .PlotArea .Choice ,_bgc );_bgc .RadarChart =_ad .NewCT_RadarChart ();_eabb :=RadarChart {_cgdf :_bgc .RadarChart };_eabb .InitializeDefaults ();return _eabb ;};func (_gf NumberDataSource )ensureChoice (){if _gf ._dfg .Choice ==nil {_gf ._dfg .Choice =_ad .NewCT_NumDataSourceChoice ();};};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_acg Chart )SetDisplayBlanksAs (v _ad .ST_DispBlanksAs ){_acg ._fbe .Chart .DispBlanksAs =_ad .NewCT_DispBlanksAs ();_acg ._fbe .Chart .DispBlanksAs .ValAttr =v ;};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_cee BubbleChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_cfb SeriesAxis )X ()*_ad .CT_SerAx {return _cfb ._bdf };func (_gg ScatterChartSeries )InitializeDefaults (){_gg .Properties ().LineProperties ().SetNoFill ();_gg .Marker ().SetSymbol (_ad .ST_MarkerStyleAuto );_gg .Labels ().SetShowLegendKey (false );_gg .Labels ().SetShowValue (true );_gg .Labels ().SetShowPercent (false );_gg .Labels ().SetShowCategoryName (false );_gg .Labels ().SetShowSeriesName (false );_gg .Labels ().SetShowLeaderLines (false );};

// X returns the inner wrapped XML type.
func (_be PieOfPieChart )X ()*_ad .CT_OfPieChart {return _be ._eff };func (_beb DateAxis )SetPosition (p _ad .ST_AxPos ){_beb ._gae .AxPos =_ad .NewCT_AxPos ();_beb ._gae .AxPos .ValAttr =p ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ecf *_ad .CT_AreaSer };

// X returns the inner wrapped XML type.
func (_bgf DoughnutChart )X ()*_ad .CT_DoughnutChart {return _bgf ._fae };type Legend struct{_dadd *_ad .CT_Legend };func (_ddgb DataLabels )SetShowLeaderLines (b bool ){_ddgb .ensureChoice ();_ddgb ._aeed .Choice .ShowLeaderLines =_ad .NewCT_Boolean ();_ddgb ._aeed .Choice .ShowLeaderLines .ValAttr =_fbcc .Bool (b );};func (_c Title )InitializeDefaults (){_c .SetText ("\u0054\u0069\u0074l\u0065");_c .RunProperties ().SetSize (16*_dfafd .Point );_c .RunProperties ().SetSolidFill (_ccc .Black );_c .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_c .RunProperties ().SetBold (false );};

// X returns the inner wrapped XML type.
func (_acf Chart )X ()*_ad .ChartSpace {return _acf ._fbe };

// X returns the inner wrapped XML type.
func (_ce BubbleChartSeries )X ()*_ad .CT_BubbleSer {return _ce ._cdfe };func (_dfgca RadarChart )AddAxis (axis Axis ){_dgdf :=_ad .NewCT_UnsignedInt ();_dgdf .ValAttr =axis .AxisID ();_dfgca ._cgdf .AxId =append (_dfgca ._cgdf .AxId ,_dgdf );};func (_cade DateAxis )AxisID ()uint32 {return _cade ._gae .AxId .ValAttr };

// SetIndex sets the index of the series
func (_ee SurfaceChartSeries )SetIndex (idx uint32 ){_ee ._ede .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_bdg ScatterChart )X ()*_ad .CT_ScatterChart {return _bdg ._egdfb };func (_agff ValueAxis )SetMinorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_agff ._abf .MinorTickMark =nil ;}else {_agff ._abf .MinorTickMark =_ad .NewCT_TickMark ();_agff ._abf .MinorTickMark .ValAttr =m ;};};func (_cd CategoryAxis )SetTickLabelPosition (p _ad .ST_TickLblPos ){if p ==_ad .ST_TickLblPosUnset {_cd ._fgg .TickLblPos =nil ;}else {_cd ._fgg .TickLblPos =_ad .NewCT_TickLblPos ();_cd ._fgg .TickLblPos .ValAttr =p ;};};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_begc NumberDataSource )CreateEmptyNumberCache (){_begc .ensureChoice ();if _begc ._dfg .Choice .NumRef ==nil {_begc ._dfg .Choice .NumRef =_ad .NewCT_NumRef ();};_begc ._dfg .Choice .NumLit =nil ;_begc ._dfg .Choice .NumRef .NumCache =_ad .NewCT_NumData ();_begc ._dfg .Choice .NumRef .NumCache .PtCount =_ad .NewCT_UnsignedInt ();_begc ._dfg .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// InitializeDefaults the bar chart to its defaults
func (_dc Bar3DChart )InitializeDefaults (){_dc .SetDirection (_ad .ST_BarDirCol )};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_cdf *_ad .CT_StockChart ;};

// X returns the inner wrapped XML type.
func (_bc LineChartSeries )X ()*_ad .CT_LineSer {return _bc ._fdf };func (_ccd Marker )SetSize (sz uint8 ){_ccd ._cbde .Size =_ad .NewCT_MarkerSize ();_ccd ._cbde .Size .ValAttr =&sz ;};type SeriesAxis struct{_bdf *_ad .CT_SerAx };func (_fgff ValueAxis )SetPosition (p _ad .ST_AxPos ){_fgff ._abf .AxPos =_ad .NewCT_AxPos ();_fgff ._abf .AxPos .ValAttr =p ;};func (_ggeb ScatterChartSeries )Values ()NumberDataSource {if _ggeb ._bceb .YVal ==nil {_ggeb ._bceb .YVal =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_ggeb ._bceb .YVal );};

// SetValues sets values directly on a source.
func (_af NumberDataSource )SetValues (v []float64 ){_af .ensureChoice ();_af ._dfg .Choice .NumRef =nil ;_af ._dfg .Choice .NumLit =_ad .NewCT_NumData ();_af ._dfg .Choice .NumLit .PtCount =_ad .NewCT_UnsignedInt ();_af ._dfg .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _fb ,_eaf :=range v {_af ._dfg .Choice .NumLit .Pt =append (_af ._dfg .Choice .NumLit .Pt ,&_ad .CT_NumVal {IdxAttr :uint32 (_fb ),V :_bab .Sprintf ("\u0025\u0067",_eaf )});};};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_aee Chart )AddPieOfPieChart ()PieOfPieChart {_egc :=_ad .NewCT_PlotAreaChoice ();_aee ._fbe .Chart .PlotArea .Choice =append (_aee ._fbe .Chart .PlotArea .Choice ,_egc );_egc .OfPieChart =_ad .NewCT_OfPieChart ();_aga :=PieOfPieChart {_eff :_egc .OfPieChart };_aga .InitializeDefaults ();return _aga ;};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_cdfe *_ad .CT_BubbleSer };

// SetText sets the series text.
func (_dcb PieChartSeries )SetText (s string ){_dcb ._aca .Tx =_ad .NewCT_SerTx ();_dcb ._aca .Tx .Choice .V =&s ;};type DateAxis struct{_gae *_ad .CT_DateAx };

// X returns the inner wrapped XML type.
func (_edd Legend )X ()*_ad .CT_Legend {return _edd ._dadd };func (_ffg CategoryAxis )Properties ()_edc .ShapeProperties {if _ffg ._fgg .SpPr ==nil {_ffg ._fgg .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_ffg ._fgg .SpPr );};

// AddSeries adds a default series to an Radar chart.
func (_gb RadarChart )AddSeries ()RadarChartSeries {_gca :=_gb .nextColor (len (_gb ._cgdf .Ser ));_beg :=_ad .NewCT_RadarSer ();_gb ._cgdf .Ser =append (_gb ._cgdf .Ser ,_beg );_beg .Idx .ValAttr =uint32 (len (_gb ._cgdf .Ser )-1);_beg .Order .ValAttr =uint32 (len (_gb ._cgdf .Ser )-1);_bdfe :=RadarChartSeries {_beg };_bdfe .InitializeDefaults ();_bdfe .Properties ().SetSolidFill (_gca );return _bdfe ;};func (_ffca DateAxis )SetMajorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_ffca ._gae .MajorTickMark =nil ;}else {_ffca ._gae .MajorTickMark =_ad .NewCT_TickMark ();_ffca ._gae .MajorTickMark .ValAttr =m ;};};type Title struct{_gcdg *_ad .CT_Title };

// AddTitle sets a new title on the chart.
func (_aad Chart )AddTitle ()Title {_aad ._fbe .Chart .Title =_ad .NewCT_Title ();_aad ._fbe .Chart .Title .Overlay =_ad .NewCT_Boolean ();_aad ._fbe .Chart .Title .Overlay .ValAttr =_fbcc .Bool (false );_aad ._fbe .Chart .AutoTitleDeleted =_ad .NewCT_Boolean ();_aad ._fbe .Chart .AutoTitleDeleted .ValAttr =_fbcc .Bool (false );_babe :=MakeTitle (_aad ._fbe .Chart .Title );_babe .InitializeDefaults ();return _babe ;};

// RemoveLegend removes the legend if the chart has one.
func (_ddb Chart )RemoveLegend (){_ddb ._fbe .Chart .Legend =nil };func (_ccgf Marker )SetSymbol (s _ad .ST_MarkerStyle ){if s ==_ad .ST_MarkerStyleUnset {_ccgf ._cbde .Symbol =nil ;}else {_ccgf ._cbde .Symbol =_ad .NewCT_MarkerStyle ();_ccgf ._cbde .Symbol .ValAttr =s ;};};func (_bcdg ValueAxis )MajorGridLines ()GridLines {if _bcdg ._abf .MajorGridlines ==nil {_bcdg ._abf .MajorGridlines =_ad .NewCT_ChartLines ();};return GridLines {_bcdg ._abf .MajorGridlines };};func (_bdc DataLabels )SetShowLegendKey (b bool ){_bdc .ensureChoice ();_bdc ._aeed .Choice .ShowLegendKey =_ad .NewCT_Boolean ();_bdc ._aeed .Choice .ShowLegendKey .ValAttr =_fbcc .Bool (b );};

// Chart is a generic chart.
type Chart struct{_fbe *_ad .ChartSpace };

// Marker returns the marker properties.
func (_gac ScatterChartSeries )Marker ()Marker {if _gac ._bceb .Marker ==nil {_gac ._bceb .Marker =_ad .NewCT_Marker ();};return MakeMarker (_gac ._bceb .Marker );};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_fgc Chart )AddLegend ()Legend {_fgc ._fbe .Chart .Legend =_ad .NewCT_Legend ();_gebg :=MakeLegend (_fgc ._fbe .Chart .Legend );_gebg .InitializeDefaults ();return _gebg ;};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_efc *_ad .CT_Area3DChart ;};func MakeSeriesAxis (x *_ad .CT_SerAx )SeriesAxis {return SeriesAxis {x }};func (_beeb DataLabels )SetShowPercent (b bool ){_beeb .ensureChoice ();_beeb ._aeed .Choice .ShowPercent =_ad .NewCT_Boolean ();_beeb ._aeed .Choice .ShowPercent .ValAttr =_fbcc .Bool (b );};func (_dba Marker )Properties ()_edc .ShapeProperties {if _dba ._cbde .SpPr ==nil {_dba ._cbde .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_dba ._cbde .SpPr );};

// X returns the inner wrapped XML type.
func (_efa ValueAxis )X ()*_ad .CT_ValAx {return _efa ._abf };func (_gcad LineChartSeries )SetSmooth (b bool ){_gcad ._fdf .Smooth =_ad .NewCT_Boolean ();_gcad ._fdf .Smooth .ValAttr =&b ;};func MakeCategoryAxis (x *_ad .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// AddSeries adds a default series to an Pie chart.
func (_ggc PieOfPieChart )AddSeries ()PieChartSeries {_egg :=_ad .NewCT_PieSer ();_ggc ._eff .Ser =append (_ggc ._eff .Ser ,_egg );_egg .Idx .ValAttr =uint32 (len (_ggc ._eff .Ser )-1);_egg .Order .ValAttr =uint32 (len (_ggc ._eff .Ser )-1);_cgg :=PieChartSeries {_egg };_cgg .InitializeDefaults ();return _cgg ;};func (_eaa CategoryAxis )AxisID ()uint32 {return _eaa ._fgg .AxId .ValAttr };func (_ab Area3DChart )AddAxis (axis Axis ){_faeea :=_ad .NewCT_UnsignedInt ();_faeea .ValAttr =axis .AxisID ();_ab ._efc .AxId =append (_ab ._efc .AxId ,_faeea );};

// AddStockChart adds a new stock chart.
func (_gba Chart )AddStockChart ()StockChart {_ebf :=_ad .NewCT_PlotAreaChoice ();_gba ._fbe .Chart .PlotArea .Choice =append (_gba ._fbe .Chart .PlotArea .Choice ,_ebf );_ebf .StockChart =_ad .NewCT_StockChart ();_dagf :=StockChart {_cdf :_ebf .StockChart };_dagf .InitializeDefaults ();return _dagf ;};

// AddSeries adds a default series to an area chart.
func (_egf Area3DChart )AddSeries ()AreaChartSeries {_dfac :=_egf .nextColor (len (_egf ._efc .Ser ));_dfe :=_ad .NewCT_AreaSer ();_egf ._efc .Ser =append (_egf ._efc .Ser ,_dfe );_dfe .Idx .ValAttr =uint32 (len (_egf ._efc .Ser )-1);_dfe .Order .ValAttr =uint32 (len (_egf ._efc .Ser )-1);_cdb :=AreaChartSeries {_dfe };_cdb .InitializeDefaults ();_cdb .Properties ().SetSolidFill (_dfac );return _cdb ;};func (_fga ScatterChartSeries )SetSmooth (b bool ){_fga ._bceb .Smooth =_ad .NewCT_Boolean ();_fga ._bceb .Smooth .ValAttr =&b ;};func (_bge chartBase )nextColor (_bdgb int )_ccc .Color {return _fed [_bdgb %len (_fed )]};

// SetText sets the series text
func (_ddd LineChartSeries )SetText (s string ){_ddd ._fdf .Tx =_ad .NewCT_SerTx ();_ddd ._fdf .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_adbd Marker )X ()*_ad .CT_Marker {return _adbd ._cbde };

// AddSeries adds a default series to a line chart.
func (_caaf LineChart )AddSeries ()LineChartSeries {_cdcg :=_caaf .nextColor (len (_caaf ._gda .Ser ));_dfa :=_ad .NewCT_LineSer ();_caaf ._gda .Ser =append (_caaf ._gda .Ser ,_dfa );_dfa .Idx .ValAttr =uint32 (len (_caaf ._gda .Ser )-1);_dfa .Order .ValAttr =uint32 (len (_caaf ._gda .Ser )-1);_fbf :=LineChartSeries {_dfa };_fbf .InitializeDefaults ();_fbf .Properties ().LineProperties ().SetSolidFill (_cdcg );return _fbf ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_dcd *_ad .CT_Bar3DChart ;};

// X returns the inner wrapped XML type.
func (_dg StockChart )X ()*_ad .CT_StockChart {return _dg ._cdf };

// AddSeries adds a default series to an Pie3D chart.
func (_aae Pie3DChart )AddSeries ()PieChartSeries {_fgf :=_ad .NewCT_PieSer ();_aae ._cbd .Ser =append (_aae ._cbd .Ser ,_fgf );_fgf .Idx .ValAttr =uint32 (len (_aae ._cbd .Ser )-1);_fgf .Order .ValAttr =uint32 (len (_aae ._cbd .Ser )-1);_bde :=PieChartSeries {_fgf };_bde .InitializeDefaults ();return _bde ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_fg *_ad .CT_BarChart ;};

// AddAxis adds an axis to a Surface chart.
func (_cad SurfaceChart )AddAxis (axis Axis ){_dddg :=_ad .NewCT_UnsignedInt ();_dddg .ValAttr =axis .AxisID ();_cad ._gdc .AxId =append (_cad ._gdc .AxId ,_dddg );};

// SetText sets the series text
func (_ccg SurfaceChartSeries )SetText (s string ){_ccg ._ede .Tx =_ad .NewCT_SerTx ();_ccg ._ede .Tx .Choice .V =&s ;};func (_age BarChart )AddAxis (axis Axis ){_dgbg :=_ad .NewCT_UnsignedInt ();_dgbg .ValAttr =axis .AxisID ();_age ._fg .AxId =append (_age ._fg .AxId ,_dgbg );};func (_dfgd CategoryAxis )MajorGridLines ()GridLines {if _dfgd ._fgg .MajorGridlines ==nil {_dfgd ._fgg .MajorGridlines =_ad .NewCT_ChartLines ();};return GridLines {_dfgd ._fgg .MajorGridlines };};

// Properties returns the bar chart series shape properties.
func (_ebb PieChartSeries )Properties ()_edc .ShapeProperties {if _ebb ._aca .SpPr ==nil {_ebb ._aca .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_ebb ._aca .SpPr );};

// InitializeDefaults initializes an Radar series to the default values.
func (_caa RadarChartSeries )InitializeDefaults (){};func (_bff LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bff ._fdf .Cat ==nil {_bff ._fdf .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_bff ._fdf .Cat );};

// Labels returns the data label properties.
func (_dgba LineChartSeries )Labels ()DataLabels {if _dgba ._fdf .DLbls ==nil {_dgba ._fdf .DLbls =_ad .NewCT_DLbls ();};return MakeDataLabels (_dgba ._fdf .DLbls );};

// Properties returns the line chart series shape properties.
func (_bea ScatterChartSeries )Properties ()_edc .ShapeProperties {if _bea ._bceb .SpPr ==nil {_bea ._bceb .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_bea ._bceb .SpPr );};

// Properties returns the bar chart series shape properties.
func (_ega BarChartSeries )Properties ()_edc .ShapeProperties {if _ega ._ced .SpPr ==nil {_ega ._ced .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_ega ._ced .SpPr );};func (_bfd ValueAxis )AxisID ()uint32 {return _bfd ._abf .AxId .ValAttr };type NumberDataSource struct{_dfg *_ad .CT_NumDataSource };

// Values returns the value data source.
func (_aadd RadarChartSeries )Values ()NumberDataSource {if _aadd ._fda .Val ==nil {_aadd ._fda .Val =_ad .NewCT_NumDataSource ();};return MakeNumberDataSource (_aadd ._fda .Val );};

// Index returns the index of the series
func (_cgd SurfaceChartSeries )Index ()uint32 {return _cgd ._ede .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_dfeb AreaChartSeries )X ()*_ad .CT_AreaSer {return _dfeb ._ecf };

// AddValueAxis adds a value axis to the chart.
func (_ace Chart )AddValueAxis ()ValueAxis {_bcgda :=_ad .NewCT_ValAx ();if _ace ._fbe .Chart .PlotArea .CChoice ==nil {_ace ._fbe .Chart .PlotArea .CChoice =_ad .NewCT_PlotAreaChoice1 ();};_bcgda .AxId =_ad .NewCT_UnsignedInt ();_bcgda .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_ace ._fbe .Chart .PlotArea .CChoice .ValAx =append (_ace ._fbe .Chart .PlotArea .CChoice .ValAx ,_bcgda );_bcgda .Delete =_ad .NewCT_Boolean ();_bcgda .Delete .ValAttr =_fbcc .Bool (false );_bcgda .Scaling =_ad .NewCT_Scaling ();_bcgda .Scaling .Orientation =_ad .NewCT_Orientation ();_bcgda .Scaling .Orientation .ValAttr =_ad .ST_OrientationMinMax ;_bcgda .Choice =&_ad .EG_AxSharedChoice {};_bcgda .Choice .Crosses =_ad .NewCT_Crosses ();_bcgda .Choice .Crosses .ValAttr =_ad .ST_CrossesAutoZero ;_bcgda .CrossBetween =_ad .NewCT_CrossBetween ();_bcgda .CrossBetween .ValAttr =_ad .ST_CrossBetweenBetween ;_dgg :=MakeValueAxis (_bcgda );_dgg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ccc .LightGray );_dgg .SetMajorTickMark (_ad .ST_TickMarkOut );_dgg .SetMinorTickMark (_ad .ST_TickMarkIn );_dgg .SetTickLabelPosition (_ad .ST_TickLblPosNextTo );_dgg .Properties ().LineProperties ().SetSolidFill (_ccc .Black );_dgg .SetPosition (_ad .ST_AxPosL );return _dgg ;};

// Properties returns the line chart series shape properties.
func (_egdf SurfaceChartSeries )Properties ()_edc .ShapeProperties {if _egdf ._ede .SpPr ==nil {_egdf ._ede .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_egdf ._ede .SpPr );};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_gdc *_ad .CT_SurfaceChart ;};

// Order returns the order of the series
func (_fee ScatterChartSeries )Order ()uint32 {return _fee ._bceb .Order .ValAttr };

// AddCategoryAxis adds a category axis.
func (_acea Chart )AddCategoryAxis ()CategoryAxis {_aadg :=_ad .NewCT_CatAx ();if _acea ._fbe .Chart .PlotArea .CChoice ==nil {_acea ._fbe .Chart .PlotArea .CChoice =_ad .NewCT_PlotAreaChoice1 ();};_aadg .AxId =_ad .NewCT_UnsignedInt ();_aadg .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_acea ._fbe .Chart .PlotArea .CChoice .CatAx =append (_acea ._fbe .Chart .PlotArea .CChoice .CatAx ,_aadg );_aadg .Auto =_ad .NewCT_Boolean ();_aadg .Auto .ValAttr =_fbcc .Bool (true );_aadg .Delete =_ad .NewCT_Boolean ();_aadg .Delete .ValAttr =_fbcc .Bool (false );_ac :=MakeCategoryAxis (_aadg );_ac .InitializeDefaults ();return _ac ;};

// InitializeDefaults the bar chart to its defaults
func (_dd RadarChart )InitializeDefaults (){_dd ._cgdf .RadarStyle .ValAttr =_ad .ST_RadarStyleMarker };

// SetText sets the series text.
func (_ggb BarChartSeries )SetText (s string ){_ggb ._ced .Tx =_ad .NewCT_SerTx ();_ggb ._ced .Tx .Choice .V =&s ;};func MakeMarker (x *_ad .CT_Marker )Marker {return Marker {x }};func (_ffb DateAxis )MajorGridLines ()GridLines {if _ffb ._gae .MajorGridlines ==nil {_ffb ._gae .MajorGridlines =_ad .NewCT_ChartLines ();};return GridLines {_ffb ._gae .MajorGridlines };};

// Labels returns the data label properties.
func (_aag ScatterChartSeries )Labels ()DataLabels {if _aag ._bceb .DLbls ==nil {_aag ._bceb .DLbls =_ad .NewCT_DLbls ();};return MakeDataLabels (_aag ._bceb .DLbls );};

// CategoryAxis returns the category data source.
func (_gccb BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gccb ._ced .Cat ==nil {_gccb ._ced .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_gccb ._ced .Cat );};

// SetOrder sets the order of the series
func (_dbd ScatterChartSeries )SetOrder (idx uint32 ){_dbd ._bceb .Order .ValAttr =idx };func (_bgege ScatterChart )InitializeDefaults (){_bgege ._egdfb .ScatterStyle .ValAttr =_ad .ST_ScatterStyleMarker ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_aed CategoryAxisDataSource )SetLabelReference (s string ){_aed ._bfe .Choice =_ad .NewCT_AxDataSourceChoice ();_aed ._bfe .Choice .StrRef =_ad .NewCT_StrRef ();_aed ._bfe .Choice .StrRef .F =s ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_cgdf *_ad .CT_RadarChart ;};

// SetIndex sets the index of the series
func (_faf ScatterChartSeries )SetIndex (idx uint32 ){_faf ._bceb .Idx .ValAttr =idx };type DataLabels struct{_aeed *_ad .CT_DLbls };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_dfaf *_ad .CT_AreaChart ;};

// AddDateAxis adds a value axis to the chart.
func (_daca Chart )AddDateAxis ()DateAxis {_ece :=_ad .NewCT_DateAx ();if _daca ._fbe .Chart .PlotArea .CChoice ==nil {_daca ._fbe .Chart .PlotArea .CChoice =_ad .NewCT_PlotAreaChoice1 ();};_ece .AxId =_ad .NewCT_UnsignedInt ();_ece .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_daca ._fbe .Chart .PlotArea .CChoice .DateAx =append (_daca ._fbe .Chart .PlotArea .CChoice .DateAx ,_ece );_ece .Delete =_ad .NewCT_Boolean ();_ece .Delete .ValAttr =_fbcc .Bool (false );_ece .Scaling =_ad .NewCT_Scaling ();_ece .Scaling .Orientation =_ad .NewCT_Orientation ();_ece .Scaling .Orientation .ValAttr =_ad .ST_OrientationMinMax ;_ece .Choice =&_ad .EG_AxSharedChoice {};_ece .Choice .Crosses =_ad .NewCT_Crosses ();_ece .Choice .Crosses .ValAttr =_ad .ST_CrossesAutoZero ;_dga :=DateAxis {_ece };_dga .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ccc .LightGray );_dga .SetMajorTickMark (_ad .ST_TickMarkOut );_dga .SetMinorTickMark (_ad .ST_TickMarkIn );_dga .SetTickLabelPosition (_ad .ST_TickLblPosNextTo );_dga .Properties ().LineProperties ().SetSolidFill (_ccc .Black );_dga .SetPosition (_ad .ST_AxPosL );return _dga ;};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_baeg *_ad .CT_PieChart ;};func (_ecc SeriesAxis )InitializeDefaults (){};

// AddSeries adds a default series to a Surface chart.
func (_gfbg SurfaceChart )AddSeries ()SurfaceChartSeries {_ecd :=_gfbg .nextColor (len (_gfbg ._gdc .Ser ));_ea :=_ad .NewCT_SurfaceSer ();_gfbg ._gdc .Ser =append (_gfbg ._gdc .Ser ,_ea );_ea .Idx .ValAttr =uint32 (len (_gfbg ._gdc .Ser )-1);_ea .Order .ValAttr =uint32 (len (_gfbg ._gdc .Ser )-1);_abfg :=SurfaceChartSeries {_ea };_abfg .InitializeDefaults ();_abfg .Properties ().LineProperties ().SetSolidFill (_ecd );return _abfg ;};func MakeTitle (x *_ad .CT_Title )Title {return Title {x }};

// AddArea3DChart adds a new area chart to a chart.
func (_afg Chart )AddArea3DChart ()Area3DChart {_adec (_afg ._fbe .Chart );_fgfb :=_ad .NewCT_PlotAreaChoice ();_afg ._fbe .Chart .PlotArea .Choice =append (_afg ._fbe .Chart .PlotArea .Choice ,_fgfb );_fgfb .Area3DChart =_ad .NewCT_Area3DChart ();_feb :=Area3DChart {_efc :_fgfb .Area3DChart };_feb .InitializeDefaults ();return _feb ;};func (_fecc Legend )InitializeDefaults (){_fecc .SetPosition (_ad .ST_LegendPosR );_fecc .SetOverlay (false );_fecc .Properties ().SetNoFill ();_fecc .Properties ().LineProperties ().SetNoFill ();};

// AddSurfaceChart adds a new surface chart to a chart.
func (_bd Chart )AddSurfaceChart ()SurfaceChart {_ga :=_ad .NewCT_PlotAreaChoice ();_bd ._fbe .Chart .PlotArea .Choice =append (_bd ._fbe .Chart .PlotArea .Choice ,_ga );_ga .SurfaceChart =_ad .NewCT_SurfaceChart ();_adec (_bd ._fbe .Chart );_bd ._fbe .Chart .View3D .RotX .ValAttr =_fbcc .Int8 (90);_bd ._fbe .Chart .View3D .RotY .ValAttr =_fbcc .Uint16 (0);_bd ._fbe .Chart .View3D .Perspective =_ad .NewCT_Perspective ();_bd ._fbe .Chart .View3D .Perspective .ValAttr =_fbcc .Uint8 (0);_e :=SurfaceChart {_gdc :_ga .SurfaceChart };_e .InitializeDefaults ();return _e ;};

// InitializeDefaults the Stock chart to its defaults
func (_dad StockChart )InitializeDefaults (){_dad ._cdf .HiLowLines =_ad .NewCT_ChartLines ();_dad ._cdf .UpDownBars =_ad .NewCT_UpDownBars ();_dad ._cdf .UpDownBars .GapWidth =_ad .NewCT_GapAmount ();_dad ._cdf .UpDownBars .GapWidth .ValAttr =&_ad .ST_GapAmount {};_dad ._cdf .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_fbcc .Uint16 (150);_dad ._cdf .UpDownBars .UpBars =_ad .NewCT_UpDownBar ();_dad ._cdf .UpDownBars .DownBars =_ad .NewCT_UpDownBar ();};func (_cf DateAxis )SetMinorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_cf ._gae .MinorTickMark =nil ;}else {_cf ._gae .MinorTickMark =_ad .NewCT_TickMark ();_cf ._gae .MinorTickMark .ValAttr =m ;};};

// Marker returns the marker properties.
func (_ccf LineChartSeries )Marker ()Marker {if _ccf ._fdf .Marker ==nil {_ccf ._fdf .Marker =_ad .NewCT_Marker ();};return MakeMarker (_ccf ._fdf .Marker );};func (_ecg CategoryAxis )SetMinorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_ecg ._fgg .MinorTickMark =nil ;}else {_ecg ._fgg .MinorTickMark =_ad .NewCT_TickMark ();_ecg ._fgg .MinorTickMark .ValAttr =m ;};};func _adec (_gbc *_ad .CT_Chart ){_gbc .View3D =_ad .NewCT_View3D ();_gbc .View3D .RotX =_ad .NewCT_RotX ();_gbc .View3D .RotX .ValAttr =_fbcc .Int8 (15);_gbc .View3D .RotY =_ad .NewCT_RotY ();_gbc .View3D .RotY .ValAttr =_fbcc .Uint16 (20);_gbc .View3D .RAngAx =_ad .NewCT_Boolean ();_gbc .View3D .RAngAx .ValAttr =_fbcc .Bool (false );_gbc .Floor =_ad .NewCT_Surface ();_gbc .Floor .Thickness =_ad .NewCT_Thickness ();_gbc .Floor .Thickness .ValAttr .Uint32 =_fbcc .Uint32 (0);_gbc .SideWall =_ad .NewCT_Surface ();_gbc .SideWall .Thickness =_ad .NewCT_Thickness ();_gbc .SideWall .Thickness .ValAttr .Uint32 =_fbcc .Uint32 (0);_gbc .BackWall =_ad .NewCT_Surface ();_gbc .BackWall .Thickness =_ad .NewCT_Thickness ();_gbc .BackWall .Thickness .ValAttr .Uint32 =_fbcc .Uint32 (0);};

// AddAxis adds an axis to a Surface chart.
func (_accf Surface3DChart )AddAxis (axis Axis ){_ebe :=_ad .NewCT_UnsignedInt ();_ebe .ValAttr =axis .AxisID ();_accf ._ge .AxId =append (_accf ._ge .AxId ,_ebe );};func (_cadd SurfaceChartSeries )InitializeDefaults (){_cadd .Properties ().LineProperties ().SetWidth (1*_dfafd .Point );_cadd .Properties ().LineProperties ().SetSolidFill (_ccc .Black );_cadd .Properties ().LineProperties ().SetJoin (_edc .LineJoinRound );};

// X returns the inner wrapped XML type.
func (_daf DateAxis )X ()*_ad .CT_DateAx {return _daf ._gae };

// AddSeries adds a default series to a bar chart.
func (_bae BarChart )AddSeries ()BarChartSeries {_agbb :=_bae .nextColor (len (_bae ._fg .Ser ));_cg :=_ad .NewCT_BarSer ();_bae ._fg .Ser =append (_bae ._fg .Ser ,_cg );_cg .Idx .ValAttr =uint32 (len (_bae ._fg .Ser )-1);_cg .Order .ValAttr =uint32 (len (_bae ._fg .Ser )-1);_efd :=BarChartSeries {_cg };_efd .InitializeDefaults ();_efd .Properties ().SetSolidFill (_agbb );return _efd ;};

// SetText sets the series text.
func (_cdg RadarChartSeries )SetText (s string ){_cdg ._fda .Tx =_ad .NewCT_SerTx ();_cdg ._fda .Tx .Choice .V =&s ;};func (_ba ValueAxis )SetTickLabelPosition (p _ad .ST_TickLblPos ){if p ==_ad .ST_TickLblPosUnset {_ba ._abf .TickLblPos =nil ;}else {_ba ._abf .TickLblPos =_ad .NewCT_TickLblPos ();_ba ._abf .TickLblPos .ValAttr =p ;};};

// InitializeDefaults the bar chart to its defaults
func (_adag Area3DChart )InitializeDefaults (){};

// Properties returns the bar chart series shape properties.
func (_gcf AreaChartSeries )Properties ()_edc .ShapeProperties {if _gcf ._ecf .SpPr ==nil {_gcf ._ecf .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_gcf ._ecf .SpPr );};func (_bcg SeriesAxis )SetCrosses (axis Axis ){_bcg ._bdf .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to an area chart.
func (_ddg AreaChart )AddSeries ()AreaChartSeries {_fag :=_ddg .nextColor (len (_ddg ._dfaf .Ser ));_acd :=_ad .NewCT_AreaSer ();_ddg ._dfaf .Ser =append (_ddg ._dfaf .Ser ,_acd );_acd .Idx .ValAttr =uint32 (len (_ddg ._dfaf .Ser )-1);_acd .Order .ValAttr =uint32 (len (_ddg ._dfaf .Ser )-1);_efcb :=AreaChartSeries {_acd };_efcb .InitializeDefaults ();_efcb .Properties ().SetSolidFill (_fag );return _efcb ;};

// CategoryAxis returns the category data source.
func (_g AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _g ._ecf .Cat ==nil {_g ._ecf .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_g ._ecf .Cat );};

// Properties returns the line chart series shape properties.
func (_fa LineChartSeries )Properties ()_edc .ShapeProperties {if _fa ._fdf .SpPr ==nil {_fa ._fdf .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_fa ._fdf .SpPr );};func (_gbf DateAxis )SetTickLabelPosition (p _ad .ST_TickLblPos ){if p ==_ad .ST_TickLblPosUnset {_gbf ._gae .TickLblPos =nil ;}else {_gbf ._gae .TickLblPos =_ad .NewCT_TickLblPos ();_gbf ._gae .TickLblPos .ValAttr =p ;};};func (_deb BubbleChart )AddAxis (axis Axis ){_fd :=_ad .NewCT_UnsignedInt ();_fd .ValAttr =axis .AxisID ();_deb ._fc .AxId =append (_deb ._fc .AxId ,_fd );};func (_ff StockChart )AddAxis (axis Axis ){_gcd :=_ad .NewCT_UnsignedInt ();_gcd .ValAttr =axis .AxisID ();_ff ._cdf .AxId =append (_ff ._cdf .AxId ,_gcd );};

// Index returns the index of the series
func (_bdfbb ScatterChartSeries )Index ()uint32 {return _bdfbb ._bceb .Idx .ValAttr };type nullAxis byte ;

// AddAxis adds an axis to a line chart.
func (_bcgd Line3DChart )AddAxis (axis Axis ){_gfea :=_ad .NewCT_UnsignedInt ();_gfea .ValAttr =axis .AxisID ();_bcgd ._bcgg .AxId =append (_bcgd ._bcgg .AxId ,_gfea );};

// InitializeDefaults initializes a bar chart series to the default values.
func (_cga BarChartSeries )InitializeDefaults (){};

// AddPieChart adds a new pie chart to a chart.
func (_fba Chart )AddPieChart ()PieChart {_ae :=_ad .NewCT_PlotAreaChoice ();_fba ._fbe .Chart .PlotArea .Choice =append (_fba ._fbe .Chart .PlotArea .Choice ,_ae );_ae .PieChart =_ad .NewCT_PieChart ();_cdc :=PieChart {_baeg :_ae .PieChart };_cdc .InitializeDefaults ();return _cdc ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_ad .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_agf CategoryAxisDataSource )SetNumberReference (s string ){_agf ._bfe .Choice =_ad .NewCT_AxDataSourceChoice ();_agf ._bfe .Choice .NumRef =_ad .NewCT_NumRef ();_agf ._bfe .Choice .NumRef .F =s ;};

// X returns the inner wrapped XML type.
func (_dda Line3DChart )X ()*_ad .CT_Line3DChart {return _dda ._bcgg };

// SetIndex sets the index of the series
func (_cgf LineChartSeries )SetIndex (idx uint32 ){_cgf ._fdf .Idx .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_gbg AreaChart )InitializeDefaults (){};func (_fde DataLabels )SetShowSeriesName (b bool ){_fde .ensureChoice ();_fde ._aeed .Choice .ShowSerName =_ad .NewCT_Boolean ();_fde ._aeed .Choice .ShowSerName .ValAttr =_fbcc .Bool (b );};

// X returns the inner wrapped XML type.
func (_gcc PieChartSeries )X ()*_ad .CT_PieSer {return _gcc ._aca };func (_efe DateAxis )Properties ()_edc .ShapeProperties {if _efe ._gae .SpPr ==nil {_efe ._gae .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_efe ._gae .SpPr );};

// CategoryAxis returns the category data source.
func (_daa PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _daa ._aca .Cat ==nil {_daa ._aca .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_daa ._aca .Cat );};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_afe DoughnutChart )SetHoleSize (pct uint8 ){if _afe ._fae .HoleSize ==nil {_afe ._fae .HoleSize =_ad .NewCT_HoleSize ();};if _afe ._fae .HoleSize .ValAttr ==nil {_afe ._fae .HoleSize .ValAttr =&_ad .ST_HoleSize {};};_afe ._fae .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};func (_cec GridLines )Properties ()_edc .ShapeProperties {if _cec ._egd .SpPr ==nil {_cec ._egd .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_cec ._egd .SpPr );};func (_cdbb Title )ParagraphProperties ()_edc .ParagraphProperties {if _cdbb ._gcdg .Tx ==nil {_cdbb .SetText ("");};if _cdbb ._gcdg .Tx .Choice .Rich .P [0].PPr ==nil {_cdbb ._gcdg .Tx .Choice .Rich .P [0].PPr =_gfeb .NewCT_TextParagraphProperties ();};return _edc .MakeParagraphProperties (_cdbb ._gcdg .Tx .Choice .Rich .P [0].PPr );};

// InitializeDefaults the bar chart to its defaults
func (_cea BarChart )InitializeDefaults (){_cea .SetDirection (_ad .ST_BarDirCol )};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_bca PieChartSeries )SetExplosion (v uint32 ){_bca ._aca .Explosion =_ad .NewCT_UnsignedInt ();_bca ._aca .Explosion .ValAttr =v ;};func (_afd CategoryAxis )SetPosition (p _ad .ST_AxPos ){_afd ._fgg .AxPos =_ad .NewCT_AxPos ();_afd ._fgg .AxPos .ValAttr =p ;};type Marker struct{_cbde *_ad .CT_Marker };

// InitializeDefaults initializes an Pie series to the default values.
func (_gaca PieChartSeries )InitializeDefaults (){};

// Order returns the order of the series
func (_eabg LineChartSeries )Order ()uint32 {return _eabg ._fdf .Order .ValAttr };

// SetOrder sets the order of the series
func (_bb LineChartSeries )SetOrder (idx uint32 ){_bb ._fdf .Order .ValAttr =idx };

// AddSeries adds a default series to a Stock chart.
func (_bbe StockChart )AddSeries ()LineChartSeries {_cb :=_ad .NewCT_LineSer ();_bbe ._cdf .Ser =append (_bbe ._cdf .Ser ,_cb );_cb .Idx .ValAttr =uint32 (len (_bbe ._cdf .Ser )-1);_cb .Order .ValAttr =uint32 (len (_bbe ._cdf .Ser )-1);_ded :=LineChartSeries {_cb };_ded .Values ().CreateEmptyNumberCache ();_ded .Properties ().LineProperties ().SetNoFill ();return _ded ;};

// X returns the inner wrapped XML type.
func (_dab ScatterChartSeries )X ()*_ad .CT_ScatterSer {return _dab ._bceb };

// AddBubbleChart adds a new bubble chart.
func (_bgfb Chart )AddBubbleChart ()BubbleChart {_fedd :=_ad .NewCT_PlotAreaChoice ();_bgfb ._fbe .Chart .PlotArea .Choice =append (_bgfb ._fbe .Chart .PlotArea .Choice ,_fedd );_fedd .BubbleChart =_ad .NewCT_BubbleChart ();_eee :=BubbleChart {_fc :_fedd .BubbleChart };_eee .InitializeDefaults ();return _eee ;};

// AddAxis adds an axis to a Scatter chart.
func (_dgaf ScatterChart )AddAxis (axis Axis ){_gd :=_ad .NewCT_UnsignedInt ();_gd .ValAttr =axis .AxisID ();_dgaf ._egdfb .AxId =append (_dgaf ._egdfb .AxId ,_gd );};type ScatterChart struct{chartBase ;_egdfb *_ad .CT_ScatterChart ;};func (_geb ValueAxis )Properties ()_edc .ShapeProperties {if _geb ._abf .SpPr ==nil {_geb ._abf .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_geb ._abf .SpPr );};

// AddAxis adds an axis to a line chart.
func (_gce LineChart )AddAxis (axis Axis ){_dgd :=_ad .NewCT_UnsignedInt ();_dgd .ValAttr =axis .AxisID ();_gce ._gda .AxId =append (_gce ._gda .AxId ,_dgd );};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_fae *_ad .CT_DoughnutChart ;};func (_ggg SurfaceChart )InitializeDefaults (){_ggg ._gdc .Wireframe =_ad .NewCT_Boolean ();_ggg ._gdc .Wireframe .ValAttr =_fbcc .Bool (false );_ggg ._gdc .BandFmts =_ad .NewCT_BandFmts ();for _gggg :=0;_gggg < 15;_gggg ++{_ggge :=_ad .NewCT_BandFmt ();_ggge .Idx .ValAttr =uint32 (_gggg );_ggge .SpPr =_gfeb .NewCT_ShapeProperties ();_bg :=_edc .MakeShapeProperties (_ggge .SpPr );_bg .SetSolidFill (_ggg .nextColor (_gggg ));_ggg ._gdc .BandFmts .BandFmt =append (_ggg ._gdc .BandFmts .BandFmt ,_ggge );};};func (_ec ValueAxis )SetMajorTickMark (m _ad .ST_TickMark ){if m ==_ad .ST_TickMarkUnset {_ec ._abf .MajorTickMark =nil ;}else {_ec ._abf .MajorTickMark =_ad .NewCT_TickMark ();_ec ._abf .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_cbc SurfaceChartSeries )X ()*_ad .CT_SurfaceSer {return _cbc ._ede };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_dege Chart )AddDoughnutChart ()DoughnutChart {_ddf :=_ad .NewCT_PlotAreaChoice ();_dege ._fbe .Chart .PlotArea .Choice =append (_dege ._fbe .Chart .PlotArea .Choice ,_ddf );_ddf .DoughnutChart =_ad .NewCT_DoughnutChart ();_fgd :=DoughnutChart {_fae :_ddf .DoughnutChart };_fgd .InitializeDefaults ();return _fgd ;};func (_cegg CategoryAxis )InitializeDefaults (){_cegg .SetPosition (_ad .ST_AxPosB );_cegg .SetMajorTickMark (_ad .ST_TickMarkOut );_cegg .SetMinorTickMark (_ad .ST_TickMarkIn );_cegg .SetTickLabelPosition (_ad .ST_TickLblPosNextTo );_cegg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ccc .LightGray );_cegg .Properties ().LineProperties ().SetSolidFill (_ccc .Black );};

// SetText sets the series text.
func (_bdcc AreaChartSeries )SetText (s string ){_bdcc ._ecf .Tx =_ad .NewCT_SerTx ();_bdcc ._ecf .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_dag PieChart )X ()*_ad .CT_PieChart {return _dag ._baeg };

// CategoryAxis returns the category data source.
func (_gfg BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gfg ._cdfe .XVal ==nil {_gfg ._cdfe .XVal =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_gfg ._cdfe .XVal );};func (_dfgf NumberDataSource )SetReference (s string ){_dfgf .ensureChoice ();if _dfgf ._dfg .Choice .NumRef ==nil {_dfgf ._dfg .Choice .NumRef =_ad .NewCT_NumRef ();};_dfgf ._dfg .Choice .NumRef .F =s ;};func (_gfb Legend )Properties ()_edc .ShapeProperties {if _gfb ._dadd .SpPr ==nil {_gfb ._dadd .SpPr =_gfeb .NewCT_ShapeProperties ();};return _edc .MakeShapeProperties (_gfb ._dadd .SpPr );};func (_dec SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dec ._ede .Cat ==nil {_dec ._ede .Cat =_ad .NewCT_AxDataSource ();};return MakeAxisDataSource (_dec ._ede .Cat );};type SurfaceChartSeries struct{_ede *_ad .CT_SurfaceSer };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_gfd Chart )AddBar3DChart ()Bar3DChart {_adec (_gfd ._fbe .Chart );_cedag :=_ad .NewCT_PlotAreaChoice ();_gfd ._fbe .Chart .PlotArea .Choice =append (_gfd ._fbe .Chart .PlotArea .Choice ,_cedag );_cedag .Bar3DChart =_ad .NewCT_Bar3DChart ();_cedag .Bar3DChart .Grouping =_ad .NewCT_BarGrouping ();_cedag .Bar3DChart .Grouping .ValAttr =_ad .ST_BarGroupingStandard ;_abb :=Bar3DChart {_dcd :_cedag .Bar3DChart };_abb .InitializeDefaults ();return _abb ;};

// Order returns the order of the series
func (_eca SurfaceChartSeries )Order ()uint32 {return _eca ._ede .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_gfa RadarChartSeries )X ()*_ad .CT_RadarSer {return _gfa ._fda };

// InitializeDefaults initializes an area series to the default values.
func (_dddc AreaChartSeries )InitializeDefaults (){};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_fda *_ad .CT_RadarSer };

// Index returns the index of the series
func (_fede LineChartSeries )Index ()uint32 {return _fede ._fdf .Idx .ValAttr };func (_faee DataLabels )ensureChoice (){if _faee ._aeed .Choice ==nil {_faee ._aeed .Choice =_ad .NewCT_DLblsChoice ();};};func (_fdb Legend )SetOverlay (b bool ){_fdb ._dadd .Overlay =_ad .NewCT_Boolean ();_fdb ._dadd .Overlay .ValAttr =_fbcc .Bool (b );};func (_df LineChartSeries )InitializeDefaults (){_df .Properties ().LineProperties ().SetWidth (1*_dfafd .Point );_df .Properties ().LineProperties ().SetSolidFill (_ccc .Black );_df .Properties ().LineProperties ().SetJoin (_edc .LineJoinRound );_df .Marker ().SetSymbol (_ad .ST_MarkerStyleNone );_df .Labels ().SetShowLegendKey (false );_df .Labels ().SetShowValue (false );_df .Labels ().SetShowPercent (false );_df .Labels ().SetShowCategoryName (false );_df .Labels ().SetShowSeriesName (false );_df .Labels ().SetShowLeaderLines (false );};