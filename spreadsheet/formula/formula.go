//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_d "bytes";_b "errors";_a "fmt";_feb "github.com/unidoc/unioffice";_cg "github.com/unidoc/unioffice/internal/mergesort";_ef "github.com/unidoc/unioffice/internal/wildcard";_bee "github.com/unidoc/unioffice/spreadsheet/format";_cgf "github.com/unidoc/unioffice/spreadsheet/reference";_dd "github.com/unidoc/unioffice/spreadsheet/update";_c "io";_cd "math";_fb "math/big";_bf "math/rand";_fbf "regexp";_cb "sort";_ea "strconv";_bb "strings";_fe "sync";_be "time";_f "unicode";);func _cedc (_gdf ,_aage ,_dff int )float64 {return float64 (_agf (_gdf ,_be .Month (_aage ),_dff )/86400)+_cgeg ;};

// Eval evaluates and returns the result of an empty expression.
func (_fad EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eccd ,_daeg ,_fabc :=_eagf (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fabc .Type ==ResultTypeError {return _fabc ;};_fgbc ,_fabc :=_ddcb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fabc .Type ==ResultTypeError {return _fabc ;};if _fgbc >=_eccd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaceg :=args [3].ValueNumber ;if _aaceg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_caaf :=args [4].ValueNumber ;if _caaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dcgc :=args [5].ValueNumber ;if _dcgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcedg :=float64 (int (args [6].ValueNumber ));if !_gbc (_gcedg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_daed :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_daed =int (args [7].ValueNumber );if !_afdd (_daed ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_bgbc ,_fabc :=_adafe (_fgbc ,_daeg ,_daed );if _fabc .Type ==ResultTypeError {return _fabc ;};_bgbc *=_gcedg ;_aedg ,_fabc :=_adafe (_eccd ,_daeg ,_daed );if _fabc .Type ==ResultTypeError {return _fabc ;};_aedg *=_gcedg ;_ddg ,_fabc :=_adafe (_fgbc ,_eccd ,_daed );if _fabc .Type ==ResultTypeError {return _fabc ;};_ddg *=_gcedg ;_fadae :=_dcgc +_bgbc *100*_aaceg /_gcedg ;_fadae /=_caaf +_ddg *100*_aaceg /_gcedg ;_fadae --;_fadae *=_gcedg /_aedg ;return MakeNumberResult (_fadae );};const _ffga =57350;

// Reference returns a string reference value to a vertical range.
func (_fagfd VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_fagfd .verticalRangeReference ()};};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func _gddcg (_gagd string ,_agdg func (_edef float64 )float64 )Function {return func (_fdbg []Result )Result {if len (_fdbg )!=1{return MakeErrorResult (_gagd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdba :=_fdbg [0].AsNumber ();switch _gdba .Type {case ResultTypeNumber :_ffdg :=_agdg (_gdba .ValueNumber );if _cd .IsNaN (_ffdg ){return MakeErrorResult (_gagd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cd .IsInf (_ffdg ,0){return MakeErrorResult (_gagd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _ffdg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_gagd +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_ffdg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_gagd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gdba ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gagd ,_gdba .Type ));};};};func _cbdbg (_bdbd []Result ,_cgccc bool )(float64 ,float64 ){_ffbb :=0.0;_bcdc :=0.0;for _ ,_cfgbf :=range _bdbd {switch _cfgbf .Type {case ResultTypeNumber :if _cgccc ||!_cfgbf .IsBoolean {_bcdc +=_cfgbf .ValueNumber ;_ffbb ++;};case ResultTypeList ,ResultTypeArray :_cebg ,_fagfed :=_cbdbg (_cfgbf .ListValues (),_cgccc );_bcdc +=_cebg ;_ffbb +=_fagfed ;case ResultTypeString :if _cgccc {_ffbb ++;};case ResultTypeEmpty :};};return _bcdc ,_ffbb ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_cdce ,_fgea :=_bgaf (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fgea .Type ==ResultTypeError {return _fgea ;};return MakeNumberResult (_gbab (_cdce ._eeee ,_cdce ._aef ,_cdce ._egcf ,_cdce ._becb ));};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfd :=_be .Now ();_ ,_cgef :=_bfd .Zone ();_dedb :=_aff (_afa ,_bfd .Unix ()+int64 (_cgef ))+1;return MakeNumberResult (_dedb );};func _ecec (_aeeaf Context ,_ffdec ,_eebb string )(string ,string ){_bcdcd :=_ffdec +"\u0031";_caeg :=_aeeaf .LastRow (_ffdec );_eddb :=_eebb +_ea .Itoa (_caeg );return _bcdcd ,_eddb ;};func _gbab (_dccfa ,_ceg float64 ,_ccgg ,_gabaa int )float64 {_gbad :=_ddfb (_dccfa );_dgcb :=_ddfb (_ceg );_ccaf :=_fdf (_gbad ,_dgcb ,_ccgg ,_gabaa );return _gdec (_ccaf ,_gbad ,_gabaa );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bea EmptyExpr )Update (q *_dd .UpdateQuery )Expression {return _bea };func _edbcf (_ebee Result ,_edda int )[]Result {_gecc :=[]Result {};switch _ebee .Type {case ResultTypeList :_abfc :=_ebee .ValueList ;_afca :=len (_abfc );for _dbebd :=0;_dbebd < _edda ;_dbebd ++{if _dbebd < _afca {_gecc =append (_gecc ,_abfc [_dbebd ]);}else {_gecc =append (_gecc ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ebfaf :=0;_ebfaf < _edda ;_ebfaf ++{_gecc =append (_gecc ,_ebee );};};return _gecc ;};func _ddcb (_gag Result ,_beeg ,_ccbf string )(float64 ,Result ){var _fgge float64 ;switch _gag .Type {case ResultTypeNumber :_fgge =float64 (int (_gag .ValueNumber ));case ResultTypeString :_caf :=DateValue ([]Result {_gag });if _caf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_beeg +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_ccbf );};_fgge =_caf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_ccbf );};if _fgge < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_beeg +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _fgge ,_gde ;};const _fbgb =57364;const _fafg =57360;var _afc =[]*_fbf .Regexp {};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aeef ,_eacf ,_acee :=_eagf (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _acee .Type ==ResultTypeError {return _acee ;};_egbf ,_acee :=_ddcb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _acee .Type ==ResultTypeError {return _acee ;};if _egbf >=_aeef {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_baba :=args [3];if _baba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaea :=_baba .ValueNumber ;if _aaea < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ecbc :=args [4];if _ecbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcad :=_ecbc .ValueNumber ;if _dcad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cacb :=args [5];if _cacb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_faca :=_cacb .ValueNumber ;if _faca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_febc :=args [6];if _febc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fabf :=float64 (int (_febc .ValueNumber ));if !_gbc (_fabf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebae :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_facf :=args [7];if _facf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebae =int (_facf .ValueNumber );if !_afdd (_ebae ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_egegb ,_acee :=_adafe (_egbf ,_eacf ,_ebae );if _acee .Type ==ResultTypeError {return _acee ;};_egegb *=_fabf ;_eaegf ,_acee :=_adafe (_aeef ,_eacf ,_ebae );if _acee .Type ==ResultTypeError {return _acee ;};_eaegf *=_fabf ;_gadc ,_acee :=_adafe (_egbf ,_aeef ,_ebae );if _acee .Type ==ResultTypeError {return _acee ;};_gadc *=_fabf ;_dadb :=_faca +_egegb *100*_aaea /_fabf ;_dadb /=_eaegf *_dcad /_fabf +1;_dadb -=_gadc *100*_aaea /_fabf ;return MakeNumberResult (_dadb );};

// Error is an error expression.
type Error struct{_ebbc string };func _bgaf (_dabb []Result ,_gega string )(*couponArgs ,Result ){_gacb :=len (_dabb );if _gacb !=3&&_gacb !=4{return nil ,MakeErrorResult (_gega +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gedg ,_fagf ,_bdgb :=_eagf (_dabb [0],_dabb [1],_gega );if _bdgb .Type ==ResultTypeError {return nil ,_bdgb ;};if _dabb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gega +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgb :=_dabb [2].ValueNumber ;if !_gbc (_cfgb ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_gega );};_fbeg :=0;if _gacb ==4&&_dabb [3].Type !=ResultTypeEmpty {if _dabb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gega +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbeg =int (_dabb [3].ValueNumber );if !_afdd (_fbeg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gega );};};return &couponArgs {_gedg ,_fagf ,int (_cfgb ),_fbeg },_gde ;};func _faef (_bcbaa yyLexer )int {return _dgbce ().Parse (_bcbaa )};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gceg :=args [0].AsNumber ();_gbbg :=args [1].AsNumber ();_cdgdb :=args [2].AsNumber ();_fgaad :=args [3].ListValues ();if _gceg .Type !=ResultTypeNumber ||_gbbg .Type !=ResultTypeNumber ||_cdgdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_abdagg :=float64 (0);for _ebff ,_eeab :=range _fgaad {_abdagg +=_eeab .ValueNumber *_cd .Pow (_gceg .ValueNumber ,_gbbg .ValueNumber +float64 (_ebff )*_cdgdb .ValueNumber );};return MakeNumberResult (_abdagg );};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gccc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_aeegba :=_gccc ._cgee .Reference (ctx ,ev );switch _aeegba .Type {case ReferenceTypeSheet :if _ffcec (_aeegba ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_aeegba .Value ));};_bggd :=_gccc .verticalRangeReference (_aeegba .Value );if _geagf ,_dgdbb :=ev .GetFromCache (_bggd );_dgdbb {return _geagf ;};_aafc :=ctx .Sheet (_aeegba .Value );_bdfg ,_dccc :=_ecec (_aafc ,_gccc ._cffg ,_gccc ._dfagd );_ffddb :=_gbecc (_aafc ,ev ,_bdfg ,_dccc );ev .SetCache (_bggd ,_ffddb );return _ffddb ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aeegba .Type ));};};func _bgcf (_eddg string ,_dffac func (_bagc float64 )float64 )Function {return func (_eegc []Result )Result {if len (_eegc )!=1{return MakeErrorResult (_eddg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gecg :=_eegc [0].AsNumber ();switch _gecg .Type {case ResultTypeNumber :_afgb :=_dffac (_gecg .ValueNumber );if _cd .IsNaN (_afgb ){return MakeErrorResult (_eddg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cd .IsInf (_afgb ,0){return MakeErrorResult (_eddg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_afgb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_eddg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gecg ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eddg ,_gecg .Type ));};};};func _fbdcc (_bgae ,_cgegb ,_gbfbc Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bgae .Value ,_cgegb .Value ,_gbfbc .Value );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_acef :=args [0];if _acef .Type ==ResultTypeList {_edeee :=[][]Result {};for _ ,_aaef :=range _acef .ValueList {_edeee =append (_edeee ,[]Result {_aaef });};return MakeArrayResult (_edeee );};_fcagd :=make ([][]Result ,len (_acef .ValueArray [0]));for _ ,_adaa :=range _acef .ValueArray {for _dcbd ,_cgcc :=range _adaa {_fcagd [_dcbd ]=append (_fcagd [_dcbd ],_cgcc );};};return MakeArrayResult (_fcagd );};var _gcag =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};var _fcecb =false ;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_cafbf ,_abab :=_egcfd ("\u0046\u0049\u004e\u0044",args );if _abab .Type !=ResultTypeEmpty {return _abab ;};_bbea :=_cafbf ._fadg ;if _bbea ==""{return MakeNumberResult (1.0);};_cecd :=_cafbf ._eggcf ;_dgabb :=_cafbf ._geea ;_afec :=1;for _fedfa :=range _cecd {if _afec < _dgabb {_afec ++;continue ;};_abdge :=_bb .Index (_cecd [_fedfa :],_bbea );if _abdge ==0{return MakeNumberResult (float64 (_afec ));};_afec ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffba :=args [0].AsNumber ();_gcge :=args [1].AsNumber ();if _ffba .Type !=ResultTypeNumber ||_gcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gcge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cd .Trunc (_ffba .ValueNumber /_gcge .ValueNumber ));};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_defeb :=args [0].AsString ();if _defeb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_bb .ToUpper (_defeb .ValueString ));};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_eeddc string };

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbdc :=args [0].AsString ();if _dbdc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_gfcc :="\u0041\u0031";if len (args )==2{_ggaa :=args [1].Ref ;if _ggaa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_gfcc =_ggaa .Value ;};switch _dbdc .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_addae ,_edbaa :=_cgf .ParseCellReference (_gfcc );if _edbaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gfcc );};_edaf :="\u0024"+_addae .Column +"\u0024"+_ea .Itoa (int (_addae .RowIdx ));if _addae .SheetName !=""{_edaf =_addae .SheetName +"\u0021"+_edaf ;};return MakeStringResult (_edaf );case "\u0063\u006f\u006c":_egge ,_ebef :=_cgf .ParseCellReference (_gfcc );if _ebef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gfcc );};return MakeNumberResult (float64 (_egge .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_cbgb :=_bb .Contains (ctx .GetFormat (_gfcc ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_cbgb );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bbagg :="\u0047";_edafc :=ctx .GetFormat (_gfcc );if _edafc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_feedd .MatchString (_edafc ){_bbagg ="\u0046\u0030";}else if _edafc =="\u0030\u0025"{_bbagg ="\u0050\u0030";}else if _edafc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bbagg ="\u0044\u0032";}else if _edafc =="\u004d\u004d\u002fY\u0059"{_bbagg ="\u0044\u0033";}else if _edafc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_edafc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bbagg ="\u0044\u0034";}else if _edafc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bbagg ="\u0044\u0035";}else if _edafc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bbagg ="\u0044\u0036";}else if _edafc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bbagg ="\u0044\u0037";}else if _edafc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bbagg ="\u0044\u0038";}else if _edafc =="\u0048\u0048\u003aM\u004d"{_bbagg ="\u0044\u0039";}else if _afbdc .MatchString (_edafc ){_bbagg ="\u002e\u0030";}else if _bfcg .MatchString (_edafc ){_bbagg ="\u002e\u0030\u0028\u0029";}else if _eeeec .MatchString (_edafc ){_bbagg ="\u0043\u0030";}else if _fbab .MatchString (_edafc )||_bfda .MatchString (_edafc ){_bbagg ="\u0044\u0031";}else if _cacgc :=_ccaea .FindStringSubmatch (_edafc );len (_cacgc )> 1{_bbagg ="\u0046"+_ea .Itoa (len (_cacgc [1]));}else if _fgacf :=_geecf .FindStringSubmatch (_edafc );len (_fgacf )> 1{_bbagg ="\u002e"+_ea .Itoa (len (_fgacf [2]));}else if _dcgbg :=_eaad .FindStringSubmatch (_edafc );len (_dcgbg )> 1{_bbagg ="\u0050"+_ea .Itoa (len (_dcgbg [2]));}else if _aebc :=_ccag .FindStringSubmatch (_edafc );len (_aebc )> 1{_bbagg ="\u0043"+_afbac (_aebc ,1);}else if _cfdc :=_efgc .FindStringSubmatch (_edafc );len (_cfdc )> 1{_bbagg ="\u0043"+_afbac (_cfdc ,1);}else if _febd :=_ddddg .FindStringSubmatch (_edafc );len (_febd )> 1{_bbagg ="\u002e"+_afbac (_febd ,1)+"\u0028\u0029";}else if _bbcbd :=_cdacg .FindStringSubmatch (_edafc );len (_bbcbd )> 1{_bbagg ="\u002e"+_afbac (_bbcbd ,1);}else if _cfebf :=_gbeac .FindStringSubmatch (_edafc );len (_cfebf )> 1{_bbagg ="\u0053"+_afbac (_cfebf ,3);};if _bbagg !="\u0047"&&_bb .Contains (_edafc ,"\u005b\u0052\u0045D\u005d"){_bbagg +="\u002d";};return MakeStringResult (_bbagg );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_dedf :=ctx .GetFormat (_gfcc );if _ccff .MatchString (_dedf ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_gfcc ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gcae :=0.0;if ctx .GetLocked (_gfcc ){_gcae =1.0;};return MakeNumberResult (_gcae );case "\u0072\u006f\u0077":_ccgea ,_cdag :=_cgf .ParseCellReference (_gfcc );if _cdag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gfcc );};return MakeNumberResult (float64 (_ccgea .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_fbgcd ,_bebf :=_cgf .ParseCellReference (_gfcc );if _bebf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gfcc );};if _fbgcd .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fbgcd .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_fbgcd .SheetName ).GetWidth (int (_fbgcd .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_dbdc .ValueString );};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egedb :=_gdgac (args );_cb .Float64s (_egedb );var _decf float64 ;if len (_egedb )%2==0{_decf =(_egedb [len (_egedb )/2-1]+_egedb [len (_egedb )/2])/2;}else {_decf =_egedb [len (_egedb )/2];};return MakeNumberResult (_decf );};const _gbeag =57359;func (_cggde *plex )Lex (lval *yySymType )int {_agada =true ;_gdccc :=<-_cggde ._ccbd ;if _gdccc !=nil {lval ._fbeaf =_gdccc ;return int (lval ._fbeaf ._cfca );};return 0;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_cccdc :=_bb .Split (v ,"\u003a");if len (_cccdc )!=2{return nil ;};_bcafe ,_ :=_ea .Atoi (_cccdc [0]);_fcef ,_ :=_ea .Atoi (_cccdc [1]);if _bcafe > _fcef {_bcafe ,_fcef =_fcef ,_bcafe ;};return HorizontalRange {_gbac :_bcafe ,_gbged :_fcef };};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_aafa :=args [1].ValueNumber ;_beee :=args [0];var _cfc float64 ;switch _beee .Type {case ResultTypeEmpty :_cfc =0;case ResultTypeNumber :_cfc =_beee .ValueNumber ;case ResultTypeString :_fada :=DateValue ([]Result {args [0]});if _fada .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cfc =_fada .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_dgf :=_ddfb (_cfc );_gfee :=_dgf .AddDate (0,int (_aafa +1),0);_cdfa ,_adaf ,_ :=_gfee .Date ();_bfae :=_cedc (_cdfa ,int (_adaf ),0);if _bfae < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _cdfa ==1900&&_adaf ==3{_bfae --;};return MakeNumberResult (_bfae );};func _dcgeb (_babb []Result )Result {_bgac :=_babb [0].ValueArray ;if len (_babb )==1{_cbeg :=[][]Result {};for _ ,_abgg :=range _bgac {_cbeg =append (_cbeg ,_defgc ([]Result {MakeListResult (_abgg )}).ValueList );};return MakeArrayResult (_cbeg );}else if len (_babb )==2{_fbedd :=len (_bgac );_dbdgg :=len (_bgac [0]);_efda :=_deabg (_babb [1],_fbedd ,_dbdgg );_caac :=len (_efda );_gdde :=[][]Result {};var _ffad []Result ;for _eecd ,_ega :=range _bgac {if _eecd < _caac {_ffad =_efda [_eecd ];}else {_ffad =_edbcf (MakeErrorResultType (ErrorTypeNA ,""),_dbdgg );};_gdde =append (_gdde ,_defgc ([]Result {MakeListResult (_ega ),MakeListResult (_ffad )}).ValueList );};return MakeArrayResult (_gdde );}else if len (_babb )==3{_agbc :=len (_bgac );_dcde :=len (_bgac [0]);_gddec :=_deabg (_babb [1],_agbc ,_dcde );_cbba :=_deabg (_babb [2],_agbc ,_dcde );_gdcc :=len (_gddec );_cfagd :=len (_cbba );_cbgd :=[][]Result {};var _dfade ,_ffeg []Result ;for _cdef ,_cefaf :=range _bgac {if _cdef < _gdcc {_dfade =_gddec [_cdef ];}else {_dfade =_edbcf (MakeErrorResultType (ErrorTypeNA ,""),_dcde );};if _cdef < _cfagd {_ffeg =_cbba [_cdef ];}else {_ffeg =_edbcf (MakeErrorResultType (ErrorTypeNA ,""),_dcde );};_cbgd =append (_cbgd ,_defgc ([]Result {MakeListResult (_cefaf ),MakeListResult (_dfade ),MakeListResult (_ffeg )}).ValueList );};return MakeArrayResult (_cbgd );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bgda ,_gbf :=_acgf (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _gbf .Type ==ResultTypeError {return _gbf ;};_ebge :=_bgda ._aedb ;_bca :=_bgda ._feed ;_bbd :=_bgda ._gad ;_bcec :=_bgda ._bgdeb ;_affd :=_bgda ._cbcb ;_gead :=_bgda ._abcg ;if _gead >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_adaba :=_bgda ._dabc ;_eaeg :=1.0/_gead ;_effg :=2.5;if _eaeg < 3{_effg =1;}else if _eaeg < 5{_effg =1.5;}else if _eaeg <=6{_effg =2;};_gead *=_effg ;_gcdg ,_gcb :=_adafe (_bca ,_bbd ,_adaba );if _gcb .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_deaa :=_dbadd (_gcdg *_gead *_ebge );_ebge -=_deaa ;_cgdcc :=_ebge -_bcec ;for _edge :=0;_edge < _affd ;_edge ++{_deaa =_dbadd (_gead *_ebge );_cgdcc -=_deaa ;if _cgdcc < 0{switch _affd -_edge {case 0:case 1:return MakeNumberResult (_dbadd (_ebge *0.5));default:return MakeNumberResult (0);};};_ebge -=_deaa ;};return MakeNumberResult (_deaa );};func _dcae (_cabd ,_bgde ,_bcgd int )int {if _cabd > _bgde {return 0;};if _gaba (_bcgd ){return (_bgde -_cabd +1)*360;};_cgec :=0;for _eae :=_cabd ;_eae <=_bgde ;_eae ++{_eaff :=365;if _ffdb (_eae ){_eaff =366;};_cgec +=_eaff ;};return _cgec ;};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_fcae :=len (args );if _fcae !=2&&_fcae !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgcd ,_febef :=_gacg (args [0],args [1],"\u0058\u0049\u0052\u0052");if _febef .Type ==ResultTypeError {return _febef ;};_ebfa :=_cgcd ._cgfc ;_bdga :=_cgcd ._ecae ;_edgg :=0.1;if _fcae ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edgg =args [2].ValueNumber ;if _edgg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _fegde (_ebfa ,_bdga ,_edgg );};

// String returns a string representation of a vertical range.
func (_cabcd VerticalRange )String ()string {return _cabcd .verticalRangeReference ()};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eccdd :=args [0];if _eccdd .Type ==ResultTypeError ||_eccdd .Type ==ResultTypeString {return _eccdd ;};return _gde ;};

// String returns a string representation of CellRef.
func (_fgg CellRef )String ()string {return _fgg ._dg };

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Eval evaluates and returns the result of a function call.
func (_gfac FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_acdg :=LookupFunction (_gfac ._eecad );if _acdg !=nil {_bfcce :=make ([]Result ,len (_gfac ._acbca ));for _facbf ,_eeea :=range _gfac ._acbca {_bfcce [_facbf ]=_eeea .Eval (ctx ,ev );_bfcce [_facbf ].Ref =_eeea .Reference (ctx ,ev );};if _ ,_ggca :=_acdb [_gfac ._eecad ];!_ggca {if _fcab ,_ccad :=_gdcbdf (_bfcce );_fcab {return _ccad ;};};return _acdg (_bfcce );};_edca :=LookupFunctionComplex (_gfac ._eecad );if _edca !=nil {_ddfae :=make ([]Result ,len (_gfac ._acbca ));for _ddba ,_egbd :=range _gfac ._acbca {_ddfae [_ddba ]=_egbd .Eval (ctx ,ev );_ddfae [_ddba ].Ref =_egbd .Reference (ctx ,ev );};if _ ,_cdcb :=_acdb [_gfac ._eecad ];!_cdcb {if _bdddf ,_bdfbg :=_gdcbdf (_ddfae );_bdddf {return _bdfbg ;};};return _edca (ctx ,ev ,_ddfae );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_gfac ._eecad );};var _dafb *_bf .Rand ;func _fbg (_gf Result )bool {if _gf .Type ==ResultTypeString {return _gf .ValueString =="";};return _gf .ValueNumber ==0;};func (_fcg *defEval )checkLastEvalIsRef (_ecg Context ,_bac Expression ){switch _bac .(type ){case FunctionCall :switch _bac .(FunctionCall )._eecad {case "\u0049\u0053\u0052E\u0046":for _ ,_bd :=range _bac .(FunctionCall )._acbca {switch _bd .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cac :=_bd .Eval (_ecg ,_fcg );_fcg ._dce =!(_cac .Type ==ResultTypeError &&_cac .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fcg ._dce =false ;};};};};};func _dgbce ()yyParser {return &yyParserImpl {}};func (_acg *evCache )SetCache (key string ,value Result ){_acg ._bfg .Lock ();_acg ._dea [key ]=value ;_acg ._bfg .Unlock ();};var _ecgbf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfce :=false ;for _ ,_aeegb :=range args {switch _aeegb .Type {case ResultTypeList ,ResultTypeArray :_ffeb :=Or (_aeegb .ListValues ());if _ffeb .Type ==ResultTypeError {return _ffeb ;};if _ffeb .ValueNumber !=0{_cfce =true ;};case ResultTypeNumber :if _aeegb .ValueNumber !=0{_cfce =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _aeegb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_cfce );};

// Eval evaluates and returns an expression with prefix.
func (_decb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_fdcac :=_decb ._fcgdfd .Reference (ctx ,ev );switch _fdcac .Type {case ReferenceTypeSheet :if _ffcec (_fdcac ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fdcac .Value ));};_feaa :=ctx .Sheet (_fdcac .Value );return _decb ._begge .Eval (_feaa ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdcac .Type ));};};

// Update updates references in the Negate after removing a row/column.
func (_abbc Negate )Update (q *_dd .UpdateQuery )Expression {return Negate {_gbagd :_abbc ._gbagd .Update (q )};};

// Number is a nubmer expression.
type Number struct{_daff float64 };

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_gbac ,_gbged int };

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgfe :=args [0].ValueNumber ;_abfe :=args [1].ValueNumber ;_bbcg :=args [2].ValueNumber ;_dcg :=_dec (_cgfe ,_abfe ,_bbcg );if _dcg >=0{return MakeNumberResult (_dcg );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func _ebgc (_fbbg ,_gfdd int )int {switch _gfdd {case 1:if _ffdb (_fbbg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};func init (){_edb ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};func _gdec (_aeeb ,_dgg _be .Time ,_dgc int )float64 {if _aeeb .After (_dgg ){_aeeb ,_dgg =_dgg ,_aeeb ;};_bccc :=0;_dfffc ,_dade ,_cfg :=_aeeb .Date ();_decc ,_fdda ,_bde :=_dgg .Date ();_gcd ,_ccb :=int (_dade ),int (_fdda );_edba ,_efae :=_afbd (_dfffc ,_gcd ,_cfg ,_dgc ),_afbd (_decc ,_ccb ,_bde ,_dgc );if !_gaba (_dgc ){return _cedc (_decc ,_ccb ,_efae )-_cedc (_dfffc ,_gcd ,_edba );};if _dgc ==0{if (_gcd ==2||_edba < 30)&&_bde ==31{_efae =31;}else if _ccb ==2&&_efae ==_aga (_decc ,_ccb ){_efae =_aga (_decc ,2);};}else {if _gcd ==2&&_edba ==30{_edba =_aga (_dfffc ,2);};if _ccb ==2&&_efae ==30{_efae =_aga (_decc ,2);};};if _dfffc < _decc ||(_dfffc ==_decc &&_gcd < _ccb ){_bccc =30-_edba +1;_cfg =1;_edba =1;_gdfg :=_be .Date (_dfffc ,_be .Month (_gcd ),_cfg ,0,0,0,0,_be .UTC ).AddDate (0,1,0);if _gdfg .Year ()< _decc {_bccc +=_ggdd (_gdfg .Year (),int (_gdfg .Month ()),12,_dgc );_gdfg =_gdfg .AddDate (0,13-int (_gdfg .Month ()),0);_bccc +=_dcae (_gdfg .Year (),_decc -1,_dgc );};_bccc +=_ggdd (_decc ,int (_gdfg .Month ()),_ccb -1,_dgc );_gdfg =_gdfg .AddDate (0,_ccb -int (_gdfg .Month ()),0);_gcd =_gdfg .Day ();};_bccc +=_efae -_edba ;if _bccc > 0{return float64 (_bccc );}else {return 0;};};func _ecge (_ccca string )bool {for _ ,_adge :=range _add {_dfe :=_adge .FindStringSubmatch (_ccca );if len (_dfe )> 1{return true ;};};return false ;};func _edb (){_ede ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_fbf .MustCompile ("\u005e"+_gfg +_aac );_ede ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_fbf .MustCompile ("\u005e"+_aab +_aac );_ede ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_fbf .MustCompile ("\u005e"+_addg +_aac );_ede ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_fbf .MustCompile ("\u005e"+_bbbe +_aac );_beeac ["\u0068\u0068"]=_fbf .MustCompile (_cdfb +_dceb +"\u0024");_beeac ["\u0068\u0068\u003am\u006d"]=_fbf .MustCompile (_cdfb +_cfe +"\u0024");_beeac ["\u006d\u006d\u003as\u0073"]=_fbf .MustCompile (_cdfb +_fcfd +"\u0024");_beeac ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_fbf .MustCompile (_cdfb +_fda +"\u0024");_afc =[]*_fbf .Regexp {_fbf .MustCompile ("\u005e"+_gfg +"\u0024"),_fbf .MustCompile ("\u005e"+_aab +"\u0024"),_fbf .MustCompile ("\u005e"+_addg +"\u0024"),_fbf .MustCompile ("\u005e"+_bbbe +"\u0024")};_add =[]*_fbf .Regexp {_fbf .MustCompile ("\u005e"+_dceb +"\u0024"),_fbf .MustCompile ("\u005e"+_cfe +"\u0024"),_fbf .MustCompile ("\u005e"+_fcfd +"\u0024"),_fbf .MustCompile ("\u005e"+_fda +"\u0024")};};const _afdaa =57352;type yyLexer interface{Lex (_caggg *yySymType )int ;Error (_deeg string );};func _fbb (_egg ,_cdb ,_bge int )bool {if _cdb < 1||_cdb > 12{return false ;};if _bge < 1{return false ;};return _bge <=_aga (_egg ,_cdb );};

// String returns a string representation of SheetPrefixExpr.
func (_ffbf SheetPrefixExpr )String ()string {return _ffbf ._eeddc };var _aagfd =[...]string {};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func _fefc (_bacd []Result ,_bedb string )(*cumulArgs ,Result ){if len (_bacd )!=6{return nil ,MakeErrorResult (_bedb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bacd [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bedb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_egde :=_bacd [0].ValueNumber ;if _egde <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bacd [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bedb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dda :=_bacd [1].ValueNumber ;if _dda <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _bacd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bedb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcff :=_bacd [2].ValueNumber ;if _bcff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bacd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bedb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_age :=_bacd [3].ValueNumber ;if _age <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bacd [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bedb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gced :=_bacd [4].ValueNumber ;if _gced <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _gced < _age {return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _gced > _dda {return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_gga :=int (_bacd [5].ValueNumber );if _gga !=0&&_gga !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_bedb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_egde ,_dda ,_bcff ,_age ,_gced ,_gga },_gde ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_ecfe :=_bb .Split (v ,"\u003a");if len (_ecfe )!=2{return nil ;};_bcdeba ,_ :=_ea .Atoi (_ecfe [0]);_abec ,_ :=_ea .Atoi (_ecfe [1]);if _bcdeba > _abec {_bcdeba ,_abec =_abec ,_bcdeba ;};return PrefixHorizontalRange {_fafd :pfx ,_eefc :_bcdeba ,_ceega :_abec };};func _babd (_afce []Result ,_egdec string )(float64 ,float64 ,Result ){if len (_afce )!=2{return 0,0,MakeErrorResult (_egdec +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _afce [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_egdec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bfbc :=_afce [0].ValueNumber ;if _afce [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_egdec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgdcd :=float64 (int (_afce [1].ValueNumber ));if _cgdcd < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_egdec +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _bfbc ,_cgdcd ,_gde ;};const _dfb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";type amorArgs struct{_aedb float64 ;_feed float64 ;_gad float64 ;_bgdeb float64 ;_cbcb int ;_abcg float64 ;_dabc int ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bdfb :=args [0].AsNumber ();if _bdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eccag :=float64 (1);if _bdfb .ValueNumber < 0{_eccag =-1;};if len (args )> 1{_afge :=args [1].AsNumber ();if _afge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_eccag =_cd .Abs (_afge .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Floor (_bdfb .ValueNumber ));};_aagb :=_bdfb .ValueNumber ;_aagb ,_adfg :=_cd .Modf (_aagb /_eccag );if _adfg !=0{if _bdfb .ValueNumber < 0{_aagb --;};};return MakeNumberResult (_aagb *_eccag );};

// String returns a string representation of a horizontal range with prefix.
func (_ggcd PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ggcd ._fafd .String (),_ggcd ._eefc ,_ggcd ._ceega );};

// Eval evaluates and returns the result of an error expression.
func (_beb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_beb ._ebbc )};const _cbdc =57346;

// Eval evaluates and returns the result of a sheet expression.
func (_fgfg SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_efdc .Lock ();defer _efdc .Unlock ();if _dcaga ,_feeea :=_efagec [name ];_feeea {return _dcaga ;};return nil ;};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cacf :=args [0];if _cacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acfa :=int (_cacf .ValueNumber );if _acfa < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_acfa {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_acfa ];};func _bagfg (_acad Result ,_dgba *criteriaParsed )bool {if _acad .Type ==ResultTypeEmpty {return false ;};if _dgba ._acbc {return _acad .ValueNumber ==_dgba ._abga ;}else {_gbfg :=_bb .ToLower (_acad .ValueString );return _dgba ._ddcg ==_gbfg ||_ef .Match (_dgba ._ddcg ,_gbfg );};};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_efbb (args ,_cfbdc ))};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ccdd ,_gabf :=_bgaf (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _gabf .Type ==ResultTypeError {return _gabf ;};_fgeg :=_ddfb (_ccdd ._eeee );_fgee :=_ddfb (_ccdd ._aef );_ecga :=_ccdd ._egcf ;_deed :=_ccdd ._becb ;_ebc :=_fdf (_fgeg ,_fgee ,_ecga ,_deed );_afbdd ,_bff ,_gdb :=_ebc .Date ();return MakeNumberResult (_cedc (_afbdd ,int (_bff ),_gdb ));};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _egdaa (args ,false )};var _acdb =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };func _fbeddd (){_dcaec =_fbf .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_ecfc =_fbf .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_gafe =_fbf .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_gcbd =_fbf .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_fgbg =_fbf .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_eggca =_fbf .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _afbd (_dagd ,_fcee ,_gee ,_adf int )int {if !_gaba (_adf ){return _gee ;};_ege :=_gee ;_egc :=_aga (_dagd ,_fcee );if _ege > 30||_gee >=_egc ||_ege >=_egc {_ege =30;};return _ege ;};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_bb .NewReader (s ));};func (_cfcgf *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fegbb chan *node ;_ebga _fe .Mutex ;_abae []chan *node ;_bbcf []*node ;};func _deabg (_dfeg Result ,_dgaeb ,_cgad int )[][]Result {_adcba :=[][]Result {};switch _dfeg .Type {case ResultTypeArray :for _ddffg ,_gebb :=range _dfeg .ValueArray {if _ddffg < _dgaeb {_adcba =append (_adcba ,_edbcf (MakeListResult (_gebb ),_cgad ));}else {_adcba =append (_adcba ,_edbcf (MakeErrorResultType (ErrorTypeNA ,""),_cgad ));};};case ResultTypeList :_baecc :=_edbcf (_dfeg ,_cgad );for _fddg :=0;_fddg < _dgaeb ;_fddg ++{_adcba =append (_adcba ,_baecc );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _aedf :=0;_aedf < _dgaeb ;_aedf ++{_fbabg :=_edbcf (_dfeg ,_cgad );_adcba =append (_adcba ,_fbabg );};};return _adcba ;};

// String returns a string representation of ConstArrayExpr.
func (_ed ConstArrayExpr )String ()string {return ""};

// HasFormula returns FALSE for the invalid reference context.
func (_bdca *ivr )HasFormula (cellRef string )bool {return false };func _egcfd (_gagdf string ,_ddfa []Result )(*parsedSearchObject ,Result ){_dccbc :=len (_ddfa );if _dccbc !=2&&_dccbc !=3{return nil ,MakeErrorResult (_gagdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbcgb :=_ddfa [0];if _cbcgb .Type ==ResultTypeError {return nil ,_cbcgb ;};if _cbcgb .Type !=ResultTypeString &&_cbcgb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dfgbc :=_ddfa [1];if _dfgbc .Type ==ResultTypeError {return nil ,_dfgbc ;};if _dfgbc .Type !=ResultTypeString &&_dfgbc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_eagd :=_dfgbc .Value ();_cffb :=_cbcgb .Value ();_bcae :=1;if _dccbc ==3&&_ddfa [2].Type !=ResultTypeEmpty {_deff :=_ddfa [2];if _deff .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_bcae =int (_deff .ValueNumber );if _bcae < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _bcae > len (_eagd ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_cffb ,_eagd ,_bcae },_gde ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afef :=args [0].Ref ;if _afef .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_afef .Value ,ev ).IsBoolean );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_efdc .Lock ();defer _efdc .Unlock ();if _ ,_adeba :=_ecfce [name ];_adeba {_feb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ecfce [name ]=fn ;};var _gacdb =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_bgdc :=len (args );if _bgdc < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gagea :=args [0].ValueNumber ;if _gagea ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ecgfb :=[]float64 {};for _ ,_eggc :=range args [1:]{switch _eggc .Type {case ResultTypeNumber :_ecgfb =append (_ecgfb ,_eggc .ValueNumber );case ResultTypeArray ,ResultTypeList :_fbgc :=_edbae (_eggc );for _ ,_bedf :=range _fbgc {for _ ,_afeb :=range _bedf {if _afeb .Type ==ResultTypeNumber &&!_afeb .IsBoolean {_ecgfb =append (_ecgfb ,_afeb .ValueNumber );};};};};};_afbf :=0.0;for _ccbg ,_ccdb :=range _ecgfb {_afbf +=_ccdb /_cd .Pow (1+_gagea ,float64 (_ccbg )+1);};return MakeNumberResult (_afbf );};const _dfgcf =_be .Millisecond *1000;

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// GetFormat returns an empty string for the invalid reference context.
func (_fgaca *ivr )GetFormat (cellRef string )string {return ""};const _cbdg =-1000;

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecaga :=int (args [0].ValueNumber );return MakeBoolResult (_ecaga !=_ecaga /2*2);};func _bdegf (_dgbc [][]Result )float64 {if len (_dgbc )==2{_bbfb :=_dgbc [0][0].AsNumber ();_eebgd :=_dgbc [0][1].AsNumber ();_gdgbd :=_dgbc [1][0].AsNumber ();_edfg :=_dgbc [1][1].AsNumber ();if _bbfb .Type !=ResultTypeNumber ||_eebgd .Type !=ResultTypeNumber ||_gdgbd .Type !=ResultTypeNumber ||_edfg .Type !=ResultTypeNumber {return _cd .NaN ();};return _bbfb .ValueNumber *_edfg .ValueNumber -_gdgbd .ValueNumber *_eebgd .ValueNumber ;};_gabc :=float64 (0);_acfe :=float64 (1);for _aaab :=range _dgbc {_gabc +=_acfe *_dgbc [0][_aaab ].ValueNumber *_bdegf (_edeeg (_dgbc ,_aaab ));_acfe *=-1;};return _gabc ;};func _dbadd (_ddeg float64 )float64 {return float64 (int (_ddeg +0.5))};func LexReader (r _c .Reader )chan *node {_ceeab :=NewLexer ();go _ceeab .lex (r );return _ceeab ._fegbb };

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgabf :=[]float64 {};for _ ,_afgdb :=range args {switch _afgdb .Type {case ResultTypeString :_fadfe :=_afgdb .AsNumber ();if _fadfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgabf =append (_cgabf ,_fadfe .ValueNumber );case ResultTypeList ,ResultTypeArray :_cbbee :=GCD (_afgdb .ListValues ());if _cbbee .Type !=ResultTypeNumber {return _cbbee ;};_cgabf =append (_cgabf ,_cbbee .ValueNumber );case ResultTypeNumber :_cgabf =append (_cgabf ,_afgdb .ValueNumber );case ResultTypeError :return _afgdb ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afgdb .Type ));};};if _cgabf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cgabf )==1{return MakeNumberResult (_cgabf [0]);};_dbfe :=_cgabf [0];for _ebba :=1;_ebba < len (_cgabf );_ebba ++{if _cgabf [_ebba ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbfe =_fgbba (_dbfe ,_cgabf [_ebba ]);};return MakeNumberResult (_dbfe );};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_addfbc :=args [0].AsNumber ();if _addfbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_fdgage :=float64 (1);if _addfbc .ValueNumber < 0{_fdgage =-1;};if len (args )> 1{_bega :=args [1].AsNumber ();if _bega .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdgage =_bega .ValueNumber ;};if _fdgage < 0&&_addfbc .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_cd .Ceil (_addfbc .ValueNumber ));};_bafd :=_addfbc .ValueNumber ;_bafd ,_dacg :=_cd .Modf (_bafd /_fdgage );if _dacg > 0{_bafd ++;};return MakeNumberResult (_bafd *_fdgage );};const _ddge ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_fgggg ,_fdgd Expression };

// Reference returns a string reference value to an expression with prefix.
func (_fefcd PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_cddad :=_fefcd ._fcgdfd .Reference (ctx ,ev );_eddce :=_fefcd ._begge .Reference (ctx ,ev );if _cddad .Type ==ReferenceTypeSheet &&_eddce .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_cddad .Value +"\u0021"+_eddce .Value };};return ReferenceInvalid ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_cdfdf :=len (args );if (_cdfdf !=2&&_cdfdf !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgba :=0;if _cdfdf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgba =int (args [2].ValueNumber );if !_afdd (_bgba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gfcb :=args [1].ValueNumber ;_dgb ,_gfdb :=_adafe (_aec ,_gfcb ,_bgba );if _gfdb .Type ==ResultTypeError {return _gfdb ;};return MakeNumberResult (_dgb );};const _gddge =57369;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_feggb :=MakeNumberResult (0);for _ ,_daaf :=range args {_daaf =_daaf .AsNumber ();switch _daaf .Type {case ResultTypeNumber :_feggb .ValueNumber +=_daaf .ValueNumber *_daaf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bage :=SumSquares (_daaf .ListValues ());if _bage .Type !=ResultTypeNumber {return _bage ;};_feggb .ValueNumber +=_bage .ValueNumber ;case ResultTypeString :case ResultTypeError :return _daaf ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_daaf .Type ));};};return _feggb ;};

// String returns a string of a range.
func (_afaab Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_afaab ._fgggg .String (),_afaab ._fdgd .String ());};func (_bffe PrefixHorizontalRange )horizontalRangeReference (_bcggc string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bcggc ,_bffe ._eefc ,_bffe ._ceega );};func _acgf (_gdbc []Result ,_ffgd string )(*amorArgs ,Result ){_ecgd :=len (_gdbc );if _ecgd !=6&&_ecgd !=7{return nil ,MakeErrorResult (_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdbc [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ecgb :=_gdbc [0].ValueNumber ;if _ecgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_dega ,_gfb :=_ddcb (_gdbc [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_ffgd );if _gfb .Type ==ResultTypeError {return nil ,_gfb ;};_edaa ,_gfb :=_ddcb (_gdbc [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_ffgd );if _gfb .Type ==ResultTypeError {return nil ,_gfb ;};if _edaa < _dega {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gdbc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_accg :=_gdbc [3].ValueNumber ;if _accg < 0||_accg > _ecgb {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gdbc [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcbg :=int (_gdbc [4].ValueNumber );if _gcbg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gdbc [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dbea :=_gdbc [5].ValueNumber ;if _dbea < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ffgd +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_dfbg :=0;if _ecgd ==7&&_gdbc [6].Type !=ResultTypeEmpty {if _gdbc [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgd +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfbg =int (_gdbc [6].ValueNumber );if !_afdd (_dfbg )||_dfbg ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ffgd );};};return &amorArgs {_ecgb ,_dega ,_edaa ,_accg ,_gcbg ,_dbea ,_dfbg },_gde ;};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_gacd :=len (args );if _gacd !=4&&_gacd !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfca :=args [0].ValueNumber ;if _gfca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adce :=args [1].ValueNumber ;if _adce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egeg :=args [2].ValueNumber ;if _egeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgfd :=args [3].ValueNumber ;if _bgfd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bgfd > _egeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_faec :=2.0;if _gacd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faec =args [4].ValueNumber ;if _faec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_gfcd (_gfca ,_adce ,_egeg ,_bgfd ,_faec ));};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _cfgd (args ,true )};const _gfg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adde :=args [0];_aggd :=args [1];if _aggd .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gfdbe :=args [2].AsNumber ();if _gfdbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_faece :=false ;if len (args )==4{_bbaae :=args [3].AsNumber ();if _bbaae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bbaae .ValueNumber ==0{_faece =true ;};};_ebfe :=-1;_ddae :=false ;if len (_aggd .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_eaea :=_aggd .ValueArray [0];_dfgbf :for _fdgad ,_aabb :=range _eaea {switch _baaea (_aabb ,_adde ,false ,_faece ){case _egdg :_ebfe =_fdgad ;case _afed :_ebfe =_fdgad ;_ddae =true ;break _dfgbf ;};};if _ebfe ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_babcee :=int (_gfdbe .ValueNumber )-1;if _babcee < 0||_babcee > len (_aggd .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_eaea =_aggd .ValueArray [_babcee ];if _ebfe < 0||_ebfe >=len (_eaea ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ddae ||!_faece {return _eaea [_ebfe ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_dgbgf PrefixHorizontalRange )Update (q *_dd .UpdateQuery )Expression {return _dgbgf };const _affa =16;

// GetLocked returns FALSE for the invalid reference context.
func (_bcfcb *ivr )GetLocked (cellRef string )bool {return false };const _feef int =30;

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_befa :=args [0].AsNumber ();if _befa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedb :=_cd .Signbit (_befa .ValueNumber );_bacfg ,_ceae :=_cd .Modf ((_befa .ValueNumber -1)/2);_cbgeg :=_bacfg *2+1;if _ceae !=0{if !_cedb {_cbgeg +=2;}else {_cbgeg -=2;};};return MakeNumberResult (_cbgeg );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_aeca ,_bgab :=_bgaf (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _bgab .Type ==ResultTypeError {return _bgab ;};return MakeNumberResult (_fcfa (_aeca ._eeee ,_aeca ._aef ,_aeca ._egcf ,_aeca ._becb ));};type couponArgs struct{_eeee float64 ;_aef float64 ;_egcf int ;_becb int ;};func _baa (_fea BinOpType ,_ge [][]Result ,_cbc Result )Result {_fd :=[][]Result {};for _ffb :=range _ge {_cdf :=_ec (_fea ,_ge [_ffb ],_cbc );if _cdf .Type ==ResultTypeError {return _cdf ;};_fd =append (_fd ,_cdf .ValueList );};return MakeArrayResult (_fd );};func _dcbg (_baec _be .Time )_be .Time {_baec =_baec .UTC ();return _be .Date (_baec .Year (),_baec .Month (),_baec .Day (),_baec .Hour (),_baec .Minute (),_baec .Second (),_baec .Nanosecond (),_be .Local );};const _degga =57372;

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bcdd ,_cfac :=_fefc (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cfac .Type ==ResultTypeError {return _cfac ;};_afe :=_bcdd ._dac ;_ffgg :=_bcdd ._cgba ;_bcad :=_bcdd ._eegd ;_fbgd :=_bcdd ._abgf ;_beba :=_bcdd ._gdfb ;_eefg :=_bcdd ._geec ;_bcddg :=_cga (_afe ,_ffgg ,_bcad ,0,_eefg );_effb :=0.0;if _fbgd ==1{if _eefg ==0{_effb =_bcddg +_bcad *_afe ;}else {_effb =_bcddg ;};_fbgd ++;};for _dbdee :=_fbgd ;_dbdee <=_beba ;_dbdee ++{if _eefg ==1{_effb +=_bcddg -(_bedg (_afe ,_dbdee -2,_bcddg ,_bcad ,1)-_bcddg )*_afe ;}else {_effb +=_bcddg -_bedg (_afe ,_dbdee -1,_bcddg ,_bcad ,0)*_afe ;};};return MakeNumberResult (_effb );};func _gbb (_egdd []Result ,_fcec string )(*durationArgs ,Result ){_fedg :=len (_egdd );if _fedg !=5&&_fedg !=6{return nil ,MakeErrorResult (_fcec +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bddcg ,_gdef ,_aegf :=_eagf (_egdd [0],_egdd [1],_fcec );if _aegf .Type ==ResultTypeError {return nil ,_aegf ;};_gcfd :=_egdd [2];if _gcfd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ccge :=_gcfd .ValueNumber ;if _ccge < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_eef :=_egdd [3];if _eef .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cdae :=_eef .ValueNumber ;if _cdae < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_dffd :=_egdd [4];if _dffd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcec +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbfad :=float64 (int (_dffd .ValueNumber ));if !_gbc (_dbfad ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ddfg :=0;if _fedg ==6&&_egdd [5].Type !=ResultTypeEmpty {_afbc :=_egdd [5];if _afbc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfg =int (_afbc .ValueNumber );if !_afdd (_ddfg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_fcec );};};return &durationArgs {_bddcg ,_gdef ,_ccge ,_cdae ,_dbfad ,_ddfg },_gde ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};var _faddd =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fbecd :=len (args );if _fbecd !=6&&_fbecd !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcgb ,_fbba ,_eegag :=_eagf (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _eegag .Type ==ResultTypeError {return _eegag ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eged :=args [2].ValueNumber ;if _eged < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gfdda :=args [3].ValueNumber ;if _gfdda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdeac :=args [4].ValueNumber ;if _gdeac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbcd :=args [5];if _fbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ceb :=_fbcd .ValueNumber ;if !_gbc (_ceb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gacba :=0;if _fbecd ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gacba =int (args [6].ValueNumber );if !_afdd (_gacba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_facaf ,_eegag :=_ddfbf (_dcgb ,_fbba ,_eged ,_gfdda ,_gdeac ,_ceb ,_gacba );if _eegag .Type ==ResultTypeError {return _eegag ;};return MakeNumberResult (_facaf );};func _bada (_gaag Result )Result {if _gaag .Type ==ResultTypeEmpty {return _gaag ;};_fdde :=_gaag .AsString ();if _fdde .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gaag .IsBoolean {if _fdde .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fdde .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_bb .ToLower (_fdde .ValueString ));};};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_baag :=args [0];if _baag .Type !=ResultTypeArray &&_baag .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ggg :=_baag .ValueArray ;if len (_ggg )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_ggg [0])));};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_eadf :=args [0].AsNumber ();if _eadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_adbg :=10.0;if len (args )> 1{_eegfd :=args [1].AsNumber ();if _eegfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_adbg =args [1].ValueNumber ;};if _eadf .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _adbg ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_cd .Log (_eadf .ValueNumber )/_cd .Log (_adbg ));};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fbcb :=args [0].ValueNumber ;if _fbcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_cfbd :=float64 (int (args [1].ValueNumber ));if _cfbd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_cd .Pow (_fbcb +1,1/_cfbd )-1)*_cfbd );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _bcade (args ,_dccfg )};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);const _aded =57351;

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _edabd (args ,false )};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _cfgd (args ,false )};func (_gafcg *Lexer )Next ()*node {_gafcg ._ebga .Lock ();defer _gafcg ._ebga .Unlock ();if len (_gafcg ._bbcf )> 0{_cefe :=_gafcg ._bbcf [0];_gafcg ._bbcf =_gafcg ._bbcf [1:];return _cefe ;};return _gafcg .nextRaw ();};type parsedReplaceObject struct{_dadd string ;_efba int ;_ceecc int ;_bgag string ;};var _afa int64 =_agf (1900,_be .January ,1);func (_dbgd Result )String ()string {return _dbgd .Value ()};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fcgdfd Expression ;_begge Expression ;};type plex struct{_ccbd chan *node ;_abfg Expression ;_dfbd string ;};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gaca :=args [0].AsNumber ();if _gaca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgggb :=float64 (0);if len (args )> 1{_geeg :=args [1].AsNumber ();if _geeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgggb =_geeg .ValueNumber ;};_fadab :=_gaca .ValueNumber ;_dgbb :=1.0;if _cgggb >=0{_dgbb =_cd .Pow (1/10.0,_cgggb );}else {return MakeNumberResult (0);};_fadab ,_feac :=_cd .Modf (_fadab /_dgbb );_bcgf :=0.99999;if _feac > _bcgf {_fadab ++;}else if _feac < -_bcgf {_fadab --;};_ =_feac ;return MakeNumberResult (_fadab *_dgbb );};func _aff (_dgff ,_dgef int64 )float64 {return float64 (int (0.5+float64 ((_dgef -_dgff )/86400)))};func (_efad *ivr )Sheet (name string )Context {return _efad };var _dbb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dafd :=len (args );if _dafd !=4&&_dafd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eagc ,_bgfb ,_cfgba :=_eagf (args [0],args [1],"\u0044\u0049\u0053\u0043");if _cfgba .Type ==ResultTypeError {return _cfgba ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_egf :=args [2].ValueNumber ;if _egf <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbga :=args [3].ValueNumber ;if _cbga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcfe :=0;if _dafd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcfe =int (args [4].ValueNumber );if !_afdd (_fcfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_ceddb ,_cfgba :=_adafe (_eagc ,_bgfb ,_fcfe );if _cfgba .Type ==ResultTypeError {return _cfgba ;};return MakeNumberResult ((_cbga -_egf )/_cbga /_ceddb );};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_abac :=len (args );if _abac < 4||_abac > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acac :=args [1].ValueNumber ;if _acac <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdce :=args [2].ValueNumber ;if _bdce < _acac {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_becf :=args [3].ValueNumber ;_feae :=0.0;if _abac >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_feae =args [4].ValueNumber ;};_gbcff :=0;if _abac ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbcff =int (args [5].ValueNumber );if _gbcff !=0{_gbcff =1;};};return MakeNumberResult (_cga (_afda ,_bdce ,_becf ,_feae ,_gbcff )-_abde (_afda ,_acac ,_bdce ,_becf ,_feae ,_gbcff ));};func _dcbb (_fgcg Context ,_cegdf ,_eeeaf int )(string ,string ){_baggf :="\u0041"+_ea .Itoa (_cegdf );_ffca :=_fgcg .LastColumn (_cegdf ,_eeeaf );_affdg :=_ffca +_ea .Itoa (_eeeaf );return _baggf ,_affdg ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdea :=ctx .GetEpoch ();_cbcf ,_abcc :=_cdbd (args [0].Value (),_gdea );if _abcc !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_cbcf .Year ()));};

// LastRow returns 0 for the invalid reference context.
func (_bged *ivr )LastRow (colFrom string )int {return 0};

// SetLocked does nothing for the invalid reference context.
func (_cagb *ivr )SetLocked (cellRef string ,locked bool ){};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_cfgbc :=args [0];if _cfgbc .Type !=ResultTypeArray &&_cfgbc .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbff :=_cfgbc .ValueArray ;if len (_cbff )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_cbff )));};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gaec :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_ebede :=args [1].ValueNumber !=0;_aedfa :=_gbgg (args [2:],[]string {},_ebede );return MakeStringResult (_bb .Join (_aedfa ,_gaec ));};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_cceb :=args [0];if _cceb .Type ==ResultTypeError {return _cceb ;};if _cceb .Type !=ResultTypeString &&_cceb .Type !=ResultTypeNumber &&_cceb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_bccd :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gddag :=int (args [1].ValueNumber );if _gddag < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_adefa :=int (args [2].ValueNumber );if _adefa < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ccfeb :=len (_bccd );if _gddag > _ccfeb {return MakeStringResult ("");};_gddag --;_gbbbf :=_gddag +_adefa ;if _gbbbf > _ccfeb {return MakeStringResult (_bccd [_gddag :]);}else {return MakeStringResult (_bccd [_gddag :_gbbbf ]);};};var _gcce =[...]int {0};

// Reference returns a string reference value to a horizontal range.
func (_ddbce HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_ddbce .horizontalRangeReference ()};};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbbd :=args [0].AsNumber ();if _cbbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcaad :=float64 (1);if _cbbd .ValueNumber < 0{_fcaad =-1;};if len (args )> 1{_begag :=args [1].AsNumber ();if _begag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcaad =_cd .Abs (_begag .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Ceil (_cbbd .ValueNumber ));};_gacbe :=_cbbd .ValueNumber ;_gacbe ,_fegb :=_cd .Modf (_gacbe /_fcaad );if _fegb !=0{if _cbbd .ValueNumber > 0{_gacbe ++;};};return MakeNumberResult (_gacbe *_fcaad );};type node struct{_cfca tokenType ;_fbdfc string ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_feea :=_affdd (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _feea .Type !=ResultTypeEmpty {return _feea ;};_fcgdf :=_cdeed (args [1:]);_eaee :=_cd .MaxFloat64 ;_gfae :=_edbae (args [0]);for _ ,_eedg :=range _fcgdf {_aedgb :=_gfae [_eedg ._eacc ][_eedg ._adafc ].ValueNumber ;if _eaee > _aedgb {_eaee =_aedgb ;};};if _eaee ==_cd .MaxFloat64 {_eaee =0;};return MakeNumberResult (float64 (_eaee ));};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cd .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// EmptyExpr is an empty expression.
type EmptyExpr struct{};var _efdc _fe .Mutex ;

// String returns a string representation of a vertical range with prefix.
func (_ageea PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ageea ._cgee .String (),_ageea ._cffg ,_ageea ._dfagd );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_gedac :=len (args );if _gedac < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gedac > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cecg :=args [0];_bgbcc :=args [1];if _bgbcc .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fbbb :=args [2].AsNumber ();if _fbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgag :=false ;if _gedac ==4&&args [3].Type !=ResultTypeEmpty {_dfag :=args [3].AsNumber ();if _dfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dfag .ValueNumber ==0{_cgag =true ;};};_gcaaa :=int (_fbbb .ValueNumber )-1;_ggbc :=-1;_edcb :=false ;_edgb :for _cegd ,_bceb :=range _bgbcc .ValueArray {if len (_bceb )==0{continue ;};_bbcb :=_bceb [0];switch _baaea (_bbcb ,_cecg ,false ,_cgag ){case _egdg :_ggbc =_cegd ;case _afed :_ggbc =_cegd ;_edcb =true ;break _edgb ;};};if _ggbc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bgeg :=_bgbcc .ValueArray [_ggbc ];if _gcaaa < 0||_gcaaa >=len (_bgeg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _edcb ||!_cgag {return _bgeg [_gcaaa ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type Reference struct{Type ReferenceType ;Value string ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbag :=args [0].AsNumber ();if _cbag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_bfgb :=float64 (1);if _cbag .ValueNumber < 0{_bfgb =-1;};if len (args )> 1{_dged :=args [1].AsNumber ();if _dged .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfgb =_dged .ValueNumber ;};_ccba :=float64 (1);if len (args )> 2{_bdccc :=args [2].AsNumber ();if _bdccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_ccba =_bdccc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Ceil (_cbag .ValueNumber ));};_cgage :=_cbag .ValueNumber ;_cgage ,_fcagb :=_cd .Modf (_cgage /_bfgb );if _fcagb !=0{if _cbag .ValueNumber > 0{_cgage ++;}else if _ccba < 0{_cgage --;};};return MakeNumberResult (_cgage *_bfgb );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbdb ,_defg ,_dfae :=_eagf (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dfae .Type ==ResultTypeError {return _dfae ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfegc :=_defg -_gbdb ;if _gfegc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_bfed :=args [2].ValueNumber ;if _bfed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_bfed *_gfegc /360));};type yyParserImpl struct{_efdf yySymType ;_ffac [_affa ]yySymType ;_adee int ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _effa (){_feedd =_fbf .MustCompile ("\u005e\u0030\u002b\u0024");_afbdc =_fbf .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_bfcg =_fbf .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_ccaea =_fbf .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_cdacg =_fbf .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_geecf =_fbf .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_ddddg =_fbf .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_eaad =_fbf .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_eeeec =_fbf .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_ccag =_fbf .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_efgc =_fbf .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_fbab =_fbf .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ageb +_ageb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ageb +_ageb +"\u0029\u002b\u0059+\u0024");_bfda =_fbf .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_ageb +_ageb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_ageb +_ageb +"\u0029\u002b\u0059+\u0024");_gbeac =_fbf .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ccff =_fbf .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};var _add =[]*_fbf .Regexp {};func (_cba BinOpType )String ()string {if _cba >=BinOpType (len (_dbb )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cba );};return _ab [_dbb [_cba ]:_dbb [_cba +1]];};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fbge ,_gfea :=_fefc (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _gfea .Type ==ResultTypeError {return _gfea ;};_bcda :=_fbge ._dac ;_ffe :=_fbge ._cgba ;_bgddb :=_fbge ._eegd ;_efg :=_fbge ._abgf ;_ddb :=_fbge ._gdfb ;_ece :=_fbge ._geec ;_abbg :=_cga (_bcda ,_ffe ,_bgddb ,0,_ece );_cgdd :=0.0;if _efg ==1{if _ece ==0{_cgdd =-_bgddb ;_efg ++;};};for _dbba :=_efg ;_dbba <=_ddb ;_dbba ++{if _ece ==1{_cgdd +=_bedg (_bcda ,_dbba -2,_abbg ,_bgddb ,1)-_abbg ;}else {_cgdd +=_bedg (_bcda ,_dbba -1,_abbg ,_bgddb ,0);};};_cgdd *=_bcda ;return MakeNumberResult (_cgdd );};func _fdf (_deg ,_afdb _be .Time ,_deb ,_cgb int )_be .Time {_fgba :=_afdb ;_daag :=_deg .Year ()-_afdb .Year ();_fgba =_fgba .AddDate (_daag ,0,0);if _deg .After (_fgba ){_fgba =_fgba .AddDate (1,0,0);};_ffgbg :=-12/_deb ;for _fgba .After (_deg ){_fgba =_fgba .AddDate (0,_ffgbg ,0);};return _fgba ;};

// Negate is a negate expression like -A1.
type Negate struct{_gbagd Expression };

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// String returns a string representation of a range with prefix.
func (_gege PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gege ._adebd .String (),_gege ._aedfe .String (),_gege ._ffefe .String ());};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggbe :=args [0].AsNumber ();if _ggbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baagg :=float64 (1);_gdcbb :=args [1].AsNumber ();if _gdcbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_baagg =_gdcbb .ValueNumber ;if _baagg < 0&&_ggbe .ValueNumber > 0||_baagg > 0&&_ggbe .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_gdbad :=_ggbe .ValueNumber ;_gdbad ,_dbaeb :=_cd .Modf (_gdbad /_baagg );if _cd .Trunc (_dbaeb +0.5)> 0{_gdbad ++;};return MakeNumberResult (_gdbad *_baagg );};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_bcdba :v }};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_dg :v }};func _edga (_beda ,_aea _be .Time )bool {_cdc :=_beda .Unix ();_cgdc :=_aea .Unix ();_ecbd :=_beda .Year ();_aed :=_agf (_ecbd ,_be .March ,1);if _ffdb (_ecbd )&&_cdc < _aed &&_cgdc >=_aed {return true ;};var _agaf =_aea .Year ();var _dbac =_agf (_agaf ,_be .March ,1);return (_ffdb (_agaf )&&_cgdc >=_dbac &&_cdc < _dbac );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_fgbb :=len (args );if _fgbb < 4||_fgbb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgbb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgcc :=args [1].ValueNumber ;if _bgcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_debf :=args [2].ValueNumber ;if _debf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dbagc :=args [3].ValueNumber ;_cgc :=0.0;if _fgbb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgc =args [4].ValueNumber ;};_daef :=0;if _fgbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_daef =int (args [5].ValueNumber );if _daef !=0{_daef =1;};};return MakeNumberResult (_abde (_bgbb ,_bgcc ,_debf ,_dbagc ,_cgc ,_daef ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cd .Pi );};func _bedg (_bddgb ,_cbbg ,_dbeae ,_gfa float64 ,_dbbb int )float64 {var _eddc float64 ;if _bddgb ==0{_eddc =_gfa +_dbeae *_cbbg ;}else {_faf :=_cd .Pow (1+_bddgb ,_cbbg );if _dbbb ==1{_eddc =_gfa *_faf +_dbeae *(1+_bddgb )*(_faf -1)/_bddgb ;}else {_eddc =_gfa *_faf +_dbeae *(_faf -1)/_bddgb ;};};return -_eddc ;};type Expression interface{Eval (_cdd Context ,_eaa Evaluator )Result ;Reference (_gbe Context ,_dbfa Evaluator )Reference ;String ()string ;Update (_adc *_dd .UpdateQuery )Expression ;};type evCache struct{_dea map[string ]Result ;_bfg *_fe .Mutex ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfga :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfag :=args [2].ValueNumber ;if _cfag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dgdc -_cfga )/_cfag );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _baaeb (_fbbbf string )string {_fbbbf =_bb .Replace (_fbbbf ,"\u000a","\u005c\u006e",-1);_fbbbf =_bb .Replace (_fbbbf ,"\u000d","\u005c\u0072",-1);_fbbbf =_bb .Replace (_fbbbf ,"\u0009","\u005c\u0074",-1);return _fbbbf ;};func _beed (_cgbec float64 ,_gdfgd *criteriaRegex )bool {_cgdda ,_ffgga :=_ea .ParseFloat (_gdfgd ._dfgdc ,64);if _ffgga !=nil {return false ;};switch _gdfgd ._bagcf {case _abccg :return _cgbec ==_cgdda ;case _ecgfe :return _cgbec <=_cgdda ;case _edcf :return _cgbec >=_cgdda ;case _agac :return _cgbec < _cgdda ;case _cgga :return _cgbec > _cgdda ;};return false ;};func _dag (_fbae string )(int ,int ,float64 ,bool ,bool ,Result ){_fdga :="";_daa :=[]string {};for _fgd ,_geb :=range _beeac {_daa =_geb .FindStringSubmatch (_fbae );if len (_daa )> 1{_fdga =_fgd ;break ;};};if _fdga ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_abca :=_daa [1]=="";_daa =_daa [49:];_gbeg :=len (_daa );_befb :=_daa [_gbeg -1];_aabf :=_befb =="\u0061\u006d";_eba :=_befb =="\u0070\u006d";var _cede ,_dfbe int ;var _ccd float64 ;var _babc error ;switch _fdga {case "\u0068\u0068":_cede ,_babc =_ea .Atoi (_daa [0]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_dfbe =0;_ccd =0;case "\u0068\u0068\u003am\u006d":_cede ,_babc =_ea .Atoi (_daa [0]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_dfbe ,_babc =_ea .Atoi (_daa [2]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_ccd =0;case "\u006d\u006d\u003as\u0073":_cede =0;_dfbe ,_babc =_ea .Atoi (_daa [0]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_ccd ,_babc =_ea .ParseFloat (_daa [2],64);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cede ,_babc =_ea .Atoi (_daa [0]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_dfbe ,_babc =_ea .Atoi (_daa [2]);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};_ccd ,_babc =_ea .ParseFloat (_daa [4],64);if _babc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};};if _dfbe >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};if _aabf ||_eba {if _cede > 12||_ccd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );}else if _cede ==12{_cede =0;};}else if _cede >=24||_ccd >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfb );};return _cede ,_dfbe ,_ccd ,_eba ,_abca ,_gde ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// String returns a string representation for Bool.
func (_bfa Bool )String ()string {if _bfa ._feg {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};var _gecb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Update updates references in the VerticalRange after removing a row/column.
func (_bcafed VerticalRange )Update (q *_dd .UpdateQuery )Expression {if q .UpdateType ==_dd .UpdateActionRemoveColumn {_bgdg :=_bcafed ;if q .UpdateCurrentSheet {_gdbgca :=q .ColumnIdx ;_bgdg ._aacd =_eeg (_bcafed ._aacd ,_gdbgca );_bgdg ._eccgc =_eeg (_bcafed ._eccgc ,_gdbgca );};return _bgdg ;};return _bcafed ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_cca Context ,formula string )Result ;SetCache (_bfb string ,_fdbe Result );GetFromCache (_ggb string )(Result ,bool );LastEvalIsRef ()bool ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efef :=args [0].Ref ;if _efef .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_ceee ,_ffaa :=_cgf .ParseCellReference (_efef .Value );if _ffaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_efef .Value );};return MakeNumberResult (float64 (_ceee .ColumnIdx +1));};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_eaeb :=len (args );if _eaeb < 3||_eaeb > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_faa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafe :=args [1].ValueNumber ;if _dafe ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ebaa :=args [2].ValueNumber ;_bae :=0.0;if _eaeb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bae =args [3].ValueNumber ;};_fadd :=0.0;if _eaeb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fadd =args [4].ValueNumber ;if _fadd !=0{_fadd =1;};};var _ggde float64 ;if _faa ==0{_ggde =(_ebaa +_bae )/_dafe ;}else {_befg :=_cd .Pow (1+_faa ,_dafe );if _fadd ==1{_ggde =(_bae *_faa /(_befg -1)+_ebaa *_faa /(1-1/_befg ))/(1+_faa );}else {_ggde =_bae *_faa /(_befg -1)+_ebaa *_faa /(1-1/_befg );};};return MakeNumberResult (-_ggde );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cgee Expression ;_cffg ,_dfagd string ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfbe :=args [0];switch _bfbe .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_eag :=_ddfb (_bfbe .ValueNumber );return MakeNumberResult (float64 (_eag .Minute ()));case ResultTypeString :_fgc :=_bb .ToLower (_bfbe .ValueString );if !_ecge (_fgc ){_ ,_ ,_ ,_cdfd ,_ebgf :=_cagc (_fgc );if _ebgf .Type ==ResultTypeError {_ebgf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _ebgf ;};if _cdfd {return MakeNumberResult (0);};};_ ,_bcf ,_ ,_ ,_ ,_cfeb :=_dag (_fgc );if _cfeb .Type ==ResultTypeError {return _cfeb ;};return MakeNumberResult (float64 (_bcf ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bcdba string };

// Reference returns a string reference value to a vertical range with prefix.
func (_edae PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_fbag :=_edae ._cgee .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_edae .verticalRangeReference (_fbag .Value )};};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bcfb :=len (args );if _bcfb < 3||_bcfb > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ggeg :=args [2].ValueNumber ;_ddee :=0.0;if _bcfb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddee =args [3].ValueNumber ;};_daae :=0.0;if _bcfb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_daae =args [4].ValueNumber ;if _daae !=0{_daae =1;};};_aegea :=_cgbd *(1+_fec *_daae )-_ddee *_fec ;_gegab :=(_ggeg *_fec +_cgbd *(1+_fec *_daae ));return MakeNumberResult (_cd .Log (_aegea /_gegab )/_cd .Log (1+_fec ));};func _afgd (_fcce float64 )float64 {_afga :=float64 (1);for _acga :=float64 (2);_acga <=_fcce ;_acga ++{_afga *=_acga ;};return _afga ;};var _gde Result =MakeEmptyResult ();func _gdc (_edd int )int {if _edd < 1900{if _edd < 30{_edd +=2000;}else {_edd +=1900;};};return _edd ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_eabg :=args [0].AsString ();if _eabg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_bede :=_d .Buffer {};_fbda :=false ;for _ ,_eccfd :=range _eabg .ValueString {if !_fbda &&_f .IsLetter (_eccfd ){_bede .WriteRune (_f .ToUpper (_eccfd ));}else {_bede .WriteRune (_f .ToLower (_eccfd ));};_fbda =_f .IsLetter (_eccfd );};return MakeStringResult (_bede .String ());};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agdbd :=args [0].AsString ();if _agdbd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_agdbd .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_agdbd .ValueString [0]));};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_g :lhs ,_dc :rhs ,_gg :op };};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ffbga :=1.0;for _ ,_gbcbg :=range args {_gbcbg =_gbcbg .AsNumber ();switch _gbcbg .Type {case ResultTypeNumber :_ffbga *=_gbcbg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ddbc :=Product (_gbcbg .ListValues ());if _ddbc .Type !=ResultTypeNumber {return _ddbc ;};_ffbga *=_ddbc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbcbg ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gbcbg .Type ));};};return MakeNumberResult (_ffbga );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gedb :=_affdd (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gedb .Type !=ResultTypeEmpty {return _gedb ;};_adef :=_cdeed (args [1:]);_dgec :=-_cd .MaxFloat64 ;_eefb :=_edbae (args [0]);for _ ,_efbd :=range _adef {_eecb :=_eefb [_efbd ._eacc ][_efbd ._adafc ].ValueNumber ;if _dgec < _eecb {_dgec =_eecb ;};};if _dgec ==-_cd .MaxFloat64 {_dgec =0;};return MakeNumberResult (float64 (_dgec ));};func init (){_effa ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func _ba (_ff BinOpType ,_efc ,_ga []Result )Result {_ce :=[]Result {};for _gge :=range _efc {_cgdg :=_efc [_gge ].AsNumber ();_fg :=_ga [_gge ].AsNumber ();if _cgdg .Type !=ResultTypeNumber ||_fg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ff {case BinOpTypePlus :_ce =append (_ce ,MakeNumberResult (_cgdg .ValueNumber +_fg .ValueNumber ));case BinOpTypeMinus :_ce =append (_ce ,MakeNumberResult (_cgdg .ValueNumber -_fg .ValueNumber ));case BinOpTypeMult :_ce =append (_ce ,MakeNumberResult (_cgdg .ValueNumber *_fg .ValueNumber ));case BinOpTypeDiv :if _fg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ce =append (_ce ,MakeNumberResult (_cgdg .ValueNumber /_fg .ValueNumber ));case BinOpTypeExp :_ce =append (_ce ,MakeNumberResult (_cd .Pow (_cgdg .ValueNumber ,_fg .ValueNumber )));case BinOpTypeLT :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber < _fg .ValueNumber ));case BinOpTypeGT :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber > _fg .ValueNumber ));case BinOpTypeEQ :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber ==_fg .ValueNumber ));case BinOpTypeLEQ :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber <=_fg .ValueNumber ));case BinOpTypeGEQ :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber >=_fg .ValueNumber ));case BinOpTypeNE :_ce =append (_ce ,MakeBoolResult (_cgdg .ValueNumber !=_fg .ValueNumber ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ff ));};};return MakeListResult (_ce );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gcggd :=args [0].AsNumber ();if _gcggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eebda :=args [1].AsNumber ();if _eebda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_cd .Pow (_gcggd .ValueNumber ,_eebda .ValueNumber ));};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbga :=int (args [0].ValueNumber );return MakeBoolResult (_fbga ==_fbga /2*2);};func _bcade (_bace []Result ,_edccc rmode )Result {if len (_bace )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfffd :=_bace [0].AsNumber ();if _cfffd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_babbg :=_bace [1].AsNumber ();if _babbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffgbd :=_babbg .ValueNumber ;_dfdb :=_cfffd .ValueNumber ;_feee :=1.0;if _ffgbd > 0{_feee =_cd .Pow (1/10.0,_ffgbd );}else {_feee =_cd .Pow (10.0,-_ffgbd );};_dfdb ,_bdae :=_cd .Modf (_dfdb /_feee );switch _edccc {case _dccfg :const _gebc =0.499999999;if _bdae >=_gebc {_dfdb ++;}else if _bdae <=-_gebc {_dfdb --;};case _fedc :case _bddcb :if _bdae > 0{_dfdb ++;}else if _bdae < 0{_dfdb --;};};return MakeNumberResult (_dfdb *_feee );};const _gaaba =57375;

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _bgcd :=0;_bgcd < len (args )-1;_bgcd +=2{if args [_bgcd ].ValueNumber ==1{return args [_bgcd +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_dede ,_bcdfc :=_egcfd ("\u0046\u0049\u004e\u0044",args );if _bcdfc .Type !=ResultTypeEmpty {return _bcdfc ;};_caad :=_bb .ToLower (_dede ._fadg );if _caad ==""{return MakeNumberResult (1.0);};_feegc :=_bb .ToLower (_dede ._eggcf );_gdefa :=_dede ._geea ;_edbab :=1;for _fdcb :=range _feegc {if _edbab < _gdefa {_edbab ++;continue ;};_agda :=_ef .Index (_caad ,_feegc [_fdcb :]);if _agda ==0{return MakeNumberResult (float64 (_edbab ));};_edbab ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _bcab =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _bbbe ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_dca +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_g ,_dc Expression ;_gg BinOpType ;};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fdg :=_bb .ToLower (args [0].ValueString );if !_bacg (_fdg ){_ ,_ ,_ ,_ ,_baaf ,_cdda :=_dag (_fdg );if _cdda .Type ==ResultTypeError {_cdda .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _cdda ;};if _baaf {return MakeNumberResult (0);};};_dbfc ,_dfff ,_fegd ,_ ,_agg :=_cagc (_fdg );if _agg .Type ==ResultTypeError {return _agg ;};return MakeNumberResult (_cedc (_dbfc ,_dfff ,_fegd ));};func _bccgb (_ccaa string ,_bfff []Result )(*parsedReplaceObject ,Result ){if len (_bfff )!=4{return nil ,MakeErrorResult (_ccaa +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bfff [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_ccaa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fbedb :=_bfff [0].ValueString ;if _bfff [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccaa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_aaed :=int (_bfff [1].ValueNumber )-1;if _bfff [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccaa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgbba :=int (_bfff [2].ValueNumber );if _bfff [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_ccaa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_dfca :=_bfff [3].ValueString ;return &parsedReplaceObject {_fbedb ,_aaed ,_bgbba ,_dfca },_gde ;};const _bfdga =57373;

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_acbga ,_cdcc :=_cbdbg (args ,false );if _cdcc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_acbga /_cdcc );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efeef :=args [0].AsNumber ();if _efeef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_cd .Pi /180.0*_efeef .ValueNumber );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_cged :=&defEval {};_cged .evCache =_ccf ();return _cged };func _gbecc (_bfdd Context ,_faffa Evaluator ,_gffde ,_gddea string )Result {_ddbg ,_acdcc :=_cgf .ParseCellReference (_gffde );if _acdcc !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gffde ,_acdcc .Error ()));};_bdfgd ,_edbfd :=_ddbg .ColumnIdx ,_ddbg .RowIdx ;_gbbe ,_gfcff :=_cgf .ParseCellReference (_gddea );if _gfcff !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gddea ,_gfcff .Error ()));};_ffgc ,_aecd :=_gbbe .ColumnIdx ,_gbbe .RowIdx ;_gegc :=[][]Result {};for _ggad :=_edbfd ;_ggad <=_aecd ;_ggad ++{_afcc :=[]Result {};for _bddcd :=_bdfgd ;_bddcd <=_ffgc ;_bddcd ++{_gdbcb :=_bfdd .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_cgf .IndexToColumn (_bddcd ),_ggad ),_faffa );_afcc =append (_afcc ,_gdbcb );};_gegc =append (_gegc ,_afcc );};if len (_gegc )==1{if len (_gegc [0])==1{return _gegc [0][0];};return MakeListResult (_gegc [0]);};return MakeArrayResult (_gegc );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gcbgf SheetPrefixExpr )Update (q *_dd .UpdateQuery )Expression {return _gcbgf };

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfbca :=args [0].ValueNumber ;if _dfbca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcd :=args [1].ValueNumber ;if _dcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggf :=args [2].ValueNumber ;if _ggf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_cd .Pow (_ggf /_dcd ,1/_dfbca )-1);};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Bool is a boolean expression.
type Bool struct{_feg bool };func _ec (_ffg BinOpType ,_bec []Result ,_gea Result )Result {_gd :=[]Result {};switch _gea .Type {case ResultTypeNumber :_gaa :=_gea .ValueNumber ;for _fge :=range _bec {_dbc :=_bec [_fge ].AsNumber ();if _dbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ffg {case BinOpTypePlus :_gd =append (_gd ,MakeNumberResult (_dbc .ValueNumber +_gaa ));case BinOpTypeMinus :_gd =append (_gd ,MakeNumberResult (_dbc .ValueNumber -_gaa ));case BinOpTypeMult :_gd =append (_gd ,MakeNumberResult (_dbc .ValueNumber *_gaa ));case BinOpTypeDiv :if _gaa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gd =append (_gd ,MakeNumberResult (_dbc .ValueNumber /_gaa ));case BinOpTypeExp :_gd =append (_gd ,MakeNumberResult (_cd .Pow (_dbc .ValueNumber ,_gaa )));case BinOpTypeLT :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber < _gaa ));case BinOpTypeGT :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber > _gaa ));case BinOpTypeEQ :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber ==_gaa ));case BinOpTypeLEQ :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber <=_gaa ));case BinOpTypeGEQ :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber >=_gaa ));case BinOpTypeNE :_gd =append (_gd ,MakeBoolResult (_dbc .ValueNumber !=_gaa ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ffg ));};};case ResultTypeString :_ee :=_gea .ValueString ;for _da :=range _bec {_baf :=_bec [_da ].AsString ();if _baf .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ffg {case BinOpTypeLT :_gd =append (_gd ,MakeBoolResult (_baf .ValueString < _ee ));case BinOpTypeGT :_gd =append (_gd ,MakeBoolResult (_baf .ValueString > _ee ));case BinOpTypeEQ :_gd =append (_gd ,MakeBoolResult (_baf .ValueString ==_ee ));case BinOpTypeLEQ :_gd =append (_gd ,MakeBoolResult (_baf .ValueString <=_ee ));case BinOpTypeGEQ :_gd =append (_gd ,MakeBoolResult (_baf .ValueString >=_ee ));case BinOpTypeNE :_gd =append (_gd ,MakeBoolResult (_baf .ValueString !=_ee ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ffg ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_gd );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_aacce ,_abbga :=_cbdbg (args ,true );if _abbga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_aacce /_abbga );};type tokenType int ;func _gdgac (_gafa []Result )[]float64 {_aaac :=make ([]float64 ,0);for _ ,_ccac :=range _gafa {if _ccac .Type ==ResultTypeEmpty {continue ;};_ccac =_ccac .AsNumber ();switch _ccac .Type {case ResultTypeNumber :if !_ccac .IsBoolean {_aaac =append (_aaac ,_ccac .ValueNumber );};case ResultTypeList ,ResultTypeArray :_aaac =append (_aaac ,_gdgac (_ccac .ListValues ())...);case ResultTypeString :default:_feb .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccac .Type );};};return _aaac ;};func _efb (_cgd ,_ca [][]Result )bool {if len (_cgd )!=len (_ca ){return false ;};for _aeg :=range _cgd {if len (_cgd [_aeg ])!=len (_ca [_aeg ]){return false ;};};return true ;};func (_abegb ResultType )String ()string {if _abegb >=ResultType (len (_ageead )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_abegb );};return _ddge [_ageead [_abegb ]:_ageead [_abegb +1]];};

// Error is called in the case of parsing error and saves an error to a plex.
func (_ccea *plex )Error (s string ){_feb .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_ccea ._dfbd =s ;};const _begf =57349;

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adbb :=args [0];if _adbb .Type !=ResultTypeArray &&_adbb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_efgd :=_edbae (_adbb );_fdca :=args [2];if _fdca .Type !=ResultTypeArray &&_fdca .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aged :=_edbae (_fdca );_ffdef :=_ebed (args [1]);_agfcf :=0.0;for _abaa ,_bgbg :=range _efgd {for _cgff ,_efead :=range _bgbg {if _dgbbc (_efead ,_ffdef ){_agfcf +=_aged [_abaa ][_cgff ].ValueNumber ;};};};return MakeNumberResult (_agfcf );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_fgbe ,_gcba :=_acgf (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _gcba .Type ==ResultTypeError {return _gcba ;};_bdf :=_fgbe ._aedb ;_eegf :=_fgbe ._feed ;_bdc :=_fgbe ._gad ;_dgfa :=_fgbe ._bgdeb ;_dggg :=_fgbe ._cbcb ;_fca :=_fgbe ._abcg ;_fef :=_fgbe ._dabc ;_cdcef ,_egec :=_adafe (_eegf ,_bdc ,_fef );if _egec .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_ecdd :=_cdcef *_fca *_bdf ;if _dggg ==0{return MakeNumberResult (_ecdd );};_abe :=_bdf *_fca ;_fdbcg :=_bdf -_dgfa ;_bgfg :=int ((_fdbcg -_ecdd )/_abe );if _dggg <=_bgfg {return MakeNumberResult (_abe );}else if _dggg ==_bgfg +1{return MakeNumberResult (_fdbcg -_abe *float64 (_bgfg )-_ecdd );}else {return MakeNumberResult (0);};};func _eebdf (_egdf Result ,_bcba ,_gdbe string )(string ,Result ){switch _egdf .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _egdf .Value (),_gde ;default:return "",MakeErrorResult (_bcba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gdbe +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// String returns an empty string for EmptyExpr.
func (_bbb EmptyExpr )String ()string {return ""};var _cfdcg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func (_dbd *evCache )GetFromCache (key string )(Result ,bool ){_dbd ._bfg .Lock ();_cad ,_daf :=_dbd ._dea [key ];_dbd ._bfg .Unlock ();return _cad ,_daf ;};func _cegde (_bgff int )string {if _bgff >=0&&_bgff < len (_aagfd ){if _aagfd [_bgff ]!=""{return _aagfd [_bgff ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_bgff );};func init (){_dafb =_bf .New (_bf .NewSource (_be .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bgcf ("\u0041\u0053\u0049\u004e",_cd .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bgcf ("\u0041\u0053\u0049\u004e",_cd .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bgcf ("\u0041\u0053\u0049\u004e",_cd .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bgcf ("\u0041\u0043\u004f\u0054",func (_fccb float64 )float64 {return _cd .Pi /2-_cd .Atan (_fccb )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bgcf ("\u0041\u0043\u004fT\u0048",func (_acbb float64 )float64 {return _cd .Atanh (1/_acbb )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bgcf ("\u0041\u0053\u0049\u004e",_cd .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bgcf ("\u0041\u0053\u0049N\u0048",_cd .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bgcf ("\u0041\u0054\u0041\u004e",_cd .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bgcf ("\u0041\u0054\u0041N\u0048",_cd .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bgcf ("\u0043\u004f\u0053",_cd .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bgcf ("\u0043\u004f\u0053\u0048",_cd .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gddcg ("\u0043\u004f\u0054",_cd .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gddcg ("\u0043\u004f\u0054\u0048",_cd .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gddcg ("\u0043\u0053\u0043",_cd .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gddcg ("\u0043\u0053\u0043",_cd .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bgcf ("\u0045\u0058\u0050",_cd .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bgcf ("\u004c\u004e",_cd .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bgcf ("\u004c\u004f\u00471\u0030",_cd .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gddcg ("\u0053\u0045\u0043",_cd .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gddcg ("\u0053\u0045\u0043\u0048",_cd .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bgcf ("\u0053\u0049\u004e",_cd .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bgcf ("\u0053\u0049\u004e\u0048",_cd .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bgcf ("\u0053\u0051\u0052\u0054",_cd .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bgcf ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gbfge float64 )float64 {return _cd .Sqrt (_gbfge *_cd .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bgcf ("\u0054\u0041\u004e",_cd .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bgcf ("\u0054\u0041\u004e\u0048",_cd .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const _cdde =57347;

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgce :=args [0].ValueNumber ;if _bgce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgeb :=args [1].ValueNumber ;if _dgeb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbg :=args [2].ValueNumber ;if _efbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_cd .Log10 (_efbg )-_cd .Log10 (_dgeb ))/_cd .Log10 (1+_bgce ));};

// Eval evaluates the binary expression using the context given.
func (_aa BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_fba :=_aa ._g .Eval (ctx ,ev );if _fba .Type ==ResultTypeError {return _fba ;};_ae :=_aa ._dc .Eval (ctx ,ev );if _ae .Type ==ResultTypeError {return _ae ;};if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeArray {if !_efb (_fba .ValueArray ,_ae .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _df (_aa ._gg ,_fba .ValueArray ,_ae .ValueArray );}else if _fba .Type ==ResultTypeList {if len (_fba .ValueList )!=len (_ae .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ba (_aa ._gg ,_fba .ValueList ,_ae .ValueList );};}else if _fba .Type ==ResultTypeArray &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return _baa (_aa ._gg ,_fba .ValueArray ,_ae );}else if _fba .Type ==ResultTypeList &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return _ec (_aa ._gg ,_fba .ValueList ,_ae );};switch _aa ._gg {case BinOpTypePlus :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeNumberResult (_fba .ValueNumber +_ae .ValueNumber );};};case BinOpTypeMinus :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeNumberResult (_fba .ValueNumber -_ae .ValueNumber );};};case BinOpTypeMult :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeNumberResult (_fba .ValueNumber *_ae .ValueNumber );};};case BinOpTypeDiv :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {if _ae .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_fba .ValueNumber /_ae .ValueNumber );};};case BinOpTypeExp :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeNumberResult (_cd .Pow (_fba .ValueNumber ,_ae .ValueNumber ));};};case BinOpTypeLT :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber < _ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString < _ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber > _ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString > _ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber ==_ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString ==_ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber )||(_fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (_fbg (_ae ));}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (_fbg (_fba ));};case BinOpTypeNE :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber !=_ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString !=_ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber )||(_fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (!_fbg (_ae ));}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (!_fbg (_fba ));};case BinOpTypeLEQ :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber <=_ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString <=_ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (_fbg (_ae ));}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (_fbg (_fba ));};case BinOpTypeGEQ :if _fba .Type ==_ae .Type {if _fba .Type ==ResultTypeNumber {return MakeBoolResult (_fba .ValueNumber >=_ae .ValueNumber );};if _fba .Type ==ResultTypeString {return MakeBoolResult (_fba .ValueString >=_ae .ValueString );};if _fba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _fba .Type ==ResultTypeString &&_ae .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fba .Type ==ResultTypeNumber &&_ae .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fba .Type ==ResultTypeEmpty &&(_ae .Type ==ResultTypeNumber ||_ae .Type ==ResultTypeString ){return MakeBoolResult (_fbg (_ae ));}else if (_fba .Type ==ResultTypeNumber ||_fba .Type ==ResultTypeString )&&_ae .Type ==ResultTypeEmpty {return MakeBoolResult (_fbg (_fba ));};case BinOpTypeConcat :return MakeStringResult (_fba .Value ()+_ae .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cada :=args [0].AsNumber ();_cgbf :=args [1].AsNumber ();if _cada .Type !=ResultTypeNumber ||_cgbf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbcag :=_cd .Trunc (_cada .ValueNumber );_dbaag :=_cd .Trunc (_cgbf .ValueNumber );if _dbaag > _cbcag {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _dbaag ==_cbcag ||_dbaag ==0{return MakeNumberResult (1);};_gace :=float64 (1);for _aaeac :=float64 (1);_aaeac <=_dbaag ;_aaeac ++{_gace *=(_cbcag +1-_aaeac )/_aaeac ;};return MakeNumberResult (_gace );};

// Reference returns a string reference value to a range with prefix.
func (_ggec PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_egaa :=_ggec ._adebd .Reference (ctx ,ev );_bebc :=_ggec ._aedfe .Reference (ctx ,ev );_bccca :=_ggec ._ffefe .Reference (ctx ,ev );if _egaa .Type ==ReferenceTypeSheet &&_bebc .Type ==ReferenceTypeCell &&_bccca .Type ==ReferenceTypeCell {return MakeRangeReference (_fbdcc (_egaa ,_bebc ,_bccca ));};return ReferenceInvalid ;};func (_aeebe *Lexer )emit (_dadee tokenType ,_fadgc []byte ){if _fcecb {_a .Println ("\u0065\u006d\u0069\u0074",_dadee ,_baaeb (string (_fadgc )));};_aeebe ._fegbb <-&node {_dadee ,string (_fadgc )};};func _fcfa (_bbaa ,_abfad float64 ,_eff ,_cfgc int )float64 {_dbaa :=_ddfb (_bbaa );_abcf :=_ddfb (_abfad );if _cfgc ==1{_gdg :=_fdf (_dbaa ,_abcf ,_eff ,1);_bbfg :=_gdg .AddDate (0,12/_eff ,0);return _gdec (_gdg ,_bbfg ,_cfgc );};return float64 (_ebgc (0,_cfgc ))/float64 (_eff );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_caff :=len (args );if _caff ==0||_caff > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_bfe :=_edbae (args [0]);_deab :=[]float64 {};for _ ,_dbae :=range _bfe {for _ ,_aecc :=range _dbae {if _aecc .Type ==ResultTypeNumber &&!_aecc .IsBoolean {_deab =append (_deab ,_aecc .ValueNumber );};};};_bdaa :=len (_deab );if len (_deab )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_facd :=0.1;if _caff ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_facd =args [1].ValueNumber ;if _facd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_ccbe :=[]float64 {};for _fdgc :=0;_fdgc < _bdaa ;_fdgc ++{if _fdgc ==0{_ccbe =append (_ccbe ,0);}else {_ccbe =append (_ccbe ,_ccbe [_fdgc -1]+365);};};return _fegde (_deab ,_ccbe ,_facd );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_cfabg :=len (args );if _cfabg !=4&&_cfabg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_bddg ,_ebcf :=_ddcb (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ebcf .Type ==ResultTypeError {return _ebcf ;};_becab ,_ebcf :=_ddcb (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ebcf .Type ==ResultTypeError {return _ebcf ;};if _bddg >=_becab {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebd :=args [2].ValueNumber ;if _ebd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdg :=args [3].ValueNumber ;if _ecdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbaf :=0;if _cfabg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbaf =int (args [4].ValueNumber );if !_afdd (_fbaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_begg ,_ebcf :=_adafe (_bddg ,_becab ,_fbaf );if _ebcf .Type ==ResultTypeError {return _ebcf ;};return MakeNumberResult (_ecdg *_ebd *_begg );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_eebd :=_bb .ToLower (args [0].ValueString );if !_ecge (_eebd ){_ ,_ ,_ ,_agad ,_dccf :=_cagc (_eebd );if _dccf .Type ==ResultTypeError {_dccf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _dccf ;};if _agad {return MakeNumberResult (0);};};_gfd ,_gdcb ,_acd ,_cfb ,_ ,_abb :=_dag (_eebd );if _abb .Type ==ResultTypeError {return _abb ;};_adbe :=_dec (float64 (_gfd ),float64 (_gdcb ),_acd );if _cfb {_adbe +=0.5;}else if _adbe >=1{_adbe -=float64 (int (_adbe ));};return MakeNumberResult (_adbe );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afaa :=args [0].AsNumber ();if _afaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _afaa .ValueNumber < 0{return MakeNumberResult (-1);}else if _afaa .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_abg ,_ag :=_ea .ParseBool (v );if _ag !=nil {_feb .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_ag );};return Bool {_feg :_abg };};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cegf :=args [0];switch _cegf .Type {case ResultTypeError :return _cegf ;case ResultTypeNumber ,ResultTypeString :return _bada (args [0]);case ResultTypeList :_dcec :=_cegf .ValueList ;_fdcce :=[]Result {};for _ ,_cbgcg :=range _dcec {_dgdd :=_bada (_cbgcg );if _dgdd .Type ==ResultTypeError {return _dgdd ;};_fdcce =append (_fdcce ,_dgdd );};return MakeListResult (_fdcce );case ResultTypeArray :_bebd :=_cegf .ValueArray ;_beddd :=[][]Result {};for _ ,_gcaeg :=range _bebd {_gecf :=[]Result {};for _ ,_cdbgb :=range _gcaeg {_bcdeb :=_bada (_cdbgb );if _bcdeb .Type ==ResultTypeError {return _bcdeb ;};_gecf =append (_gecf ,_bcdeb );};_beddd =append (_beddd ,_gecf );};return MakeArrayResult (_beddd );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};type rmode byte ;

// Eval evaluates and returns the result of a formula.
func (_ccc *defEval )Eval (ctx Context ,formula string )Result {_ggc :=ParseString (formula );_cde :=make (chan Result );go func (){if _ggc ==nil {_cde <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_ccc .checkLastEvalIsRef (ctx ,_ggc );_cde <-_ggc .Eval (ctx ,_ccc );};}();select{case _ccg :=<-_cde :return _ccg ;case <-_be .After (_fcf ):_feb .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcebb :=true ;for _ ,_cdee :=range args {_cdee =_cdee .AsNumber ();switch _cdee .Type {case ResultTypeList ,ResultTypeArray :_eebg :=And (_cdee .ListValues ());if _eebg .Type ==ResultTypeError {return _eebg ;};if _eebg .ValueNumber ==0{_gcebb =false ;};case ResultTypeNumber :if _cdee .ValueNumber ==0{_gcebb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _cdee ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_gcebb );};

// LastColumn returns empty string for the invalid reference context.
func (_bfgg *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// Reference returns an invalid reference for BinaryExpr.
func (_ac BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_faeg :=args [0].AsString ();_cbgegg :=args [1].AsString ();if _faeg .Type !=ResultTypeString ||_cbgegg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_faeg .ValueString ==_cbgegg .ValueString );};const _fcfae =57355;

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_bdea :=_affdd (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _bdea .Type !=ResultTypeEmpty {return _bdea ;};_fcgd :=_cdeed (args );return MakeNumberResult (float64 (len (_fcgd )));};func _cdeed (_fdfb []Result )[]rangeIndex {_ddcba :=[]rangeIndex {};_dgaed :=len (_fdfb );for _dcgf :=0;_dcgf < _dgaed -1;_dcgf +=2{_gdee :=[]rangeIndex {};_ebggd :=_edbae (_fdfb [_dcgf ]);_ddaf :=_ebed (_fdfb [_dcgf +1]);if _dcgf ==0{for _faac ,_bcdac :=range _ebggd {for _debb ,_agaa :=range _bcdac {if _dgbbc (_agaa ,_ddaf ){_gdee =append (_gdee ,rangeIndex {_faac ,_debb });};};};}else {for _ ,_geegd :=range _ddcba {_defe :=_ebggd [_geegd ._eacc ][_geegd ._adafc ];if _dgbbc (_defe ,_ddaf ){_gdee =append (_gdee ,_geegd );};};};if len (_gdee )==0{return []rangeIndex {};};_ddcba =_gdee [:];};return _ddcba ;};const _aac ="\u0028\u0020\u0028"+_dceb +"\u007c"+_cfe +"\u007c"+_fcfd +"\u007c"+_fda +"\u0029\u0029\u003f\u0024";

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_efdc .Lock ();defer _efdc .Unlock ();if _ ,_dcdef :=_efagec [name ];_dcdef {_feb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_efagec [name ]=fn ;};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfcc :=args [0];if _egfcc .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfee :=len (_egfcc .ValueArray );for _ ,_fdgb :=range _egfcc .ValueArray {if len (_fdgb )!=_bfee {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_bdegf (_egfcc .ValueArray ));};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_acba :=_affdd (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _acba .Type !=ResultTypeEmpty {return _acba ;};_gaeb :=_cdeed (args [1:]);_dbfcd :=0.0;_gfag :=_edbae (args [0]);for _ ,_ddcbc :=range _gaeb {_dbfcd +=_gfag [_ddcbc ._eacc ][_ddcbc ._adafc ].ValueNumber ;};return MakeNumberResult (float64 (_dbfcd ));};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_beeag :=len (args );if _beeag !=5&&_beeag !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdgb ,_eegdd ,_egdb :=_eagf (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _egdb .Type ==ResultTypeError {return _egdb ;};_aabe ,_egdb :=_ddcb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _egdb .Type ==ResultTypeError {return _egdb ;};if _aabe >=_gdgb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bcaa :=args [3].ValueNumber ;if _bcaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbge :=args [4].ValueNumber ;if _gbge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dbeee :=0;if _beeag ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbeee =int (args [5].ValueNumber );if !_afdd (_dbeee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_bacb ,_egdb :=_adafe (_gdgb ,_eegdd ,_dbeee );if _egdb .Type ==ResultTypeError {return _egdb ;};_gcfg ,_egdb :=_adafe (_aabe ,_eegdd ,_dbeee );if _egdb .Type ==ResultTypeError {return _egdb ;};_gfba ,_egdb :=_adafe (_aabe ,_gdgb ,_dbeee );if _egdb .Type ==ResultTypeError {return _egdb ;};_dffe :=1+_gcfg *_bcaa ;_dbca :=1+_bacb *_gbge ;return MakeNumberResult ((_dffe /_dbca -_gfba *_bcaa )*100);};func _gagdc (_ddcac ,_egee Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_ddcac .Value ,_egee .Value );};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_cage ,_egfcf :=_ea .ParseFloat (v ,64);if _egfcf !=nil {_feb .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_egfcf );};return Number {_daff :_cage };};const _eeeea =57366;

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fcgdfd :pfx ,_begge :exp }};func _fcdd (_eda ,_daee ,_afba ,_fgce ,_cdac float64 ,_cfef int )Result {_ffgba ,_bgga :=_adafe (_eda ,_daee ,_cfef );if _bgga .Type ==ResultTypeError {return _bgga ;};_fac ,_bfdc :=_ecgc (_eda ,_daee ,int (_cdac ),_cfef );if _bfdc .Type ==ResultTypeError {return _bfdc ;};_bdbb :=0.0;_egce :=0.0;_afba *=100/_cdac ;_fgce /=_cdac ;_fgce ++;_gaad :=_ffgba *_cdac -_fac ;for _fdgg :=1.0;_fdgg < _fac ;_fdgg ++{_dgbe :=_fdgg +_gaad ;_bgdd :=_afba /_cd .Pow (_fgce ,_dgbe );_egce +=_bgdd ;_bdbb +=_dgbe *_bgdd ;};_gcdb :=(_afba +100)/_cd .Pow (_fgce ,_fac +_gaad );_egce +=_gcdb ;_bdbb +=(_fac +_gaad )*_gcdb ;_bdbb /=_egce ;_bdbb /=_cdac ;return MakeNumberResult (_bdbb );};const _fecdg =57353;

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_fbc ,_ddfd ,_ccae :=_babd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _ccae .Type ==ResultTypeError {return _ccae ;};if _ddfd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fbc ==0{return MakeNumberResult (0);};_cgdbg :=_fbc < 0;if _cgdbg {_fbc =-_fbc ;};_ebbg :=float64 (int (_fbc ));_ecab :=args [0].Value ();_bbag :=_bb .Split (_ecab ,"\u002e");_ebgcg :=0.0;if len (_bbag )> 1{var _bbad error ;_cdffa :=_bbag [1];_ebgcg ,_bbad =_ea .ParseFloat (_cdffa ,64);if _bbad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_ffec :=float64 (len (_cdffa ));_ebgcg /=_cd .Pow (10,_ffec );};_bgge :=_ebgcg *_ddfd /_cd .Pow (10,float64 (int (_cd .Log10 (_ddfd )))+1)+_ebbg ;if _cgdbg {_bgge =-_bgge ;};return MakeNumberResult (_bgge );};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;var _ageead =[...]uint8 {0,17,33,49,63,78,93,108};func _gaba (_edee int )bool {return _edee ==0||_edee ==4};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbef :=args [0].AsNumber ();if _bbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_cd .Pi *_bbef .ValueNumber );};

// FunctionCall is a function call expression.
type FunctionCall struct{_eecad string ;_acbca []Expression ;};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edag :=args [0].Ref ;for _edag .Type ==ReferenceTypeNamedRange {_edag =ctx .NamedRange (_edag .Value );};_aeda :="";switch _edag .Type {case ReferenceTypeCell :_aeda =_edag .Value ;case ReferenceTypeRange :_fgcec :=_bb .Split (_edag .Value ,"\u003a");if len (_fgcec )==2{_aeda =_fgcec [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_edag .Type ));};_afea ,_efac :=_cgf .ParseCellReference (_aeda );if _efac !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_efac .Error ()));};_eafa ,_dgaa ,_dggf :=_afea .Column ,_afea .RowIdx ,_afea .SheetName ;_gaac :=args [1].AsNumber ();if _gaac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_daab :=args [2].AsNumber ();if _daab .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _beec ,_defd Result ;if len (args )==3{_beec =MakeNumberResult (1);_defd =MakeNumberResult (1);}else {_beec =args [3].AsNumber ();if _beec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _beec .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_defd =args [4].AsNumber ();if _defd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _defd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_gfdg :=_cgf .ColumnToIndex (_eafa );_gedd :=_dgaa +uint32 (_gaac .ValueNumber );_ccgb :=_gfdg +uint32 (_daab .ValueNumber );_bdgd :=_gedd +uint32 (_beec .ValueNumber );_bbfga :=_ccgb +uint32 (_defd .ValueNumber );if _beec .ValueNumber > 0{_bdgd --;}else {_bdgd ++;_gedd ,_bdgd =_bdgd ,_gedd ;};if _defd .ValueNumber > 0{_bbfga --;}else {_bbfga ++;_ccgb ,_bbfga =_bbfga ,_ccgb ;};_bagae :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_cgf .IndexToColumn (_ccgb ),_gedd );_cbbe :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_cgf .IndexToColumn (_bbfga ),_bdgd );if _dggf ==""{return _gbecc (ctx ,ev ,_bagae ,_cbbe );}else {return _gbecc (ctx .Sheet (_dggf ),ev ,_bagae ,_cbbe );};};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bcac ,_efgb ,_cecc :=_babd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cecc .Type ==ResultTypeError {return _cecc ;};if _efgb < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bcac ==0{return MakeNumberResult (0);};_degba :=_bcac < 0;if _degba {_bcac =-_bcac ;};_accf :=args [0].Value ();_ebbf :=_bb .Split (_accf ,"\u002e");_feeb :=float64 (int (_bcac ));_geggc :=_ebbf [1];_dcf :=len (_geggc );_efca :=int (_cd .Log10 (_efgb ))+1;_egba :=float64 (_efca -_dcf );_bfc ,_bcee :=_ea .ParseFloat (_geggc ,64);if _bcee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_bfc *=_cd .Pow (10,_egba );_cbad :=_feeb +_bfc /_efgb ;if _degba {_cbad =-_cbad ;};return MakeNumberResult (_cbad );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _c .Reader )Expression {_ccffc :=&plex {_ccbd :LexReader (r )};_faef (_ccffc );if _ccffc ._dfbd !=""{return nil ;};return _ccffc ._abfg ;};const _fbec =86400000000000;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebe :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ade :=args [2].ValueNumber ;if _ade <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfb :=args [3].ValueNumber ;if _ebfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ebfb > _ade {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_egfc :=(_abdc -_cebe )*(_ade -_ebfb +1)*2;_gaab :=_ade *(_ade +1);return MakeNumberResult (_egfc /_gaab );};

// CellRef is a reference to a single cell
type CellRef struct{_dg string };func _dec (_eca ,_gab ,_bef float64 )float64 {return (_eca *3600+_gab *60+_bef )/86400};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_efbb (args ,_fffa ))};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ebg :=int (args [0].ValueNumber );if _ebg < 0||_ebg >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _ebg <=1899{_ebg +=1900;};_gcg :=_be .Month (args [1].ValueNumber );_cdg :=int (args [2].ValueNumber );_fag :=_agf (_ebg ,_gcg ,_cdg );_ceec :=_aff (_afa ,_fag )+1;if _ceec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_ceec );};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };const _fggfa =57367;type countMode byte ;var _efagec =map[string ]FunctionComplex {};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgbaa :=args [0].AsNumber ();if _dgbaa .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dgbaa .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_afgd (_dgbaa .ValueNumber ));};

// Update returns the same object as updating sheet references does not affect Number.
func (_fddgd Number )Update (q *_dd .UpdateQuery )Expression {return _fddgd };

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_fccc :=len (args );if _fccc < 2||_fccc > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgea :=args [0];if _cgea .Type !=ResultTypeArray &&_cgea .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdf :=args [1].AsNumber ();if _abdf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddfc :=int (_abdf .ValueNumber )-1;_bced :=-1;if _fccc ==3&&args [2].Type !=ResultTypeEmpty {_dfgd :=args [2].AsNumber ();if _dfgd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bced =int (_dfgd .ValueNumber )-1;};if _ddfc ==-1&&_bced ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _dbdf []Result ;if _cgea .Type ==ResultTypeArray {_bcdg :=_cgea .ValueArray ;if _ddfc < -1||_ddfc >=len (_bcdg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ddfc ==-1{if _bced >=len (_bcdg [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_adac :=[][]Result {};for _ ,_acdc :=range _bcdg {_dggce :=_acdc [_bced ];if _dggce .Type ==ResultTypeEmpty {_dggce =MakeNumberResult (0);};_adac =append (_adac ,[]Result {_dggce });};return MakeArrayResult (_adac );};_dbdf =_bcdg [_ddfc ];}else {_ecfbb :=_cgea .ValueList ;if _ddfc < -1||_ddfc >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ddfc ==-1{if _bced >=len (_ecfbb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_ecag :=_ecfbb [_bced ];if _ecag .Type ==ResultTypeEmpty {_ecag =MakeNumberResult (0);};return _ecag ;};_dbdf =_ecfbb ;};if _bced < -1||_bced > len (_dbdf ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bced ==-1{_deag :=[]Result {};for _ ,_bcfd :=range _dbdf {if _bcfd .Type ==ResultTypeEmpty {_deag =append (_deag ,MakeNumberResult (0));}else {_deag =append (_deag ,_bcfd );};};return MakeArrayResult ([][]Result {_deag });};_adbdc :=_dbdf [_bced ];if _adbdc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _adbdc ;};func _gbgg (_abcce []Result ,_fafca []string ,_ccga bool )[]string {for _ ,_fbcae :=range _abcce {switch _fbcae .Type {case ResultTypeEmpty :if !_ccga {_fafca =append (_fafca ,"");};case ResultTypeString :if _fbcae .ValueString !=""||!_ccga {_fafca =append (_fafca ,_fbcae .ValueString );};case ResultTypeNumber :_fafca =append (_fafca ,_fbcae .Value ());case ResultTypeList :_fafca =_gfegb (_fafca ,_gbgg (_fbcae .ValueList ,[]string {},_ccga ));case ResultTypeArray :for _ ,_gbaa :=range _fbcae .ValueArray {_fafca =_gfegb (_fafca ,_gbgg (_gbaa ,[]string {},_ccga ));};};};return _fafca ;};

// String returns a string representation for Negate.
func (_bbgg Negate )String ()string {return "\u002d"+_bbgg ._gbagd .String ()};func _afbac (_cgefb []string ,_cbbf int )string {return _ea .Itoa (len (_cgefb [len (_cgefb )-1-_cbbf ]))};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_gbagg PrefixRangeExpr )Update (q *_dd .UpdateQuery )Expression {_gcage :=_gbagg ;_fbbgg :=_gbagg ._adebd .String ();if _fbbgg ==q .SheetToUpdate {_cecdf :=*q ;_cecdf .UpdateCurrentSheet =true ;_gcage ._aedfe =_gbagg ._aedfe .Update (&_cecdf );_gcage ._ffefe =_gbagg ._ffefe .Update (&_cecdf );};return _gcage ;};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_bggf :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bggf =int (args [1].ValueNumber );if _bggf < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _bggf ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bgbf :=args [0].Value ();_deggd :=len (_bgbf );if _bggf > _deggd {return MakeStringResult (_bgbf );};return MakeStringResult (_bgbf [_deggd -_bggf :_deggd ]);};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efee :=args [0].AsNumber ();if _efee .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeca :=float64 (1);if _efee .ValueNumber < 0{_eeca =-1;};if len (args )> 1{_cabc :=args [1].AsNumber ();if _cabc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eeca =_cabc .ValueNumber ;};_gcgg :=float64 (1);if len (args )> 2{_fdcc :=args [2].AsNumber ();if _fdcc .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcgg =_fdcc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Floor (_efee .ValueNumber ));};_cgca :=_efee .ValueNumber ;_cgca ,_cgdcca :=_cd .Modf (_cgca /_eeca );if _cgdcca !=0&&_efee .ValueNumber < 0&&_gcgg > 0{_cgca ++;};return MakeNumberResult (_cgca *_eeca );};func init (){_fbeddd ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};var _eafb =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _fead (_ebaf Result ,_bagg *criteriaParsed )bool {_bageb :=_bb .ToLower (_ebaf .ValueString );_ccfc :=_bagg ._cdaf ._bagcf ;_bcde :=_bagg ._cdaf ._dfgdc ;if _ccfc ==_abccg {return _bageb ==_bcde ||_ef .Match (_bcde ,_bageb );};if _ebaf .Type !=ResultTypeEmpty {if _bageb ==_bagg ._ddcg ||_ef .Match (_bagg ._ddcg ,_bageb ){return true ;};if _ ,_cggb :=_ea .ParseFloat (_bcde ,64);_cggb ==nil {return false ;};switch _ccfc {case _ecgfe :return _bageb <=_bcde ;case _edcf :return _bageb >=_bcde ;case _agac :return _bageb < _bcde ;case _cgga :return _bageb > _bcde ;};};return false ;};var _fdcf =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// String returns a string representation of Number.
func (_badb Number )String ()string {return _ea .FormatFloat (_badb ._daff ,'f',-1,64)};

// Value returns a string version of the result.
func (_dced Result )Value ()string {switch _dced .Type {case ResultTypeNumber :_fbagc :=_ea .FormatFloat (_dced .ValueNumber ,'f',-1,64);if len (_fbagc )> 12{_eabeg :=12;for _bgaca :=_eabeg ;_bgaca > 0&&_fbagc [_bgaca ]=='0';_bgaca --{_eabeg --;};_fbagc =_fbagc [0:_eabeg +1];};return _fbagc ;case ResultTypeError :return _dced .ValueString ;case ResultTypeString :return _dced .ValueString ;case ResultTypeList :if len (_dced .ValueList )==0{return "";};return _dced .ValueList [0].Value ();case ResultTypeArray :if len (_dced .ValueArray )==0||len (_dced .ValueArray [0])==0{return "";};return _dced .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _cdbd (_deba string ,_bbdg _be .Time )(_be .Time ,error ){_afff ,_ ,_bdece :=_fb .ParseFloat (_deba ,10,128,_fb .ToNearestEven );if _bdece !=nil {return _be .Time {},_bdece ;};_egddb :=new (_fb .Float );_egddb .SetUint64 (uint64 (24*_be .Hour ));_afff .Mul (_afff ,_egddb );_fdbab ,_ :=_afff .Uint64 ();_fffg :=_bbdg .Add (_be .Duration (_fdbab ));return _dcbg (_fffg ),nil ;};func _dgbbc (_abefd Result ,_daafc *criteriaParsed )bool {if _abefd .IsBoolean {return false ;};_ggbfa :=_abefd .Type ;if _daafc ._acbc {return _ggbfa ==ResultTypeNumber &&_abefd .ValueNumber ==_daafc ._abga ;}else if _ggbfa ==ResultTypeNumber {return _beed (_abefd .ValueNumber ,_daafc ._cdaf );};return _fead (_abefd ,_daafc );};type rangeIndex struct{_eacc int ;_adafc int ;};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_addea :=args [0].AsString ();if _addea .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_addea .ValueString )));};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _edabd (args ,true )};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _egdaa (args ,true )};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_bccb :=len (args );if _bccb !=5&&_bccb !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efd ,_cabb ,_eded :=_eagf (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eded .Type ==ResultTypeError {return _eded ;};_ggea ,_eded :=_ddcb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eded .Type ==ResultTypeError {return _eded ;};if _ggea >=_efd {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_abbf :=args [3].ValueNumber ;if _abbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebfc :=args [4].ValueNumber ;if _ebfc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_ecff :=0;if _bccb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecff =int (args [5].ValueNumber );if !_afdd (_ecff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_debfg ,_eded :=_adafe (_ggea ,_cabb ,_ecff );if _eded .Type ==ResultTypeError {return _eded ;};_afcdc ,_eded :=_adafe (_ggea ,_efd ,_ecff );if _eded .Type ==ResultTypeError {return _eded ;};_ccbec ,_eded :=_adafe (_efd ,_cabb ,_ecff );if _eded .Type ==ResultTypeError {return _eded ;};_dgade :=1+_debfg *_abbf ;_dgade /=_ebfc /100+_afcdc *_abbf ;_dgade --;_dgade /=_ccbec ;return MakeNumberResult (_dgade );};func (_fdge HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_fdge ._gbac ,_fdge ._gbged );};var _ecfce =map[string ]Function {};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_daeec :=[]float64 {};for _ ,_facg :=range args {switch _facg .Type {case ResultTypeString :_efdg :=_facg .AsNumber ();if _efdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_daeec =append (_daeec ,_efdg .ValueNumber );case ResultTypeList :_dfce :=LCM (_facg .ValueList );if _dfce .Type !=ResultTypeNumber {return _dfce ;};_daeec =append (_daeec ,_dfce .ValueNumber );case ResultTypeNumber :_daeec =append (_daeec ,_facg .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _facg ;};};if len (_daeec )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _daeec [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_daeec )==1{return MakeNumberResult (_daeec [0]);};_cbcfg :=_daeec [0];for _fdadc :=1;_fdadc < len (_daeec );_fdadc ++{if _daeec [_fdadc ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbcfg =_fecc (_cbcfg ,_daeec [_fdadc ]);};return MakeNumberResult (_cbcfg );};

// Reference returns a string reference value to a horizontal range with prefix.
func (_becd PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_dbeg :=_becd ._fafd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_becd .horizontalRangeReference (_dbeg .Value )};};var _ede =map[string ]*_fbf .Regexp {};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbbae :=args [0].AsString ();if _dbbae .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eedec :=_d .Buffer {};for _ ,_egcff :=range _dbbae .ValueString {if _f .IsPrint (_egcff ){_eedec .WriteRune (_egcff );};};return MakeStringResult (_eedec .String ());};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_dafb .Float64 ());};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cacba :=args [0].Ref ;if _cacba .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_ebfbc ,_gfdf :=_cgf .ParseCellReference (_cacba .Value );if _gfdf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cacba .Value );};return MakeNumberResult (float64 (_ebfbc .RowIdx ));};func _fgbba (_fadfb ,_bacf float64 )float64 {_fadfb =_cd .Trunc (_fadfb );_bacf =_cd .Trunc (_bacf );if _fadfb ==0{return _bacf ;};if _bacf ==0{return _fadfb ;};for _fadfb !=_bacf {if _fadfb > _bacf {_fadfb =_fadfb -_bacf ;}else {_bacf =_bacf -_fadfb ;};};return _fadfb ;};func (_bafdd *yyParserImpl )Lookahead ()int {return _bafdd ._adee };const (_dccfg rmode =iota ;_fedc ;_bddcb ;);func _adafe (_bcbcb ,_fbbe float64 ,_ggdb int )(float64 ,Result ){_gef ,_ffc :=_ddfb (_bcbcb ),_ddfb (_fbbe );_gca :=_gef .Unix ();_ecfb :=_ffc .Unix ();if _gca ==_ecfb {return 0,_gde ;};_bgd ,_bga ,_cec :=_gef .Date ();_fed ,_eeba ,_cbd :=_ffc .Date ();_fddb ,_abba :=int (_bga ),int (_eeba );var _aace ,_edbf float64 ;switch _ggdb {case 0:if _cec ==31{_cec --;};if _cec ==30&&_cbd ==31{_cbd --;}else if _cfaf :=_ffdb (_bgd );_fddb ==2&&((_cfaf &&_cec ==29)||(!_cfaf &&_cec ==28)){_cec =30;if _afb :=_ffdb (_fed );_abba ==2&&((_afb &&_cbd ==29)||(!_afb &&_cbd ==28)){_cbd =30;};};_aace =float64 ((_fed -_bgd )*360+(_abba -_fddb )*30+(_cbd -_cec ));_edbf =360;case 1:_aace =_fbbe -_bcbcb ;_gegf :=_bgd !=_fed ;if _gegf &&(_fed !=_bgd +1||_fddb < _abba ||(_fddb ==_abba &&_cec < _cbd )){_dbdgc :=0;for _fab :=_bgd ;_fab <=_fed ;_fab ++{_dbdgc +=_ebgc (_fab ,1);};_edbf =float64 (_dbdgc )/float64 (_fed -_bgd +1);}else {if !_gegf &&_ffdb (_bgd ){_edbf =366;}else {if _gegf &&((_ffdb (_bgd )&&(_fddb < 2||(_fddb ==2&&_cec <=29)))||(_ffdb (_fed )&&(_abba > 2||(_abba ==2&&_cbd ==29)))){_edbf =366;}else {_edbf =365;};};};case 2:_aace =_fbbe -_bcbcb ;_edbf =360;case 3:_aace =_fbbe -_bcbcb ;_edbf =365;case 4:if _cec ==31{_cec --;};if _cbd ==31{_cbd --;};_aace =float64 ((_fed -_bgd )*360+(_abba -_fddb )*30+(_cbd -_cec ));_edbf =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _aace /_edbf ,_gde ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acbgg :=args [0];if _acbgg .Type ==ResultTypeNumber {return _acbgg ;};if _acbgg .Type ==ResultTypeString {_ebbfgb ,_gbef :=_ea .ParseFloat (_acbgg .Value (),64);if _gbef ==nil {return MakeNumberResult (_ebbfgb );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _cfgd (_bcecg []Result ,_fadaf bool )Result {_adea :="\u004d\u0049\u004e";if _fadaf {_adea ="\u004d\u0049\u004e\u0041";};if len (_bcecg )==0{return MakeErrorResult (_adea +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegaff :=_cd .MaxFloat64 ;for _ ,_ddabf :=range _bcecg {switch _ddabf .Type {case ResultTypeNumber :if (_fadaf ||!_ddabf .IsBoolean )&&_ddabf .ValueNumber < _gegaff {_gegaff =_ddabf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_gbbb :=_cfgd (_ddabf .ListValues (),_fadaf );if _gbbb .ValueNumber < _gegaff {_gegaff =_gbbb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_cccf :=0.0;if _fadaf {_cccf =_ddabf .AsNumber ().ValueNumber ;};if _cccf < _gegaff {_gegaff =_cccf ;};default:_feb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_adea +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddabf .Type );};};if _gegaff ==_cd .MaxFloat64 {_gegaff =0;};return MakeNumberResult (_gegaff );};const _decg =57361;

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_aacd ,_eccgc string };func _fegde (_bfdb ,_fbfe []float64 ,_dbga float64 )Result {_dfg :=false ;_bdgf :=false ;for _ggbb :=0;_ggbb < len (_bfdb );_ggbb ++{if _bfdb [_ggbb ]> 0{_dfg =true ;};if _bfdb [_ggbb ]< 0{_bdgf =true ;};};if !_dfg ||!_bdgf {return MakeErrorResultType (ErrorTypeNum ,"");};_ffbc :=_dbga ;_aagee :=1e-10;_fdgag :=0;_gaae :=50;_aege :=false ;for {_gbca :=_fbbfc (_bfdb ,_fbfe ,_ffbc );_fcfb :=_ffbc -_gbca /_dcee (_bfdb ,_fbfe ,_ffbc );_gafc :=_cd .Abs (_fcfb -_ffbc );_ffbc =_fcfb ;_fdgag ++;if _gafc <=_aagee ||_cd .Abs (_gbca )<=_aagee {break ;};if _fdgag > _gaae {_aege =true ;break ;};};if _aege ||_cd .IsNaN (_ffbc )||_cd .IsInf (_ffbc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_ffbc );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _bcade (args ,_bddcb )};

// Update updates references in the BinaryExpr after removing a row/column.
func (_acb BinaryExpr )Update (q *_dd .UpdateQuery )Expression {_dbe :=_acb ;_dbe ._g =_acb ._g .Update (q );_dbe ._dc =_acb ._dc .Update (q );return _dbe ;};func _gdcbdf (_cdfg []Result )(bool ,Result ){for _ ,_caefd :=range _cdfg {if _caefd .Type ==ResultTypeError {return true ,_caefd ;};};return false ,MakeEmptyResult ();};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_fega ,_fbac :=_gbb (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _fbac .Type ==ResultTypeError {return _fbac ;};_abag :=_fega ._gefc ;_egddd :=_fega ._bagf ;_fbcc :=_fega ._bdgba ;_dfbec :=_fega ._gff ;_gec :=_fega ._cbdb ;_dddf :=_fega ._caed ;return _fcdd (_abag ,_egddd ,_fbcc ,_dfbec ,_gec ,_dddf );};func _gbc (_dffc float64 )bool {return _dffc ==1||_dffc ==2||_dffc ==4};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfcd ,_adca ,_fedd :=_eagf (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _fedd .Type ==ResultTypeError {return _fedd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gabff :=_adca -_bfcd ;if _gabff > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_ddff :=args [2].ValueNumber ;if _ddff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_ddff )/(360-_ddff *_gabff ));};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Reference returns an invalid reference for Error.
func (_fgb Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gfcd (_edbd ,_gda ,_ffcc ,_cadd ,_bcdf float64 )float64 {var _gbcd float64 ;_gfddg :=_bcdf /_ffcc ;if _gfddg >=1{_gfddg =1;if _cadd ==1{_gbcd =_edbd ;}else {_gbcd =0;};}else {_gbcd =_edbd *_cd .Pow (1-_gfddg ,_cadd -1);};_fafe :=_edbd *_cd .Pow (1-_gfddg ,_cadd );var _ecbea float64 ;if _fafe < _gda {_ecbea =_gbcd -_gda ;}else {_ecbea =_gbcd -_fafe ;};if _ecbea < 0{_ecbea =0;};return _ecbea ;};func _cagc (_adg string )(int ,int ,int ,bool ,Result ){_baafb :="";_gegg :=[]string {};for _cbce ,_egb :=range _ede {_gegg =_egb .FindStringSubmatch (_adg );if len (_gegg )> 1{_baafb =_cbce ;break ;};};if _baafb ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_bed :=false ;var _ecd ,_fgag ,_aae int ;var _gfe error ;switch _baafb {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_fgag ,_gfe =_ea .Atoi (_gegg [1]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_aae ,_gfe =_ea .Atoi (_gegg [3]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_ecd ,_gfe =_ea .Atoi (_gegg [5]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};if _ecd < 0||_ecd > 9999||(_ecd > 99&&_ecd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_ecd =_gdc (_ecd );_bed =_gegg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_fgag =_eafb [_gegg [1]];_aae ,_gfe =_ea .Atoi (_gegg [14]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_ecd ,_gfe =_ea .Atoi (_gegg [16]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};if _ecd < 0||_ecd > 9999||(_ecd > 99&&_ecd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_ecd =_gdc (_ecd );_bed =_gegg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gbec ,_bbc :=_ea .Atoi (_gegg [1]);if _bbc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_ace ,_bbc :=_ea .Atoi (_gegg [3]);if _bbc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_feaf ,_bbc :=_ea .Atoi (_gegg [5]);if _bbc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};if _gbec >=1900&&_gbec < 10000{_ecd =_gbec ;_fgag =_ace ;_aae =_feaf ;}else if _gbec > 0&&_gbec < 13{_fgag =_gbec ;_aae =_ace ;_ecd =_feaf ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_bed =_gegg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_ecd ,_gfe =_ea .Atoi (_gegg [16]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_fgag =_eafb [_gegg [3]];_aae ,_gfe =_ea .Atoi (_gegg [1]);if _gfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};_bed =_gegg [19]=="";};if !_fbb (_ecd ,_fgag ,_aae ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_aacc );};return _ecd ,_fgag ,_aae ,_bed ,_gde ;};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ffef :=args [0].AsNumber ();if _ffef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbdf :=_cd .Signbit (_ffef .ValueNumber );_bebb ,_bgfe :=_cd .Modf (_ffef .ValueNumber /2);_ebbe :=_bebb *2;if _bgfe !=0{if !_cdbdf {_ebbe +=2;}else {_ebbe -=2;};};return MakeNumberResult (_ebbe );};func (_aadde Result )AsString ()Result {switch _aadde .Type {case ResultTypeNumber :return MakeStringResult (_aadde .Value ());default:return _aadde ;};};

// Update returns the same object as updating sheet references does not affect Error.
func (_geac Error )Update (q *_dd .UpdateQuery )Expression {return _geac };

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bfaa :=args [0].AsNumber ();if _bfaa .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbff ,_fegc :=_cd .Modf (_bfaa .ValueNumber );if _fegc < 0{_dbff --;};return MakeNumberResult (_dbff );};func _edeeg (_fefd [][]Result ,_bdbc int )[][]Result {_dgcbf :=[][]Result {};for _cgfbe :=range _fefd {if _cgfbe ==0{continue ;};_bggc :=[]Result {};for _abdag :=range _fefd {if _abdag ==_bdbc {continue ;};_bggc =append (_bggc ,_fefd [_cgfbe ][_abdag ]);};_dgcbf =append (_dgcbf ,_bggc );};return _dgcbf ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cedg :=args [0];switch _cedg .Type {case ResultTypeError :return _cedg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_cedg .ValueNumber !=0);};if _cedg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _defgc (args );case ResultTypeArray :return _dcgeb (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};var (_fcgda =0;_agada =false ;);

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_efe :=args [0].ValueNumber ;_cff :=args [1].ValueNumber ;if _cff < _efe {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _cff ==_efe {return MakeNumberResult (0);};_bbf :=_bb .ToLower (args [2].ValueString );if _bbf =="\u0064"{return MakeNumberResult (_cff -_efe );};_cda :=_ddfb (_efe );_gfc :=_ddfb (_cff );_ddc ,_cfab ,_bba :=_cda .Date ();_fdc ,_dbcc ,_egd :=_gfc .Date ();_dad :=int (_cfab );_adb :=int (_dbcc );var _cagg float64 ;switch _bbf {case "\u0079":_cagg =float64 (_fdc -_ddc );if _adb < _dad ||(_adb ==_dad &&_egd < _bba ){_cagg --;};case "\u006d":_beca :=_fdc -_ddc ;_agde :=_adb -_dad ;if _egd < _bba {_agde --;};if _agde < 0{_beca --;_agde +=12;};_cagg =float64 (_beca *12+_agde );case "\u006d\u0064":_edbc :=_adb ;if _egd < _bba {_edbc --;};_cagg =float64 (int (_cff -_cedc (_fdc ,_edbc ,_bba )));case "\u0079\u006d":_cagg =float64 (_adb -_dad );if _egd < _bba {_cagg --;};if _cagg < 0{_cagg +=12;};case "\u0079\u0064":_aeb :=_fdc ;if _adb < _dad ||(_adb ==_dad &&_egd < _bba ){_aeb --;};_cagg =float64 (int (_cff -_cedc (_aeb ,_dad ,_bba )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_cagg );};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ecdde :=args [0];if _ecdde .Type !=ResultTypeNumber &&_ecdde .Type !=ResultTypeString &&_ecdde .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_gcedgf :=args [1].ValueString ;switch _ecdde .Type {case ResultTypeNumber :return MakeStringResult (_bee .Number (_ecdde .ValueNumber ,_gcedgf ));case ResultTypeString :return MakeStringResult (_bee .String (_ecdde .ValueString ,_gcedgf ));case ResultTypeEmpty :return MakeStringResult (_bee .Number (0,_gcedgf ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _gcdf (_dafda ,_gcef ,_fcga ,_bgdeba ,_badfb ,_babce float64 )float64 {var _cbcbd ,_dfgb float64 ;_ebfd :=0.0;_adec :=_cd .Ceil (_badfb );_bcgc :=_dafda -_gcef ;_gfbe :=false ;_bebe :=0.0;for _aafgg :=1.0;_aafgg <=_adec ;_aafgg ++{if !_gfbe {_cbcbd =_gfcd (_dafda ,_gcef ,_fcga ,_aafgg ,_babce );_bebe =_bcgc /(_fcga -_aafgg +1);if _bebe > _cbcbd {_dfgb =_bebe ;_gfbe =true ;}else {_dfgb =_cbcbd ;_bcgc -=_cbcbd ;};}else {_dfgb =_bebe ;};if _aafgg ==_adec {_dfgb *=_badfb +1-_adec ;};_ebfd +=_dfgb ;};return _ebfd ;};const (_afed cmpResult =0;_egdg cmpResult =-1;_eafbb cmpResult =1;_cbbec cmpResult =2;);func (_cedf *ivr )SetOffset (col ,row uint32 ){};

// IsDBCS returns false for the invalid reference context.
func (_afefc *ivr )IsDBCS ()bool {return false };

// Eval evaluates and returns the result of a constant array expression.
func (_gdd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_def :=[][]Result {};for _ ,_dcc :=range _gdd ._fbe {_bc :=[]Result {};for _ ,_cge :=range _dcc {_bc =append (_bc ,_cge .Eval (ctx ,ev ));};_def =append (_def ,_bc );};return MakeArrayResult (_def );};

// String returns a string representation of FunctionCall expression.
func (_abcag FunctionCall )String ()string {_dcac :=_d .Buffer {};_dcac .WriteString (_abcag ._eecad );_dcac .WriteString ("\u0028");_afbacf :=len (_abcag ._acbca )-1;for _gdcbd ,_bdbca :=range _abcag ._acbca {_dcac .WriteString (_bdbca .String ());if _gdcbd !=_afbacf {_dcac .WriteString ("\u002c");};};_dcac .WriteString ("\u0029");return _dcac .String ();};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_gfbad :=len (args );if _gfbad !=3&&_gfbad !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgcfc ,_dcfa :=_eebdf (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _dcfa .Type ==ResultTypeError {return _dcfa ;};_eaab ,_dcfa :=_eebdf (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _dcfa .Type ==ResultTypeError {return _dcfa ;};_caee ,_dcfa :=_eebdf (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _dcfa .Type ==ResultTypeError {return _dcfa ;};_fddbd :=0;if _gfbad ==3{return MakeStringResult (_bb .Replace (_bgcfc ,_eaab ,_caee ,-1));}else {_fbgae ,_fgdf :=_eggee (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _fgdf .Type ==ResultTypeError {return _fgdf ;};_fddbd =int (_fbgae );if _fddbd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_ffee :=_bgcfc ;_cfcd :=_fddbd ;_efaf :=-1;_gded :=len (_eaab );_ddgc :=0;for {_cfcd --;_cegea :=_bb .Index (_ffee ,_eaab );if _cegea ==-1{_efaf =-1;break ;}else {_efaf =_cegea +_ddgc ;if _cfcd ==0{break ;};_abfcd :=_gded +_cegea ;_ddgc +=_abfcd ;_ffee =_ffee [_abfcd :];};};if _efaf ==-1{return MakeStringResult (_bgcfc );}else {_bege :=_bgcfc [:_efaf ];_cgbae :=_bgcfc [_efaf +_gded :];return MakeStringResult (_bege +_caee +_cgbae );};};};

// Eval evaluates the binary expression using the context given.
func (_gc BinaryExpr )String ()string {_geg :="";switch _gc ._gg {case BinOpTypePlus :_geg ="\u002b";case BinOpTypeMinus :_geg ="\u002d";case BinOpTypeMult :_geg ="\u002a";case BinOpTypeDiv :_geg ="\u002f";case BinOpTypeExp :_geg ="\u005e";case BinOpTypeLT :_geg ="\u003c";case BinOpTypeGT :_geg ="\u003e";case BinOpTypeEQ :_geg ="\u003d";case BinOpTypeLEQ :_geg ="\u003c\u003d";case BinOpTypeGEQ :_geg ="\u003e\u003d";case BinOpTypeNE :_geg ="\u003c\u003e";case BinOpTypeConcat :_geg ="\u0026";};return _gc ._g .String ()+_geg +_gc ._dc .String ();};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_aede PrefixVerticalRange )Update (q *_dd .UpdateQuery )Expression {if q .UpdateType ==_dd .UpdateActionRemoveColumn {_caab :=_aede ;_febg :=_aede ._cgee .String ();if _febg ==q .SheetToUpdate {_ggac :=q .ColumnIdx ;_caab ._cffg =_eeg (_aede ._cffg ,_ggac );_caab ._dfagd =_eeg (_aede ._dfagd ,_ggac );};return _caab ;};return _aede ;};var _bdff =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _bgaa (_ecbb ,_aefa int )string {const TOKSTART =4;if !_agada {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fegf :=range _acbab {if _fegf ._ccaab ==_ecbb &&_fegf ._ecaba ==_aefa {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fegf ._bdafc ;};};_cgadb :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_cfea (_aefa );_bbga :=make ([]int ,0,4);_gfegg :=_dage [_ecbb ];for _cabf :=TOKSTART ;_cabf -1< len (_gecb );_cabf ++{if _bedbd :=_gfegg +_cabf ;_bedbd >=0&&_bedbd < _fefca &&_ecgbf [_bcab [_bedbd ]]==_cabf {if len (_bbga )==cap (_bbga ){return _cgadb ;};_bbga =append (_bbga ,_cabf );};};if _aagd [_ecbb ]==-2{_ddfdg :=0;for _agbbe [_ddfdg ]!=-1||_agbbe [_ddfdg +1]!=_ecbb {_ddfdg +=2;};for _ddfdg +=2;_agbbe [_ddfdg ]>=0;_ddfdg +=2{_egbb :=_agbbe [_ddfdg ];if _egbb < TOKSTART ||_agbbe [_ddfdg +1]==0{continue ;};if len (_bbga )==cap (_bbga ){return _cgadb ;};_bbga =append (_bbga ,_egbb );};if _agbbe [_ddfdg +1]!=0{return _cgadb ;};};for _gfbd ,_efbac :=range _bbga {if _gfbd ==0{_cgadb +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_cgadb +="\u0020\u006f\u0072\u0020";};_cgadb +=_cfea (_efbac );};return _cgadb ;};func _aedfb (_bdged string )*criteriaRegex {_aafd :=&criteriaRegex {};if _bdged ==""{return _aafd ;};if _gefa :=_dcaec .FindStringSubmatch (_bdged );len (_gefa )> 1{_aafd ._bagcf =_abccg ;_aafd ._dfgdc =_gefa [1];}else if _bfdg :=_ecfc .FindStringSubmatch (_bdged );len (_bfdg )> 1{_aafd ._bagcf =_abccg ;_aafd ._dfgdc =_bfdg [1];}else if _bgbac :=_fgbg .FindStringSubmatch (_bdged );len (_bgbac )> 1{_aafd ._bagcf =_ecgfe ;_aafd ._dfgdc =_bgbac [1];}else if _dbacf :=_eggca .FindStringSubmatch (_bdged );len (_dbacf )> 1{_aafd ._bagcf =_edcf ;_aafd ._dfgdc =_dbacf [1];}else if _agca :=_gafe .FindStringSubmatch (_bdged );len (_agca )> 1{_aafd ._bagcf =_agac ;_aafd ._dfgdc =_agca [1];}else if _agbcg :=_gcbd .FindStringSubmatch (_bdged );len (_agbcg )> 1{_aafd ._bagcf =_cgga ;_aafd ._dfgdc =_agbcg [1];};return _aafd ;};

// Match implements the MATCH function.
func Match (args []Result )Result {_cddc :=len (args );if _cddc !=2&&_cddc !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcea :=1;if _cddc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_dbcg :=args [2].ValueNumber ;if _dbcg ==-1||_dbcg ==0{_fcea =int (_dbcg );};};_ccdbc :=args [1];var _gaee []Result ;switch _ccdbc .Type {case ResultTypeList :_gaee =_ccdbc .ValueList ;case ResultTypeArray :_ecaf :=_ccdbc .ValueArray ;for _ ,_gbabe :=range _ecaf {if len (_gbabe )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gaee =append (_gaee ,_gbabe [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bdcce :=_ebed (args [0]);switch _fcea {case 0:for _egda ,_acgg :=range _gaee {if _bagfg (_acgg ,_bdcce ){return MakeNumberResult (float64 (_egda +1));};};case -1:for _aabc :=0;_aabc < len (_gaee );_aabc ++{if _bagfg (_gaee [_aabc ],_bdcce ){return MakeNumberResult (float64 (_aabc +1));};if _bdcce ._acbc &&(_gaee [_aabc ].ValueNumber < _bdcce ._abga ){if _aabc ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_aabc ));};};case 1:for _gdfcb :=0;_gdfcb < len (_gaee );_gdfcb ++{if _bagfg (_gaee [_gdfcb ],_bdcce ){return MakeNumberResult (float64 (_gdfcb +1));};if _bdcce ._acbc &&(_gaee [_gdfcb ].ValueNumber > _bdcce ._abga ){if _gdfcb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gdfcb ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gfcdg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gfcdg =int (args [1].ValueNumber );if _gfcdg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _gfcdg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_baac :=args [0].Value ();if _gfcdg > len (_baac ){return MakeStringResult (_baac );};return MakeStringResult (_baac [0:_gfcdg ]);};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agc ,_fabcb ,_baga :=_eagf (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _baga .Type ==ResultTypeError {return _baga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfbb :=_fabcb -_agc ;if _dfbb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_gbed :=args [2].ValueNumber ;if _gbed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbcg :=(100-_gbed )/_gbed ;_fcc :=360/_dfbb ;return MakeNumberResult (_fbcg *_fcc );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eac :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbcaa :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfca :=args [2].ValueNumber ;if _bfca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edgec :=args [3].ValueNumber ;return MakeNumberResult (_edgec *_eac *(_gbcaa /_bfca -1));};const _dca ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// GetEpoch returns a null time object for the invalid reference context.
func (_dfdda *ivr )GetEpoch ()_be .Time {return _be .Time {}};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdfbf :=args [0].AsString ();if _gdfbf .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_gdfbf .ValueString ,ev );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_ccggc *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Reference returns an invalid reference for EmptyExpr.
func (_ced EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_ebbc :v }};const _gcbb =57344;

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccebd :=args [0].AsString ();if _ccebd .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcc :=_d .Buffer {};_bggg :=false ;_ffcb :=false ;_ddca :=0;for _ ,_dbgf :=range _ccebd .ValueString {_afbeg :=_dbgf ==' ';if _afbeg {if !_bggg {continue ;};if !_ffcb {_ddca ++;_gcc .WriteRune (_dbgf );};}else {_ddca =0;_bggg =true ;_gcc .WriteRune (_dbgf );};_ffcb =_afbeg ;};_gcc .Truncate (_gcc .Len ()-_ddca );return MakeStringResult (_gcc .String ());};const _fcdfd int =30;var _efafd =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_eegca Result )AsNumber ()Result {if _eegca .Type ==ResultTypeString {_aacbg ,_agbd :=_ea .ParseFloat (_eegca .ValueString ,64);if _agbd ==nil {return MakeNumberResult (_aacbg );};};if _eegca .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _eegca ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bdge :=args [0].AsNumber ();_dgbd :=args [1].AsNumber ();if _bdge .Type ==ResultTypeNumber &&_dgbd .Type ==ResultTypeNumber {_ecca :=_cd .Atan2 (_dgbd .ValueNumber ,_bdge .ValueNumber );if _ecca !=_ecca {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ecca );};for _ ,_eefe :=range []ResultType {_bdge .Type ,_dgbd .Type }{switch _eefe {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _bdge ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eefe ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};func _ceaa (_gfcf _be .Time )bool {return _be .Now ().Sub (_gfcf )>=_dfgcf };

// Reference returns an invalid reference for String.
func (_ggfd String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_ceda ,_abdg ,_gacgg :=_gbeda (args );if _gacgg .Type ==ResultTypeError {return _gacgg ;};return MakeNumberResult (_afgd (_ceda )/_abdg );};

// Update updates the horizontal range references after removing a row/column.
func (_afbff HorizontalRange )Update (q *_dd .UpdateQuery )Expression {return _afbff };func _ebed (_ccgeg Result )*criteriaParsed {_agcg :=_ccgeg .Type ==ResultTypeNumber ;_eddae :=_ccgeg .ValueNumber ;_efaee :=_bb .ToLower (_ccgeg .ValueString );_caba :=_aedfb (_efaee );return &criteriaParsed {_agcg ,_eddae ,_efaee ,_caba };};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_aaga :=MakeNumberResult (0);for _ ,_fgceb :=range args {_fgceb =_fgceb .AsNumber ();switch _fgceb .Type {case ResultTypeNumber :_aaga .ValueNumber +=_fgceb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gadf :=Sum (_fgceb .ListValues ());if _gadf .Type !=ResultTypeNumber {return _gadf ;};_aaga .ValueNumber +=_gadf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fgceb ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgceb .Type ));};};return _aaga ;};func _ddfb (_bbe float64 )_be .Time {_bfag :=int64 ((_bbe -_cgeg )*_fbec );return _be .Unix (0,_bfag ).UTC ();};var _agbbe =[...]int {-1,1,1,-1,-2,0};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_fbfd Result )ListValues ()[]Result {if _fbfd .Type ==ResultTypeArray {_ebgb :=[]Result {};for _ ,_baadc :=range _fbfd .ValueArray {for _ ,_gfcbd :=range _baadc {_ebgb =append (_ebgb ,_gfcbd );};};return _ebgb ;};if _fbfd .Type ==ResultTypeList {return _fbfd .ValueList ;};return nil ;};func (_gebf *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcgbd :=args [0].Ref ;if _dcgbd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_dcgbd .Value ));};func _fcgad (_edcc Result )[]Result {_fdgfb :=_edcc .ValueList ;if _edcc .Type ==ResultTypeArray {_fdgfb =nil ;for _ ,_dcge :=range _edcc .ValueArray {if len (_dcge )> 0{_fdgfb =append (_fdgfb ,_dcge [0]);}else {_fdgfb =append (_fdgfb ,_gde );};};};return _fdgfb ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafbg :=args [0].AsNumber ();if _dafbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dafbg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_eabc :=float64 (1);_fedf :=_cd .Trunc (_dafbg .ValueNumber );for _agcba :=_fedf ;_agcba > 1;_agcba -=2{_eabc *=_agcba ;};return MakeNumberResult (_eabc );};var _fggdg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_eafaa NamedRangeRef )Update (q *_dd .UpdateQuery )Expression {return _eafaa };const _cecb =57354;

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _bcade (args ,_fedc )};const _gdab =57374;

// String returns a string representation of a named range.
func (_ecfff NamedRangeRef )String ()string {return _ecfff ._bcdba };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_fegg :=args [1].ValueNumber ;_fbd :=args [0];var _ecda float64 ;switch _fbd .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_ecda =_fbd .ValueNumber ;case ResultTypeString :_bcc :=DateValue ([]Result {args [0]});if _bcc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ecda =_bcc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bgb :=_ddfb (_ecda );_bgf :=_bgb .AddDate (0,int (_fegg ),0);_fbed ,_acc ,_bddc :=_bgf .Date ();_bceg :=_cedc (_fbed ,int (_acc ),_bddc );if _bceg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_bceg );};const _cbab =57377;

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_ebgce ,_fedb :=_bccgb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fedb .Type !=ResultTypeEmpty {return _fedb ;};_adceg :=_ebgce ._dadd ;_acacg :=_ebgce ._efba ;_eddcc :=_ebgce ._ceecc ;_dbge :=_ebgce ._bgag ;_fede :=len (_adceg );if _acacg > _fede {_acacg =_fede ;};_ccbgb :=_acacg +_eddcc ;if _ccbgb > _fede {_ccbgb =_fede ;};_fdbb :=_adceg [0:_acacg ]+_dbge +_adceg [_ccbgb :];return MakeStringResult (_fdbb );};func _ffcec (_dbace Reference ,_bafc Context )bool {return _bafc .Sheet (_dbace .Value )==InvalidReferenceContext ;};func _eagf (_aba ,_bda Result ,_cfafb string )(float64 ,float64 ,Result ){_cacg ,_gac :=_ddcb (_aba ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cfafb );if _gac .Type ==ResultTypeError {return 0,0,_gac ;};_bgg ,_gac :=_ddcb (_bda ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cfafb );if _gac .Type ==ResultTypeError {return 0,0,_gac ;};if _cacg >=_bgg {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cfafb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _cacg ,_bgg ,_gde ;};func _fecc (_ebgg ,_gbbc float64 )float64 {_ebgg =_cd .Trunc (_ebgg );_gbbc =_cd .Trunc (_gbbc );if _ebgg ==0&&_gbbc ==0{return 0;};return _ebgg *_gbbc /_fgbba (_ebgg ,_gbbc );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bageg :=args [0].AsNumber ();if _bageg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abcfg :=int (_bageg .ValueNumber );if _abcfg < 0||_abcfg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_abcfg ));};func _egdaa (_cgbbe []Result ,_abbb bool )Result {_dfddd :="\u004d\u0041\u0058";if _abbb {_dfddd ="\u004d\u0041\u0058\u0041";};if len (_cgbbe )==0{return MakeErrorResult (_dfddd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geag :=-_cd .MaxFloat64 ;for _ ,_ffdgg :=range _cgbbe {switch _ffdgg .Type {case ResultTypeNumber :if (_abbb ||!_ffdgg .IsBoolean )&&_ffdgg .ValueNumber > _geag {_geag =_ffdgg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_feeg :=_egdaa (_ffdgg .ListValues (),_abbb );if _feeg .ValueNumber > _geag {_geag =_feeg .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_abff :=0.0;if _abbb {_abff =_ffdgg .AsNumber ().ValueNumber ;};if _abff > _geag {_geag =_abff ;};default:_feb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_dfddd +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffdgg .Type );};};if _geag ==-_cd .MaxFloat64 {_geag =0;};return MakeNumberResult (_geag );};var _aagd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _abde (_edab ,_abeg ,_dfc ,_gddf ,_gfgc float64 ,_gffd int )float64 {_ebdd :=_cga (_edab ,_dfc ,_gddf ,_gfgc ,_gffd );var _ffggb float64 ;if _abeg ==1{if _gffd ==1{_ffggb =0;}else {_ffggb =-_gddf ;};}else {if _gffd ==1{_ffggb =_bedg (_edab ,_abeg -2,_ebdd ,_gddf ,1)-_ebdd ;}else {_ffggb =_bedg (_edab ,_abeg -1,_ebdd ,_gddf ,0);};};return _ffggb *_edab ;};const _cbcd =57356;var _dage =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_fbe [][]Expression };type cmpResult int8 ;const _gageb =57362;var _bcbb []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};const (_ byte =iota ;_abccg ;_ecgfe ;_edcf ;_agac ;_cgga ;);

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cagd :=0;_cefg :=false ;for _ ,_efefb :=range args {switch _efefb .Type {case ResultTypeList ,ResultTypeArray :_bcaf :=Xor (_efefb .ListValues ());if _bcaf .Type ==ResultTypeError {return _bcaf ;};if _bcaf .ValueNumber !=0{_cagd ++;};_cefg =true ;case ResultTypeNumber :if _efefb .ValueNumber !=0{_cagd ++;};_cefg =true ;case ResultTypeString :case ResultTypeError :return _efefb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_cefg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_cagd %2!=0);};func (_gfeed *Lexer )nextRaw ()*node {for len (_gfeed ._abae )!=0{_agef :=<-_gfeed ._abae [len (_gfeed ._abae )-1];if _agef !=nil {return _agef ;};_gfeed ._abae =_gfeed ._abae [0:len (_gfeed ._abae )-1];};return <-_gfeed ._fegbb ;};func (_cdba ReferenceType )String ()string {if _cdba >=ReferenceType (len (_aeebg )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cdba );};return _faddf [_aeebg [_cdba ]:_aeebg [_cdba +1]];};

// Eval evaluates and returns a number.
func (_adaff Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_adaff ._daff )};

// Eval evaluates and returns the result of a Negate expression.
func (_deefg Negate )Eval (ctx Context ,ev Evaluator )Result {_eegdg :=_deefg ._gbagd .Eval (ctx ,ev );if _eegdg .Type ==ResultTypeNumber {return MakeNumberResult (-_eegdg .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// String returns a string representation of PrefixExpr.
func (_adff PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_adff ._fcgdfd .String (),_adff ._begge .String ());};const _ebdc =1;var _baaeac []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _ccf ()evCache {_dccg :=evCache {};_dccg ._dea =make (map[string ]Result );_dccg ._bfg =&_fe .Mutex {};return _dccg ;};func _edabd (_cggg []Result ,_ecfg bool )Result {var _fagfe string ;if _ecfg {_fagfe ="\u004c\u0041\u0052G\u0045";}else {_fagfe ="\u0053\u004d\u0041L\u004c";};if len (_cggg )!=2{return MakeErrorResult (_fagfe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfffb :=_cggg [0];var _gdfgg [][]Result ;switch _dfffb .Type {case ResultTypeArray :_gdfgg =_dfffb .ValueArray ;case ResultTypeList :_gdfgg =[][]Result {_dfffb .ValueList };default:return MakeErrorResult (_fagfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_gdfgg )==0{return MakeErrorResult (_fagfe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _cggg [1].Type !=ResultTypeNumber {return MakeErrorResult (_fagfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_edfb :=_cggg [1].ValueNumber ;if _edfb < 1{return MakeErrorResultType (ErrorTypeNum ,_fagfe +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_eaae :=int (_edfb );if float64 (_eaae )!=_edfb {return MakeErrorResultType (ErrorTypeNum ,_fagfe +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_agdca :=[]float64 {};for _ ,_edgga :=range _gdfgg {for _ ,_bbcdc :=range _edgga {if _bbcdc .Type ==ResultTypeNumber {_agdca =append (_agdca ,_bbcdc .ValueNumber );};};};if _eaae > len (_agdca ){return MakeErrorResultType (ErrorTypeNum ,_fagfe +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfcc :=_cg .MergeSort (_agdca );if _ecfg {return MakeNumberResult (_bfcc [len (_bfcc )-_eaae ]);}else {return MakeNumberResult (_bfcc [_eaae -1]);};};var InvalidReferenceContext =&ivr {};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_fbe :data }};const _dceb ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// String returns a string representation of a horizontal range.
func (_fabfd HorizontalRange )String ()string {return _fabfd .horizontalRangeReference ()};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_afcgc :=len (args );if _afcgc !=4&&_afcgc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fbde ,_geff ,_bfac :=_eagf (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bfac .Type ==ResultTypeError {return _bfac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccd :=args [2].ValueNumber ;if _cccd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbca :=args [3].ValueNumber ;if _fbca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adgc :=0;if _afcgc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adgc =int (args [4].ValueNumber );if !_afdd (_adgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gbcb ,_bfac :=_adafe (_fbde ,_geff ,_adgc );if _bfac .Type ==ResultTypeError {return _bfac ;};return MakeNumberResult (_cccd /(1-_fbca *_gbcb ));};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aeega :=args [0].AsNumber ();if _aeega .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fagd :=args [1].AsNumber ();if _fagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbdg :=int (_fagd .ValueNumber );if _fbdg < 0||_fbdg > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_ecaee :=0;if len (args )> 2{_cadb :=args [2].AsNumber ();if _cadb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ecaee =int (_cadb .ValueNumber );};_ccafa :=_ea .FormatInt (int64 (_aeega .ValueNumber ),_fbdg );if len (_ccafa )< _ecaee {_ccafa =_bb .Repeat ("\u0030",_ecaee -len (_ccafa ))+_ccafa ;};return MakeStringResult (_ccafa );};

// Eval evaluates and returns the result of the cell reference.
func (_bg CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_bg ._dg ,ev )};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_egbae ,_bcfc :=_egcfd ("\u0046\u0049\u004e\u0044",args );if _bcfc .Type !=ResultTypeEmpty {return _bcfc ;};_agbf :=_bb .ToLower (_egbae ._fadg );_fecf :=_bb .ToLower (_egbae ._eggcf );if _agbf ==""{return MakeNumberResult (1.0);};_cdffg :=_egbae ._geea -1;_fgfe :=1;_gdcg :=0;for _adadg :=range _fecf {if _adadg !=0{_eaceg :=1;if _adadg -_gdcg > 1{_eaceg =2;};_fgfe +=_eaceg ;};if _fgfe > _cdffg {_gacdbg :=_ef .Index (_agbf ,_fecf [_adadg :]);if _gacdbg ==0{return MakeNumberResult (float64 (_fgfe ));};};_gdcg =_adadg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dge :=args [0];switch _dge .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_bbbb :=_ddfb (_dge .ValueNumber );return MakeNumberResult (float64 (_bbbb .Month ()));case ResultTypeString :_bbg :=_bb .ToLower (_dge .ValueString );if !_bacg (_bbg ){_ ,_ ,_ ,_ ,_bcbc ,_eeb :=_dag (_bbg );if _eeb .Type ==ResultTypeError {_eeb .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _eeb ;};if _bcbc {return MakeNumberResult (1);};};_ ,_cbb ,_ ,_ ,_adda :=_cagc (_bbg );if _adda .Type ==ResultTypeError {return _adda ;};return MakeNumberResult (float64 (_cbb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};type criteriaParsed struct{_acbc bool ;_abga float64 ;_ddcg string ;_cdaf *criteriaRegex ;};const _eeeb int =30;func _gbeda (_gfdbee []Result )(float64 ,float64 ,Result ){_becc :=0.0;_cddg :=1.0;for _ ,_eccae :=range _gfdbee {switch _eccae .Type {case ResultTypeNumber :_becc +=_eccae .ValueNumber ;_cddg *=_afgd (_eccae .ValueNumber );case ResultTypeList ,ResultTypeArray :_aebf ,_aagbb ,_adad :=_gbeda (_eccae .ListValues ());_becc +=_aebf ;_cddg *=_afgd (_aagbb );if _adad .Type ==ResultTypeError {return 0,0,_adad ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_eccae ;};};return _becc ,_cddg ,_gde ;};var _dbdcb =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};const _geaa =57371;func _ecgc (_gage ,_bafe float64 ,_cdab ,_bdgbb int )(float64 ,Result ){_cedd ,_fgac :=_ddfb (_gage ),_ddfb (_bafe );if _fgac .After (_cedd ){_fbbfe :=_fdf (_cedd ,_fgac ,_cdab ,_bdgbb );_egbe :=(_fgac .Year ()-_fbbfe .Year ())*12+int (_fgac .Month ())-int (_fbbfe .Month ());return float64 (_egbe *_cdab )/12.0,_gde ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_eedc :=len (args );if _eedc < 5||_eedc > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdce :=args [0].ValueNumber ;if _fdce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdga :=args [1].ValueNumber ;if _gdga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abed :=args [2].ValueNumber ;if _abed ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _abed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedca :=args [3].ValueNumber ;if _cedca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcbf :=args [4].ValueNumber ;if _cedca > _gcbf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _gcbf > _abed {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_dfgc :=2.0;if _eedc > 5{if args [5].Type ==ResultTypeEmpty {_dfgc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfgc =args [5].ValueNumber ;if _dfgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_badc :=false ;if _eedc > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_badc =args [6].ValueNumber !=0;};_fbee :=0.0;_fcaga :=_cd .Floor (_cedca );_fafb :=_cd .Ceil (_gcbf );if _badc {for _gbcg :=_fcaga +1;_gbcg <=_fafb ;_gbcg ++{_eccf :=_gfcd (_fdce ,_gdga ,_abed ,_gbcg ,_dfgc );if _gbcg ==_fcaga +1{_eccf *=_cd .Min (_gcbf ,_fcaga +1)-_cedca ;}else if _gbcg ==_fafb {_eccf *=_gcbf +1-_fafb ;};_fbee +=_eccf ;};}else {_ccgc :=_abed ;var _cgcbb float64 ;if !_dafa (_cedca ,_cd .Floor (_cedca )){if _dfgc ==1{_acf :=_abed /2;if _cedca > _acf ||_dafa (_cedca ,_acf ){_cgcbb =_cedca -_acf ;_cedca =_acf ;_gcbf -=_cgcbb ;_ccgc ++;};};};if _dfgc !=0{_fdce -=_gcdf (_fdce ,_gdga ,_abed ,_ccgc ,_cedca ,_dfgc );};_fbee =_gcdf (_fdce ,_gdga ,_abed ,_abed -_cedca ,_gcbf -_cedca ,_dfgc );};return MakeNumberResult (_fbee );};type ivr struct{};func _bacg (_eega string )bool {for _ ,_cea :=range _afc {_gddc :=_cea .FindStringSubmatch (_eega );if len (_gddc )> 1{return true ;};};return false ;};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_edad :=len (args );if _edad !=4&&_edad !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgg :=args [0].ValueNumber ;if _bdgg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bccg :=args [1].ValueNumber ;if _bccg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdda :=args [2].ValueNumber ;if _gdda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbdf :=args [3].ValueNumber ;if _cbdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _cbdf -_gdda > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_ebda :=12.0;if _edad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebda =args [4].ValueNumber ;if _ebda < 1||_ebda > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _ebda ==12&&_cbdf > _gdda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _bccg >=_bdgg {return MakeNumberResult (0);};_agb :=1-_cd .Pow (_bccg /_bdgg ,1/_gdda );_agb =float64 (int (_agb *1000+0.5))/1000;_ddbd :=_bdgg *_agb *_ebda /12;if _cbdf ==1{return MakeNumberResult (_ddbd );};_ggcc :=_ddbd ;_afbb :=0.0;_dggc :=_gdda ;if _dggc > _cbdf {_dggc =_cbdf ;};for _caec :=2.0;_caec <=_dggc ;_caec ++{_afbb =(_bdgg -_ggcc )*_agb ;_ggcc +=_afbb ;};if _cbdf > _gdda {return MakeNumberResult ((_bdgg -_ggcc )*_agb *(12-_ebda )/12);};return MakeNumberResult (_afbb );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_adba ,_cgdb :=_bgaf (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cgdb .Type ==ResultTypeError {return _cgdb ;};return MakeNumberResult (_bgc (_adba ._eeee ,_adba ._aef ,_adba ._egcf ,_adba ._becb ));};type noCache struct{};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_afcga NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_dgea :=ctx .NamedRange (_afcga ._bcdba );_bffa :=_dgea .Value ;if _eccc ,_afbacfd :=ev .GetFromCache (_bffa );_afbacfd {return _eccc ;};_cdgb :=_bb .Split (_bffa ,"\u0021");if len (_cdgb )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_bffa ));};_gccf :=ctx .Sheet (_cdgb [0]);_gdbgc :=_bb .Split (_cdgb [1],"\u003a");switch len (_gdbgc ){case 1:_ebdcf :=ev .Eval (_gccf ,_gdbgc [0]);ev .SetCache (_bffa ,_ebdcf );return _ebdcf ;case 2:_fbega :=_gbecc (_gccf ,ev ,_gdbgc [0],_gdbgc [1]);ev .SetCache (_bffa ,_fbega );return _fbega ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_dgea .Type ));};const _fbeed =57370;type ri struct{_cdged float64 ;_cdgg string ;};func _bgc (_bbcd ,_fcfg float64 ,_cef ,_ecc int )float64 {_dfad :=_ddfb (_bbcd );_cgg :=_ddfb (_fcfg );_fbbf :=_ffce (_dfad ,_cgg ,_cef );return _gdec (_dfad ,_fbbf ,_ecc );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_fdb ConstArrayExpr )Update (q *_dd .UpdateQuery )Expression {return _fdb };func _defgc (_eea []Result )Result {_eaca :=_eea [0].ValueList ;_abdfc :=len (_eaca );switch len (_eea ){case 1:_ead :=[]Result {};for _ ,_gebd :=range _eaca {_ead =append (_ead ,MakeBoolResult (_gebd .ValueNumber !=0));};return MakeListResult (_ead );case 2:_eece :=_eea [1];switch _eece .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_cbgc :=[]Result {};for _ ,_fbff :=range _eaca {var _fbfg Result ;if _fbff .ValueNumber ==0{_fbfg =MakeBoolResult (false );}else {_fbfg =_eece ;};_cbgc =append (_cbgc ,_fbfg );};return MakeListResult (_cbgc );case ResultTypeList :_ddgb :=_edbcf (_eece ,_abdfc );_fcb :=[]Result {};for _fdcea ,_afab :=range _eaca {var _fddbc Result ;if _afab .ValueNumber ==0{_fddbc =MakeBoolResult (false );}else {_fddbc =_ddgb [_fdcea ];};_fcb =append (_fcb ,_fddbc );};return MakeListResult (_fcb );case ResultTypeArray :_fbgf :=_deabg (_eece ,len (_eece .ValueArray ),_abdfc );_bbfgf :=[][]Result {};for _ ,_fcaa :=range _fbgf {_cgab :=[]Result {};for _bcada ,_bfgaf :=range _eaca {var _cbfc Result ;if _bfgaf .ValueNumber ==0{_cbfc =MakeBoolResult (false );}else {_cbfc =_fcaa [_bcada ];};_cgab =append (_cgab ,_cbfc );};_bbfgf =append (_bbfgf ,_cgab );};return MakeArrayResult (_bbfgf );};case 3:_agfc :=_eea [1];_dcbf :=_eea [2];_ccbc :=_fdbeg (_agfc );_cabe :=_fdbeg (_dcbf );if _ccbc &&_cabe {_fgbfa :=[]Result {};for _ ,_bafg :=range _eaca {var _gcga Result ;if _bafg .ValueNumber ==0{_gcga =_dcbf ;}else {_gcga =_agfc ;};_fgbfa =append (_fgbfa ,_gcga );};return MakeListResult (_fgbfa );};if _agfc .Type !=ResultTypeArray &&_dcbf .Type !=ResultTypeArray {_afbe :=_edbcf (_agfc ,_abdfc );_efage :=_edbcf (_dcbf ,_abdfc );_caecg :=[]Result {};for _aacb ,_dace :=range _eaca {var _agdb Result ;if _dace .ValueNumber ==0{_agdb =_efage [_aacb ];}else {_agdb =_afbe [_aacb ];};_caecg =append (_caecg ,_agdb );};return MakeListResult (_caecg );};_dgbea ,_efbc :=len (_agfc .ValueArray ),len (_dcbf .ValueArray );_dfee ,_fdad :=_dgbea ,_efbc ;if _efbc > _dfee {_dfee ,_fdad =_fdad ,_dfee ;};_eeag :=_deabg (_agfc ,_dfee ,_abdfc );_aeed :=_deabg (_dcbf ,_dfee ,_abdfc );_fcfab :=[][]Result {};for _ddab :=0;_ddab < _dfee ;_ddab ++{_eada :=[]Result {};for _bfdcf ,_aeeg :=range _eaca {var _bbba Result ;if _aeeg .ValueNumber ==0{if _ddab < _efbc {_bbba =_aeed [_ddab ][_bfdcf ];}else {_bbba =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _ddab < _dgbea {_bbba =_eeag [_ddab ][_bfdcf ];}else {_bbba =MakeErrorResultType (ErrorTypeNA ,"");};};_eada =append (_eada ,_bbba );};_fcfab =append (_fcfab ,_eada );};return MakeArrayResult (_fcfab );};return MakeErrorResult ("");};func _eggee (_feegg Result ,_ecbade ,_egdee string )(float64 ,Result ){switch _feegg .Type {case ResultTypeEmpty :return 0,_gde ;case ResultTypeNumber :return _feegg .ValueNumber ,_gde ;case ResultTypeString :_bbab ,_defa :=_ea .ParseFloat (_feegg .ValueString ,64);if _defa !=nil {return 0,MakeErrorResult (_egdee +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_ecbade );};return _bbab ,_gde ;default:return 0,MakeErrorResult (_ecbade +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egdee +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_eefgb PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_cccfe :=_eefgb ._adebd .Reference (ctx ,ev );_fgbab :=_eefgb ._aedfe .Reference (ctx ,ev );_dbacfc :=_eefgb ._ffefe .Reference (ctx ,ev );switch _cccfe .Type {case ReferenceTypeSheet :if _ffcec (_cccfe ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cccfe .Value ));};_bcbgc :=_fbdcc (_cccfe ,_fgbab ,_dbacfc );if _fgbab .Type ==ReferenceTypeCell &&_dbacfc .Type ==ReferenceTypeCell {if _cgac ,_fagb :=ev .GetFromCache (_bcbgc );_fagb {return _cgac ;}else {_agdcaf :=_gbecc (ctx .Sheet (_cccfe .Value ),ev ,_fgbab .Value ,_dbacfc .Value );ev .SetCache (_bcbgc ,_agdcaf );return _agdcaf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bcbgc );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cccfe .Type ));};};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_afcg :=len (args );if _afcg !=4&&_afcg !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gged ,_bfage ,_fdgf :=_eagf (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _fdgf .Type ==ResultTypeError {return _fdgf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbea :=args [2].ValueNumber ;if _fbea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ddbf :=args [3].ValueNumber ;if _ddbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_gddg :=0;if _afcg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gddg =int (args [4].ValueNumber );if !_afdd (_gddg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_eabe ,_fdgf :=_adafe (_gged ,_bfage ,_gddg );if _fdgf .Type ==ResultTypeError {return _fdgf ;};return MakeNumberResult ((_ddbf -_fbea )/_fbea /_eabe );};

// String returns an empty string for Error.
func (_fdd Error )String ()string {return ""};func _efbb (_afbg []Result ,_bbcc countMode )float64 {_ebgff :=0.0;for _ ,_gacbd :=range _afbg {switch _gacbd .Type {case ResultTypeNumber :if _bbcc ==_cfbdc ||(_bbcc ==_fffa &&!_gacbd .IsBoolean ){_ebgff ++;};case ResultTypeList ,ResultTypeArray :_ebgff +=_efbb (_gacbd .ListValues (),_bbcc );case ResultTypeString :if _bbcc ==_cfbdc {_ebgff ++;};case ResultTypeEmpty :if _bbcc ==_bedd {_ebgff ++;};};};return _ebgff ;};

// Eval evaluates and returns a string.
func (_efbce String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_efbce ._faee )};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_abgfe ,_fggd :=_gbb (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _fggd .Type ==ResultTypeError {return _fggd ;};_gcbgc :=_abgfe ._gefc ;_fadc :=_abgfe ._bagf ;_agfg :=_abgfe ._bdgba ;_cfbe :=_abgfe ._gff ;_ebdb :=_abgfe ._cbdb ;_cgcb :=_abgfe ._caed ;_eccb :=_fcdd (_gcbgc ,_fadc ,_agfg ,_cfbe ,_ebdb ,_cgcb );if _eccb .Type ==ResultTypeError {return _eccb ;};_cgdf :=_eccb .ValueNumber /(1.0+_cfbe /_ebdb );return MakeNumberResult (_cgdf );};func _baaea (_gedf ,_gbaef Result ,_eedb ,_dbbd bool )cmpResult {_gedf =_gedf .AsNumber ();_gbaef =_gbaef .AsNumber ();if _gedf .Type !=_gbaef .Type {return _cbbec ;};if _gedf .Type ==ResultTypeNumber {if _gedf .ValueNumber ==_gbaef .ValueNumber {return _afed ;};if _gedf .ValueNumber < _gbaef .ValueNumber {return _egdg ;};return _eafbb ;};if _gedf .Type ==ResultTypeString {_aaad :=_gedf .ValueString ;_fcac :=_gbaef .ValueString ;if !_eedb {_aaad =_bb .ToLower (_aaad );_fcac =_bb .ToLower (_fcac );};if _dbbd {_eafc :=_ef .Match (_fcac ,_aaad );if _eafc {return _afed ;}else {return _eafbb ;};};return cmpResult (_bb .Compare (_aaad ,_fcac ));};if _gedf .Type ==ResultTypeEmpty {return _afed ;};if _gedf .Type ==ResultTypeList {if len (_gedf .ValueList )< len (_gbaef .ValueList ){return _egdg ;};if len (_gedf .ValueList )> len (_gbaef .ValueList ){return _eafbb ;};for _dgdbf :=range _gedf .ValueList {_bfga :=_baaea (_gedf .ValueList [_dgdbf ],_gbaef .ValueList [_dgdbf ],_eedb ,_dbbd );if _bfga !=_afed {return _bfga ;};};return _afed ;};if _gedf .Type ==ResultTypeList {if len (_gedf .ValueArray )< len (_gbaef .ValueArray ){return _egdg ;};if len (_gedf .ValueArray )> len (_gbaef .ValueArray ){return _eafbb ;};for _aadd :=range _gedf .ValueArray {_cfaa :=_gedf .ValueArray [_aadd ];_gcebd :=_gedf .ValueArray [_aadd ];if len (_cfaa )< len (_gcebd ){return _egdg ;};if len (_cfaa )> len (_gcebd ){return _eafbb ;};for _eabeb :=range _cfaa {_fadf :=_baaea (_cfaa [_eabeb ],_gcebd [_eabeb ],_eedb ,_dbbd );if _fadf !=_afed {return _fadf ;};};};return _afed ;};return _cbbec ;};const (_fffa countMode =iota ;_cfbdc ;_bedd ;);

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bedbb :=args [0].AsNumber ();_ecgdb :=args [1].AsNumber ();if _bedbb .Type !=ResultTypeNumber ||_ecgdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _ecgdb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_gfbg ,_bcbge :=_cd .Modf (_bedbb .ValueNumber /_ecgdb .ValueNumber );if _bcbge < 0{_gfbg --;};return MakeNumberResult (_bedbb .ValueNumber -_ecgdb .ValueNumber *_gfbg );};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bffg :=args [0].AsNumber ();if _bffg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _abge float64 ;_gddadb :=args [1].AsNumber ();if _gddadb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abge =_gddadb .ValueNumber ;if _abge < 0&&_bffg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_abagd :=_bffg .ValueNumber ;_abagd ,_bcbg :=_cd .Modf (_abagd /_abge );if _bcbg !=0{if _bffg .ValueNumber < 0&&_bcbg < 0{_abagd --;};};return MakeNumberResult (_abagd *_abge );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_dbf Bool )Update (q *_dd .UpdateQuery )Expression {return _dbf };

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fafd Expression ;_eefc ,_ceega int ;};func (_begc node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_begc ._cfca ,_baaeb (string (_begc ._fbdfc )));};type criteriaRegex struct{_bagcf byte ;_dfgdc string ;};func _dafa (_aced ,_fdcec float64 )bool {return _cd .Abs (_aced -_fdcec )< 1.0e-6};var _decd =[...]int {1};const _bgdcd =57376;

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_cgbac ,_dadf ,_babeg :=_gdff (from ,to );if _babeg !=nil {_feb .Log (_babeg .Error ());return NewError (_babeg .Error ());};return PrefixRangeExpr {_adebd :pfx ,_aedfe :_cgbac ,_ffefe :_dadf };};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fegcg []Result )Result ;const _bcge =57363;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bdb :=args [0];switch _bdb .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cfa :=_ddfb (_bdb .ValueNumber );return MakeNumberResult (float64 (_cfa .Day ()));case ResultTypeString :_aad :=_bb .ToLower (_bdb .ValueString );if !_bacg (_aad ){_ ,_ ,_ ,_ ,_cee ,_abf :=_dag (_aad );if _abf .Type ==ResultTypeError {_abf .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _abf ;};if _cee {return MakeNumberResult (0);};};_ ,_ ,_eed ,_ ,_aee :=_cagc (_aad );if _aee .Type ==ResultTypeError {return _aee ;};return MakeNumberResult (float64 (_eed ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acab :=args [0].ValueNumber ;if _acab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_egdbd ,_ecba :=_gacg (args [1],args [2],"\u0058\u004e\u0050\u0056");if _ecba .Type ==ResultTypeError {return _ecba ;};_gadb :=_egdbd ._cgfc ;_caagd :=_egdbd ._ecae ;_gdfc :=0.0;_fcgf :=_caagd [0];for _ffa ,_gade :=range _gadb {_gdfc +=_gade /_cd .Pow (1+_acab ,(_caagd [_ffa ]-_fcgf )/365);};return MakeNumberResult (_gdfc );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eafab :=args [0].AsNumber ();_badcb :=args [1].AsNumber ();if _eafab .Type !=ResultTypeNumber ||_badcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cafb :=_cd .Trunc (_eafab .ValueNumber );_dcgg :=_cd .Trunc (_badcb .ValueNumber );if _cafb < _dcgg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _cafb ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_cafb +_dcgg -1);args [1]=MakeNumberResult (_cafb -1);return Combin (args );};var _cag =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func (_cdefa *noCache )GetFromCache (key string )(Result ,bool ){return _gde ,false };

// Reference returns an invalid reference for FunctionCall.
func (_egeb FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fcf =_be .Second *1;

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_eace :=len (args );if _eace !=4&&_eace !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efcad ,_dacd ,_ecbf :=_eagf (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _ecbf .Type ==ResultTypeError {return _ecbf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_faaa :=args [2].ValueNumber ;if _faaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_agdc :=args [3].ValueNumber ;if _agdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fgbef :=0;if _eace ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbef =int (args [4].ValueNumber );if !_afdd (_fgbef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_ggce ,_ecbf :=_adafe (_efcad ,_dacd ,_fgbef );if _ecbf .Type ==ResultTypeError {return _ecbf ;};return MakeNumberResult (_agdc *(1-_faaa *_ggce ));};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbda :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_facb :=args [2].ValueNumber +1;if _facb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ebab :=_edbae (args [0]);_aacf :=float64 (len (_ebab ));_edabc ,_agff :=0.0,0.0;_eaaa ,_cgfb :=1.0,1.0;_aeaf ,_cbfa :=false ,false ;for _ ,_afcd :=range _ebab {for _ ,_edec :=range _afcd {if _edec .Type ==ResultTypeNumber &&!_edec .IsBoolean {_dddd :=_edec .ValueNumber ;if _dddd ==0{continue ;}else {if _dddd > 0{_aeaf =true ;_agff +=_edec .ValueNumber *_cgfb ;}else {_cbfa =true ;_edabc +=_edec .ValueNumber *_eaaa ;};_eaaa /=_cbda ;_cgfb /=_facb ;};};};};if !_aeaf ||!_cbfa {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_agdea :=-_agff /_edabc ;_agdea *=_cd .Pow (_facb ,_aacf -1);_agdea =_cd .Pow (_agdea ,1/(_aacf -1));return MakeNumberResult (_agdea -1);};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbef :=args [0].Type ;for _ ,_gcgce :=range args {if _gcgce .Type !=_cbef {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _cbef {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_fbfc :=len (args [0].ListValues ());_degf :=make ([]float64 ,_fbfc );for _bbca :=range _degf {_degf [_bbca ]=1.0;};for _ ,_ecbee :=range args {if len (_ecbee .ListValues ())!=_fbfc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _afffe ,_bbgb :=range _ecbee .ListValues (){_bbgb =_bbgb .AsNumber ();if _bbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_degf [_afffe ]=_degf [_afffe ]*_bbgb .ValueNumber ;};};_ccfed :=0.0;for _ ,_bdfd :=range _degf {_ccfed +=_bdfd ;};return MakeNumberResult (_ccfed );};return MakeNumberResult (1.0);};func (_gbeb *Lexer )lex (_cdbda _c .Reader ){_acbgab ,_ccbad ,_aegb :=0,0,0;_acfb :=-1;_fbfcg ,_becg ,_bfedb :=0,0,0;_ =_bfedb ;_gbdbb :=1;_ =_gbdbb ;_dbfb :=make ([]byte ,4096);_bbadg :=false ;for !_bbadg {_eebe :=0;if _fbfcg > 0{_eebe =_ccbad -_fbfcg ;};_ccbad =0;_dgdab ,_acbe :=_cdbda .Read (_dbfb [_eebe :]);if _dgdab ==0||_acbe !=nil {_bbadg =true ;};_aegb =_dgdab +_eebe ;if _aegb < len (_dbfb ){_acfb =_aegb ;};{_acbgab =_feef ;_fbfcg =0;_becg =0;_bfedb =0;};{var _dgaf int ;var _fbaeb uint ;if _ccbad ==_aegb {goto _fadca ;};if _acbgab ==0{goto _agbgb ;};_gaga :_dgaf =int (_baaeac [_acbgab ]);_fbaeb =uint (_bcbb [_dgaf ]);_dgaf ++;for ;_fbaeb > 0;_fbaeb --{_dgaf ++;switch _bcbb [_dgaf -1]{case 2:_fbfcg =_ccbad ;};};switch _acbgab {case 30:switch _dbfb [_ccbad ]{case 34:goto _adcc ;case 35:goto _gdfa ;case 36:goto _dfaf ;case 38:goto _geede ;case 39:goto _dcag ;case 40:goto _fbdga ;case 41:goto _adfc ;case 42:goto _addd ;case 43:goto _cfdf ;case 44:goto _cbbfd ;case 45:goto _ebcc ;case 47:goto _agae ;case 58:goto _fbcf ;case 59:goto _fbaa ;case 60:goto _ddcff ;case 61:goto _bbgbdd ;case 62:goto _cdffd ;case 63:goto _ggab ;case 70:goto _bdaed ;case 84:goto _efagf ;case 92:goto _adfef ;case 94:goto _fade ;case 95:goto _gfacf ;case 123:goto _bgcaf ;case 125:goto _edea ;};switch {case _dbfb [_ccbad ]< 65:switch {case _dbfb [_ccbad ]> 37:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _faaaf ;};case _dbfb [_ccbad ]>=33:goto _ggab ;};case _dbfb [_ccbad ]> 90:switch {case _dbfb [_ccbad ]> 93:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _gfbae ;};case _dbfb [_ccbad ]>=91:goto _ggab ;};default:goto _bfgaa ;};goto _fdeee ;case 1:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _ageed ;case 123:goto _ageed ;case 125:goto _ageed ;};switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _ageed ;};case _dbfb [_ccbad ]> 45:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ageed ;};case _dbfb [_ccbad ]>=58:goto _ageed ;};default:goto _ageed ;};goto _fdeee ;case 0:goto _agbgb ;case 2:if _dbfb [_ccbad ]==34{goto _dfeef ;};goto _adcc ;case 31:if _dbfb [_ccbad ]==34{goto _adcc ;};goto _cfbc ;case 3:switch _dbfb [_ccbad ]{case 78:goto _bbgbd ;case 82:goto _ecabg ;};goto _ggab ;case 4:switch _dbfb [_ccbad ]{case 47:goto _bceeb ;case 85:goto _cbcde ;};goto _ggab ;case 5:if _dbfb [_ccbad ]==65{goto _defc ;};goto _ggab ;case 6:switch _dbfb [_ccbad ]{case 76:goto _faaaa ;case 77:goto _cadec ;};goto _ggab ;case 7:if _dbfb [_ccbad ]==76{goto _cadec ;};goto _ggab ;case 8:if _dbfb [_ccbad ]==33{goto _defc ;};goto _ggab ;case 9:if _dbfb [_ccbad ]==69{goto _gcda ;};goto _ggab ;case 10:if _dbfb [_ccbad ]==70{goto _ceaab ;};goto _ggab ;case 11:if _dbfb [_ccbad ]==33{goto _cbgg ;};goto _ggab ;case 12:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _ggab ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _ggab ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]< 65:if 58<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=63{goto _ggab ;};case _dbfb [_ccbad ]> 90:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ggab ;};default:goto _ffed ;};default:goto _acce ;};goto _fdeee ;case 13:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _ggab ;case 58:goto _cdca ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _ggab ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ggab ;};case _dbfb [_ccbad ]>=59:goto _ggab ;};default:goto _acce ;};goto _fdeee ;case 14:if _dbfb [_ccbad ]==36{goto _gdbae ;};if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _eccfa ;};goto _ageed ;case 15:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _eccfa ;};goto _ageed ;case 32:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _eccfa ;};goto _gcgef ;case 16:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 47:goto _ggab ;case 58:goto _cafd ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 45:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _acgc ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]> 90:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ggab ;};case _dbfb [_ccbad ]>=65:goto _ffed ;};default:goto _ggab ;};goto _fdeee ;case 17:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _ageed ;case 123:goto _ageed ;case 125:goto _ageed ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _ageed ;};case _dbfb [_ccbad ]>=34:goto _ageed ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ageed ;};case _dbfb [_ccbad ]>=58:goto _ageed ;};default:goto _acgc ;};goto _fdeee ;case 33:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _ffdd ;case 123:goto _ffdd ;case 125:goto _ffdd ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _ffdd ;};case _dbfb [_ccbad ]>=34:goto _ffdd ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _ffdd ;};case _dbfb [_ccbad ]>=58:goto _ffdd ;};default:goto _acgc ;};goto _fdeee ;case 18:if _dbfb [_ccbad ]==36{goto _gdgae ;};if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bacde ;};goto _ageed ;case 19:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bacde ;};goto _ageed ;case 34:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bacde ;};goto _gcfb ;case 20:switch _dbfb [_ccbad ]{case 39:goto _ggab ;case 42:goto _ggab ;case 47:goto _ggab ;case 58:goto _ggab ;case 63:goto _ggab ;};if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=93{goto _ggab ;};goto _dcbga ;case 21:switch _dbfb [_ccbad ]{case 39:goto _aabgc ;case 42:goto _ggab ;case 47:goto _ggab ;case 58:goto _ggab ;case 63:goto _ggab ;};if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=93{goto _ggab ;};goto _dcbga ;case 22:if _dbfb [_ccbad ]==33{goto _fege ;};goto _ggab ;case 35:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _dfea ;case 58:goto _cdca ;case 101:goto _daafa ;case 123:goto _bbadd ;case 125:goto _bbadd ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=47{goto _bbadd ;};case _dbfb [_ccbad ]>=34:goto _bbadd ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _bbadd ;};case _dbfb [_ccbad ]>=59:goto _bbadd ;};default:goto _faaaf ;};goto _fdeee ;case 36:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _bbadd ;case 101:goto _daafa ;case 123:goto _bbadd ;case 125:goto _bbadd ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _bbadd ;};case _dbfb [_ccbad ]>=34:goto _bbadd ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _bbadd ;};case _dbfb [_ccbad ]>=58:goto _bbadd ;};default:goto _dfea ;};goto _fdeee ;case 23:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _fcgdg ;case 123:goto _fcgdg ;case 125:goto _fcgdg ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _fcgdg ;};case _dbfb [_ccbad ]>=34:goto _fcgdg ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _fcgdg ;};case _dbfb [_ccbad ]>=58:goto _fcgdg ;};default:goto _edeea ;};goto _fdeee ;case 37:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 47:goto _bbadd ;case 123:goto _bbadd ;case 125:goto _bbadd ;};switch {case _dbfb [_ccbad ]< 48:switch {case _dbfb [_ccbad ]> 35:if 37<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=45{goto _bbadd ;};case _dbfb [_ccbad ]>=34:goto _bbadd ;};case _dbfb [_ccbad ]> 57:switch {case _dbfb [_ccbad ]> 63:if 91<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=94{goto _bbadd ;};case _dbfb [_ccbad ]>=58:goto _bbadd ;};default:goto _edeea ;};goto _fdeee ;case 38:switch _dbfb [_ccbad ]{case 61:goto _eaebd ;case 62:goto _ddbcb ;};goto _fgfc ;case 39:if _dbfb [_ccbad ]==61{goto _cded ;};goto _dfgf ;case 24:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ggab ;};default:goto _ggab ;};goto _fdeee ;case 40:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 40:goto _fddga ;case 46:goto _abdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _abdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _abdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 41:switch _dbfb [_ccbad ]{case 46:goto _acff ;case 92:goto _acff ;case 95:goto _acff ;};switch {case _dbfb [_ccbad ]< 65:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _acff ;};case _dbfb [_ccbad ]> 90:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _acff ;};default:goto _acff ;};goto _bedga ;case 42:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 43:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 40:goto _fddga ;case 46:goto _abdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ffdd ;case 125:goto _ffdd ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _ffdd ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};default:goto _ffdd ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _abdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ffdd ;};default:goto _ffdd ;};goto _fdeee ;case 44:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ageed ;case 125:goto _ageed ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _ageed ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ageed ;};default:goto _ageed ;};goto _fdeee ;case 25:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 65:goto _faff ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 66<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ggab ;};default:goto _ggab ;};goto _fdeee ;case 45:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 76:goto _aadcf ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 46:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 83:goto _dbfef ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 47:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 69:goto _cbcab ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 26:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 79:goto _fcaag ;case 82:goto _cabg ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ggab ;};default:goto _ggab ;};goto _fdeee ;case 48:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 68:goto _ecbfa ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 49:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 79:goto _bcgeg ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 50:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 36:goto _fdbef ;case 40:goto _fddga ;case 46:goto _abdd ;case 58:goto _cafd ;case 85:goto _dbfef ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 59:switch {case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _adeb ;};case _dbfb [_ccbad ]>=34:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _aeba ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 27:switch _dbfb [_ccbad ]{case 46:goto _acff ;case 92:goto _acff ;case 95:goto _acff ;};switch {case _dbfb [_ccbad ]< 65:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _acff ;};case _dbfb [_ccbad ]> 90:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _acff ;};default:goto _acff ;};goto _ggab ;case 28:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 120:goto _dagc ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _ggab ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ggab ;};default:goto _ggab ;};goto _fdeee ;case 51:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 108:goto _aafac ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 52:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 102:goto _afdab ;case 110:goto _aeac ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 53:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 110:goto _cabbb ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 54:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _adcd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 55:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _dafed ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _dafed ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 56:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 40:goto _cgbdf ;case 46:goto _dafed ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _dafed ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _dafed ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 57:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 109:goto _efbga ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 58:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _cdec ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _bedga ;case 125:goto _bedga ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _bedga ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _bedga ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _bedga ;};default:goto _bedga ;};goto _fdeee ;case 59:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _ddace ;case 123:goto _ageed ;case 125:goto _ageed ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _ageed ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _ageed ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _ddace ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ageed ;};default:goto _ageed ;};goto _fdeee ;case 29:switch _dbfb [_ccbad ]{case 33:goto _dbaf ;case 46:goto _bdgdd ;case 92:goto _acff ;case 95:goto _bdgdd ;case 123:goto _ggab ;case 125:goto _ggab ;};switch {case _dbfb [_ccbad ]< 58:switch {case _dbfb [_ccbad ]< 37:if 34<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=35{goto _ggab ;};case _dbfb [_ccbad ]> 47:if 48<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=57{goto _bdgdd ;};default:goto _ggab ;};case _dbfb [_ccbad ]> 63:switch {case _dbfb [_ccbad ]< 91:if 65<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=90{goto _bdgdd ;};case _dbfb [_ccbad ]> 94:if 97<=_dbfb [_ccbad ]&&_dbfb [_ccbad ]<=122{goto _bdgdd ;};default:goto _ggab ;};default:goto _ggab ;};goto _fdeee ;};_ggab :_acbgab =0;goto _bcdaa ;_fdeee :_acbgab =1;goto _bcdaa ;_adcc :_acbgab =2;goto _bcdaa ;_gdfa :_acbgab =3;goto _bcdaa ;_bbgbd :_acbgab =4;goto _bcdaa ;_bceeb :_acbgab =5;goto _bcdaa ;_cbcde :_acbgab =6;goto _bcdaa ;_faaaa :_acbgab =7;goto _bcdaa ;_cadec :_acbgab =8;goto _bcdaa ;_ecabg :_acbgab =9;goto _bcdaa ;_gcda :_acbgab =10;goto _bcdaa ;_ceaab :_acbgab =11;goto _bcdaa ;_dfaf :_acbgab =12;goto _bcdaa ;_acce :_acbgab =13;goto _bcdaa ;_cdca :_acbgab =14;goto _bcdaa ;_gdbae :_acbgab =15;goto _bcdaa ;_ffed :_acbgab =16;goto _bcdaa ;_fdbef :_acbgab =17;goto _bcdaa ;_cafd :_acbgab =18;goto _bcdaa ;_gdgae :_acbgab =19;goto _bcdaa ;_dcag :_acbgab =20;goto _bcdaa ;_dcbga :_acbgab =21;goto _bcdaa ;_aabgc :_acbgab =22;goto _bcdaa ;_daafa :_acbgab =23;goto _bcdaa ;_bfgaa :_acbgab =24;goto _bcdaa ;_bdaed :_acbgab =25;goto _bcdaa ;_efagf :_acbgab =26;goto _bcdaa ;_adfef :_acbgab =27;goto _bcdaa ;_gfacf :_acbgab =28;goto _bcdaa ;_gfbae :_acbgab =29;goto _bcdaa ;_ageed :_acbgab =30;goto _cfabc ;_dbaf :_acbgab =30;goto _eaaf ;_defc :_acbgab =30;goto _afcb ;_cbgg :_acbgab =30;goto _fbcfd ;_fege :_acbgab =30;goto _dfgfd ;_fcgdg :_acbgab =30;goto _becbe ;_fddga :_acbgab =30;goto _bcafd ;_geede :_acbgab =30;goto _fffgg ;_fbdga :_acbgab =30;goto _ddafb ;_adfc :_acbgab =30;goto _badg ;_addd :_acbgab =30;goto _beede ;_cfdf :_acbgab =30;goto _cfbf ;_cbbfd :_acbgab =30;goto _dacb ;_ebcc :_acbgab =30;goto _cbdgb ;_agae :_acbgab =30;goto _decfa ;_fbcf :_acbgab =30;goto _ccaad ;_fbaa :_acbgab =30;goto _eafe ;_bbgbdd :_acbgab =30;goto _abbdb ;_fade :_acbgab =30;goto _dfga ;_bgcaf :_acbgab =30;goto _cece ;_edea :_acbgab =30;goto _acfd ;_cfbc :_acbgab =30;goto _bffc ;_gcgef :_acbgab =30;goto _degdg ;_ffdd :_acbgab =30;goto _fgbee ;_gcfb :_acbgab =30;goto _dgac ;_bbadd :_acbgab =30;goto _aece ;_fgfc :_acbgab =30;goto _dgaaf ;_eaebd :_acbgab =30;goto _cgefg ;_ddbcb :_acbgab =30;goto _dgbg ;_dfgf :_acbgab =30;goto _adfb ;_cded :_acbgab =30;goto _acca ;_bedga :_acbgab =30;goto _daagf ;_cgbdf :_acbgab =30;goto _cbcded ;_dfeef :_acbgab =31;goto _fcagag ;_eccfa :_acbgab =32;goto _bcdaa ;_acgc :_acbgab =33;goto _gebg ;_bacde :_acbgab =34;goto _bcdaa ;_faaaf :_acbgab =35;goto _cabff ;_dfea :_acbgab =36;goto _cabff ;_edeea :_acbgab =37;goto _cabff ;_ddcff :_acbgab =38;goto _bcdaa ;_cdffd :_acbgab =39;goto _bcdaa ;_abdd :_acbgab =40;goto _ceeg ;_acff :_acbgab =41;goto _bcdaa ;_bdgdd :_acbgab =42;goto _ceeg ;_adeb :_acbgab =43;goto _gebg ;_aeba :_acbgab =44;goto _ceeg ;_cbcab :_acbgab =44;goto _eedd ;_bcgeg :_acbgab =44;goto _cfacf ;_faff :_acbgab =45;goto _ceeg ;_aadcf :_acbgab =46;goto _ceeg ;_dbfef :_acbgab =47;goto _ceeg ;_fcaag :_acbgab =48;goto _ceeg ;_ecbfa :_acbgab =49;goto _ceeg ;_cabg :_acbgab =50;goto _ceeg ;_dagc :_acbgab =51;goto _ceeg ;_aafac :_acbgab =52;goto _ceeg ;_afdab :_acbgab =53;goto _ceeg ;_cabbb :_acbgab =54;goto _ceeg ;_adcd :_acbgab =55;goto _ceeg ;_dafed :_acbgab =56;goto _ceeg ;_aeac :_acbgab =57;goto _ceeg ;_efbga :_acbgab =58;goto _ceeg ;_cdec :_acbgab =59;goto _ceeg ;_ddace :_acbgab =59;goto _gdeg ;_afcb :_dgaf =3;goto _fbgag ;_fbcfd :_dgaf =5;goto _fbgag ;_eaaf :_dgaf =7;goto _fbgag ;_dfgfd :_dgaf =9;goto _fbgag ;_bcafd :_dgaf =11;goto _fbgag ;_cbcded :_dgaf =13;goto _fbgag ;_fffgg :_dgaf =15;goto _fbgag ;_cece :_dgaf =17;goto _fbgag ;_acfd :_dgaf =19;goto _fbgag ;_ddafb :_dgaf =21;goto _fbgag ;_badg :_dgaf =23;goto _fbgag ;_cfbf :_dgaf =25;goto _fbgag ;_cbdgb :_dgaf =27;goto _fbgag ;_beede :_dgaf =29;goto _fbgag ;_decfa :_dgaf =31;goto _fbgag ;_dfga :_dgaf =33;goto _fbgag ;_abbdb :_dgaf =35;goto _fbgag ;_cgefg :_dgaf =37;goto _fbgag ;_acca :_dgaf =39;goto _fbgag ;_dgbg :_dgaf =41;goto _fbgag ;_ccaad :_dgaf =43;goto _fbgag ;_eafe :_dgaf =45;goto _fbgag ;_dacb :_dgaf =47;goto _fbgag ;_aece :_dgaf =49;goto _fbgag ;_fgbee :_dgaf =51;goto _fbgag ;_degdg :_dgaf =53;goto _fbgag ;_dgac :_dgaf =55;goto _fbgag ;_daagf :_dgaf =57;goto _fbgag ;_bffc :_dgaf =59;goto _fbgag ;_dgaaf :_dgaf =61;goto _fbgag ;_adfb :_dgaf =63;goto _fbgag ;_becbe :_dgaf =65;goto _fbgag ;_cfabc :_dgaf =67;goto _fbgag ;_eedd :_dgaf =72;goto _fbgag ;_cabff :_dgaf =75;goto _fbgag ;_gebg :_dgaf =78;goto _fbgag ;_cfacf :_dgaf =81;goto _fbgag ;_gdeg :_dgaf =84;goto _fbgag ;_ceeg :_dgaf =87;goto _fbgag ;_fcagag :_dgaf =90;goto _fbgag ;_fbgag :_fbaeb =uint (_bcbb [_dgaf ]);_dgaf ++;for ;_fbaeb > 0;_fbaeb --{_dgaf ++;switch _bcbb [_dgaf -1]{case 3:_becg =_ccbad +1;case 4:_bfedb =1;case 5:_bfedb =2;case 6:_bfedb =3;case 7:_bfedb =4;case 8:_bfedb =11;case 9:_bfedb =14;case 10:_bfedb =15;case 11:_becg =_ccbad +1;{_gbeb .emit (_fcfae ,_dbfb [_fbfcg :_becg ]);};case 12:_becg =_ccbad +1;{_gbeb .emit (_cbcd ,_dbfb [_fbfcg :_becg ]);};case 13:_becg =_ccbad +1;{_gbeb .emit (_abbd ,_dbfb [_fbfcg :_becg -1]);};case 14:_becg =_ccbad +1;{_gbeb .emit (_abbd ,_dbfb [_fbfcg +1:_becg -2]);};case 15:_becg =_ccbad +1;{_gbeb .emit (_gbeag ,_dbfb [_fbfcg :_becg -1]);};case 16:_becg =_ccbad +1;{_gbeb .emit (_gbeag ,_dbfb [_fbfcg :_becg -1]);};case 17:_becg =_ccbad +1;{_gbeb .emit (_cbab ,_dbfb [_fbfcg :_becg ]);};case 18:_becg =_ccbad +1;{_gbeb .emit (_fafg ,_dbfb [_fbfcg :_becg ]);};case 19:_becg =_ccbad +1;{_gbeb .emit (_decg ,_dbfb [_fbfcg :_becg ]);};case 20:_becg =_ccbad +1;{_gbeb .emit (_gageb ,_dbfb [_fbfcg :_becg ]);};case 21:_becg =_ccbad +1;{_gbeb .emit (_bcge ,_dbfb [_fbfcg :_becg ]);};case 22:_becg =_ccbad +1;{_gbeb .emit (_fbgb ,_dbfb [_fbfcg :_becg ]);};case 23:_becg =_ccbad +1;{_gbeb .emit (_egefb ,_dbfb [_fbfcg :_becg ]);};case 24:_becg =_ccbad +1;{_gbeb .emit (_eeeea ,_dbfb [_fbfcg :_becg ]);};case 25:_becg =_ccbad +1;{_gbeb .emit (_fggfa ,_dbfb [_fbfcg :_becg ]);};case 26:_becg =_ccbad +1;{_gbeb .emit (_ebcgb ,_dbfb [_fbfcg :_becg ]);};case 27:_becg =_ccbad +1;{_gbeb .emit (_gddge ,_dbfb [_fbfcg :_becg ]);};case 28:_becg =_ccbad +1;{_gbeb .emit (_degga ,_dbfb [_fbfcg :_becg ]);};case 29:_becg =_ccbad +1;{_gbeb .emit (_bfdga ,_dbfb [_fbfcg :_becg ]);};case 30:_becg =_ccbad +1;{_gbeb .emit (_gdab ,_dbfb [_fbfcg :_becg ]);};case 31:_becg =_ccbad +1;{_gbeb .emit (_gaaba ,_dbfb [_fbfcg :_becg ]);};case 32:_becg =_ccbad +1;{_gbeb .emit (_cfffb ,_dbfb [_fbfcg :_becg ]);};case 33:_becg =_ccbad +1;{_gbeb .emit (_bgdcd ,_dbfb [_fbfcg :_becg ]);};case 34:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_fecdg ,_dbfb [_fbfcg :_becg ]);};case 35:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_cebgc ,_dbfb [_fbfcg :_becg ]);};case 36:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_cbdc ,_dbfb [_fbfcg :_becg ]);};case 37:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_cdde ,_dbfb [_fbfcg :_becg ]);};case 38:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_aded ,_dbfb [_fbfcg :_becg ]);};case 39:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_cecb ,_dbfb [_fbfcg +1:_becg -1]);};case 40:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_fbeed ,_dbfb [_fbfcg :_becg ]);};case 41:_becg =_ccbad ;_ccbad --;{_gbeb .emit (_geaa ,_dbfb [_fbfcg :_becg ]);};case 42:_ccbad =(_becg )-1;{_gbeb .emit (_fecdg ,_dbfb [_fbfcg :_becg ]);};case 43:switch _bfedb {case 0:{_acbgab =0;goto _bcdaa ;};case 1:{_ccbad =(_becg )-1;_gbeb .emit (_afdaa ,_dbfb [_fbfcg :_becg ]);};case 2:{_ccbad =(_becg )-1;_gbeb .emit (_fecdg ,_dbfb [_fbfcg :_becg ]);};case 3:{_ccbad =(_becg )-1;_gbeb .emit (_cebgc ,_dbfb [_fbfcg :_becg ]);};case 4:{_ccbad =(_becg )-1;_gbeb .emit (_begf ,_dbfb [_fbfcg :_becg ]);};case 11:{_ccbad =(_becg )-1;_gbeb .emit (_aaabb ,_dbfb [_fbfcg :_becg ]);};case 14:{_ccbad =(_becg )-1;_gbeb .emit (_aded ,_dbfb [_fbfcg :_becg ]);};case 15:{_ccbad =(_becg )-1;_gbeb .emit (_cecb ,_dbfb [_fbfcg +1:_becg -1]);};};};};goto _bcdaa ;_bcdaa :_dgaf =int (_fggdg [_acbgab ]);_fbaeb =uint (_bcbb [_dgaf ]);_dgaf ++;for ;_fbaeb > 0;_fbaeb --{_dgaf ++;switch _bcbb [_dgaf -1]{case 0:_fbfcg =0;case 1:_bfedb =0;};};if _acbgab ==0{goto _agbgb ;};if _ccbad ++;_ccbad !=_aegb {goto _gaga ;};_fadca :{};if _ccbad ==_acfb {switch _acbgab {case 1:goto _ageed ;case 2:goto _ageed ;case 31:goto _cfbc ;case 14:goto _ageed ;case 15:goto _ageed ;case 32:goto _gcgef ;case 17:goto _ageed ;case 33:goto _ffdd ;case 18:goto _ageed ;case 19:goto _ageed ;case 34:goto _gcfb ;case 35:goto _bbadd ;case 36:goto _bbadd ;case 23:goto _fcgdg ;case 37:goto _bbadd ;case 38:goto _fgfc ;case 39:goto _dfgf ;case 40:goto _bedga ;case 41:goto _bedga ;case 42:goto _bedga ;case 43:goto _ffdd ;case 44:goto _ageed ;case 45:goto _bedga ;case 46:goto _bedga ;case 47:goto _bedga ;case 48:goto _bedga ;case 49:goto _bedga ;case 50:goto _bedga ;case 51:goto _bedga ;case 52:goto _bedga ;case 53:goto _bedga ;case 54:goto _bedga ;case 55:goto _bedga ;case 56:goto _bedga ;case 57:goto _bedga ;case 58:goto _bedga ;case 59:goto _ageed ;};};_agbgb :{};};if _fbfcg > 0{copy (_dbfb [0:],_dbfb [_fbfcg :]);};};_ =_acfb ;if _acbgab ==_dafcg {_gbeb .emit (_ffga ,nil );};close (_gbeb ._fegbb );};func (_bdcb VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_bdcb ._aacd ,_bdcb ._eccgc );};func _aga (_cdge ,_bdd int )int {if _bdd ==2&&_ffdb (_cdge ){return 29;}else {return _cag [_bdd -1];};};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_gbagd :e }};func (_addfe tokenType )String ()string {return _cfea (int (_addfe ))};

// GetFilename returns an empty string for the invalid reference context.
func (_bccce *ivr )GetFilename ()string {return ""};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_efbb (args ,_bedd ));};

// Reference returns an invalid reference for Bool.
func (_fc Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_febbe :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_febbe *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gfbc :=_edbae (args [1]);for _ ,_dbfd :=range _gfbc {for _ ,_fgaa :=range _dbfd {if _fgaa .Type !=ResultTypeNumber ||_fgaa .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_febbe *=1.0+_fgaa .ValueNumber ;};};return MakeNumberResult (_febbe );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _ffce (_bag ,_bdeg _be .Time ,_ggbf int )_be .Time {_eec :=_be .Date (_bag .Year (),_bdeg .Month (),_bdeg .Day (),0,0,0,0,_be .UTC );if _eec .After (_bag ){_eec =_eec .AddDate (-1,0,0);};for !_eec .After (_bag ){_eec =_eec .AddDate (0,12/_ggbf ,0);};return _eec ;};func _df (_aaa BinOpType ,_db ,_beea [][]Result )Result {_febe :=[][]Result {};for _dfa :=range _db {_cc :=_ba (_aaa ,_db [_dfa ],_beea [_dfa ]);if _cc .Type ==ResultTypeError {return _cc ;};_febe =append (_febe ,_cc .ValueList );};return MakeArrayResult (_febe );};

// Reference returns a string reference value to a cell.
func (_eb CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_eb ._dg };};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_beag :=_d .Buffer {};for _ ,_ggede :=range args {switch _ggede .Type {case ResultTypeString :_beag .WriteString (_ggede .ValueString );case ResultTypeNumber :var _fggf string ;if _ggede .IsBoolean {if _ggede .ValueNumber ==0{_fggf ="\u0046\u0041\u004cS\u0045";}else {_fggf ="\u0054\u0052\u0055\u0045";};}else {_fggf =_ggede .AsString ().ValueString ;};_beag .WriteString (_fggf );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_beag .String ());};func _gacg (_bgdaf ,_ffge Result ,_ffea string )(*xargs ,Result ){if _bgdaf .Type !=ResultTypeList &&_bgdaf .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ffea +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_gbfb :=_edbae (_bgdaf );_ccab :=[]float64 {};for _ ,_abedg :=range _gbfb {for _ ,_ebe :=range _abedg {if _ebe .Type ==ResultTypeNumber &&!_ebe .IsBoolean {_ccab =append (_ccab ,_ebe .ValueNumber );}else {return nil ,MakeErrorResult (_ffea +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_fafc :=len (_ccab );if len (_ccab )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _ffge .Type !=ResultTypeList &&_ffge .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ffea +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_addb :=_edbae (_ffge );_cgge :=[]float64 {};_daba :=0.0;for _ ,_cgged :=range _addb {for _ ,_bdbbg :=range _cgged {if _bdbbg .Type ==ResultTypeNumber &&!_bdbbg .IsBoolean {_gcaa :=float64 (int (_bdbbg .ValueNumber ));if _gcaa < _daba {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_cgge =append (_cgge ,_gcaa );_daba =_gcaa ;}else {return nil ,MakeErrorResult (_ffea +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_cgge )!=_fafc {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_ccab ,_cgge },MakeEmptyResult ();};type durationArgs struct{_gefc float64 ;_bagf float64 ;_bdgba float64 ;_gff float64 ;_cbdb float64 ;_caed int ;};func _dcee (_aca ,_dffa []float64 ,_dead float64 )float64 {_dgbeb :=_dead +1;_fff :=0.0;_eabd :=len (_aca );_cafg :=_dffa [0];for _aeab :=1;_aeab < _eabd ;_aeab ++{_bbfc :=(_dffa [_aeab ]-_cafg )/365;_fff -=_bbfc *_aca [_aeab ]/_cd .Pow (_dgbeb ,_bbfc +1);};return _fff ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_baee :=args [0].AsNumber ();if _baee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_dfba :=int (_baee .ValueNumber );_eefgd :=make ([][]Result ,0,_dfba );for _cgbe :=0;_cgbe < _dfba ;_cgbe ++{_eddd :=make ([]Result ,_dfba );for _cbec :=0;_cbec < _dfba ;_cbec ++{if _cgbe ==_cbec {_eddd [_cbec ]=MakeNumberResult (1.0);}else {_eddd [_cbec ]=MakeNumberResult (0.0);};};_eefgd =append (_eefgd ,_eddd );};return MakeArrayResult (_eefgd );};const _faddf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// String is a string expression.
type String struct{_faee string };func _edbae (_ddfcg Result )[][]Result {switch _ddfcg .Type {case ResultTypeArray :return _ddfcg .ValueArray ;case ResultTypeList :return [][]Result {_ddfcg .ValueList };default:return [][]Result {};};};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_cegg :=[]string {};for _dabbc :=range _ecfce {_cegg =append (_cegg ,_dabbc );};for _bbaag :=range _efagec {_cegg =append (_cegg ,_bbaag );};_cb .Strings (_cegg );return _cegg ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_ebbfg :=len (args );if _ebbfg !=6&&_ebbfg !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcb ,_gbae ,_cbcgc :=_eagf (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _cbcgc .Type ==ResultTypeError {return _cbcgc ;};_eafd :=args [2];if _eafd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aedgg :=_eafd .ValueNumber ;if _aedgg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_abda :=args [3];if _abda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgbb :=_abda .ValueNumber ;if _cgbb <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_efag :=args [4];if _efag .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_cedea :=_efag .ValueNumber ;if _cedea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ecgde :=args [5];if _ecgde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbfe :=float64 (int (_ecgde .ValueNumber ));if !_gbc (_bbfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgda :=0;if _ebbfg ==7&&args [6].Type !=ResultTypeEmpty {_fgca :=args [6];if _fgca .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dgda =int (_fgca .ValueNumber );if !_afdd (_dgda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_adbd :=0.0;_bgca :=0.0;_ccabd :=1.0;_accd ,_cbcgc :=_ddfbf (_dcb ,_gbae ,_aedgg ,_bgca ,_cedea ,_bbfe ,_dgda );if _cbcgc .Type ==ResultTypeError {return _cbcgc ;};_degd ,_cbcgc :=_ddfbf (_dcb ,_gbae ,_aedgg ,_ccabd ,_cedea ,_bbfe ,_dgda );if _cbcgc .Type ==ResultTypeError {return _cbcgc ;};_bbagc :=(_ccabd -_bgca )*0.5;for _ffag :=0;_ffag < 100&&_adbd !=_cgbb ;_ffag ++{_adbd ,_cbcgc =_ddfbf (_dcb ,_gbae ,_aedgg ,_bbagc ,_cedea ,_bbfe ,_dgda );if _cbcgc .Type ==ResultTypeError {return _cbcgc ;};if _cgbb ==_accd {return MakeNumberResult (_bgca );}else if _cgbb ==_degd {return MakeNumberResult (_ccabd );}else if _cgbb ==_adbd {return MakeNumberResult (_bbagc );}else if _cgbb < _degd {_ccabd *=2.0;_degd ,_cbcgc =_ddfbf (_dcb ,_gbae ,_aedgg ,_ccabd ,_cedea ,_bbfe ,_dgda );if _cbcgc .Type ==ResultTypeError {return _cbcgc ;};_bbagc =(_ccabd -_bgca )*0.5;}else {if _cgbb < _adbd {_bgca =_bbagc ;_accd =_adbd ;}else {_ccabd =_bbagc ;_degd =_adbd ;};_bbagc =_ccabd -(_ccabd -_bgca )*((_cgbb -_degd )/(_accd -_degd ));};};return MakeNumberResult (_bbagc );};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_bb .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_faee :v };};func _eeg (_eee string ,_de uint32 )string {_ecf :=_cgf .ColumnToIndex (_eee );if _ecf ==_de {return "\u0023\u0052\u0045F\u0021";}else if _ecf > _de {return _cgf .IndexToColumn (_ecf -1);}else {return _eee ;};};func (_ccbgf PrefixVerticalRange )verticalRangeReference (_fggb string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fggb ,_ccbgf ._cffg ,_ccbgf ._dfagd );};type yySymType struct{_geggb int ;_fbeaf *node ;_aeea Expression ;_gcfcc []Expression ;_gdbg [][]Expression ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_cadc VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gbacf :=_cadc .verticalRangeReference ();if _aeabe ,_dggfb :=ev .GetFromCache (_gbacf );_dggfb {return _aeabe ;};_dbdgb ,_eggd :=_ecec (ctx ,_cadc ._aacd ,_cadc ._eccgc );_ebeg :=_gbecc (ctx ,ev ,_dbdgb ,_eggd );ev .SetCache (_gbacf ,_ebeg );return _ebeg ;};

// Reference returns an invalid reference for Negate.
func (_bcfdg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns a boolean.
func (_ddd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ddd ._feg )};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gcad :=len (args );if _gcad < 3||_gcad > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egef :=args [0].ValueNumber ;if _egef !=float64 (int (_egef )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbcg :=args [2].ValueNumber ;_gbd :=0.0;if _gcad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbd =args [3].ValueNumber ;};_abef :=0.0;if _gcad >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abef =args [4].ValueNumber ;if _abef !=0{_abef =1;};};_ecfbe :=0.1;if _gcad >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfbe =args [5].ValueNumber ;};_dddfb :=100;_gcgc :=0;_bcace :=false ;_dedbb :=1e-6;_aacg :=_ecfbe ;for _gcgc < _dddfb &&!_bcace {_cfcg :=_cd .Pow (_aacg +1,_egef );_cade :=_cd .Pow (_aacg +1,_egef -1);_dcaa :=_aacg *_abef +1;_fgegf :=_aabg *(_cfcg -1);_gceb :=_gbd +_cfcg *_cbcg +_fgegf *_dcaa /_aacg ;_dgab :=_egef *_cade *_cbcg -_fgegf *_dcaa /_cd .Pow (_aacg ,2);_dddb :=(_egef *_aabg *_cade *_dcaa +_fgegf *_abef )/_aacg ;_fdba :=_gceb /(_dgab +_dddb );if _cd .Abs (_fdba )< _dedbb {_bcace =true ;};_gcgc ++;_aacg -=_fdba ;};return MakeNumberResult (_aacg );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_gaf :=args [0].ValueNumber ;if _gaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_ceag :=float64 (int (args [1].ValueNumber ));if _ceag < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_cd .Pow ((1+_gaf /_ceag ),_ceag )-1);};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbfcg :=args [0].AsString ();if _dbfcg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_dbfcg .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_dbfcg .ValueString [0]));};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edbg :=args [0];_effe :=args [1];if _effe .Type !=ResultTypeArray &&_effe .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_acbg :=_fcgad (_effe );_bbdb :=-1;for _ecfdd ,_cfd :=range _acbg {if _baaea (_edbg ,_cfd ,false ,false )==_afed {_bbdb =_ecfdd ;};};if _bbdb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cggd :=_acbg ;if len (args )==3{_cggd =_fcgad (args [2]);};if _bbdb < 0||_bbdb >=len (_cggd ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cggd [_bbdb ];};const _fda ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";const _cfffb =57378;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_efdc .Lock ();defer _efdc .Unlock ();if _babcg ,_gbbeb :=_ecfce [name ];_gbbeb {return _babcg ;};return nil ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egaf :=args [0].AsNumber ();_cbaf :=args [1].AsNumber ();if _egaf .Type !=ResultTypeNumber ||_cbaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _cbaf .ValueNumber < _egaf .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_aafb :=int64 (_egaf .ValueNumber );_cbfcc :=int64 (_cbaf .ValueNumber );return MakeNumberResult (float64 (_dafb .Int63n (_cbfcc -_aafb +1)+_aafb ));};func _agf (_dfbc int ,_adcb _be .Month ,_fae int )int64 {if _dfbc ==1900&&int (_adcb )<=2{_fae --;};_fdbc :=_be .Date (_dfbc ,_adcb ,_fae ,0,0,0,0,_be .UTC );return _fdbc .Unix ();};

// Update updates the FunctionCall references after removing a row/column.
func (_agebb FunctionCall )Update (q *_dd .UpdateQuery )Expression {_babe :=[]Expression {};for _ ,_ggdea :=range _agebb ._acbca {_cdaa :=_ggdea .Update (q );_babe =append (_babe ,_cdaa );};return FunctionCall {_eecad :_agebb ._eecad ,_acbca :_babe };};const _cebgc =57358;

// Reference returns a string reference value to a range.
func (_fbafc Range )Reference (ctx Context ,ev Evaluator )Reference {_cedfb :=_fbafc ._fgggg .Reference (ctx ,ev );_bffgc :=_fbafc ._fdgd .Reference (ctx ,ev );if _cedfb .Type ==ReferenceTypeCell &&_bffgc .Type ==ReferenceTypeCell {return MakeRangeReference (_gagdc (_cedfb ,_bffgc ));};return ReferenceInvalid ;};const _fcfd ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";const _fefca =187;

// Update updates references in the PrefixExpr after removing a row/column.
func (_bdbbb PrefixExpr )Update (q *_dd .UpdateQuery )Expression {_bcggb :=_bdbbb ;_cedae :=_bdbbb ._fcgdfd .String ();if _cedae ==q .SheetToUpdate {_dfdc :=*q ;_dfdc .UpdateCurrentSheet =true ;_bcggb ._begge =_bdbbb ._begge .Update (&_dfdc );};return _bcggb ;};

// Eval evaluates a range returning a list of results or an error.
func (_gdcf Range )Eval (ctx Context ,ev Evaluator )Result {_fbfea :=_gdcf ._fgggg .Reference (ctx ,ev );_aecab :=_gdcf ._fdgd .Reference (ctx ,ev );_gdce :=_gagdc (_fbfea ,_aecab );if _fbfea .Type ==ReferenceTypeCell &&_aecab .Type ==ReferenceTypeCell {if _efcf ,_ecdgb :=ev .GetFromCache (_gdce );_ecdgb {return _efcf ;}else {_eebdb :=_gbecc (ctx ,ev ,_fbfea .Value ,_aecab .Value );ev .SetCache (_gdce ,_eebdb );return _eebdb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gdce );};type xargs struct{_cgfc []float64 ;_ecae []float64 ;};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_fgcc :=len (args );if _fgcc !=4&&_fgcc !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_daga ,_beaa ,_ebfdg :=_eagf (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ebfdg .Type ==ResultTypeError {return _ebfdg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gadd :=args [2].ValueNumber ;if _gadd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fgde :=args [3].ValueNumber ;if _fgde <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_cbfd :=0;if _fgcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbfd =int (args [4].ValueNumber );if !_afdd (_cbfd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_befc ,_ebfdg :=_adafe (_daga ,_beaa ,_cbfd );if _ebfdg .Type ==ResultTypeError {return _ebfdg ;};return MakeNumberResult ((_fgde /_gadd -1)/_befc );};type defEval struct{evCache ;_dce bool ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_bdaf :=len (args );if _bdaf < 3||_bdaf > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_edfd :=args [1].ValueNumber ;if _edfd !=float64 (int (_edfd )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgdb :=args [2].ValueNumber ;_egcg :=0.0;if _bdaf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcg =args [3].ValueNumber ;};_cbca :=0.0;if _bdaf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbca =args [4].ValueNumber ;if _cbca !=0{_cbca =1;};};if _gaea ==0{return MakeNumberResult (-_dgdb *_edfd -_egcg );}else {return MakeNumberResult ((((1-_cd .Pow (1+_gaea ,_edfd ))/_gaea )*_dgdb *(1+_gaea *_cbca )-_egcg )/_cd .Pow (1+_gaea ,_edfd ));};};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fefg :=ctx .GetEpoch ();_aacca ,_ffde :=_cdbd (args [0].Value (),_fefg );if _ffde !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eeed :=_aacca .Year ();return MakeBoolResult (_ffdb (_eeed ));};const _aab =_dca +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _aeebg =[...]uint8 {0,20,37,60,78,96};func _affdd (_eccba []Result ,_beccb bool ,_afdad string )Result {var _ccde ,_bgdag string ;if _beccb {_ccde ="\u0074\u0068\u0072e\u0065";_bgdag ="\u006f\u0064\u0064";}else {_ccde ="\u0074\u0077\u006f";_bgdag ="\u0065\u0076\u0065\u006e";};_gcgb :=len (_eccba );if (_beccb &&_gcgb < 3)||(!_beccb &&_gcgb < 2){return MakeErrorResult (_afdad +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_ccde +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_gcgb /2*2==_gcgb )==_beccb {return MakeErrorResult (_afdad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bgdag +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_fbfa :=-1;_cbadf :=-1;for _bafgb :=0;_bafgb < _gcgb ;_bafgb +=2{_adfgb :=_eccba [_bafgb ];if _adfgb .Type !=ResultTypeArray &&_adfgb .Type !=ResultTypeList {return MakeErrorResult (_afdad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_cdbgd :=_edbae (_adfgb );if _cbadf ==-1{_cbadf =len (_cdbgd );_fbfa =len (_cdbgd [0]);}else if len (_cdbgd )!=_cbadf ||len (_cdbgd [0])!=_fbfa {return MakeErrorResult (_afdad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _beccb &&_bafgb ==0{_bafgb --;};};return _gde ;};

// GetWidth returns 0 for the invalid reference context.
func (_begd *ivr )GetWidth (colIdx int )float64 {return float64 (0)};var _beeac =map[string ]*_fbf .Regexp {};const _abbd =57357;

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_eecad :name ,_acbca :args };};func _afdd (_dbde int )bool {return _dbde >=0&&_dbde <=4};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bcb string ,_cf Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_cae string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_be .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_af int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_aaf string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_ggd string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ad string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_fga string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_abd string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cdff ,_dfd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_eaf string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_dga string ,_eg bool );

// NamedRange returns a named range.
NamedRange (_bab string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_gcf ,_ada uint32 );};const _cfe ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _dcaec ,_ecfc ,_gcbd ,_gafe ,_eggca ,_fgbg *_fbf .Regexp ;func _ddfbf (_ebdag ,_eacg ,_egca ,_gbag ,_gbg ,_bgbe float64 ,_gbbd int )(float64 ,Result ){_agbb :=int (_bgbe );_bgafg :=_fcfa (_ebdag ,_eacg ,_agbb ,_gbbd );_aafg :=_bgc (_ebdag ,_eacg ,_agbb ,_gbbd )/_bgafg ;_ebf ,_bddd :=_ecgc (_ebdag ,_eacg ,_agbb ,_gbbd );if _bddd .Type ==ResultTypeError {return 0,_bddd ;};_bdec :=_gbab (_ebdag ,_eacg ,_agbb ,_gbbd );_afg :=_gbg /_cd .Pow (1+_gbag /_bgbe ,_ebf -1+_aafg );_afg -=100*_egca /_bgbe *_bdec /_bgafg ;_bdgc :=100*_egca /_bgbe ;_dbeb :=1+_gbag /_bgbe ;for _ddda :=0.0;_ddda < _ebf ;_ddda ++{_afg +=_bdgc /_cd .Pow (_dbeb ,_ddda +_aafg );};return _afg ,MakeEmptyResult ();};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_bbbea ,_bdeca ,_eebde :=_gdff (from ,to );if _eebde !=nil {_feb .Log (_eebde .Error ());return NewError (_eebde .Error ());};return Range {_fgggg :_bbbea ,_fdgd :_bdeca };};const _aaabb =57348;func _cga (_dacc ,_dbee ,_bfaf ,_gbaf float64 ,_gbcf int )float64 {var _afdf float64 ;if _dacc ==0{_afdf =(_bfaf +_gbaf )/_dbee ;}else {_degb :=_cd .Pow (1+_dacc ,_dbee );if _gbcf ==1{_afdf =(_gbaf *_dacc /(_degb -1)+_bfaf *_dacc /(1-1/_degb ))/(1+_dacc );}else {_afdf =_gbaf *_dacc /(_degb -1)+_bfaf *_dacc /(1-1/_degb );};};return -_afdf ;};func _cfea (_ccafaa int )string {if _ccafaa >=1&&_ccafaa -1< len (_gecb ){if _gecb [_ccafaa -1]!=""{return _gecb [_ccafaa -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_ccafaa );};var _acbab =[...]struct{_ccaab int ;_ecaba int ;_bdafc string ;}{};var _cgeg float64 =25569.0;const _ab ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";type cumulArgs struct{_dac float64 ;_cgba float64 ;_eegd float64 ;_abgf float64 ;_gdfb float64 ;_geec int ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dgce :=_bb .Split (v ,"\u003a");if len (_dgce )!=2{return nil ;};if _dgce [0]> _dgce [1]{_dgce [0],_dgce [1]=_dgce [1],_dgce [0];};return VerticalRange {_aacd :_dgce [0],_eccgc :_dgce [1]};};func _aag (_dde string ,_gb *_dd .UpdateQuery )string {_abc ,_cab :=_cgf .ParseCellReference (_dde );if _cab !=nil {return "\u0023\u0052\u0045F\u0021";};if _gb .UpdateType ==_dd .UpdateActionRemoveColumn {_gae :=_gb .ColumnIdx ;_fa :=_abc .ColumnIdx ;if _fa < _gae {return _dde ;}else if _fa ==_gae {return "\u0023\u0052\u0045F\u0021";}else {return _abc .Update (_dd .UpdateActionRemoveColumn ).String ();};};return _dde ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_gce CellRef )Update (q *_dd .UpdateQuery )Expression {if q .UpdateCurrentSheet {_gce ._dg =_aag (_gce ._dg ,q );};return _gce ;};

// Update updates references in the Range after removing a row/column.
func (_affae Range )Update (q *_dd .UpdateQuery )Expression {_egcb :=_affae ;if q .UpdateCurrentSheet {_egcb ._fgggg =_affae ._fgggg .Update (q );_egcb ._fdgd =_affae ._fdgd .Update (q );};return _egcb ;};func _ffdb (_efea int )bool {if _efea ==_efea /400*400{return true ;};if _efea ==_efea /100*100{return false ;};return _efea ==_efea /4*4;};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_gbee PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fbafa :=_gbee ._fafd .Reference (ctx ,ev );switch _fbafa .Type {case ReferenceTypeSheet :if _ffcec (_fbafa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fbafa .Value ));};_fbfb :=_gbee .horizontalRangeReference (_fbafa .Value );if _dffb ,_aada :=ev .GetFromCache (_fbfb );_aada {return _dffb ;};_dccba :=ctx .Sheet (_fbafa .Value );_eebc ,_dbfde :=_dcbb (_dccba ,_gbee ._eefc ,_gbee ._ceega );_aafbd :=_gbecc (_dccba ,ev ,_eebc ,_dbfde );ev .SetCache (_fbfb ,_aafbd );return _aafbd ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbafa .Type ));};};

// Update returns the same object as updating sheet references does not affect String.
func (_cced String )Update (q *_dd .UpdateQuery )Expression {return _cced };

// Reference returns an invalid reference for Number.
func (_deee Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _cegda (_faaf yyLexer ,_gbde *yySymType )(_efffd ,_cgffd int ){_cgffd =0;_efffd =_faaf .Lex (_gbde );if _efffd <=0{_cgffd =_decd [0];goto _eabf ;};if _efffd < len (_decd ){_cgffd =_decd [_efffd ];goto _eabf ;};if _efffd >=_gcbb {if _efffd < _gcbb +len (_dbdcb ){_cgffd =_dbdcb [_efffd -_gcbb ];goto _eabf ;};};for _fbdf :=0;_fbdf < len (_gcce );_fbdf +=2{_cgffd =_gcce [_fbdf +0];if _cgffd ==_efffd {_cgffd =_gcce [_fbdf +1];goto _eabf ;};};_eabf :if _cgffd ==0{_cgffd =_dbdcb [1];};if _fcgda >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_cfea (_cgffd ),uint (_efffd ));};return _efffd ,_cgffd ;};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_eeddc :s }};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_beg ,_aaba :=_bgaf (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _aaba .Type ==ResultTypeError {return _aaba ;};_bbed :=_ddfb (_beg ._eeee );_dgd :=_ddfb (_beg ._aef );_gbea :=_beg ._egcf ;_cdbg :=_ffce (_bbed ,_dgd ,_gbea );_dgad ,_gfeg ,_adab :=_cdbg .Date ();return MakeNumberResult (_cedc (_dgad ,int (_gfeg ),_adab ));};

// Reference returns a string reference value to a named range.
func (_ccebe NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_ccebe ._bcdba };};const _ebcgb =57368;func _ggdd (_baae ,_cbg ,_edgd ,_ecbe int )int {if _cbg > _edgd {return 0;};if _gaba (_ecbe ){return (_edgd -_cbg +1)*30;};_badf :=0;for _bcgg :=_cbg ;_bcgg <=_edgd ;_bcgg ++{_badf +=_aga (_baae ,_bcgg );};return _badf ;};const _bbgf =2;func (_bgcfb *noCache )SetCache (key string ,value Result ){};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_dbdg :=_be .Now ();_ ,_ecfd :=_dbdg .Zone ();_ecdc :=_cgeg +float64 (_dbdg .Unix ()+int64 (_ecfd ))/86400;return MakeNumberResult (_ecdc );};const _addg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _addf ,_dccd float64 ;switch args [0].Type {case ResultTypeNumber :_dccd =args [0].ValueNumber ;case ResultTypeString :_fbad :=DateValue ([]Result {args [0]});if _fbad .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dccd =_fbad .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_addf =args [1].ValueNumber ;if _addf < 62&&_dccd >=62{_addf --;};case ResultTypeString :_eab :=DateValue ([]Result {args [1]});if _eab .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_addf =_eab .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dbg :=float64 (int (_dccd -_addf ));return MakeNumberResult (_dbg );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_ecb *defEval )LastEvalIsRef ()bool {return _ecb ._dce };func (_dcgga *yyParserImpl )Parse (yylex yyLexer )int {_dcdc :=_be .Now ();var _bbff int ;var _cdabc yySymType ;var _eccgg []yySymType ;_ =_eccgg ;_eacee :=_dcgga ._ffac [:];Nerrs :=0;Errflag :=0;_faba :=0;_dcgga ._adee =-1;_abea :=-1;defer func (){_faba =-1;_dcgga ._adee =-1;_abea =-1}();_gcaec :=-1;goto _fbcdf ;_fdgbg :return 0;_ffcf :return 1;_fbcdf :if _ceaa (_dcdc ){_feb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ffcf ;};if _fcgda >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_cfea (_abea ),_cegde (_faba ));};_gcaec ++;if _gcaec >=len (_eacee ){_cbgee :=make ([]yySymType ,len (_eacee )*2);copy (_cbgee ,_eacee );_eacee =_cbgee ;};_eacee [_gcaec ]=_cdabc ;_eacee [_gcaec ]._geggb =_faba ;_gcbac :if _ceaa (_dcdc ){_feb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ffcf ;};_bbff =_dage [_faba ];if _bbff <=_cbdg {goto _gccg ;};if _dcgga ._adee < 0{_dcgga ._adee ,_abea =_cegda (yylex ,&_dcgga ._efdf );};_bbff +=_abea ;if _bbff < 0||_bbff >=_fefca {goto _gccg ;};_bbff =_bcab [_bbff ];if _ecgbf [_bbff ]==_abea {_dcgga ._adee =-1;_abea =-1;_cdabc =_dcgga ._efdf ;_faba =_bbff ;if Errflag > 0{Errflag --;};goto _fbcdf ;};_gccg :if _ceaa (_dcdc ){_feb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ffcf ;};_bbff =_aagd [_faba ];if _bbff ==-2{if _dcgga ._adee < 0{_dcgga ._adee ,_abea =_cegda (yylex ,&_dcgga ._efdf );};_eeff :=0;for {if _agbbe [_eeff +0]==-1&&_agbbe [_eeff +1]==_faba {break ;};_eeff +=2;};for _eeff +=2;;_eeff +=2{_bbff =_agbbe [_eeff +0];if _bbff < 0||_bbff ==_abea {break ;};};_bbff =_agbbe [_eeff +1];if _bbff < 0{goto _fdgbg ;};};if _bbff ==0{switch Errflag {case 0:yylex .Error (_bgaa (_faba ,_abea ));Nerrs ++;if _fcgda >=1{_a .Printf ("\u0025\u0073",_cegde (_faba ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_cfea (_abea ));};fallthrough;case 1,2:Errflag =3;for _gcaec >=0{_bbff =_dage [_eacee [_gcaec ]._geggb ]+_bbgf ;if _bbff >=0&&_bbff < _fefca {_faba =_bcab [_bbff ];if _ecgbf [_faba ]==_bbgf {goto _fbcdf ;};};if _fcgda >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_eacee [_gcaec ]._geggb );};_gcaec --;};goto _ffcf ;case 3:if _fcgda >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_cfea (_abea ));};if _abea ==_ebdc {goto _ffcf ;};_dcgga ._adee =-1;_abea =-1;goto _gcbac ;};};if _fcgda >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_bbff ,_cegde (_faba ));};_defdc :=_bbff ;_egac :=_gcaec ;_ =_egac ;_gcaec -=_gcag [_bbff ];if _gcaec +1>=len (_eacee ){_decdb :=make ([]yySymType ,len (_eacee )*2);copy (_decdb ,_eacee );_eacee =_decdb ;};_cdabc =_eacee [_gcaec +1];_bbff =_faddd [_bbff ];_gedc :=_efafd [_bbff ];_gaeea :=_gedc +_eacee [_gcaec ]._geggb +1;if _gaeea >=_fefca {_faba =_bcab [_gedc ];}else {_faba =_bcab [_gaeea ];if _ecgbf [_faba ]!=-_bbff {_faba =_bcab [_gedc ];};};switch _defdc {case 1:_eccgg =_eacee [_egac -1:_egac +1];{yylex .(*plex )._abfg =_cdabc ._aeea ;};case 3:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =_eccgg [2]._aeea ;};case 4:_eccgg =_eacee [_egac -4:_egac +1];{};case 5:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewBool (_eccgg [1]._fbeaf ._fbdfc );};case 6:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewNumber (_eccgg [1]._fbeaf ._fbdfc );};case 7:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewString (_eccgg [1]._fbeaf ._fbdfc );};case 8:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewError (_eccgg [1]._fbeaf ._fbdfc );};case 9:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =_eccgg [2]._aeea ;};case 10:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =NewNegate (_eccgg [2]._aeea );};case 15:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =_eccgg [2]._aeea ;};case 17:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewConstArrayExpr (_eccgg [2]._gdbg );};case 18:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._gdbg =append (_cdabc ._gdbg ,_eccgg [1]._gcfcc );};case 19:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._gdbg =append (_eccgg [1]._gdbg ,_eccgg [3]._gcfcc );};case 20:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._gcfcc =append (_cdabc ._gcfcc ,_eccgg [1]._aeea );};case 21:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._gcfcc =append (_eccgg [1]._gcfcc ,_eccgg [3]._aeea );};case 23:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =NewPrefixExpr (_eccgg [1]._aeea ,_eccgg [2]._aeea );};case 25:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewSheetPrefixExpr (_eccgg [1]._fbeaf ._fbdfc );};case 26:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewCellRef (_eccgg [1]._fbeaf ._fbdfc );};case 27:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewRange (_eccgg [1]._aeea ,_eccgg [3]._aeea );};case 28:_eccgg =_eacee [_egac -4:_egac +1];{_cdabc ._aeea =NewPrefixRangeExpr (_eccgg [1]._aeea ,_eccgg [2]._aeea ,_eccgg [4]._aeea );};case 29:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewNamedRangeRef (_eccgg [1]._fbeaf ._fbdfc );};case 30:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewHorizontalRange (_eccgg [1]._fbeaf ._fbdfc );};case 31:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._aeea =NewVerticalRange (_eccgg [1]._fbeaf ._fbdfc );};case 32:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =NewPrefixHorizontalRange (_eccgg [1]._aeea ,_eccgg [2]._fbeaf ._fbdfc );};case 33:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =NewPrefixVerticalRange (_eccgg [1]._aeea ,_eccgg [2]._fbeaf ._fbdfc );};case 34:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypePlus ,_eccgg [3]._aeea );};case 35:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeMinus ,_eccgg [3]._aeea );};case 36:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeMult ,_eccgg [3]._aeea );};case 37:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeDiv ,_eccgg [3]._aeea );};case 38:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeExp ,_eccgg [3]._aeea );};case 39:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeLT ,_eccgg [3]._aeea );};case 40:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeGT ,_eccgg [3]._aeea );};case 41:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeLEQ ,_eccgg [3]._aeea );};case 42:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeGEQ ,_eccgg [3]._aeea );};case 43:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeEQ ,_eccgg [3]._aeea );};case 44:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeNE ,_eccgg [3]._aeea );};case 45:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewBinaryExpr (_eccgg [1]._aeea ,BinOpTypeConcat ,_eccgg [3]._aeea );};case 47:_eccgg =_eacee [_egac -2:_egac +1];{_cdabc ._aeea =NewFunction (_eccgg [1]._fbeaf ._fbdfc ,nil );};case 48:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._aeea =NewFunction (_eccgg [1]._fbeaf ._fbdfc ,_eccgg [2]._gcfcc );};case 49:_eccgg =_eacee [_egac -1:_egac +1];{_cdabc ._gcfcc =append (_cdabc ._gcfcc ,_eccgg [1]._aeea );};case 50:_eccgg =_eacee [_egac -3:_egac +1];{_cdabc ._gcfcc =append (_eccgg [1]._gcfcc ,_eccgg [3]._aeea );};case 53:_eccgg =_eacee [_egac -0:_egac +1];{_cdabc ._aeea =NewEmptyExpr ();};};goto _fbcdf ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbdc :=args [0].AsString ();if _fbdc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_adfe :=args [1].AsNumber ();if _adfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbg :=_fbdc .ValueString ;if len (_ffbg )> 2&&(_bb .HasPrefix (_ffbg ,"\u0030\u0078")||_bb .HasPrefix (_ffbg ,"\u0030\u0058")){_ffbg =_ffbg [2:];};_gfcac ,_fffd :=_ea .ParseInt (_ffbg ,int (_adfe .ValueNumber ),64);if _fffd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_gfcac ));};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gagef ,_cfad :=_egcfd ("\u0046\u0049\u004e\u0044",args );if _cfad .Type !=ResultTypeEmpty {return _cfad ;};_bdfa :=_gagef ._fadg ;if _bdfa ==""{return MakeNumberResult (1.0);};_accfe :=_gagef ._eggcf ;_bdbe :=_gagef ._geea -1;_cfgdf :=1;_egea :=0;for _gfdfg :=range _accfe {if _gfdfg !=0{_bcedd :=1;if _gfdfg -_egea > 1{_bcedd =2;};_cfgdf +=_bcedd ;};if _cfgdf > _bdbe {_bfcb :=_bb .Index (_accfe [_gfdfg :],_bdfa );if _bfcb ==0{return MakeNumberResult (float64 (_cfgdf ));};};_egea =_gfdfg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _cdfb ="\u005e\u0028\u0028"+_gfg +"\u007c"+_aab +"\u007c"+_addg +"\u007c"+_bbbe +"\u0029\u0020\u0029\u003f";

// Eval evaluates a horizontal range returning a list of results or an error.
func (_geaca HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_agee :=_geaca .horizontalRangeReference ();if _aaceb ,_dbbg :=ev .GetFromCache (_agee );_dbbg {return _aaceb ;};_acag ,_dbgb :=_dcbb (ctx ,_geaca ._gbac ,_geaca ._gbged );_ggge :=_gbecc (ctx ,ev ,_acag ,_dbgb );ev .SetCache (_agee ,_ggge );return _ggge ;};func _gfegb (_dfegb ,_ebfeb []string )[]string {for _ ,_gcde :=range _ebfeb {_dfegb =append (_dfegb ,_gcde );};return _dfegb ;};

// String returns a string representation of String.
func (_cfee String )String ()string {return "\u0022"+_cfee ._faee +"\u0022"};

// IsBool returns false for the invalid reference context.
func (_gbfd *ivr )IsBool (cellRef string )bool {return false };

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _fdbeg (_eccg Result )bool {_agdcd :=_eccg .Type ;return _agdcd !=ResultTypeArray &&_agdcd !=ResultTypeList ;};func _fbbfc (_ccafc ,_agec []float64 ,_ebgcf float64 )float64 {_afag :=_ebgcf +1;_ddac :=_ccafc [0];_aadc :=len (_ccafc );_ceeae :=_agec [0];for _caeb :=1;_caeb < _aadc ;_caeb ++{_ddac +=_ccafc [_caeb ]/_cd .Pow (_afag ,(_agec [_caeb ]-_ceeae )/365);};return _ddac ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dgde :=args [0];switch _dgde .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cgeae :=0.0;_cbge :=0.0;for _ ,_fdbf :=range _dgde .ValueString {_affc :=0.0;switch _fdbf {case 'I':_affc =1;case 'V':_affc =5;case 'X':_affc =10;case 'L':_affc =50;case 'C':_affc =100;case 'D':_affc =500;case 'M':_affc =1000;};_cgeae +=_affc ;switch {case _cbge ==_affc &&(_cbge ==5||_cbge ==50||_cbge ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_cbge ==_affc :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _cbge < _affc {_cgeae -=2*_cbge ;};_cbge =_affc ;};return MakeNumberResult (_cgeae );case ResultTypeError :return _dgde ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dgde .Type ));};};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ggbbb :=args [0];if _ggbbb .Type !=ResultTypeArray &&_ggbbb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbbag :=_ebed (args [1]);_bbgbb :=0;for _ ,_cege :=range _edbae (_ggbbb ){for _ ,_fgf :=range _cege {if _dgbbc (_fgf ,_cbbag ){_bbgbb ++;};};};return MakeNumberResult (float64 (_bbgbb ));};

// Reference returns an invalid reference for ConstArrayExpr.
func (_ddf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type parsedSearchObject struct{_fadg string ;_eggcf string ;_geea int ;};var _bcgda =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func NewLexer ()*Lexer {return &Lexer {_fegbb :make (chan *node )}};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_adebd ,_aedfe ,_ffefe Expression };type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_cfbcd :=_bb .Split (v ,"\u003a");if len (_cfbcd )!=2{return nil ;};if _cfbcd [0]> _cfbcd [1]{_cfbcd [0],_cfbcd [1]=_cfbcd [1],_cfbcd [0];};return PrefixVerticalRange {_cgee :pfx ,_cffg :_cfbcd [0],_dfagd :_cfbcd [1]};};func _gdff (_fadfg ,_ceegc Expression )(Expression ,Expression ,error ){_fdaf ,_egfg :=_fadfg .(CellRef );if !_egfg {return nil ,nil ,_b .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fadfg .String ()));};_cagda ,_egfg :=_ceegc .(CellRef );if !_egfg {return nil ,nil ,_b .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_ceegc .String ()));};_cagce ,_bcfe :=_cgf .ParseCellReference (_fdaf ._dg );if _bcfe !=nil {return nil ,nil ,_bcfe ;};_dbfbc ,_gebe :=_cgf .ParseCellReference (_cagda ._dg );if _gebe !=nil {return nil ,nil ,_gebe ;};_cdfge :=false ;if _cagce .RowIdx > _dbfbc .RowIdx {_cdfge =true ;_cagce .RowIdx ,_dbfbc .RowIdx =_dbfbc .RowIdx ,_cagce .RowIdx ;};if _cagce .ColumnIdx > _dbfbc .ColumnIdx {_cdfge =true ;_cagce .ColumnIdx ,_dbfbc .ColumnIdx =_dbfbc .ColumnIdx ,_cagce .ColumnIdx ;_cagce .Column ,_dbfbc .Column =_dbfbc .Column ,_cagce .Column ;};if _cdfge {return NewCellRef (_cagce .String ()),NewCellRef (_dbfbc .String ()),nil ;};return _fadfg ,_ceegc ,nil ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};var _ageb string =string ([]byte {92});const _egefb =57365;

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_bbce :=len (args );if _bbce < 3||_bbce > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cefa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dfde :=args [1].ValueNumber ;if _dfde !=float64 (int (_dfde )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgdc :=args [2].ValueNumber ;_dbag :=0.0;if _bbce >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbag =args [3].ValueNumber ;};_dgege :=0;if _bbce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgege =int (args [4].ValueNumber );if _dgege !=0{_dgege =1;};};return MakeNumberResult (_bedg (_cefa ,_dfde ,_fgdc ,_dbag ,_dgege ));};var _feedd ,_ccaea ,_afbdc ,_bfcg ,_cdacg ,_geecf ,_ddddg ,_ccff ,_eaad ,_eeeec ,_ccag ,_efgc ,_fbab ,_bfda ,_gbeac *_fbf .Regexp ;

// Reference returns a string reference value to a sheet.
func (_agbe SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_agbe ._eeddc };};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_egae Context ,_bdgbd Evaluator ,_ebbaf []Result )Result ;

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eccga :=args [0].AsNumber ();if _eccga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cefb :=0;if len (args )> 1{_fefa :=args [1];if _fefa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cefb =int (_fefa .ValueNumber );if _cefb < 0{_cefb =0;}else if _cefb > 4{_cefb =4;};};_ecbad :=_cfdcg ;switch _cefb {case 1:_ecbad =_gacdb ;case 2:_ecbad =_bdff ;case 3:_ecbad =_bcgda ;case 4:_ecbad =_fdcf ;};_cgddd :=_cd .Trunc (_eccga .ValueNumber );_feec :=_d .Buffer {};for _ ,_dafg :=range _ecbad {for _cgddd >=_dafg ._cdged {_feec .WriteString (_dafg ._cdgg );_cgddd -=_dafg ._cdged ;};};return MakeStringResult (_feec .String ());};const _dafcg int =0;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ddgf :=args [0].AsString ();if _ddgf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_aecg :=args [1].AsNumber ();if _aecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _aecg .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _aecg .ValueNumber ==0{return MakeStringResult ("");};_ffggbd :=_d .Buffer {};for _gdbaa :=0;_gdbaa < int (_aecg .ValueNumber );_gdbaa ++{_ffggbd .WriteString (_ddgf .ValueString );};return MakeStringResult (_ffggbd .String ());};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_cfec ,_ffgb :=_bgaf (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _ffgb .Type ==ResultTypeError {return _ffgb ;};_cce :=_cfec ._egcf ;_ebbd :=_cfec ._becb ;_cbeb ,_ffgb :=_ecgc (_cfec ._eeee ,_cfec ._aef ,_cce ,_ebbd );if _ffgb .Type ==ResultTypeError {return _ffgb ;};return MakeNumberResult (_cbeb );};const _aacc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";