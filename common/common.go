//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains wrapper types and utilities common to all of the
// OOXML document formats.
//
// Package common contains common properties used by the subpackages.
package common ;import (_ffe "archive/zip";_fcb "bytes";_gdb "encoding/xml";_gbg "fmt";_bgbe "github.com/unidoc/unioffice";_eedb "github.com/unidoc/unioffice/measurement";_ffb "github.com/unidoc/unioffice/schema/soo/dml";_cgb "github.com/unidoc/unioffice/schema/soo/ofc/custom_properties";_fea "github.com/unidoc/unioffice/schema/soo/ofc/docPropsVTypes";_cddf "github.com/unidoc/unioffice/schema/soo/ofc/extended_properties";_bfe "github.com/unidoc/unioffice/schema/soo/pkg/content_types";_ce "github.com/unidoc/unioffice/schema/soo/pkg/metadata/core_properties";_dec "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_gg "github.com/unidoc/unioffice/zippkg";_fbb "image";_ "image/gif";_ "image/jpeg";_ "image/png";_afeg "os";_gfe "regexp";_fgc "strconv";_eabg "strings";_gff "time";);

// Application returns the name of the application that created the document.
// For gooxml created documents, it defaults to github.com/unidoc/unioffice
func (_fda AppProperties )Application ()string {if _fda ._bgd .Application !=nil {return *_fda ._bgd .Application ;};return "";};

// RelativeWidth returns the relative width of an image given a fixed height.
// This is used when setting image to a fixed height to calculate the width
// required to keep the same image aspect ratio.
func (_fbd ImageRef )RelativeWidth (h _eedb .Distance )_eedb .Distance {_cdg :=float64 (_fbd .Size ().X )/float64 (_fbd .Size ().Y );return h *_eedb .Distance (_cdg );};

// Company returns the name of the company that created the document.
// For gooxml created documents, it defaults to github.com/unidoc/unioffice
func (_dee AppProperties )Company ()string {if _dee ._bgd .Company !=nil {return *_dee ._bgd .Company ;};return "";};const _dge ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";func UtcTimeFormat (t _gff .Time )string {return t .Format (_dge )+"\u0020\u0055\u0054\u0043"};

// RemoveOverrideByIndex removes an override given a path and override index.
func (_fc ContentTypes )RemoveOverrideByIndex (path string ,indexToFind int )error {_fbf :=path [0:len (path )-5];if !_eabg .HasPrefix (_fbf ,"\u002f"){_fbf ="\u002f"+_fbf ;};_bcd ,_ddec :=_gfe .Compile (_fbf +"\u0028\u005b\u0030-\u0039\u005d\u002b\u0029\u002e\u0078\u006d\u006c");if _ddec !=nil {return _ddec ;};_bfb :=0;_bada :=-1;for _eg ,_acc :=range _fc ._bgfg .Override {if _gbf :=_bcd .FindStringSubmatch (_acc .PartNameAttr );len (_gbf )> 1{if _bfb ==indexToFind {_bada =_eg ;}else if _bfb > indexToFind {_fdf ,_ :=_fgc .Atoi (_gbf [1]);_fdf --;_acc .PartNameAttr =_gbg .Sprintf ("\u0025\u0073\u0025\u0064\u002e\u0078\u006d\u006c",_fbf ,_fdf );};_bfb ++;};};if _bada > -1{copy (_fc ._bgfg .Override [_bada :],_fc ._bgfg .Override [_bada +1:]);_fc ._bgfg .Override =_fc ._bgfg .Override [0:len (_fc ._bgfg .Override )-1];};return nil ;};func (_bbf CustomProperties )SetPropertyAsDate (name string ,date _gff .Time ){date =date .UTC ();_ga :=_bbf .getNewProperty (name );_ga .Date =&date ;_bbf .setProperty (_ga );};

// NewRelationships creates a new relationship wrapper.
func NewRelationships ()Relationships {return Relationships {_gacd :_dec .NewRelationships ()}};func (_agac CustomProperties )SetPropertyAsOstorage (name string ,ostorage string ){_gef :=_agac .getNewProperty (name );_gef .Ostorage =&ostorage ;_agac .setProperty (_gef );};

// TableStyles contains document specific properties.
type TableStyles struct{_ee *_ffb .TblStyleLst };

// Modified returns the time that the document was modified.
func (_efgf CoreProperties )Modified ()_gff .Time {return _cca (_efgf ._fde .Modified )};

// AddHyperlink adds an external hyperlink relationship.
func (_bd Relationships )AddHyperlink (target string )Hyperlink {_dbb :=_bd .AddRelationship (target ,_bgbe .HyperLinkType );_dbb ._fad .TargetModeAttr =_dec .ST_TargetModeExternal ;return Hyperlink (_dbb );};

// X returns the inner wrapped XML type.
func (_edae CoreProperties )X ()*_ce .CoreProperties {return _edae ._fde };func (_bcg CustomProperties )SetPropertyAsR4 (name string ,r4 float32 ){_abd :=_bcg .getNewProperty (name );_abd .R4 =&r4 ;_bcg .setProperty (_abd );};func (_dgfg CustomProperties )SetPropertyAsUi4 (name string ,ui4 uint32 ){_baf :=_dgfg .getNewProperty (name );_baf .Ui4 =&ui4 ;_dgfg .setProperty (_baf );};func (_bbae CustomProperties )SetPropertyAsError (name string ,error string ){_bc :=_bbae .getNewProperty (name );_bc .Error =&error ;_bbae .setProperty (_bc );};func (_de CustomProperties )getNewProperty (_ffa string )*_cgb .CT_Property {_bba :=_de ._dcg .Property ;_cde :=int32 (1);for _ ,_befb :=range _bba {if _befb .PidAttr > _cde {_cde =_befb .PidAttr ;};};_ca :=_cgb .NewCT_Property ();_ca .NameAttr =&_ffa ;_ca .PidAttr =_cde +1;return _ca ;};

// AddAutoRelationship adds a relationship with an automatically generated
// filename based off of the type. It should be preferred over AddRelationship
// to ensure consistent filenames are maintained.
func (_ddc Relationships )AddAutoRelationship (dt _bgbe .DocType ,src string ,idx int ,ctype string )Relationship {return _ddc .AddRelationship (_bgbe .RelativeFilename (dt ,src ,ctype ,idx ),ctype );};

// ImageFromBytes returns an Image struct for an in-memory image. You can also
// construct an Image directly if the file and size are known.
func ImageFromBytes (data []byte )(Image ,error ){_afd :=Image {};_dab ,_gac ,_fgca :=_fbb .Decode (_fcb .NewReader (data ));if _fgca !=nil {return _afd ,_gbg .Errorf ("\u0075n\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0070\u0061r\u0073e\u0020i\u006d\u0061\u0067\u0065\u003a\u0020\u0025s",_fgca );};_afd .Data =&data ;_afd .Format =_gac ;_afd .Size =_dab .Bounds ().Size ();return _afd ,nil ;};func (_eae CustomProperties )SetPropertyAsUint (name string ,ui uint ){_dba :=_eae .getNewProperty (name );_deg :=uint32 (ui );_dba .Uint =&_deg ;_eae .setProperty (_dba );};

// NewAppProperties constructs a new AppProperties.
func NewAppProperties ()AppProperties {_bcc :=AppProperties {_bgd :_cddf .NewProperties ()};_bcc .SetCompany ("\u0046\u006f\u0078\u0079\u0055\u0074\u0069\u006c\u0073\u0020\u0065\u0068\u0066");_bcc .SetApplication ("g\u0069\u0074\u0068\u0075\u0062\u002ec\u006f\u006d\u002f\u0075\u006e\u0069\u0064\u006f\u0063/\u0075\u006e\u0069o\u0066f\u0069\u0063\u0065");_bcc .SetDocSecurity (0);_bcc .SetLinksUpToDate (false );var _ccg ,_gb ,_fcf int64 ;_gbg .Sscanf (Version ,"\u0025\u0064\u002e\u0025\u0064\u002e\u0025\u0064",&_ccg ,&_gb ,&_fcf );_cebe :=float64 (_ccg )+float64 (_gb )/10000.0;_bcc .SetApplicationVersion (_gbg .Sprintf ("\u0025\u0030\u0037\u002e\u0034\u0066",_cebe ));return _bcc ;};

// Hyperlink is just an appropriately configured relationship.
type Hyperlink Relationship ;func (_dc CustomProperties )SetPropertyAsClsid (name string ,clsid string ){_cge :=_dc .getNewProperty (name );_cge .Clsid =&clsid ;_dc .setProperty (_cge );};

// NewCustomProperties constructs a new CustomProperties.
func NewCustomProperties ()CustomProperties {return CustomProperties {_dcg :_cgb .NewProperties ()}};func (_edfg *ImageRef )SetRelID (id string ){_edfg ._fca =id };

// ExtraFile is an unsupported file type extracted from, or to be written to a
// zip package
type ExtraFile struct{ZipPath string ;DiskPath string ;};const _aabd ="2\u00300\u0036\u002d\u0030\u0031\u002d\u0030\u0032\u00541\u0035\u003a\u0030\u0034:0\u0035\u005a";

// Category returns the category of the document
func (_bdb CoreProperties )Category ()string {if _bdb ._fde .Category !=nil {return *_bdb ._fde .Category ;};return "";};func (_dcf CustomProperties )SetPropertyAsInt (name string ,i int ){_aa :=_dcf .getNewProperty (name );_dca :=int32 (i );_aa .Int =&_dca ;_dcf .setProperty (_aa );};

// X returns the inner wrapped XML type.
func (_ceb Theme )X ()*_ffb .Theme {return _ceb ._gcc };

// X returns the underlying raw XML data.
func (_ged Relationships )X ()*_dec .Relationships {return _ged ._gacd };func (_fa Relationship )String ()string {return _gbg .Sprintf ("\u007b\u0049\u0044\u003a \u0025\u0073\u0020\u0054\u0061\u0072\u0067\u0065\u0074\u003a \u0025s\u0020\u0054\u0079\u0070\u0065\u003a\u0020%\u0073\u007d",_fa .ID (),_fa .Target (),_fa .Type ());};func (_ge CustomProperties )SetPropertyAsOblob (name ,oblob string ){_gcde :=_ge .getNewProperty (name );_gcde .Oblob =&oblob ;_ge .setProperty (_gcde );};

// Size returns the size of an image
func (_dg ImageRef )Size ()_fbb .Point {return _dg ._bdd .Size };

// Format returns the format of the underlying image
func (_cga ImageRef )Format ()string {return _cga ._bdd .Format };func _da (_dce _gff .Time ,_gfb string )*_bgbe .XSDAny {_fge :=&_bgbe .XSDAny {XMLName :_gdb .Name {Local :_gfb }};_fge .Attrs =append (_fge .Attrs ,_gdb .Attr {Name :_gdb .Name {Local :"\u0078\u0073\u0069\u003a\u0074\u0079\u0070\u0065"},Value :"\u0064\u0063\u0074\u0065\u0072\u006d\u0073\u003a\u00573\u0043\u0044\u0054\u0046"});_fge .Attrs =append (_fge .Attrs ,_gdb .Attr {Name :_gdb .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u0073i"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0077\u0077\u0077\u002e\u0077\u0033\u002e\u006f\u0072\u0067\u002f\u00320\u0030\u0031\u002f\u0058\u004d\u004c\u0053\u0063\u0068\u0065\u006d\u0061\u002d\u0069\u006e\u0073\u0074\u0061\u006e\u0063\u0065"});_fge .Attrs =append (_fge .Attrs ,_gdb .Attr {Name :_gdb .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0063\u0074\u0065\u0072\u006d\u0073"},Value :"\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/"});_fge .Data =[]byte (_dce .Format (_aabd ));return _fge ;};

// DocBase is the type embedded in in the Document/Workbook/Presentation types
// that contains members common to all.
type DocBase struct{ContentTypes ContentTypes ;AppProperties AppProperties ;Rels Relationships ;CoreProperties CoreProperties ;CustomProperties CustomProperties ;Thumbnail _fbb .Image ;Images []ImageRef ;ExtraFiles []ExtraFile ;TmpPath string ;};

// Relationships represents a .rels file.
type Relationships struct{_gacd *_dec .Relationships };

// ApplicationVersion returns the version of the application that created the
// document.
func (_cc AppProperties )ApplicationVersion ()string {if _cc ._bgd .AppVersion !=nil {return *_cc ._bgd .AppVersion ;};return "";};const _gda =10;

// AddImageToZip adds an image (either from bytes or from disk) and adds it to the zip file.
func AddImageToZip (z *_ffe .Writer ,img ImageRef ,imageNum int ,dt _bgbe .DocType )error {_bbd :=_bgbe .AbsoluteImageFilename (dt ,imageNum ,_eabg .ToLower (img .Format ()));if img .Data ()!=nil &&len (*img .Data ())> 0{if _deb :=_gg .AddFileFromBytes (z ,_bbd ,*img .Data ());_deb !=nil {return _deb ;};}else if img .Path ()!=""{if _aafa :=_gg .AddFileFromDisk (z ,_bbd ,img .Path ());_aafa !=nil {return _aafa ;};}else {return _gbg .Errorf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u003a %\u002b\u0076",img );};return nil ;};func (_acbd CustomProperties )SetPropertyAsI2 (name string ,i2 int16 ){_cad :=_acbd .getNewProperty (name );_cad .I2 =&i2 ;_acbd .setProperty (_cad );};

// ID returns the ID of a relationship.
func (_efa Relationship )ID ()string {return _efa ._fad .IdAttr };

// Created returns the time that the document was created.
func (_c CoreProperties )Created ()_gff .Time {return _cca (_c ._fde .Created )};

// ImageFromFile reads an image from a file on disk. It doesn't keep the image
// in memory and only reads it to determine the format and size.  You can also
// construct an Image directly if the file and size are known.
func ImageFromFile (path string )(Image ,error ){_gbe ,_ead :=_afeg .Open (path );_afg :=Image {};if _ead !=nil {return _afg ,_gbg .Errorf ("\u0065\u0072\u0072or\u0020\u0072\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ead );};defer _gbe .Close ();_edf ,_fcdb ,_ead :=_fbb .Decode (_gbe );if _ead !=nil {return _afg ,_gbg .Errorf ("\u0075n\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0070\u0061r\u0073e\u0020i\u006d\u0061\u0067\u0065\u003a\u0020\u0025s",_ead );};_afg .Path =path ;_afg .Format =_fcdb ;_afg .Size =_edf .Bounds ().Size ();return _afg ,nil ;};func (_cfc CustomProperties )SetPropertyAsEmpty (name string ){_aabdg :=_cfc .getNewProperty (name );_aabdg .Empty =_fea .NewEmpty ();_cfc .setProperty (_aabdg );};

// LastModifiedBy returns the name of the last person to modify the document
func (_bdg CoreProperties )LastModifiedBy ()string {if _bdg ._fde .LastModifiedBy !=nil {return *_bdg ._fde .LastModifiedBy ;};return "";};

// X returns the inner wrapped XML type.
func (_db TableStyles )X ()*_ffb .TblStyleLst {return _db ._ee };

// EnsureOverride ensures that an override for the given path exists, adding it if necessary
func (_bb ContentTypes )EnsureOverride (path ,contentType string ){for _ ,_ega :=range _bb ._bgfg .Override {if _ega .PartNameAttr ==path {if _eabg .HasPrefix (contentType ,"\u0068\u0074\u0074\u0070"){_bgbe .Log ("\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u0074\u0079p\u0065\u0020\u0027%\u0073\u0027\u0020\u0069\u0073\u0020\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u002c m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0068\u0074\u0074\u0070",contentType );};_ega .ContentTypeAttr =contentType ;return ;};};_bb .AddOverride (path ,contentType );};func (_dgfd CustomProperties )SetPropertyAsLpwstr (name string ,lpwstr string ){_bddf :=_dgfd .getNewProperty (name );_bddf .Lpwstr =&lpwstr ;_dgfd .setProperty (_bddf );};func (_ffg CustomProperties )SetPropertyAsStream (name string ,stream string ){_ea :=_ffg .getNewProperty (name );_ea .Stream =&stream ;_ffg .setProperty (_ea );};

// SetDocSecurity sets the document security flag.
func (_fccd AppProperties )SetDocSecurity (v int32 ){_fccd ._bgd .DocSecurity =_bgbe .Int32 (v )};

// NewRelationshipsCopy creates a new relationships wrapper as a copy of passed in instance.
func NewRelationshipsCopy (rels Relationships )Relationships {_adc :=*rels ._gacd ;return Relationships {_gacd :&_adc };};func (_gd CustomProperties )GetPropertyByName (name string )CustomProperty {_ag :=_gd .getPropertyByName (name );if _ag ==nil {return nil ;};return CustomProperty (_ag );};

// CustomProperty contains document specific property
type CustomProperty *_cgb .CT_Property ;

// SetTarget set the target (path) of a relationship.
func (_bca Relationship )SetTarget (s string ){_bca ._fad .TargetAttr =s };

// TblStyle returns the TblStyle property.
func (_fbcd TableStyles )TblStyle ()[]*_ffb .CT_TableStyle {return _fbcd ._ee .TblStyle };

// Data returns the data of an image file, if any.
func (_cgc ImageRef )Data ()*[]byte {return _cgc ._bdd .Data };

// SetLastModifiedBy records the last person to modify the document.
func (_dddf CoreProperties )SetLastModifiedBy (s string ){_dddf ._fde .LastModifiedBy =&s };

// Author returns the author of the document
func (_bad CoreProperties )Author ()string {if _bad ._fde .Creator !=nil {return string (_bad ._fde .Creator .Data );};return "";};

// SetCategory records the category of the document.
func (_bgf CoreProperties )SetCategory (s string ){_bgf ._fde .Category =&s };func (_cfaff CustomProperties )SetPropertyAsArray (name string ,array *_fea .Array ){_accc :=_cfaff .getNewProperty (name );_accc .Array =array ;_cfaff .setProperty (_accc );};func (_gbad CustomProperties )SetPropertyAsDecimal (name string ,decimal float64 ){_fbg :=_gbad .getNewProperty (name );_fbg .Decimal =&decimal ;_gbad .setProperty (_fbg );};

// Remove removes an existing relationship.
func (_dcb Relationships )Remove (rel Relationship )bool {for _bgab ,_fbga :=range _dcb ._gacd .Relationship {if _fbga ==rel ._fad {copy (_dcb ._gacd .Relationship [_bgab :],_dcb ._gacd .Relationship [_bgab +1:]);_dcb ._gacd .Relationship =_dcb ._gacd .Relationship [0:len (_dcb ._gacd .Relationship )-1];return true ;};};return false ;};func (_dgg CustomProperties )SetPropertyAsNull (name string ){_gbgg :=_dgg .getNewProperty (name );_gbgg .Null =_fea .NewNull ();_dgg .setProperty (_gbgg );};

// SetAuthor records the author of the document.
func (_dde CoreProperties )SetAuthor (s string ){if _dde ._fde .Creator ==nil {_dde ._fde .Creator =&_bgbe .XSDAny {XMLName :_gdb .Name {Local :"\u0064\u0063\u003a\u0063\u0072\u0065\u0061\u0074\u006f\u0072"}};};_dde ._fde .Creator .Data =[]byte (s );};

// CustomProperties contains document specific properties.
type CustomProperties struct{_dcg *_cgb .Properties };func (_fgeg CustomProperties )SetPropertyAsR8 (name string ,r8 float64 ){_bf :=_fgeg .getNewProperty (name );_bf .R8 =&r8 ;_fgeg .setProperty (_bf );};const _fgf =6;

// ImageRef is a reference to an image within a document.
type ImageRef struct{_cgba *DocBase ;_ddbc Relationships ;_bdd Image ;_fca string ;};func (_dcfc CustomProperties )SetPropertyAsStorage (name string ,storage string ){_eab :=_dcfc .getNewProperty (name );_eab .Storage =&storage ;_dcfc .setProperty (_eab );};

// SetLanguage records the language of the document.
func (_ebe CoreProperties )SetLanguage (s string ){_ebe ._fde .Language =&_bgbe .XSDAny {XMLName :_gdb .Name {Local :"d\u0063\u003a\u006c\u0061\u006e\u0067\u0075\u0061\u0067\u0065"}};_ebe ._fde .Language .Data =[]byte (s );};

// X returns the inner raw content types.
func (_be ContentTypes )X ()*_bfe .Types {return _be ._bgfg };

// NewContentTypes returns a wrapper around a newly constructed content-types.
func NewContentTypes ()ContentTypes {_ccc :=ContentTypes {_bgfg :_bfe .NewTypes ()};_ccc .AddDefault ("\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0078\u006d\u006c");_ccc .AddDefault ("\u0072\u0065\u006c\u0073","\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006fn\u002f\u0076\u006ed\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002dpa\u0063\u006b\u0061\u0067\u0065\u002e\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002b\u0078\u006d\u006c");_ccc .AddDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ccc .AddDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ccc .AddDefault ("\u006a\u0070\u0067","\u0069m\u0061\u0067\u0065\u002f\u006a\u0070g");_ccc .AddDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_ccc .AddOverride ("\u002fd\u006fc\u0050\u0072\u006f\u0070\u0073/\u0063\u006fr\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073-\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002e\u0063\u006f\u0072\u0065\u002dp\u0072\u006f\u0070\u0065\u0072\u0074i\u0065\u0073\u002bx\u006d\u006c");_ccc .AddOverride ("\u002f\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0061\u0070p\u002e\u0078\u006d\u006c","a\u0070\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u002e\u0065\u0078\u0074\u0065\u006e\u0064\u0065\u0064\u002dp\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073\u002b\u0078m\u006c");return _ccc ;};

// AddDefault registers a default content type for a given file extension.
func (_ab ContentTypes )AddDefault (fileExtension string ,contentType string ){_fab :=_bfe .NewDefault ();_fab .ExtensionAttr =fileExtension ;_fab .ContentTypeAttr =contentType ;_ab ._bgfg .Default =append (_ab ._bgfg .Default ,_fab );};

// IsEmpty returns true if there are no relationships.
func (_egd Relationships )IsEmpty ()bool {return _egd ._gacd ==nil ||len (_egd ._gacd .Relationship )==0;};

// AddOverride adds an override content type for a given path name.
func (_cddfe ContentTypes )AddOverride (path ,contentType string ){if !_eabg .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};if _eabg .HasPrefix (contentType ,"\u0068\u0074\u0074\u0070"){_bgbe .Log ("\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u0074\u0079p\u0065\u0020\u0027%\u0073\u0027\u0020\u0069\u0073\u0020\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u002c m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069\u0074\u0068\u0020\u0068\u0074\u0074\u0070",contentType );};_eac :=_bfe .NewOverride ();_eac .PartNameAttr =path ;_eac .ContentTypeAttr =contentType ;_cddfe ._bgfg .Override =append (_cddfe ._bgfg .Override ,_eac );};

// SetApplicationVersion sets the version of the application that created the
// document.  Per MS, the verison string mut be in the form 'XX.YYYY'.
func (_adb AppProperties )SetApplicationVersion (s string ){_adb ._bgd .AppVersion =&s };const _af =2020;

// RelativeHeight returns the relative height of an image given a fixed width.
// This is used when setting image to a fixed width to calculate the height
// required to keep the same image aspect ratio.
func (_efc ImageRef )RelativeHeight (w _eedb .Distance )_eedb .Distance {_dd :=float64 (_efc .Size ().Y )/float64 (_efc .Size ().X );return w *_eedb .Distance (_dd );};var ReleasedAt =_gff .Date (_af ,_fgf ,_eed ,_gbc ,_gda ,0,0,_gff .UTC );const Version ="\u0031\u002e\u0034.\u0030";

// Title returns the Title of the document
func (_edbf CoreProperties )Title ()string {if _edbf ._fde .Title !=nil {return string (_edbf ._fde .Title .Data );};return "";};

// CoreProperties contains document specific properties.
type CoreProperties struct{_fde *_ce .CoreProperties };

// Image is a container for image information. It's used as we need format and
// and size information to use images.
// It contains either the filesystem path to the image, or the image itself.
type Image struct{Size _fbb .Point ;Format string ;Path string ;Data *[]byte ;};func (_fcd CustomProperties )SetPropertyAsI8 (name string ,i8 int64 ){_cdc :=_fcd .getNewProperty (name );_cdc .I8 =&i8 ;_fcd .setProperty (_cdc );};

// SetCompany sets the name of the company that created the document.
func (_cd AppProperties )SetCompany (s string ){_cd ._bgd .Company =&s };

// Relationship is a relationship within a .rels file.
type Relationship struct{_fad *_dec .Relationship };

// RemoveOverride removes an override given a path.
func (_ege ContentTypes )RemoveOverride (path string ){if !_eabg .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};for _ffc ,_badg :=range _ege ._bgfg .Override {if _badg .PartNameAttr ==path {copy (_ege ._bgfg .Override [_ffc :],_ege ._bgfg .Override [_ffc +1:]);_ege ._bgfg .Override =_ege ._bgfg .Override [0:len (_ege ._bgfg .Override )-1];};};};

// WriteExtraFiles writes the extra files to the zip package.
func (_gdg *DocBase )WriteExtraFiles (z *_ffe .Writer )error {for _ ,_bge :=range _gdg .ExtraFiles {if _edg :=_gg .AddFileFromDisk (z ,_bge .ZipPath ,_bge .DiskPath );_edg !=nil {return _edg ;};};return nil ;};

// CopyOverride copies override content type for a given `path` and puts it with a path `newPath`.
func (_cf ContentTypes )CopyOverride (path ,newPath string ){if !_eabg .HasPrefix (path ,"\u002f"){path ="\u002f"+path ;};if !_eabg .HasPrefix (newPath ,"\u002f"){newPath ="\u002f"+newPath ;};for _fgd :=range _cf ._bgfg .Override {if _cf ._bgfg .Override [_fgd ].PartNameAttr ==path {_bga :=*_cf ._bgfg .Override [_fgd ];_bga .PartNameAttr =newPath ;_cf ._bgfg .Override =append (_cf ._bgfg .Override ,&_bga );};};};

// Theme is a drawingml theme.
type Theme struct{_gcc *_ffb .Theme };

// Clear removes any existing relationships.
func (_eeb Relationships )Clear (){_eeb ._gacd .Relationship =nil };

// AddExtraFileFromZip is used when reading an unsupported file from an OOXML
// file. This ensures that unsupported file content will at least round-trip
// correctly.
func (_edee *DocBase )AddExtraFileFromZip (f *_ffe .File )error {_bfc ,_ff :=_gg .ExtractToDiskTmp (f ,_edee .TmpPath );if _ff !=nil {return _gbg .Errorf ("\u0065\u0072r\u006f\u0072\u0020\u0065x\u0074\u0072a\u0063\u0074\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u0069\u006ce\u003a\u0020\u0025\u0073",_ff );};_edee .ExtraFiles =append (_edee .ExtraFiles ,ExtraFile {ZipPath :f .Name ,DiskPath :_bfc });return nil ;};

// X returns the inner wrapped XML type.
func (_e AppProperties )X ()*_cddf .Properties {return _e ._bgd };const _gbc =16;

// SetCreated sets the time that the document was created.
func (_gge CoreProperties )SetCreated (t _gff .Time ){_gge ._fde .Created =_da (t ,"\u0064c\u0074e\u0072\u006d\u0073\u003a\u0063\u0072\u0065\u0061\u0074\u0065\u0064");};func (_fcc CustomProperties )SetPropertyAsBstr (name string ,bstr string ){_ebf :=_fcc .getNewProperty (name );_ebf .Bstr =&bstr ;_fcc .setProperty (_ebf );};func (_b CustomProperties )SetPropertyAsBool (name string ,b bool ){_ef :=_b .getNewProperty (name );_ef .Bool =&b ;_b .setProperty (_ef );};

// NewTheme constructs a new theme.
func NewTheme ()Theme {return Theme {_ffb .NewTheme ()}};

// SetTitle records the title of the document.
func (_edb CoreProperties )SetTitle (s string ){if _edb ._fde .Title ==nil {_edb ._fde .Title =&_bgbe .XSDAny {XMLName :_gdb .Name {Local :"\u0064\u0063\u003a\u0074\u0069\u0074\u006c\u0065"}};};_edb ._fde .Title .Data =[]byte (s );};func (_edc CustomProperties )SetPropertyAsFiletime (name string ,filetime _gff .Time ){_dae :=_edc .getNewProperty (name );_dae .Filetime =&filetime ;_edc .setProperty (_dae );};func (_aeg CustomProperties )SetPropertyAsCy (name string ,cy string ){_eec :=_aeg .getNewProperty (name );_eec .Cy =&cy ;_aeg .setProperty (_eec );};

// NewRelationship constructs a new relationship.
func NewRelationship ()Relationship {return Relationship {_dec .NewRelationship ()}};func (_ac CustomProperties )SetPropertyAsVstream (name string ,vstream *_fea .Vstream ){_aae :=_ac .getNewProperty (name );_aae .Vstream =vstream ;_ac .setProperty (_aae );};

// Path returns the path to an image file, if any.
func (_acd ImageRef )Path ()string {return _acd ._bdd .Path };

// SetModified sets the time that the document was modified.
func (_cdd CoreProperties )SetModified (t _gff .Time ){_cdd ._fde .Modified =_da (t ,"\u0064\u0063t\u0065\u0072\u006ds\u003a\u006d\u006f\u0064\u0069\u0066\u0069\u0065\u0064");};

// RelID returns the relationship ID.
func (_fe ImageRef )RelID ()string {return _fe ._fca };

// FindRIDForN returns the relationship ID for the i'th relationship of type t.
func (_fag Relationships )FindRIDForN (i int ,t string )string {for _ ,_dgc :=range _fag ._gacd .CT_Relationships .Relationship {if _dgc .TypeAttr ==t {if i ==0{return _dgc .IdAttr ;};i --;};};return "";};

// Target returns the target (path) of a relationship.
func (_aaf Relationship )Target ()string {return _aaf ._fad .TargetAttr };

// Type returns the type of a relationship.
func (_dbe Relationship )Type ()string {return _dbe ._fad .TypeAttr };const _eed =30;func _cca (_aaee *_bgbe .XSDAny )_gff .Time {if _aaee ==nil {return _gff .Time {};};_aceb ,_acb :=_gff .Parse (_aabd ,string (_aaee .Data ));if _acb !=nil {_bgbe .Log ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0074\u0069\u006d\u0065 \u0066\u0072\u006f\u006d\u0020\u0025\u0073\u003a\u0020\u0025\u0073",string (_aaee .Data ),_acb );};return _aceb ;};func (_a CustomProperties )setProperty (_bee *_cgb .CT_Property ){_gfef :=_a .getPropertyByName (*_bee .NameAttr );if _gfef ==nil {_a ._dcg .Property =append (_a ._dcg .Property ,_bee );}else {_bee .FmtidAttr =_gfef .FmtidAttr ;if _gfef .PidAttr ==0{_bee .PidAttr =_gfef .PidAttr ;};_bee .LinkTargetAttr =_gfef .LinkTargetAttr ;*_gfef =*_bee ;};};func (_ddb CustomProperties )SetPropertyAsI4 (name string ,i4 int32 ){_abdb :=_ddb .getNewProperty (name );_abdb .I4 =&i4 ;_ddb .setProperty (_abdb );};

// CopyRelationship copies the relationship.
func (_gc Relationships )CopyRelationship (idAttr string )(Relationship ,bool ){for _gdgb :=range _gc ._gacd .Relationship {if _gc ._gacd .Relationship [_gdgb ].IdAttr ==idAttr {_fg :=*_gc ._gacd .Relationship [_gdgb ];_ae :=len (_gc ._gacd .Relationship )+1;_gca :=map[string ]struct{}{};for _ ,_fba :=range _gc ._gacd .Relationship {_gca [_fba .IdAttr ]=struct{}{};};for _ ,_bfbg :=_gca [_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ae )];_bfbg ;_ ,_bfbg =_gca [_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ae )]{_ae ++;};_fg .IdAttr =_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ae );_gc ._gacd .Relationship =append (_gc ._gacd .Relationship ,&_fg );return Relationship {&_fg },true ;};};return Relationship {},false ;};func (_fb CustomProperties )SetPropertyAsOstream (name string ,ostream string ){_aab :=_fb .getNewProperty (name );_aab .Ostream =&ostream ;_fb .setProperty (_aab );};

// ContentTypes is the top level "[Content_Types].xml" in a zip package.
type ContentTypes struct{_bgfg *_bfe .Types };

// NewCoreProperties constructs a new CoreProperties.
func NewCoreProperties ()CoreProperties {return CoreProperties {_fde :_ce .NewCoreProperties ()}};

// SetDescription records the description of the document.
func (_gbef CoreProperties )SetDescription (s string ){if _gbef ._fde .Description ==nil {_gbef ._fde .Description =&_bgbe .XSDAny {XMLName :_gdb .Name {Local :"\u0064\u0063\u003a\u0064\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e"}};};_gbef ._fde .Description .Data =[]byte (s );};

// Relationships returns a slice of all of the relationships.
func (_bfbc Relationships )Relationships ()[]Relationship {_afe :=[]Relationship {};for _ ,_df :=range _bfbc ._gacd .Relationship {_afe =append (_afe ,Relationship {_df });};return _afe ;};

// SetApplication sets the name of the application that created the document.
func (_fec AppProperties )SetApplication (s string ){_fec ._bgd .Application =&s };

// EnsureDefault esnures that an extension and default content type exist,
// adding it if necessary.
func (_fbc ContentTypes )EnsureDefault (ext ,contentType string ){for _ ,_ed :=range _fbc ._bgfg .Default {if _ed .ExtensionAttr ==ext {_ed .ContentTypeAttr =contentType ;return ;};};_bg :=&_bfe .Default {};_bg .ContentTypeAttr =contentType ;_bg .ExtensionAttr =ext ;_fbc ._bgfg .Default =append (_fbc ._bgfg .Default ,_bg );};func (_agf CustomProperties )PropertiesList ()[]*_cgb .CT_Property {return _agf ._dcg .Property };

// NewTableStyles constructs a new TableStyles.
func NewTableStyles ()TableStyles {return TableStyles {_ee :_ffb .NewTblStyleLst ()}};func (_aga CustomProperties )SetPropertyAsUi8 (name string ,ui8 uint64 ){_cg :=_aga .getNewProperty (name );_cg .Ui8 =&ui8 ;_aga .setProperty (_cg );};func (_ace CustomProperties )SetPropertyAsUi2 (name string ,ui2 uint16 ){_def :=_ace .getNewProperty (name );_def .Ui2 =&ui2 ;_ace .setProperty (_def );};

// AddRelationship adds a relationship.
func (_cdga Relationships )AddRelationship (target ,ctype string )Relationship {if !_eabg .HasPrefix (ctype ,"\u0068t\u0074\u0070\u003a\u002f\u002f"){_bgbe .Log ("\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006es\u0068\u0069\u0070 t\u0079\u0070\u0065\u0020\u0025\u0073 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0077\u0069t\u0068\u0020\u0027\u0068\u0074\u0074\u0070\u003a/\u002f\u0027",ctype );};_gad :=_dec .NewRelationship ();_ba :=len (_cdga ._gacd .Relationship )+1;_fbe :=map[string ]struct{}{};for _ ,_bef :=range _cdga ._gacd .Relationship {_fbe [_bef .IdAttr ]=struct{}{};};for _ ,_eeac :=_fbe [_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ba )];_eeac ;_ ,_eeac =_fbe [_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ba )]{_ba ++;};_gad .IdAttr =_gbg .Sprintf ("\u0072\u0049\u0064%\u0064",_ba );_gad .TargetAttr =target ;_gad .TypeAttr =ctype ;_cdga ._gacd .Relationship =append (_cdga ._gacd .Relationship ,_gad );return Relationship {_gad };};func (_aaa CustomProperties )SetPropertyAsLpstr (name string ,lpstr string ){_bbdb :=_aaa .getNewProperty (name );_bbdb .Lpstr =&lpstr ;_aaa .setProperty (_bbdb );};func (_afa CustomProperties )getPropertyByName (_fd string )*_cgb .CT_Property {_eb :=_afa ._dcg .Property ;for _ ,_dgeg :=range _eb {if *_dgeg .NameAttr ==_fd {return _dgeg ;};};return nil ;};func (_cfaf CustomProperties )SetPropertyAsVector (name string ,vector *_fea .Vector ){_ddd :=_cfaf .getNewProperty (name );_ddd .Vector =vector ;_cfaf .setProperty (_ddd );};

// Description returns the description of the document
func (_f CoreProperties )Description ()string {if _f ._fde .Description !=nil {return string (_f ._fde .Description .Data );};return "";};

// SetLinksUpToDate sets the links up to date flag.
func (_ddeg AppProperties )SetLinksUpToDate (v bool ){_ddeg ._bgd .LinksUpToDate =_bgbe .Bool (v )};

// X returns the inner wrapped XML type.
func (_agg Relationship )X ()*_dec .Relationship {return _agg ._fad };

// AppProperties contains properties specific to the document and the
// application that created it.
type AppProperties struct{_bgd *_cddf .Properties };func (_cba CustomProperties )SetPropertyAsUi1 (name string ,ui1 uint8 ){_dfd :=_cba .getNewProperty (name );_dfd .Ui1 =&ui1 ;_cba .setProperty (_dfd );};

// MakeImageRef constructs an image reference which is a reference to a
// particular image file inside a document.  The same image can be used multiple
// times in a document by re-use the ImageRef.
func MakeImageRef (img Image ,d *DocBase ,rels Relationships )ImageRef {return ImageRef {_bdd :img ,_cgba :d ,_ddbc :rels };};func (_d CustomProperties )SetPropertyAsI1 (name string ,i1 int8 ){_efg :=_d .getNewProperty (name );_efg .I1 =&i1 ;_d .setProperty (_efg );};

// SetContentStatus records the content status of the document.
func (_cfe CoreProperties )SetContentStatus (s string ){_cfe ._fde .ContentStatus =&s };

// DefAttr returns the DefAttr property.
func (_dfc TableStyles )DefAttr ()string {return _dfc ._ee .DefAttr };

// ContentStatus returns the content status of the document (e.g. "Final", "Draft")
func (_dgf CoreProperties )ContentStatus ()string {if _dgf ._fde .ContentStatus !=nil {return *_dgf ._fde .ContentStatus ;};return "";};func (_gcb CustomProperties )SetPropertyAsBlob (name ,blob string ){_bgb :=_gcb .getNewProperty (name );_bgb .Blob =&blob ;_gcb .setProperty (_bgb );};

// X returns the inner wrapped XML type.
func (_gba CustomProperties )X ()*_cgb .Properties {return _gba ._dcg };