//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_bfeg "archive/zip";_bfgf "bytes";_ecbc "errors";_eeb "flag";_fae "fmt";_efb "github.com/unidoc/unioffice";_degb "github.com/unidoc/unioffice/color";_age "github.com/unidoc/unioffice/common";_abaf "github.com/unidoc/unioffice/common/license";_ebdb "github.com/unidoc/unioffice/measurement";_bfc "github.com/unidoc/unioffice/schema/soo/dml";_dafb "github.com/unidoc/unioffice/schema/soo/dml/picture";_agge "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ecad "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_bfba "github.com/unidoc/unioffice/schema/soo/wml";_egb "github.com/unidoc/unioffice/zippkg";_edbc "image";_bbd "image/jpeg";_fe "io";_eccg "io/ioutil";_fcbg "log";_dabbb "math/rand";_cfage "os";_fdc "path/filepath";_efacb "strings";_bgce "unicode";);

// MergeFields returns the list of all mail merge fields found in the document.
func (_fgdee Document )MergeFields ()[]string {_dfbe :=map[string ]struct{}{};for _ ,_fcb :=range _fgdee .mergeFields (){_dfbe [_fcb ._fdde ]=struct{}{};};_dacc :=[]string {};for _fefa :=range _dfbe {_dacc =append (_dacc ,_fefa );};return _dacc ;};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_bfba .NewCT_TblWidth ()}};

// RowProperties are the properties for a row within a table
type RowProperties struct{_eg *_bfba .CT_TrPr };

// Paragraphs returns the paragraphs defined in a footer.
func (_faa Footer )Paragraphs ()[]Paragraph {_agcad :=[]Paragraph {};for _ ,_def :=range _faa ._eafb .EG_ContentBlockContent {for _ ,_fbe :=range _def .P {_agcad =append (_agcad ,Paragraph {_faa ._dgee ,_fbe });};};for _ ,_dee :=range _faa .Tables (){for _ ,_ebg :=range _dee .Rows (){for _ ,_gaaab :=range _ebg .Cells (){_agcad =append (_agcad ,_gaaab .Paragraphs ()...);};};};return _agcad ;};

// Section is the beginning of a new section.
type Section struct{_dbac *Document ;_gggd *_bfba .CT_SectPr ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_dfgf TableBorders )SetRight (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_dfgf ._dgafc .Right =_bfba .NewCT_Border ();_fedc (_dfgf ._dgafc .Right ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_gcdf RunProperties )X ()*_bfba .CT_RPr {return _gcdf ._eece };const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// SetTop sets the top border to a specified type, color and thickness.
func (_ecef TableBorders )SetTop (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_ecef ._dgafc .Top =_bfba .NewCT_Border ();_fedc (_ecef ._dgafc .Top ,t ,c ,thickness );};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_bd *_bfba .CT_TblLook };

// Paragraphs returns the paragraphs defined in the cell.
func (_dcge Cell )Paragraphs ()[]Paragraph {_faf :=[]Paragraph {};for _ ,_aged :=range _dcge ._ccfb .EG_BlockLevelElts {for _ ,_gced :=range _aged .EG_ContentBlockContent {for _ ,_dgff :=range _gced .P {_faf =append (_faf ,Paragraph {_dcge ._cff ,_dgff });};};};return _faf ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_egfc Document )SetStrict (strict bool ){if strict {_egfc ._aca .ConformanceAttr =_agge .ST_ConformanceClassStrict ;}else {_egfc ._aca .ConformanceAttr =_agge .ST_ConformanceClassTransitional ;};};

// SetHighlight highlights text in a specified color.
func (_ebd RunProperties )SetHighlight (c _bfba .ST_HighlightColor ){_ebd ._eece .Highlight =_bfba .NewCT_Highlight ();_ebd ._eece .Highlight .ValAttr =c ;};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_abgdg Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_abgdg ._fgfd .UpdateFields =nil ;}else {_abgdg ._fgfd .UpdateFields =_bfba .NewCT_OnOff ();};};func _fedc (_decc *_bfba .CT_Border ,_gbcbd _bfba .ST_Border ,_bfeea _degb .Color ,_dfae _ebdb .Distance ){_decc .ValAttr =_gbcbd ;_decc .ColorAttr =&_bfba .ST_HexColor {};if _bfeea .IsAuto (){_decc .ColorAttr .ST_HexColorAuto =_bfba .ST_HexColorAutoAuto ;}else {_decc .ColorAttr .ST_HexColorRGB =_bfeea .AsRGBString ();};if _dfae !=_ebdb .Zero {_decc .SzAttr =_efb .Uint64 (uint64 (_dfae /_ebdb .Point *8));};};

// Clear clears the styes.
func (_aef Styles )Clear (){_aef ._cebd .DocDefaults =nil ;_aef ._cebd .LatentStyles =nil ;_aef ._cebd .Style =nil ;};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_agba ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_agba ._beb .ContextualSpacing =nil ;}else {_agba ._beb .ContextualSpacing =_bfba .NewCT_OnOff ();};};func (_fafg Endnote )content ()[]*_bfba .EG_ContentBlockContent {var _ade []*_bfba .EG_ContentBlockContent ;for _ ,_cabg :=range _fafg ._ege .EG_BlockLevelElts {_ade =append (_ade ,_cabg .EG_ContentBlockContent ...);};return _ade ;};

// SetThemeShade sets the shade based off the theme color.
func (_ddee Color )SetThemeShade (s uint8 ){_eabe :=_fae .Sprintf ("\u0025\u0030\u0032\u0078",s );_ddee ._dded .ThemeShadeAttr =&_eabe ;};

// X returns the inner wrapped XML type.
func (_cc *Document )X ()*_bfba .Document {return _cc ._aca };

// X returns the inner wrapped XML type.
func (_defcf Row )X ()*_bfba .CT_Row {return _defcf ._dcd };

// SetLinkedStyle sets the style that this style is linked to.
func (_fcad Style )SetLinkedStyle (name string ){if name ==""{_fcad ._bcdge .Link =nil ;}else {_fcad ._bcdge .Link =_bfba .NewCT_String ();_fcad ._bcdge .Link .ValAttr =name ;};};func (_fdfa Endnote )id ()int64 {return _fdfa ._ege .IdAttr };

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_fcee NumberingDefinition )AddLevel ()NumberingLevel {_gef :=_bfba .NewCT_Lvl ();_gef .Start =&_bfba .CT_DecimalNumber {ValAttr :1};_gef .IlvlAttr =int64 (len (_fcee ._dec .Lvl ));_fcee ._dec .Lvl =append (_fcee ._dec .Lvl ,_gef );return NumberingLevel {_gef };};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_fceb Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_fceb .ensurePPr ();if _fceb ._efa .PPr .NumPr ==nil {_fceb ._efa .PPr .NumPr =_bfba .NewCT_NumPr ();};_eebg :=_bfba .NewCT_DecimalNumber ();_ddfa :=int64 (-1);for _ ,_eac :=range _fceb ._efgb .Numbering ._fbcf .Num {if _eac .AbstractNumId !=nil &&_eac .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_ddfa =_eac .NumIdAttr ;};};if _ddfa ==-1{_dfcd :=_bfba .NewCT_Num ();_fceb ._efgb .Numbering ._fbcf .Num =append (_fceb ._efgb .Numbering ._fbcf .Num ,_dfcd );_dfcd .NumIdAttr =int64 (len (_fceb ._efgb .Numbering ._fbcf .Num ));_dfcd .AbstractNumId =_bfba .NewCT_DecimalNumber ();_dfcd .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_eebg .ValAttr =_ddfa ;_fceb ._efa .PPr .NumPr .NumId =_eebg ;};

// AddParagraph adds a paragraph to the table cell.
func (_bacb Cell )AddParagraph ()Paragraph {_gabe :=_bfba .NewEG_BlockLevelElts ();_bacb ._ccfb .EG_BlockLevelElts =append (_bacb ._ccfb .EG_BlockLevelElts ,_gabe );_bgc :=_bfba .NewEG_ContentBlockContent ();_gabe .EG_ContentBlockContent =append (_gabe .EG_ContentBlockContent ,_bgc );_dgfcc :=_bfba .NewCT_P ();_bgc .P =append (_bgc .P ,_dgfcc );return Paragraph {_bacb ._cff ,_dgfcc };};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_dffg ParagraphProperties )CharacterSpacingValue ()int64 {if _fadg :=_dffg ._ddd .RPr .Spacing ;_fadg !=nil {_bed :=_fadg .ValAttr ;if _bed .Int64 !=nil {return *_bed .Int64 ;};};return int64 (0);};

// RemoveParagraph removes a paragraph from a footer.
func (_aaga Header )RemoveParagraph (p Paragraph ){for _ ,_egcc :=range _aaga ._fbcb .EG_ContentBlockContent {for _eeeb ,_ba :=range _egcc .P {if _ba ==p ._efa {copy (_egcc .P [_eeeb :],_egcc .P [_eeeb +1:]);_egcc .P =_egcc .P [0:len (_egcc .P )-1];return ;};};};};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_aeg CellBorders )SetInsideVertical (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_aeg ._ggff .InsideV =_bfba .NewCT_Border ();_fedc (_aeg ._ggff .InsideV ,t ,c ,thickness );};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_fbab ParagraphProperties )Style ()string {if _fbab ._ddd .PStyle !=nil {return _fbab ._ddd .PStyle .ValAttr ;};return "";};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_dde RunProperties )ComplexSizeMeasure ()string {if _bgca :=_dde ._eece .SzCs ;_bgca !=nil {_cgdb :=_bgca .ValAttr ;if _cgdb .ST_PositiveUniversalMeasure !=nil {return *_cgdb .ST_PositiveUniversalMeasure ;};};return "";};func (_bbdg *Document )InsertTableAfter (relativeTo Paragraph )Table {return _bbdg .insertTable (relativeTo ,false );};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_bfgc TableStyleProperties )SetTableIndent (ind _ebdb .Distance ){_bfgc ._fdce .TblInd =_bfba .NewCT_TblWidth ();_bfgc ._fdce .TblInd .TypeAttr =_bfba .ST_TblWidthDxa ;_bfgc ._fdce .TblInd .WAttr =&_bfba .ST_MeasurementOrPercent {};_bfgc ._fdce .TblInd .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_bfgc ._fdce .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (ind /_ebdb .Dxa ));};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_gcagg Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_gcagg .ensurePPr ();if _gcagg ._efa .PPr .NumPr ==nil {_gcagg ._efa .PPr .NumPr =_bfba .NewCT_NumPr ();};_cega :=_bfba .NewCT_DecimalNumber ();_cega .ValAttr =int64 (abstractNumberID );_gcagg ._efa .PPr .NumPr .NumId =_cega ;};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_efgf NumberingDefinition )MultiLevelType ()_bfba .ST_MultiLevelType {if _efgf ._dec .MultiLevelType !=nil {return _efgf ._dec .MultiLevelType .ValAttr ;}else {return _bfba .ST_MultiLevelTypeUnset ;};};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_dfab AnchoredDrawing )SetTextWrapSquare (t _bfba .WdST_WrapText ){_dfab ._fdgd .Choice =&_bfba .WdEG_WrapTypeChoice {};_dfab ._fdgd .Choice .WrapSquare =_bfba .NewWdCT_WrapSquare ();_dfab ._fdgd .Choice .WrapSquare .WrapTextAttr =t ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_ggbg *Document )FormFields ()[]FormField {_feee :=[]FormField {};for _ ,_cgd :=range _ggbg .Paragraphs (){_gedg :=_cgd .Runs ();for _dddd ,_dbef :=range _gedg {for _ ,_gbbe :=range _dbef ._gcf .EG_RunInnerContent {if _gbbe .FldChar ==nil ||_gbbe .FldChar .FfData ==nil {continue ;};if _gbbe .FldChar .FldCharTypeAttr ==_bfba .ST_FldCharTypeBegin {if len (_gbbe .FldChar .FfData .Name )==0||_gbbe .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_efea :=FormField {_agc :_gbbe .FldChar .FfData };if _gbbe .FldChar .FfData .TextInput !=nil {for _ddb :=_dddd +1;_ddb < len (_gedg )-1;_ddb ++{if len (_gedg [_ddb ]._gcf .EG_RunInnerContent )==0{continue ;};_bdgb :=_gedg [_ddb ]._gcf .EG_RunInnerContent [0];if _bdgb .FldChar !=nil &&_bdgb .FldChar .FldCharTypeAttr ==_bfba .ST_FldCharTypeSeparate {if len (_gedg [_ddb +1]._gcf .EG_RunInnerContent )==0{continue ;};if _gedg [_ddb +1]._gcf .EG_RunInnerContent [0].FldChar ==nil {_efea ._fgcf =_gedg [_ddb +1]._gcf .EG_RunInnerContent [0];break ;};};};};_feee =append (_feee ,_efea );};};};};return _feee ;};

// AddParagraph adds a new paragraph to the document body.
func (_bedb *Document )AddParagraph ()Paragraph {_becg :=_bfba .NewEG_BlockLevelElts ();_bedb ._aca .Body .EG_BlockLevelElts =append (_bedb ._aca .Body .EG_BlockLevelElts ,_becg );_eaea :=_bfba .NewEG_ContentBlockContent ();_becg .EG_ContentBlockContent =append (_becg .EG_ContentBlockContent ,_eaea );_a :=_bfba .NewCT_P ();_eaea .P =append (_eaea .P ,_a );return Paragraph {_bedb ,_a };};

// IsBold returns true if the run has been set to bold.
func (_ccf RunProperties )IsBold ()bool {return _ccf .BoldValue ()==OnOffValueOn };

// X returns the inner wrapped XML type.
func (_ecgd TableWidth )X ()*_bfba .CT_TblWidth {return _ecgd ._gag };

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_eaab Paragraph )Style ()string {if _eaab ._efa .PPr !=nil &&_eaab ._efa .PPr .PStyle !=nil {return _eaab ._efa .PPr .PStyle .ValAttr ;};return "";};

// AddCell adds a cell to a row and returns it
func (_gbfac Row )AddCell ()Cell {_abgd :=_bfba .NewEG_ContentCellContent ();_gbfac ._dcd .EG_ContentCellContent =append (_gbfac ._dcd .EG_ContentCellContent ,_abgd );_fdd :=_bfba .NewCT_Tc ();_abgd .Tc =append (_abgd .Tc ,_fdd );return Cell {_gbfac ._adge ,_fdd };};

// AddParagraph adds a paragraph to the footer.
func (_eaef Footer )AddParagraph ()Paragraph {_feec :=_bfba .NewEG_ContentBlockContent ();_eaef ._eafb .EG_ContentBlockContent =append (_eaef ._eafb .EG_ContentBlockContent ,_feec );_agbd :=_bfba .NewCT_P ();_feec .P =append (_feec .P ,_agbd );return Paragraph {_eaef ._dgee ,_agbd };};func _dcb (_eagf *_bfba .CT_OnOff )OnOffValue {if _eagf ==nil {return OnOffValueUnset ;};if _eagf .ValAttr !=nil &&_eagf .ValAttr .Bool !=nil &&*_eagf .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_gfb HyperLink )SetTargetByRef (link _age .Hyperlink ){_gfb ._cgcb .IdAttr =_efb .String (_age .Relationship (link ).ID ());_gfb ._cgcb .AnchorAttr =nil ;};

// AddText adds tet to a run.
func (_acaa Run )AddText (s string ){_dafd :=_bfba .NewEG_RunInnerContent ();_acaa ._gcf .EG_RunInnerContent =append (_acaa ._gcf .EG_RunInnerContent ,_dafd );_dafd .T =_bfba .NewCT_Text ();if _efb .NeedsSpacePreserve (s ){_cffe :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dafd .T .SpaceAttr =&_cffe ;};_dafd .T .Content =s ;};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_fdcf RunProperties )BoldValue ()OnOffValue {return _dcb (_fdcf ._eece .B )};

// Endnotes returns the endnotes defined in the document.
func (_geac *Document )Endnotes ()[]Endnote {_efcd :=[]Endnote {};for _ ,_egg :=range _geac ._fdgb .CT_Endnotes .Endnote {_efcd =append (_efcd ,Endnote {_geac ,_egg });};return _efcd ;};

// SetItalic sets the run to italic.
func (_bda RunProperties )SetItalic (b bool ){if !b {_bda ._eece .I =nil ;_bda ._eece .ICs =nil ;}else {_bda ._eece .I =_bfba .NewCT_OnOff ();_bda ._eece .ICs =_bfba .NewCT_OnOff ();};};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_adec NumberingDefinition )AbstractNumberID ()int64 {return _adec ._dec .AbstractNumIdAttr };

// SizeValue returns the value of run font size in points.
func (_agcb RunProperties )SizeValue ()float64 {if _efg :=_agcb ._eece .Sz ;_efg !=nil {_fdgdc :=_efg .ValAttr ;if _fdgdc .ST_UnsignedDecimalNumber !=nil {return float64 (*_fdgdc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// AddTable adds a new table to the document body.
func (_gbaba *Document )AddTable ()Table {_efc :=_bfba .NewEG_BlockLevelElts ();_gbaba ._aca .Body .EG_BlockLevelElts =append (_gbaba ._aca .Body .EG_BlockLevelElts ,_efc );_gcge :=_bfba .NewEG_ContentBlockContent ();_efc .EG_ContentBlockContent =append (_efc .EG_ContentBlockContent ,_gcge );_bfee :=_bfba .NewCT_Tbl ();_gcge .Tbl =append (_gcge .Tbl ,_bfee );return Table {_gbaba ,_bfee };};

// Bold returns true if paragraph font is bold.
func (_efag ParagraphProperties )Bold ()bool {_eaeeg :=_efag ._ddd .RPr ;return _bdg (_eaeeg .B )||_bdg (_eaeeg .BCs );};

// Properties returns the table properties.
func (_bcaa Table )Properties ()TableProperties {if _bcaa ._fccd .TblPr ==nil {_bcaa ._fccd .TblPr =_bfba .NewCT_TblPr ();};return TableProperties {_bcaa ._fccd .TblPr };};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_fce TableLook )SetFirstRow (on bool ){if !on {_fce ._bd .FirstRowAttr =&_agge .ST_OnOff {};_fce ._bd .FirstRowAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;}else {_fce ._bd .FirstRowAttr =&_agge .ST_OnOff {};_fce ._bd .FirstRowAttr .ST_OnOff1 =_agge .ST_OnOff1On ;};};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_ggcc AnchoredDrawing )SetAlignment (h _bfba .WdST_AlignH ,v _bfba .WdST_AlignV ){_ggcc .SetHAlignment (h );_ggcc .SetVAlignment (v );};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_febd ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_febd ._ddd .PageBreakBefore =nil ;}else {_febd ._ddd .PageBreakBefore =_bfba .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_cedg NumberingDefinition )X ()*_bfba .CT_AbstractNum {return _cedg ._dec };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bea Footer )AddImage (i _age .Image )(_age .ImageRef ,error ){var _ddf _age .Relationships ;for _bcad ,_bacg :=range _bea ._dgee ._accc {if _bacg ==_bea ._eafb {_ddf =_bea ._dgee ._ada [_bcad ];};};_bdbab :=_age .MakeImageRef (i ,&_bea ._dgee .DocBase ,_ddf );if i .Data ==nil &&i .Path ==""{return _bdbab ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bdbab ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _bdbab ,_ecbc .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_bea ._dgee .Images =append (_bea ._dgee .Images ,_bdbab );_befg :=_fae .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_bea ._dgee .Images ),i .Format );_gcbg :=_ddf .AddRelationship (_befg ,_efb .ImageType );_bdbab .SetRelID (_gcbg .X ().IdAttr );return _bdbab ,nil ;};

// X returns the inner wrapped XML type.
func (_fbga ParagraphProperties )X ()*_bfba .CT_PPr {return _fbga ._ddd };

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_ae ParagraphProperties )AddTabStop (position _ebdb .Distance ,justificaton _bfba .ST_TabJc ,leader _bfba .ST_TabTlc ){if _ae ._ddd .Tabs ==nil {_ae ._ddd .Tabs =_bfba .NewCT_Tabs ();};_cfac :=_bfba .NewCT_TabStop ();_cfac .LeaderAttr =leader ;_cfac .ValAttr =justificaton ;_cfac .PosAttr .Int64 =_efb .Int64 (int64 (position /_ebdb .Twips ));_ae ._ddd .Tabs .Tab =append (_ae ._ddd .Tabs .Tab ,_cfac );};

// X returns the inner wrapped XML type.
func (_fgac NumberingLevel )X ()*_bfba .CT_Lvl {return _fgac ._eae };

// Borders allows controlling individual cell borders.
func (_ceca CellProperties )Borders ()CellBorders {if _ceca ._ecfa .TcBorders ==nil {_ceca ._ecfa .TcBorders =_bfba .NewCT_TcBorders ();};return CellBorders {_ceca ._ecfa .TcBorders };};

// Definitions returns the defined numbering definitions.
func (_geab Numbering )Definitions ()[]NumberingDefinition {_dbcd :=[]NumberingDefinition {};for _ ,_dccg :=range _geab ._fbcf .AbstractNum {_dbcd =append (_dbcd ,NumberingDefinition {_dccg });};return _dbcd ;};

// Underline returns the type of run underline.
func (_fc RunProperties )Underline ()_bfba .ST_Underline {if _gcaga :=_fc ._eece .U ;_gcaga !=nil {return _gcaga .ValAttr ;};return 0;};

// Clear clears all content within a footer
func (_adf Footer )Clear (){_adf ._eafb .EG_ContentBlockContent =nil };

// SetEmboss sets the run to embossed text.
func (_dabb RunProperties )SetEmboss (b bool ){if !b {_dabb ._eece .Emboss =nil ;}else {_dabb ._eece .Emboss =_bfba .NewCT_OnOff ();};};

// RunProperties returns the run style properties.
func (_dedeb Style )RunProperties ()RunProperties {if _dedeb ._bcdge .RPr ==nil {_dedeb ._bcdge .RPr =_bfba .NewCT_RPr ();};return RunProperties {_dedeb ._bcdge .RPr };};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// SetStartIndent controls the start indentation.
func (_ebag ParagraphProperties )SetStartIndent (m _ebdb .Distance ){if _ebag ._ddd .Ind ==nil {_ebag ._ddd .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_ebag ._ddd .Ind .StartAttr =nil ;}else {_ebag ._ddd .Ind .StartAttr =&_bfba .ST_SignedTwipsMeasure {};_ebag ._ddd .Ind .StartAttr .Int64 =_efb .Int64 (int64 (m /_ebdb .Twips ));};};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_ddff Document )SetConformance (conformanceAttr _agge .ST_ConformanceClass ){_ddff ._aca .ConformanceAttr =conformanceAttr ;};

// SetWidthAuto sets the the table width to automatic.
func (_ceebf TableProperties )SetWidthAuto (){_ceebf ._eaae .TblW =_bfba .NewCT_TblWidth ();_ceebf ._eaae .TblW .TypeAttr =_bfba .ST_TblWidthAuto ;};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_dbbb ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_dbbb ._beb .KeepNext =nil ;}else {_dbbb ._beb .KeepNext =_bfba .NewCT_OnOff ();};};

// Emboss returns true if paragraph emboss is on.
func (_cebe ParagraphProperties )Emboss ()bool {return _bdg (_cebe ._ddd .RPr .Emboss )};

// Type returns the type of the field.
func (_edbce FormField )Type ()FormFieldType {if _edbce ._agc .TextInput !=nil {return FormFieldTypeText ;}else if _edbce ._agc .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _edbce ._agc .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};

// X returns the inner wrapped XML type.
func (_dbgc Table )X ()*_bfba .CT_Tbl {return _dbgc ._fccd };

// Footnote is an individual footnote reference within the document.
type Footnote struct{_ccdd *Document ;_aecf *_bfba .CT_FtnEdn ;};

// AddField adds a field (automatically computed text) to the document.
func (_fge Run )AddField (code string ){_fge .AddFieldWithFormatting (code ,"",true )};

// Underline returns the type of paragraph underline.
func (_deccd ParagraphProperties )Underline ()_bfba .ST_Underline {if _cbfce :=_deccd ._ddd .RPr .U ;_cbfce !=nil {return _cbfce .ValAttr ;};return 0;};

// AddTabStop adds a tab stop to the paragraph.
func (_fbc ParagraphStyleProperties )AddTabStop (position _ebdb .Distance ,justificaton _bfba .ST_TabJc ,leader _bfba .ST_TabTlc ){if _fbc ._beb .Tabs ==nil {_fbc ._beb .Tabs =_bfba .NewCT_Tabs ();};_ebcdc :=_bfba .NewCT_TabStop ();_ebcdc .LeaderAttr =leader ;_ebcdc .ValAttr =justificaton ;_ebcdc .PosAttr .Int64 =_efb .Int64 (int64 (position /_ebdb .Twips ));_fbc ._beb .Tabs .Tab =append (_fbc ._beb .Tabs .Tab ,_ebcdc );};

// Caps returns true if run font is capitalized.
func (_ced RunProperties )Caps ()bool {return _bdg (_ced ._eece .Caps )};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_cff *Document ;_ccfb *_bfba .CT_Tc ;};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_caeg *_bfba .CT_Spacing };func _gadf (_ebca *_bfba .CT_TblWidth ,_ddae float64 ){_ebca .TypeAttr =_bfba .ST_TblWidthPct ;_ebca .WAttr =&_bfba .ST_MeasurementOrPercent {};_ebca .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_ebca .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (_ddae *50));};

// Emboss returns true if run emboss is on.
func (_affd RunProperties )Emboss ()bool {return _bdg (_affd ._eece .Emboss )};func (_abg Styles )initializeStyleDefaults (){_eacb :=_abg .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_bfba .ST_StyleTypeParagraph ,true );_eacb .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_eacb .SetPrimaryStyle (true );_dgaf :=_abg .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_bfba .ST_StyleTypeCharacter ,true );_dgaf .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_dgaf .SetUISortOrder (1);_dgaf .SetSemiHidden (true );_dgaf .SetUnhideWhenUsed (true );_gdgb :=_abg .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_bfba .ST_StyleTypeCharacter ,false );_gdgb .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_gdgb .SetBasedOn (_dgaf .StyleID ());_gdgb .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_gdgb .SetUISortOrder (10);_gdgb .RunProperties ().Fonts ().SetASCIITheme (_bfba .ST_ThemeMajorAscii );_gdgb .RunProperties ().Fonts ().SetEastAsiaTheme (_bfba .ST_ThemeMajorEastAsia );_gdgb .RunProperties ().Fonts ().SetHANSITheme (_bfba .ST_ThemeMajorHAnsi );_gdgb .RunProperties ().Fonts ().SetCSTheme (_bfba .ST_ThemeMajorBidi );_gdgb .RunProperties ().SetSize (28*_ebdb .Point );_gdgb .RunProperties ().SetKerning (14*_ebdb .Point );_gdgb .RunProperties ().SetCharacterSpacing (-10*_ebdb .Twips );_ccg :=_abg .AddStyle ("\u0054\u0069\u0074l\u0065",_bfba .ST_StyleTypeParagraph ,false );_ccg .SetName ("\u0054\u0069\u0074l\u0065");_ccg .SetBasedOn (_eacb .StyleID ());_ccg .SetNextStyle (_eacb .StyleID ());_ccg .SetLinkedStyle (_gdgb .StyleID ());_ccg .SetUISortOrder (10);_ccg .SetPrimaryStyle (true );_ccg .ParagraphProperties ().SetContextualSpacing (true );_ccg .RunProperties ().Fonts ().SetASCIITheme (_bfba .ST_ThemeMajorAscii );_ccg .RunProperties ().Fonts ().SetEastAsiaTheme (_bfba .ST_ThemeMajorEastAsia );_ccg .RunProperties ().Fonts ().SetHANSITheme (_bfba .ST_ThemeMajorHAnsi );_ccg .RunProperties ().Fonts ().SetCSTheme (_bfba .ST_ThemeMajorBidi );_ccg .RunProperties ().SetSize (28*_ebdb .Point );_ccg .RunProperties ().SetKerning (14*_ebdb .Point );_ccg .RunProperties ().SetCharacterSpacing (-10*_ebdb .Twips );_gedec :=_abg .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_bfba .ST_StyleTypeTable ,false );_gedec .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_gedec .SetUISortOrder (99);_gedec .SetSemiHidden (true );_gedec .SetUnhideWhenUsed (true );_gedec .X ().TblPr =_bfba .NewCT_TblPrBase ();_bged :=NewTableWidth ();_gedec .X ().TblPr .TblInd =_bged .X ();_bged .SetValue (0*_ebdb .Dxa );_gedec .X ().TblPr .TblCellMar =_bfba .NewCT_TblCellMar ();_bged =NewTableWidth ();_gedec .X ().TblPr .TblCellMar .Top =_bged .X ();_bged .SetValue (0*_ebdb .Dxa );_bged =NewTableWidth ();_gedec .X ().TblPr .TblCellMar .Bottom =_bged .X ();_bged .SetValue (0*_ebdb .Dxa );_bged =NewTableWidth ();_gedec .X ().TblPr .TblCellMar .Left =_bged .X ();_bged .SetValue (108*_ebdb .Dxa );_bged =NewTableWidth ();_gedec .X ().TblPr .TblCellMar .Right =_bged .X ();_bged .SetValue (108*_ebdb .Dxa );_ebfg :=_abg .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_bfba .ST_StyleTypeNumbering ,false );_ebfg .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_ebfg .SetUISortOrder (1);_ebfg .SetSemiHidden (true );_ebfg .SetUnhideWhenUsed (true );_bdcg :=[]_ebdb .Distance {16,13,12,11,11,11,11,11,11};_dgfc :=[]_ebdb .Distance {240,40,40,40,40,40,40,40,40};for _adccf :=0;_adccf < 9;_adccf ++{_da :=_fae .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_adccf +1);_dagg :=_abg .AddStyle (_da +"\u0043\u0068\u0061\u0072",_bfba .ST_StyleTypeCharacter ,false );_dagg .SetName (_fae .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_adccf +1));_dagg .SetBasedOn (_dgaf .StyleID ());_dagg .SetLinkedStyle (_da );_dagg .SetUISortOrder (9+_adccf );_dagg .RunProperties ().SetSize (_bdcg [_adccf ]*_ebdb .Point );_efga :=_abg .AddStyle (_da ,_bfba .ST_StyleTypeParagraph ,false );_efga .SetName (_fae .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_adccf +1));_efga .SetNextStyle (_eacb .StyleID ());_efga .SetLinkedStyle (_efga .StyleID ());_efga .SetUISortOrder (9+_adccf );_efga .SetPrimaryStyle (true );_efga .ParagraphProperties ().SetKeepNext (true );_efga .ParagraphProperties ().SetSpacing (_dgfc [_adccf ]*_ebdb .Twips ,0);_efga .ParagraphProperties ().SetOutlineLevel (_adccf );_efga .RunProperties ().SetSize (_bdcg [_adccf ]*_ebdb .Point );};};

// SetStrikeThrough sets the run to strike-through.
func (_ffcc RunProperties )SetStrikeThrough (b bool ){if !b {_ffcc ._eece .Strike =nil ;}else {_ffcc ._eece .Strike =_bfba .NewCT_OnOff ();};};

// SetFormat sets the numbering format.
func (_ebcd NumberingLevel )SetFormat (f _bfba .ST_NumberFormat ){if _ebcd ._eae .NumFmt ==nil {_ebcd ._eae .NumFmt =_bfba .NewCT_NumFmt ();};_ebcd ._eae .NumFmt .ValAttr =f ;};

// X returns the inner wrapped XML type.
func (_ceeb Numbering )X ()*_bfba .Numbering {return _ceeb ._fbcf };

// SetTopPct sets the cell top margin
func (_fbb CellMargins )SetTopPct (pct float64 ){_fbb ._dfcc .Top =_bfba .NewCT_TblWidth ();_gadf (_fbb ._dfcc .Top ,pct );};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dbgf ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_dbgf ._ddd .KeepLines =nil ;}else {_dbgf ._ddd .KeepLines =_bfba .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_ffc TableStyleProperties )X ()*_bfba .CT_TblPrBase {return _ffc ._fdce };

// RunProperties returns the run properties controlling text formatting within the table.
func (_gbgb TableConditionalFormatting )RunProperties ()RunProperties {if _gbgb ._acb .RPr ==nil {_gbgb ._acb .RPr =_bfba .NewCT_RPr ();};return RunProperties {_gbgb ._acb .RPr };};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to dispay on a separate page.
func (_dedb ParagraphProperties )SetWindowControl (b bool ){if !b {_dedb ._ddd .WidowControl =nil ;}else {_dedb ._ddd .WidowControl =_bfba .NewCT_OnOff ();};};

// SetASCIITheme sets the font ASCII Theme.
func (_acbf Fonts )SetASCIITheme (t _bfba .ST_Theme ){_acbf ._cdgg .AsciiThemeAttr =t };

// SetBasedOn sets the style that this style is based on.
func (_eaac Style )SetBasedOn (name string ){if name ==""{_eaac ._bcdge .BasedOn =nil ;}else {_eaac ._bcdge .BasedOn =_bfba .NewCT_String ();_eaac ._bcdge .BasedOn .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_abae InlineDrawing )X ()*_bfba .WdInline {return _abae ._cgbef };

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_dgd Document )AddHyperlink (url string )_age .Hyperlink {return _dgd ._dbg .AddHyperlink (url )};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_eaa Paragraph )AddHyperLink ()HyperLink {_agbf :=_bfba .NewEG_PContent ();_eaa ._efa .EG_PContent =append (_eaa ._efa .EG_PContent ,_agbf );_agbf .Hyperlink =_bfba .NewCT_Hyperlink ();return HyperLink {_eaa ._efgb ,_agbf .Hyperlink };};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_aedd :=_bfba .NewSettings ();_aedd .Compat =_bfba .NewCT_Compat ();_edbe :=_bfba .NewCT_CompatSetting ();_edbe .NameAttr =_efb .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_edbe .UriAttr =_efb .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_edbe .ValAttr =_efb .String ("\u0031\u0035");_aedd .Compat .CompatSetting =append (_aedd .Compat .CompatSetting ,_edbe );return Settings {_aedd };};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_gcdga Paragraph )SetStyle (s string ){_gcdga .ensurePPr ();if s ==""{_gcdga ._efa .PPr .PStyle =nil ;}else {_gcdga ._efa .PPr .PStyle =_bfba .NewCT_String ();_gcdga ._efa .PPr .PStyle .ValAttr =s ;};};

// Clear resets the numbering.
func (_abec Numbering )Clear (){_abec ._fbcf .AbstractNum =nil ;_abec ._fbcf .Num =nil ;_abec ._fbcf .NumIdMacAtCleanup =nil ;_abec ._fbcf .NumPicBullet =nil ;};func _bdg (_dbdf *_bfba .CT_OnOff )bool {return _dbdf !=nil };

// SaveToFile writes the document out to a file.
func (_cbeg *Document )SaveToFile (path string )error {_gadb ,_defa :=_cfage .Create (path );if _defa !=nil {return _defa ;};defer _gadb .Close ();return _cbeg .Save (_gadb );};

// Row is a row within a table within a document.
type Row struct{_adge *Document ;_dcd *_bfba .CT_Row ;};

// SetRight sets the cell right margin
func (_bbc CellMargins )SetRight (d _ebdb .Distance ){_bbc ._dfcc .Right =_bfba .NewCT_TblWidth ();_gcbb (_bbc ._dfcc .Right ,d );};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_baa AnchoredDrawing )SetYOffset (y _ebdb .Distance ){_baa ._fdgd .PositionV .Choice =&_bfba .WdCT_PosVChoice {};_baa ._fdgd .PositionV .Choice .PosOffset =_efb .Int32 (int32 (y /_ebdb .EMU ));};

// DoubleStrike returns true if paragraph is double striked.
func (_fgb ParagraphProperties )DoubleStrike ()bool {return _bdg (_fgb ._ddd .RPr .Dstrike )};

// AddPageBreak adds a page break to a run.
func (_gda Run )AddPageBreak (){_affa :=_gda .newIC ();_affa .Br =_bfba .NewCT_Br ();_affa .Br .TypeAttr =_bfba .ST_BrTypePage ;};

// Read reads a document from an io.Reader.
func Read (r _fe .ReaderAt ,size int64 )(*Document ,error ){_cdbe :=New ();_cdbe .Numbering ._fbcf =nil ;_ggcd ,_fab :=_eccg .TempDir ("","g\u006f\u006f\u0078\u006d\u006c\u002d\u0064\u006f\u0063\u0078");if _fab !=nil {return nil ,_fab ;};_cdbe .TmpPath =_ggcd ;_bgf ,_fab :=_bfeg .NewReader (r ,size );if _fab !=nil {return nil ,_fae .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_fab );};_ecge :=[]*_bfeg .File {};_ecge =append (_ecge ,_bgf .File ...);_bdff :=false ;for _ ,_ebc :=range _ecge {if _ebc .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_bdff =true ;break ;};};if _bdff {_cdbe .createCustomProperties ();};_bae :=_cdbe ._aca .ConformanceAttr ;_ggcce :=_egb .DecodeMap {};_ggcce .SetOnNewRelationshipFunc (_cdbe .onNewRelationship );_ggcce .AddTarget (_efb .ContentTypesFilename ,_cdbe .ContentTypes .X (),"",0);_ggcce .AddTarget (_efb .BaseRelsFilename ,_cdbe .Rels .X (),"",0);if _ddffe :=_ggcce .Decode (_ecge );_ddffe !=nil {return nil ,_ddffe ;};_cdbe ._aca .ConformanceAttr =_bae ;for _ ,_fec :=range _ecge {if _fec ==nil {continue ;};if _cfcf :=_cdbe .AddExtraFileFromZip (_fec );_cfcf !=nil {return nil ,_cfcf ;};};if _bdff {_bgaed :=false ;for _ ,_bcc :=range _cdbe .Rels .X ().Relationship {if _bcc .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_bgaed =true ;break ;};};if !_bgaed {_cdbe .addCustomRelationships ();};};return _cdbe ,nil ;};func (_cgbe Styles )initializeDocDefaults (){_cgbe ._cebd .DocDefaults =_bfba .NewCT_DocDefaults ();_cgbe ._cebd .DocDefaults .RPrDefault =_bfba .NewCT_RPrDefault ();_cgbe ._cebd .DocDefaults .RPrDefault .RPr =_bfba .NewCT_RPr ();_gcca :=RunProperties {_cgbe ._cebd .DocDefaults .RPrDefault .RPr };_gcca .SetSize (12*_ebdb .Point );_gcca .Fonts ().SetASCIITheme (_bfba .ST_ThemeMajorAscii );_gcca .Fonts ().SetEastAsiaTheme (_bfba .ST_ThemeMajorEastAsia );_gcca .Fonts ().SetHANSITheme (_bfba .ST_ThemeMajorHAnsi );_gcca .Fonts ().SetCSTheme (_bfba .ST_ThemeMajorBidi );_gcca .X ().Lang =_bfba .NewCT_Language ();_gcca .X ().Lang .ValAttr =_efb .String ("\u0065\u006e\u002dU\u0053");_gcca .X ().Lang .EastAsiaAttr =_efb .String ("\u0065\u006e\u002dU\u0053");_gcca .X ().Lang .BidiAttr =_efb .String ("\u0061\u0072\u002dS\u0041");_cgbe ._cebd .DocDefaults .PPrDefault =_bfba .NewCT_PPrDefault ();};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_bdbabb Footer )Index ()int {for _cgef ,_bge :=range _bdbabb ._dgee ._accc {if _bge ==_bdbabb ._eafb {return _cgef ;};};return -1;};

// AddBreak adds a line break to a run.
func (_ggc Run )AddBreak (){_fdcff :=_ggc .newIC ();_fdcff .Br =_bfba .NewCT_Br ()};

// RunProperties controls run styling properties
type RunProperties struct{_eece *_bfba .CT_RPr };

// X returns the inner wrapped XML type.
func (_efeag AnchoredDrawing )X ()*_bfba .WdAnchor {return _efeag ._fdgd };func (_bbda Footnote )id ()int64 {return _bbda ._aecf .IdAttr };

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_dcbfd ParagraphProperties )SetHangingIndent (m _ebdb .Distance ){if _dcbfd ._ddd .Ind ==nil {_dcbfd ._ddd .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_dcbfd ._ddd .Ind .HangingAttr =nil ;}else {_dcbfd ._ddd .Ind .HangingAttr =&_agge .ST_TwipsMeasure {};_dcbfd ._ddd .Ind .HangingAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (m /_ebdb .Twips ));};};func (_gdca Footnote )content ()[]*_bfba .EG_ContentBlockContent {var _fccac []*_bfba .EG_ContentBlockContent ;for _ ,_baed :=range _gdca ._aecf .EG_BlockLevelElts {_fccac =append (_fccac ,_baed .EG_ContentBlockContent ...);};return _fccac ;};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_edf Run )ClearContent (){_edf ._gcf .EG_RunInnerContent =nil };

// X returns the inner wrapped type
func (_gaae CellBorders )X ()*_bfba .CT_TcBorders {return _gaae ._ggff };

// SetText sets the text to be used in bullet mode.
func (_fdga NumberingLevel )SetText (t string ){if t ==""{_fdga ._eae .LvlText =nil ;}else {_fdga ._eae .LvlText =_bfba .NewCT_LevelText ();_fdga ._eae .LvlText .ValAttr =_efb .String (t );};};

// VerticalAlign returns the value of paragraph vertical align.
func (_cd ParagraphProperties )VerticalAlignment ()_agge .ST_VerticalAlignRun {if _dbbc :=_cd ._ddd .RPr .VertAlign ;_dbbc !=nil {return _dbbc .ValAttr ;};return 0;};

// SetBottom sets the cell bottom margin
func (_fgcff CellMargins )SetBottom (d _ebdb .Distance ){_fgcff ._dfcc .Bottom =_bfba .NewCT_TblWidth ();_gcbb (_fgcff ._dfcc .Bottom ,d );};

// SetWidth sets the table with to a specified width.
func (_bga TableProperties )SetWidth (d _ebdb .Distance ){_bga ._eaae .TblW =_bfba .NewCT_TblWidth ();_bga ._eaae .TblW .TypeAttr =_bfba .ST_TblWidthDxa ;_bga ._eaae .TblW .WAttr =&_bfba .ST_MeasurementOrPercent {};_bga ._eaae .TblW .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_bga ._eaae .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (d /_ebdb .Twips ));};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_dddg *Document ;_fafb *_bfba .CT_SdtBlock ;};

// Name returns the name of the field.
func (_aaef FormField )Name ()string {return *_aaef ._agc .Name [0].ValAttr };

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_db *Document )AddHeader ()Header {_bdgf :=_bfba .NewHdr ();_db ._bafc =append (_db ._bafc ,_bdgf );_cfgc :=_fae .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_db ._bafc ));_db ._dbg .AddRelationship (_cfgc ,_efb .HeaderType );_db .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cfgc ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_db ._gagb =append (_db ._gagb ,_age .NewRelationships ());return Header {_db ,_bdgf };};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_dgafc *_bfba .CT_TblBorders };

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_bbdae TableLook )SetLastColumn (on bool ){if !on {_bbdae ._bd .LastColumnAttr =&_agge .ST_OnOff {};_bbdae ._bd .LastColumnAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;}else {_bbdae ._bd .LastColumnAttr =&_agge .ST_OnOff {};_bbdae ._bd .LastColumnAttr .ST_OnOff1 =_agge .ST_OnOff1On ;};};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_ccb Style )TableConditionalFormatting (typ _bfba .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_gbfa :=range _ccb ._bcdge .TblStylePr {if _gbfa .TypeAttr ==typ {return TableConditionalFormatting {_gbfa };};};_gbda :=_bfba .NewCT_TblStylePr ();_gbda .TypeAttr =typ ;_ccb ._bcdge .TblStylePr =append (_ccb ._bcdge .TblStylePr ,_gbda );return TableConditionalFormatting {_gbda };};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_bbf CellBorders )SetInsideHorizontal (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_bbf ._ggff .InsideH =_bfba .NewCT_Border ();_fedc (_bbf ._ggff .InsideH ,t ,c ,thickness );};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_ecca ParagraphProperties )SetSpacing (before ,after _ebdb .Distance ){if _ecca ._ddd .Spacing ==nil {_ecca ._ddd .Spacing =_bfba .NewCT_Spacing ();};_ecca ._ddd .Spacing .BeforeAttr =&_agge .ST_TwipsMeasure {};_ecca ._ddd .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (before /_ebdb .Twips ));_ecca ._ddd .Spacing .AfterAttr =&_agge .ST_TwipsMeasure {};_ecca ._ddd .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (after /_ebdb .Twips ));};

// RemoveRun removes a child run from a paragraph.
func (_edfb Paragraph )RemoveRun (r Run ){for _ ,_baca :=range _edfb ._efa .EG_PContent {for _fbfd ,_aefe :=range _baca .EG_ContentRunContent {if _aefe .R ==r ._gcf {copy (_baca .EG_ContentRunContent [_fbfd :],_baca .EG_ContentRunContent [_fbfd +1:]);_baca .EG_ContentRunContent =_baca .EG_ContentRunContent [0:len (_baca .EG_ContentRunContent )-1];};if _aefe .Sdt !=nil &&_aefe .Sdt .SdtContent !=nil {for _cdad ,_eaad :=range _aefe .Sdt .SdtContent .EG_ContentRunContent {if _eaad .R ==r ._gcf {copy (_aefe .Sdt .SdtContent .EG_ContentRunContent [_cdad :],_aefe .Sdt .SdtContent .EG_ContentRunContent [_cdad +1:]);_aefe .Sdt .SdtContent .EG_ContentRunContent =_aefe .Sdt .SdtContent .EG_ContentRunContent [0:len (_aefe .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_aggd AnchoredDrawing )SetOrigin (h _bfba .WdST_RelFromH ,v _bfba .WdST_RelFromV ){_aggd ._fdgd .PositionH .RelativeFromAttr =h ;_aggd ._fdgd .PositionV .RelativeFromAttr =v ;};

// Paragraphs returns the paragraphs defined in an endnote.
func (_fdeb Endnote )Paragraphs ()[]Paragraph {_bff :=[]Paragraph {};for _ ,_fad :=range _fdeb .content (){for _ ,_ddbf :=range _fad .P {_bff =append (_bff ,Paragraph {_fdeb ._ffd ,_ddbf });};};return _bff ;};

// Spacing returns the paragraph spacing settings.
func (_dfg ParagraphProperties )Spacing ()ParagraphSpacing {if _dfg ._ddd .Spacing ==nil {_dfg ._ddd .Spacing =_bfba .NewCT_Spacing ();};return ParagraphSpacing {_dfg ._ddd .Spacing };};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_age .DocBase ;_aca *_bfba .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_bafc []*_bfba .Hdr ;_gagb []_age .Relationships ;_accc []*_bfba .Ftr ;_ada []_age .Relationships ;_dbg _age .Relationships ;_edead []*_bfc .Theme ;_bfa *_bfba .WebSettings ;_efaf *_bfba .Fonts ;_fdgb *_bfba .Endnotes ;_acf *_bfba .Footnotes ;};

// AddTable adds a table to the table cell.
func (_cf Cell )AddTable ()Table {_cefga :=_bfba .NewEG_BlockLevelElts ();_cf ._ccfb .EG_BlockLevelElts =append (_cf ._ccfb .EG_BlockLevelElts ,_cefga );_ebcc :=_bfba .NewEG_ContentBlockContent ();_cefga .EG_ContentBlockContent =append (_cefga .EG_ContentBlockContent ,_ebcc );_df :=_bfba .NewCT_Tbl ();_ebcc .Tbl =append (_ebcc .Tbl ,_df );return Table {_cf ._cff ,_df };};

// InsertRowBefore inserts a row before another row
func (_dag Table )InsertRowBefore (r Row )Row {for _edge ,_ccfc :=range _dag ._fccd .EG_ContentRowContent {if len (_ccfc .Tr )> 0&&r .X ()==_ccfc .Tr [0]{_ddbd :=_bfba .NewEG_ContentRowContent ();_dag ._fccd .EG_ContentRowContent =append (_dag ._fccd .EG_ContentRowContent ,nil );copy (_dag ._fccd .EG_ContentRowContent [_edge +1:],_dag ._fccd .EG_ContentRowContent [_edge :]);_dag ._fccd .EG_ContentRowContent [_edge ]=_ddbd ;_dddf :=_bfba .NewCT_Row ();_ddbd .Tr =append (_ddbd .Tr ,_dddf );return Row {_dag ._bbbd ,_dddf };};};return _dag .AddRow ();};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_gbab ParagraphProperties )ComplexSizeValue ()float64 {if _gadff :=_gbab ._ddd .RPr .SzCs ;_gadff !=nil {_fee :=_gadff .ValAttr ;if _fee .ST_UnsignedDecimalNumber !=nil {return float64 (*_fee .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// GetColor returns the color.Color object representing the run color.
func (_cdd RunProperties )GetColor ()_degb .Color {if _caecbg :=_cdd ._eece .Color ;_caecbg !=nil {_fcab :=_caecbg .ValAttr ;if _fcab .ST_HexColorRGB !=nil {return _degb .FromHex (*_fcab .ST_HexColorRGB );};};return _degb .Color {};};func (_adc FormFieldType )String ()string {if _adc >=FormFieldType (len (_dbba )-1){return _fae .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_adc );};return _fcc [_dbba [_adc ]:_dbba [_adc +1]];};

// InitializeDefault constructs a default numbering.
func (_dcf Numbering )InitializeDefault (){_fbca :=_bfba .NewCT_AbstractNum ();_fbca .MultiLevelType =_bfba .NewCT_MultiLevelType ();_fbca .MultiLevelType .ValAttr =_bfba .ST_MultiLevelTypeHybridMultilevel ;_dcf ._fbcf .AbstractNum =append (_dcf ._fbcf .AbstractNum ,_fbca );_fbca .AbstractNumIdAttr =1;const _gagd =720;const _dcgb =720;const _bdde =360;for _cfde :=0;_cfde < 9;_cfde ++{_cfaa :=_bfba .NewCT_Lvl ();_cfaa .IlvlAttr =int64 (_cfde );_cfaa .Start =_bfba .NewCT_DecimalNumber ();_cfaa .Start .ValAttr =1;_cfaa .NumFmt =_bfba .NewCT_NumFmt ();_cfaa .NumFmt .ValAttr =_bfba .ST_NumberFormatBullet ;_cfaa .Suff =_bfba .NewCT_LevelSuffix ();_cfaa .Suff .ValAttr =_bfba .ST_LevelSuffixNothing ;_cfaa .LvlText =_bfba .NewCT_LevelText ();_cfaa .LvlText .ValAttr =_efb .String ("\uf0b7");_cfaa .LvlJc =_bfba .NewCT_Jc ();_cfaa .LvlJc .ValAttr =_bfba .ST_JcLeft ;_cfaa .RPr =_bfba .NewCT_RPr ();_cfaa .RPr .RFonts =_bfba .NewCT_Fonts ();_cfaa .RPr .RFonts .AsciiAttr =_efb .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_cfaa .RPr .RFonts .HAnsiAttr =_efb .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_cfaa .RPr .RFonts .HintAttr =_bfba .ST_HintDefault ;_cfaa .PPr =_bfba .NewCT_PPrGeneral ();_gcc :=int64 (_cfde *_dcgb +_gagd );_cfaa .PPr .Ind =_bfba .NewCT_Ind ();_cfaa .PPr .Ind .LeftAttr =&_bfba .ST_SignedTwipsMeasure {};_cfaa .PPr .Ind .LeftAttr .Int64 =_efb .Int64 (_gcc );_cfaa .PPr .Ind .HangingAttr =&_agge .ST_TwipsMeasure {};_cfaa .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (_bdde ));_fbca .Lvl =append (_fbca .Lvl ,_cfaa );};_cede :=_bfba .NewCT_Num ();_cede .NumIdAttr =1;_cede .AbstractNumId =_bfba .NewCT_DecimalNumber ();_cede .AbstractNumId .ValAttr =1;_dcf ._fbcf .Num =append (_dcf ._fbcf .Num ,_cede );};

// SetHeight allows controlling the height of a row within a table.
func (_fffd RowProperties )SetHeight (ht _ebdb .Distance ,rule _bfba .ST_HeightRule ){if rule ==_bfba .ST_HeightRuleUnset {_fffd ._eg .TrHeight =nil ;}else {_gaaad :=_bfba .NewCT_Height ();_gaaad .HRuleAttr =rule ;_gaaad .ValAttr =&_agge .ST_TwipsMeasure {};_gaaad .ValAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (ht /_ebdb .Twips ));_fffd ._eg .TrHeight =[]*_bfba .CT_Height {_gaaad };};};func (_eca Paragraph )insertRun (_abdg Run ,_cbe bool )Run {for _ ,_gbeb :=range _eca ._efa .EG_PContent {for _bfgcg ,_aabb :=range _gbeb .EG_ContentRunContent {if _aabb .R ==_abdg .X (){_cgdc :=_bfba .NewCT_R ();_gbeb .EG_ContentRunContent =append (_gbeb .EG_ContentRunContent ,nil );if _cbe {copy (_gbeb .EG_ContentRunContent [_bfgcg +1:],_gbeb .EG_ContentRunContent [_bfgcg :]);_gbeb .EG_ContentRunContent [_bfgcg ]=_bfba .NewEG_ContentRunContent ();_gbeb .EG_ContentRunContent [_bfgcg ].R =_cgdc ;}else {copy (_gbeb .EG_ContentRunContent [_bfgcg +2:],_gbeb .EG_ContentRunContent [_bfgcg +1:]);_gbeb .EG_ContentRunContent [_bfgcg +1]=_bfba .NewEG_ContentRunContent ();_gbeb .EG_ContentRunContent [_bfgcg +1].R =_cgdc ;};return Run {_eca ._efgb ,_cgdc };};if _aabb .Sdt !=nil &&_aabb .Sdt .SdtContent !=nil {for _ ,_bggg :=range _aabb .Sdt .SdtContent .EG_ContentRunContent {if _bggg .R ==_abdg .X (){_fgbf :=_bfba .NewCT_R ();_aabb .Sdt .SdtContent .EG_ContentRunContent =append (_aabb .Sdt .SdtContent .EG_ContentRunContent ,nil );if _cbe {copy (_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg +1:],_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg :]);_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg ]=_bfba .NewEG_ContentRunContent ();_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg ].R =_fgbf ;}else {copy (_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg +2:],_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg +1:]);_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg +1]=_bfba .NewEG_ContentRunContent ();_aabb .Sdt .SdtContent .EG_ContentRunContent [_bfgcg +1].R =_fgbf ;};return Run {_eca ._efgb ,_fgbf };};};};};};return _eca .AddRun ();};

// GetColor returns the color.Color object representing the run color.
func (_febc ParagraphProperties )GetColor ()_degb .Color {if _ecg :=_febc ._ddd .RPr .Color ;_ecg !=nil {_afc :=_ecg .ValAttr ;if _afc .ST_HexColorRGB !=nil {return _degb .FromHex (*_afc .ST_HexColorRGB );};};return _degb .Color {};};

// SetWidthPercent sets the cell to a width percentage.
func (_bfeb CellProperties )SetWidthPercent (pct float64 ){_bfeb ._ecfa .TcW =_bfba .NewCT_TblWidth ();_bfeb ._ecfa .TcW .TypeAttr =_bfba .ST_TblWidthPct ;_bfeb ._ecfa .TcW .WAttr =&_bfba .ST_MeasurementOrPercent {};_bfeb ._ecfa .TcW .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_bfeb ._ecfa .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (pct *50));};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_bad Fonts )SetEastAsiaTheme (t _bfba .ST_Theme ){_bad ._cdgg .EastAsiaThemeAttr =t };

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_edee FormField )Value ()string {if _edee ._agc .TextInput !=nil &&_edee ._fgcf .T !=nil {return _edee ._fgcf .T .Content ;}else if _edee ._agc .DdList !=nil &&_edee ._agc .DdList .Result !=nil {_d :=_edee .PossibleValues ();_adggc :=int (_edee ._agc .DdList .Result .ValAttr );if _adggc < len (_d ){return _d [_adggc ];};}else if _edee ._agc .CheckBox !=nil {if _edee .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_cef Run )AddDrawingInline (img _age .ImageRef )(InlineDrawing ,error ){_cadc :=_cef .newIC ();_cadc .Drawing =_bfba .NewCT_Drawing ();_adea :=_bfba .NewWdInline ();_bbfb :=InlineDrawing {_cef ._bb ,_adea };_adea .CNvGraphicFramePr =_bfc .NewCT_NonVisualGraphicFrameProperties ();_cadc .Drawing .Inline =append (_cadc .Drawing .Inline ,_adea );_adea .Graphic =_bfc .NewGraphic ();_adea .Graphic .GraphicData =_bfc .NewCT_GraphicalObjectData ();_adea .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_adea .DistTAttr =_efb .Uint32 (0);_adea .DistLAttr =_efb .Uint32 (0);_adea .DistBAttr =_efb .Uint32 (0);_adea .DistRAttr =_efb .Uint32 (0);_adea .Extent .CxAttr =int64 (float64 (img .Size ().X *_ebdb .Pixel72 )/_ebdb .EMU );_adea .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ebdb .Pixel72 )/_ebdb .EMU );_egfg :=0x7FFFFFFF&_dabbb .Uint32 ();_adea .DocPr .IdAttr =_egfg ;_agbff :=_dafb .NewPic ();_agbff .NvPicPr .CNvPr .IdAttr =_egfg ;_eag :=img .RelID ();if _eag ==""{return _bbfb ,_ecbc .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_adea .Graphic .GraphicData .Any =append (_adea .Graphic .GraphicData .Any ,_agbff );_agbff .BlipFill =_bfc .NewCT_BlipFillProperties ();_agbff .BlipFill .Blip =_bfc .NewCT_Blip ();_agbff .BlipFill .Blip .EmbedAttr =&_eag ;_agbff .BlipFill .Stretch =_bfc .NewCT_StretchInfoProperties ();_agbff .BlipFill .Stretch .FillRect =_bfc .NewCT_RelativeRect ();_agbff .SpPr =_bfc .NewCT_ShapeProperties ();_agbff .SpPr .Xfrm =_bfc .NewCT_Transform2D ();_agbff .SpPr .Xfrm .Off =_bfc .NewCT_Point2D ();_agbff .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_agbff .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_agbff .SpPr .Xfrm .Ext =_bfc .NewCT_PositiveSize2D ();_agbff .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ebdb .Point );_agbff .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ebdb .Point );_agbff .SpPr .PrstGeom =_bfc .NewCT_PresetGeometry2D ();_agbff .SpPr .PrstGeom .PrstAttr =_bfc .ST_ShapeTypeRect ;return _bbfb ,nil ;};

// Shadow returns true if paragraph shadow is on.
func (_eace ParagraphProperties )Shadow ()bool {return _bdg (_eace ._ddd .RPr .Shadow )};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_bcadb *Document )Endnote (id int64 )Endnote {for _ ,_dbd :=range _bcadb .Endnotes (){if _dbd .id ()==id {return _dbd ;};};return Endnote {};};

// RemoveMailMerge removes any mail merge settings
func (_fag Settings )RemoveMailMerge (){_fag ._fgfd .MailMerge =nil };

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_edbb ParagraphSpacing )SetBeforeAuto (b bool ){if b {_edbb ._caeg .BeforeAutospacingAttr =&_agge .ST_OnOff {};_edbb ._caeg .BeforeAutospacingAttr .Bool =_efb .Bool (true );}else {_edbb ._caeg .BeforeAutospacingAttr =nil ;};};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_ede TableStyleProperties )SetCellSpacingAuto (){_ede ._fdce .TblCellSpacing =_bfba .NewCT_TblWidth ();_ede ._fdce .TblCellSpacing .TypeAttr =_bfba .ST_TblWidthAuto ;};

// TableWidth controls width values in table settings.
type TableWidth struct{_gag *_bfba .CT_TblWidth };

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_egcg *Document )HasFootnotes ()bool {return _egcg ._acf !=nil };

// Cells returns the cells defined in the table.
func (_be Row )Cells ()[]Cell {_acdf :=[]Cell {};for _ ,_dbec :=range _be ._dcd .EG_ContentCellContent {for _ ,_efgd :=range _dbec .Tc {_acdf =append (_acdf ,Cell {_be ._adge ,_efgd });};if _dbec .Sdt !=nil &&_dbec .Sdt .SdtContent !=nil {for _ ,_edcda :=range _dbec .Sdt .SdtContent .Tc {_acdf =append (_acdf ,Cell {_be ._adge ,_edcda });};};};return _acdf ;};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_dec *_bfba .CT_AbstractNum };

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_ecbf Paragraph )SetNumberingLevel (listLevel int ){_ecbf .ensurePPr ();if _ecbf ._efa .PPr .NumPr ==nil {_ecbf ._efa .PPr .NumPr =_bfba .NewCT_NumPr ();};_dbc :=_bfba .NewCT_DecimalNumber ();_dbc .ValAttr =int64 (listLevel );_ecbf ._efa .PPr .NumPr .Ilvl =_dbc ;};

// SetPageMargins sets the page margins for a section
func (_cda Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _ebdb .Distance ){_eegab :=_bfba .NewCT_PageMar ();_eegab .TopAttr .Int64 =_efb .Int64 (int64 (top /_ebdb .Twips ));_eegab .BottomAttr .Int64 =_efb .Int64 (int64 (bottom /_ebdb .Twips ));_eegab .RightAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (right /_ebdb .Twips ));_eegab .LeftAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (left /_ebdb .Twips ));_eegab .HeaderAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (header /_ebdb .Twips ));_eegab .FooterAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (footer /_ebdb .Twips ));_eegab .GutterAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (gutter /_ebdb .Twips ));_cda ._gggd .PgMar =_eegab ;};

// Properties returns the paragraph properties.
func (_cgabg Paragraph )Properties ()ParagraphProperties {_cgabg .ensurePPr ();return ParagraphProperties {_cgabg ._efgb ,_cgabg ._efa .PPr };};

// SetAllCaps sets the run to all caps.
func (_ggcbd RunProperties )SetAllCaps (b bool ){if !b {_ggcbd ._eece .Caps =nil ;}else {_ggcbd ._eece .Caps =_bfba .NewCT_OnOff ();};};

// Bold returns true if run font is bold.
func (_gedgg RunProperties )Bold ()bool {_fdecd :=_gedgg ._eece ;return _bdg (_fdecd .B )||_bdg (_fdecd .BCs );};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_gfe FormField )IsChecked ()bool {if _gfe ._agc .CheckBox ==nil {return false ;};if _gfe ._agc .CheckBox .Checked !=nil {return true ;};return false ;};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_ecfa *_bfba .CT_TcPr };

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_gfc *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _gfc .insertParagraph (relativeTo ,true );};func (_fffc *Document )validateTableCells ()error {for _ ,_ddbe :=range _fffc ._aca .Body .EG_BlockLevelElts {for _ ,_gbc :=range _ddbe .EG_ContentBlockContent {for _ ,_aaff :=range _gbc .Tbl {for _ ,_egfd :=range _aaff .EG_ContentRowContent {for _ ,_eba :=range _egfd .Tr {_eega :=false ;for _ ,_fbfb :=range _eba .EG_ContentCellContent {_gcag :=false ;for _ ,_bedg :=range _fbfb .Tc {_eega =true ;for _ ,_bcdc :=range _bedg .EG_BlockLevelElts {for _ ,_cfbg :=range _bcdc .EG_ContentBlockContent {if len (_cfbg .P )> 0{_gcag =true ;break ;};};};};if !_gcag {return _ecbc .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_eega {return _ecbc .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// X returns the internally wrapped *wml.CT_SectPr.
func (_cffcd Section )X ()*_bfba .CT_SectPr {return _cffcd ._gggd };

// New constructs an empty document that content can be added to.
func New ()*Document {_cdc :=&Document {_aca :_bfba .NewDocument ()};_cdc .ContentTypes =_age .NewContentTypes ();_cdc ._aca .Body =_bfba .NewCT_Body ();_cdc ._aca .ConformanceAttr =_agge .ST_ConformanceClassTransitional ;_cdc ._dbg =_age .NewRelationships ();_cdc .AppProperties =_age .NewAppProperties ();_cdc .CoreProperties =_age .NewCoreProperties ();_cdc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_cdc .Settings =NewSettings ();_cdc ._dbg .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_efb .SettingsType );_cdc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_cdc .Rels =_age .NewRelationships ();_cdc .Rels .AddRelationship (_efb .RelativeFilename (_efb .DocTypeDocument ,"",_efb .CorePropertiesType ,0),_efb .CorePropertiesType );_cdc .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_efb .ExtendedPropertiesType );_cdc .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_efb .OfficeDocumentType );_cdc .Numbering =NewNumbering ();_cdc .Numbering .InitializeDefault ();_cdc .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_cdc ._dbg .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_efb .NumberingType );_cdc .Styles =NewStyles ();_cdc .Styles .InitializeDefault ();_cdc .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_cdc ._dbg .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_efb .StylesType );_cdc ._aca .Body =_bfba .NewCT_Body ();return _cdc ;};

// SetStyle sets the style of a paragraph.
func (_abb ParagraphProperties )SetStyle (s string ){if s ==""{_abb ._ddd .PStyle =nil ;}else {_abb ._ddd .PStyle =_bfba .NewCT_String ();_abb ._ddd .PStyle .ValAttr =s ;};};

// AddParagraph adds a paragraph to the footnote.
func (_gbcc Footnote )AddParagraph ()Paragraph {_fb :=_bfba .NewEG_ContentBlockContent ();_bfg :=len (_gbcc ._aecf .EG_BlockLevelElts [0].EG_ContentBlockContent );_gbcc ._aecf .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_gbcc ._aecf .EG_BlockLevelElts [0].EG_ContentBlockContent ,_fb );_bafg :=_bfba .NewCT_P ();var _beaf *_bfba .CT_String ;if _bfg !=0{_dfeb :=len (_gbcc ._aecf .EG_BlockLevelElts [0].EG_ContentBlockContent [_bfg -1].P );_beaf =_gbcc ._aecf .EG_BlockLevelElts [0].EG_ContentBlockContent [_bfg -1].P [_dfeb -1].PPr .PStyle ;}else {_beaf =_bfba .NewCT_String ();_beaf .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_fb .P =append (_fb .P ,_bafg );_feab :=Paragraph {_gbcc ._ccdd ,_bafg };_feab ._efa .PPr =_bfba .NewCT_PPr ();_feab ._efa .PPr .PStyle =_beaf ;_feab ._efa .PPr .RPr =_bfba .NewCT_ParaRPr ();return _feab ;};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_bbbg NumberingLevel )RunProperties ()RunProperties {if _bbbg ._eae .RPr ==nil {_bbbg ._eae .RPr =_bfba .NewCT_RPr ();};return RunProperties {_bbbg ._eae .RPr };};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_gddf *Document )BodySection ()Section {if _gddf ._aca .Body .SectPr ==nil {_gddf ._aca .Body .SectPr =_bfba .NewCT_SectPr ();};return Section {_gddf ,_gddf ._aca .Body .SectPr };};

// Settings controls the document settings.
type Settings struct{_fgfd *_bfba .Settings };

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_gaf Paragraph )InsertRunAfter (relativeTo Run )Run {return _gaf .insertRun (relativeTo ,false )};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ebbc CellBorders )SetLeft (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_ebbc ._ggff .Left =_bfba .NewCT_Border ();_fedc (_ebbc ._ggff .Left ,t ,c ,thickness );};

// SetSize sets the size of the displayed image on the page.
func (_fagc InlineDrawing )SetSize (w ,h _ebdb .Distance ){_fagc ._cgbef .Extent .CxAttr =int64 (float64 (w *_ebdb .Pixel72 )/_ebdb .EMU );_fagc ._cgbef .Extent .CyAttr =int64 (float64 (h *_ebdb .Pixel72 )/_ebdb .EMU );};

// X returns the inner wrapped XML type.
func (_gfcf HyperLink )X ()*_bfba .CT_Hyperlink {return _gfcf ._cgcb };

// SetCSTheme sets the font complex script theme.
func (_dace Fonts )SetCSTheme (t _bfba .ST_Theme ){_dace ._cdgg .CsthemeAttr =t };

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_bbfa ParagraphProperties )SetKeepWithNext (b bool ){if !b {_bbfa ._ddd .KeepNext =nil ;}else {_bbfa ._ddd .KeepNext =_bfba .NewCT_OnOff ();};};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_dfbda Run )IsFootnote ()(bool ,int64 ){if _dfbda ._gcf .EG_RunInnerContent !=nil {if _dfbda ._gcf .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_dfbda ._gcf .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// CellProperties returns the cell properties.
func (_ecgc TableConditionalFormatting )CellProperties ()CellProperties {if _ecgc ._acb .TcPr ==nil {_ecgc ._acb .TcPr =_bfba .NewCT_TcPr ();};return CellProperties {_ecgc ._acb .TcPr };};

// SetValue sets the width value.
func (_eafg TableWidth )SetValue (m _ebdb .Distance ){_eafg ._gag .WAttr =&_bfba .ST_MeasurementOrPercent {};_eafg ._gag .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_eafg ._gag .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (m /_ebdb .Twips ));_eafg ._gag .TypeAttr =_bfba .ST_TblWidthDxa ;};

// SetXOffset sets the X offset for an image relative to the origin.
func (_gaca AnchoredDrawing )SetXOffset (x _ebdb .Distance ){_gaca ._fdgd .PositionH .Choice =&_bfba .WdCT_PosHChoice {};_gaca ._fdgd .PositionH .Choice .PosOffset =_efb .Int32 (int32 (x /_ebdb .EMU ));};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_ccfg *Document )AddFooter ()Footer {_cee :=_bfba .NewFtr ();_ccfg ._accc =append (_ccfg ._accc ,_cee );_ggffe :=_fae .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_ccfg ._accc ));_ccfg ._dbg .AddRelationship (_ggffe ,_efb .FooterType );_ccfg .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ggffe ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_ccfg ._ada =append (_ccfg ._ada ,_age .NewRelationships ());return Footer {_ccfg ,_cee };};

// X returns the inner wrapped XML type.
func (_fda Run )X ()*_bfba .CT_R {return _fda ._gcf };

// SetLeftPct sets the cell left margin
func (_ebge CellMargins )SetLeftPct (pct float64 ){_ebge ._dfcc .Left =_bfba .NewCT_TblWidth ();_gadf (_ebge ._dfcc .Left ,pct );};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_bcgb Paragraph )AddEndnote (text string )Endnote {var _adfc int64 ;if _bcgb ._efgb .HasEndnotes (){for _ ,_dbed :=range _bcgb ._efgb .Endnotes (){if _dbed .id ()> _adfc {_adfc =_dbed .id ();};};_adfc ++;}else {_adfc =0;_bcgb ._efgb ._fdgb =&_bfba .Endnotes {};};_fgc :=_bfba .NewCT_FtnEdn ();_ebcb :=_bfba .NewCT_FtnEdnRef ();_ebcb .IdAttr =_adfc ;_bcgb ._efgb ._fdgb .CT_Endnotes .Endnote =append (_bcgb ._efgb ._fdgb .CT_Endnotes .Endnote ,_fgc );_eadg :=_bcgb .AddRun ();_bddb :=_eadg .Properties ();_bddb .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_eadg ._gcf .EG_RunInnerContent =[]*_bfba .EG_RunInnerContent {_bfba .NewEG_RunInnerContent ()};_eadg ._gcf .EG_RunInnerContent [0].EndnoteReference =_ebcb ;_egfgg :=Endnote {_bcgb ._efgb ,_fgc };_egfgg ._ege .IdAttr =_adfc ;_egfgg ._ege .EG_BlockLevelElts =[]*_bfba .EG_BlockLevelElts {_bfba .NewEG_BlockLevelElts ()};_accd :=_egfgg .AddParagraph ();_accd .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_accd ._efa .PPr .RPr =_bfba .NewCT_ParaRPr ();_eafce :=_accd .AddRun ();_eafce .AddTab ();_eafce .AddText (text );return _egfgg ;};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_dcec *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _dcec .insertParagraph (relativeTo ,false );};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_efab Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_ddc :=_efab .newIC ();_ddc .FldChar =_bfba .NewCT_FldChar ();_ddc .FldChar .FldCharTypeAttr =_bfba .ST_FldCharTypeBegin ;if isDirty {_ddc .FldChar .DirtyAttr =&_agge .ST_OnOff {};_ddc .FldChar .DirtyAttr .Bool =_efb .Bool (true );};_ddc =_efab .newIC ();_ddc .InstrText =_bfba .NewCT_Text ();if fmt !=""{_ddc .InstrText .Content =code +"\u0020"+fmt ;}else {_ddc .InstrText .Content =code ;};_ddc =_efab .newIC ();_ddc .FldChar =_bfba .NewCT_FldChar ();_ddc .FldChar .FldCharTypeAttr =_bfba .ST_FldCharTypeEnd ;};

// TableProperties returns the table style properties.
func (_c Style )TableProperties ()TableStyleProperties {if _c ._bcdge .TblPr ==nil {_c ._bcdge .TblPr =_bfba .NewCT_TblPrBase ();};return TableStyleProperties {_c ._bcdge .TblPr };};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_eabc Paragraph )InsertRunBefore (relativeTo Run )Run {return _eabc .insertRun (relativeTo ,true )};

// SetAlignment controls the paragraph alignment
func (_ceg ParagraphStyleProperties )SetAlignment (align _bfba .ST_Jc ){if align ==_bfba .ST_JcUnset {_ceg ._beb .Jc =nil ;}else {_ceg ._beb .Jc =_bfba .NewCT_Jc ();_ceg ._beb .Jc .ValAttr =align ;};};

// Outline returns true if run outline is on.
func (_cfb RunProperties )Outline ()bool {return _bdg (_cfb ._eece .Outline )};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_cebd *_bfba .Styles };

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_beae InlineDrawing )GetImage ()(_age .ImageRef ,bool ){_eccea :=_beae ._cgbef .Graphic .GraphicData .Any ;if len (_eccea )> 0{_gecee ,_cbc :=_eccea [0].(*_dafb .Pic );if _cbc {if _gecee .BlipFill !=nil &&_gecee .BlipFill .Blip !=nil &&_gecee .BlipFill .Blip .EmbedAttr !=nil {return _beae ._dfbdg .GetImageByRelID (*_gecee .BlipFill .Blip .EmbedAttr );};};};return _age .ImageRef {},false ;};

// SetMultiLevelType sets the multilevel type.
func (_cdb NumberingDefinition )SetMultiLevelType (t _bfba .ST_MultiLevelType ){if t ==_bfba .ST_MultiLevelTypeUnset {_cdb ._dec .MultiLevelType =nil ;}else {_cdb ._dec .MultiLevelType =_bfba .NewCT_MultiLevelType ();_cdb ._dec .MultiLevelType .ValAttr =t ;};};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_fbcf *_bfba .Numbering };func _bgcb (_ga string )mergeFieldInfo {_fbf :=[]string {};_fadd :=_bfgf .Buffer {};_cfbb :=-1;for _ecfee ,_fagd :=range _ga {switch _fagd {case ' ':if _fadd .Len ()!=0{_fbf =append (_fbf ,_fadd .String ());};_fadd .Reset ();case '"':if _cfbb !=-1{_fbf =append (_fbf ,_ga [_cfbb +1:_ecfee ]);_cfbb =-1;}else {_cfbb =_ecfee ;};default:_fadd .WriteRune (_fagd );};};if _fadd .Len ()!=0{_fbf =append (_fbf ,_fadd .String ());};_cfgg :=mergeFieldInfo {};for _dbag :=0;_dbag < len (_fbf )-1;_dbag ++{_ggffd :=_fbf [_dbag ];switch _ggffd {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_cfgg ._fdde =_fbf [_dbag +1];_dbag ++;case "\u005c\u0066":_cfgg ._aagc =_fbf [_dbag +1];_dbag ++;case "\u005c\u0062":_cfgg ._aab =_fbf [_dbag +1];_dbag ++;case "\u005c\u002a":switch _fbf [_dbag +1]{case "\u0055\u0070\u0070e\u0072":_cfgg ._gdg =true ;case "\u004c\u006f\u0077e\u0072":_cfgg ._ccfe =true ;case "\u0043\u0061\u0070\u0073":_cfgg ._afga =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_cfgg ._dbgb =true ;};_dbag ++;};};return _cfgg ;};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_acbg *Document )HasEndnotes ()bool {return _acbg ._fdgb !=nil };

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_aaeg Header )Index ()int {for _cgaf ,_dgag :=range _aaeg ._feda ._bafc {if _dgag ==_aaeg ._fbcb {return _cgaf ;};};return -1;};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_ggdd RunProperties )CharacterSpacingMeasure ()string {if _fgde :=_ggdd ._eece .Spacing ;_fgde !=nil {_dab :=_fgde .ValAttr ;if _dab .ST_UniversalMeasure !=nil {return *_dab .ST_UniversalMeasure ;};};return "";};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_dfcc *_bfba .CT_TcMar };

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_aagg Paragraph )RemoveFootnote (id int64 ){_dfb :=_aagg ._efgb ._acf ;var _gbgd int ;for _dgecb ,_dfc :=range _dfb .CT_Footnotes .Footnote {if _dfc .IdAttr ==id {_gbgd =_dgecb ;};};_gbgd =0;_dfb .CT_Footnotes .Footnote [_gbgd ]=nil ;_dfb .CT_Footnotes .Footnote [_gbgd ]=_dfb .CT_Footnotes .Footnote [len (_dfb .CT_Footnotes .Footnote )-1];_dfb .CT_Footnotes .Footnote =_dfb .CT_Footnotes .Footnote [:len (_dfb .CT_Footnotes .Footnote )-1];var _gfg Run ;for _ ,_gdbea :=range _aagg .Runs (){if _acg ,_eeeg :=_gdbea .IsFootnote ();_acg {if _eeeg ==id {_gfg =_gdbea ;};};};_aagg .RemoveRun (_gfg );};

// UnderlineColor returns the hex color value of paragraph underline.
func (_bde ParagraphProperties )UnderlineColor ()string {if _edea :=_bde ._ddd .RPr .U ;_edea !=nil {_cada :=_edea .ColorAttr ;if _cada !=nil &&_cada .ST_HexColorRGB !=nil {return *_cada .ST_HexColorRGB ;};};return "";};

// Tables returns the tables defined in the document.
func (_gbf *Document )Tables ()[]Table {_bgef :=[]Table {};if _gbf ._aca .Body ==nil {return nil ;};for _ ,_gcdd :=range _gbf ._aca .Body .EG_BlockLevelElts {for _ ,_daeg :=range _gcdd .EG_ContentBlockContent {for _ ,_aeeg :=range _gbf .tables (_daeg ){_bgef =append (_bgef ,_aeeg );};};};return _bgef ;};

// X returns the inner wrapped XML type.
func (_af Footer )X ()*_bfba .Ftr {return _af ._eafb };func (_bbe *Document )onNewRelationship (_cea *_egb .DecodeMap ,_ggg ,_e string ,_adfb []*_bfeg .File ,_gbgc *_ecad .Relationship ,_ebcf _egb .Target )error {_bbce :=_efb .DocTypeDocument ;switch _e {case _efb .OfficeDocumentType ,_efb .OfficeDocumentTypeStrict :_bbe ._aca =_bfba .NewDocument ();_cea .AddTarget (_ggg ,_bbe ._aca ,_e ,0);_cea .AddTarget (_egb .RelationsPathFor (_ggg ),_bbe ._dbg .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .CorePropertiesType :_cea .AddTarget (_ggg ,_bbe .CoreProperties .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .CustomPropertiesType :_cea .AddTarget (_ggg ,_bbe .CustomProperties .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .ExtendedPropertiesType ,_efb .ExtendedPropertiesTypeStrict :_cea .AddTarget (_ggg ,_bbe .AppProperties .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .ThumbnailType ,_efb .ThumbnailTypeStrict :for _gdgg ,_dgc :=range _adfb {if _dgc ==nil {continue ;};if _dgc .Name ==_ggg {_ecbfg ,_bedd :=_dgc .Open ();if _bedd !=nil {return _fae .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_bedd );};_bbe .Thumbnail ,_ ,_bedd =_edbc .Decode (_ecbfg );_ecbfg .Close ();if _bedd !=nil {return _fae .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_bedd );};_adfb [_gdgg ]=nil ;};};case _efb .SettingsType ,_efb .SettingsTypeStrict :_cea .AddTarget (_ggg ,_bbe .Settings .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .NumberingType ,_efb .NumberingTypeStrict :_bbe .Numbering =NewNumbering ();_cea .AddTarget (_ggg ,_bbe .Numbering .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .StylesType ,_efb .StylesTypeStrict :_bbe .Styles .Clear ();_cea .AddTarget (_ggg ,_bbe .Styles .X (),_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .HeaderType ,_efb .HeaderTypeStrict :_dff :=_bfba .NewHdr ();_cea .AddTarget (_ggg ,_dff ,_e ,uint32 (len (_bbe ._bafc )));_bbe ._bafc =append (_bbe ._bafc ,_dff );_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,len (_bbe ._bafc ));_eabf :=_age .NewRelationships ();_cea .AddTarget (_egb .RelationsPathFor (_ggg ),_eabf .X (),_e ,0);_bbe ._gagb =append (_bbe ._gagb ,_eabf );case _efb .FooterType ,_efb .FooterTypeStrict :_bfb :=_bfba .NewFtr ();_cea .AddTarget (_ggg ,_bfb ,_e ,uint32 (len (_bbe ._accc )));_bbe ._accc =append (_bbe ._accc ,_bfb );_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,len (_bbe ._accc ));_gfd :=_age .NewRelationships ();_cea .AddTarget (_egb .RelationsPathFor (_ggg ),_gfd .X (),_e ,0);_bbe ._ada =append (_bbe ._ada ,_gfd );case _efb .ThemeType ,_efb .ThemeTypeStrict :_faef :=_bfc .NewTheme ();_cea .AddTarget (_ggg ,_faef ,_e ,uint32 (len (_bbe ._edead )));_bbe ._edead =append (_bbe ._edead ,_faef );_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,len (_bbe ._edead ));case _efb .WebSettingsType ,_efb .WebSettingsTypeStrict :_bbe ._bfa =_bfba .NewWebSettings ();_cea .AddTarget (_ggg ,_bbe ._bfa ,_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .FontTableType ,_efb .FontTableTypeStrict :_bbe ._efaf =_bfba .NewFonts ();_cea .AddTarget (_ggg ,_bbe ._efaf ,_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .EndNotesType ,_efb .EndNotesTypeStrict :_bbe ._fdgb =_bfba .NewEndnotes ();_cea .AddTarget (_ggg ,_bbe ._fdgb ,_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .FootNotesType ,_efb .FootNotesTypeStrict :_bbe ._acf =_bfba .NewFootnotes ();_cea .AddTarget (_ggg ,_bbe ._acf ,_e ,0);_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,0);case _efb .ImageType ,_efb .ImageTypeStrict :var _aa _age .ImageRef ;for _efec ,_abcb :=range _adfb {if _abcb ==nil {continue ;};if _abcb .Name ==_ggg {_ccaa ,_agcc :=_egb .ExtractToDiskTmp (_abcb ,_bbe .TmpPath );if _agcc !=nil {return _agcc ;};_cage ,_agcc :=_age .ImageFromFile (_ccaa );if _agcc !=nil {return _agcc ;};_aa =_age .MakeImageRef (_cage ,&_bbe .DocBase ,_bbe ._dbg );_bbe .Images =append (_bbe .Images ,_aa );_adfb [_efec ]=nil ;};};_fa :="\u002e"+_efacb .ToLower (_aa .Format ());_gbgc .TargetAttr =_efb .RelativeFilename (_bbce ,_ebcf .Typ ,_e ,len (_bbe .Images ));if _egbf :=_fdc .Ext (_gbgc .TargetAttr );_egbf !=_fa {_gbgc .TargetAttr =_gbgc .TargetAttr [0:len (_gbgc .TargetAttr )-len (_egbf )]+_fa ;};default:_efb .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_e ,_ggg );};return nil ;};

// Header is a header for a document section.
type Header struct{_feda *Document ;_fbcb *_bfba .Hdr ;};

// SetStartPct sets the cell start margin
func (_dece CellMargins )SetStartPct (pct float64 ){_dece ._dfcc .Start =_bfba .NewCT_TblWidth ();_gadf (_dece ._dfcc .Start ,pct );};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_f TableProperties )SetCellSpacingAuto (){_f ._eaae .TblCellSpacing =_bfba .NewCT_TblWidth ();_f ._eaae .TblCellSpacing .TypeAttr =_bfba .ST_TblWidthAuto ;};

// X returns the inner wrapped XML type.
func (_aga Settings )X ()*_bfba .Settings {return _aga ._fgfd };

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_bgcf Run )IsEndnote ()(bool ,int64 ){if _bgcf ._gcf .EG_RunInnerContent !=nil {if _bgcf ._gcf .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_bgcf ._gcf .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown.  For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_fg FormField )SetValue (v string ){if _fg ._agc .DdList !=nil {for _bfd ,_edde :=range _fg .PossibleValues (){if _edde ==v {_fg ._agc .DdList .Result =_bfba .NewCT_DecimalNumber ();_fg ._agc .DdList .Result .ValAttr =int64 (_bfd );break ;};};}else if _fg ._agc .TextInput !=nil {_fg ._fgcf .T =_bfba .NewCT_Text ();_fg ._fgcf .T .Content =v ;};};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_afca HyperLink )SetTargetBookmark (bm Bookmark ){_afca ._cgcb .AnchorAttr =_efb .String (bm .Name ());_afca ._cgcb .IdAttr =nil ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_bdfc Style )SetUISortOrder (order int ){_bdfc ._bcdge .UiPriority =_bfba .NewCT_DecimalNumber ();_bdfc ._bcdge .UiPriority .ValAttr =int64 (order );};

// ParagraphStyles returns only the paragraph styles.
func (_abad Styles )ParagraphStyles ()[]Style {_dfe :=[]Style {};for _ ,_gab :=range _abad ._cebd .Style {if _gab .TypeAttr !=_bfba .ST_StyleTypeParagraph {continue ;};_dfe =append (_dfe ,Style {_gab });};return _dfe ;};

// CellBorders are the borders for an individual
type CellBorders struct{_ggff *_bfba .CT_TcBorders };

// X returns the inner wml.CT_TblBorders
func (_cg TableBorders )X ()*_bfba .CT_TblBorders {return _cg ._dgafc };

// X returns the inner wrapped XML type.
func (_gbed Bookmark )X ()*_bfba .CT_Bookmark {return _gbed ._dc };

// Properties returns the row properties.
func (_addd Row )Properties ()RowProperties {if _addd ._dcd .TrPr ==nil {_addd ._dcd .TrPr =_bfba .NewCT_TrPr ();};return RowProperties {_addd ._dcd .TrPr };};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_dgafa Bookmark )Name ()string {return _dgafa ._dc .NameAttr };

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_aba RunProperties )ComplexSizeValue ()float64 {if _cefa :=_aba ._eece .SzCs ;_cefa !=nil {_cgdd :=_cefa .ValAttr ;if _cgdd .ST_UnsignedDecimalNumber !=nil {return float64 (*_cgdd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_gbe TableBorders )SetInsideVertical (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_gbe ._dgafc .InsideV =_bfba .NewCT_Border ();_fedc (_gbe ._dgafc .InsideV ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_fdgab Header )X ()*_bfba .Hdr {return _fdgab ._fbcb };

// Properties returns the run properties.
func (_aedb Run )Properties ()RunProperties {if _aedb ._gcf .RPr ==nil {_aedb ._gcf .RPr =_bfba .NewCT_RPr ();};return RunProperties {_aedb ._gcf .RPr };};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_agdf TableLook )SetFirstColumn (on bool ){if !on {_agdf ._bd .FirstColumnAttr =&_agge .ST_OnOff {};_agdf ._bd .FirstColumnAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;}else {_agdf ._bd .FirstColumnAttr =&_agge .ST_OnOff {};_agdf ._bd .FirstColumnAttr .ST_OnOff1 =_agge .ST_OnOff1On ;};};

// X returns the inner wrapped XML type.
func (_efe Style )X ()*_bfba .CT_Style {return _efe ._bcdge };

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_ee RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_ee ._eece .Dstrike =nil ;}else {_ee ._eece .Dstrike =_bfba .NewCT_OnOff ();};};

// SetTop sets the top border to a specified type, color and thickness.
func (_bfbf CellBorders )SetTop (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_bfbf ._ggff .Top =_bfba .NewCT_Border ();_fedc (_bfbf ._ggff .Top ,t ,c ,thickness );};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_acb *_bfba .CT_TblStylePr };

// SetSmallCaps sets the run to small caps.
func (_aaac RunProperties )SetSmallCaps (b bool ){if !b {_aaac ._eece .SmallCaps =nil ;}else {_aaac ._eece .SmallCaps =_bfba .NewCT_OnOff ();};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_dgffd ParagraphProperties )CharacterSpacingMeasure ()string {if _afdg :=_dgffd ._ddd .RPr .Spacing ;_afdg !=nil {_bafe :=_afdg .ValAttr ;if _bafe .ST_UniversalMeasure !=nil {return *_bafe .ST_UniversalMeasure ;};};return "";};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_gbfe ParagraphSpacing )SetAfterAuto (b bool ){if b {_gbfe ._caeg .AfterAutospacingAttr =&_agge .ST_OnOff {};_gbfe ._caeg .AfterAutospacingAttr .Bool =_efb .Bool (true );}else {_gbfe ._caeg .AfterAutospacingAttr =nil ;};};

// Footnotes returns the footnotes defined in the document.
func (_geec *Document )Footnotes ()[]Footnote {_dgea :=[]Footnote {};for _ ,_cgag :=range _geec ._acf .CT_Footnotes .Footnote {_dgea =append (_dgea ,Footnote {_geec ,_cgag });};return _dgea ;};func (_eagc Run )newIC ()*_bfba .EG_RunInnerContent {_cfcd :=_bfba .NewEG_RunInnerContent ();_eagc ._gcf .EG_RunInnerContent =append (_eagc ._gcf .EG_RunInnerContent ,_cfcd );return _cfcd ;};

// Table is a table within a document.
type Table struct{_bbbd *Document ;_fccd *_bfba .CT_Tbl ;};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_ecfe TableLook )SetVerticalBanding (on bool ){if !on {_ecfe ._bd .NoVBandAttr =&_agge .ST_OnOff {};_ecfe ._bd .NoVBandAttr .ST_OnOff1 =_agge .ST_OnOff1On ;}else {_ecfe ._bd .NoVBandAttr =&_agge .ST_OnOff {};_ecfe ._bd .NoVBandAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;};};

// Levels returns all of the numbering levels defined in the definition.
func (_ffg NumberingDefinition )Levels ()[]NumberingLevel {_cbd :=[]NumberingLevel {};for _ ,_ffed :=range _ffg ._dec .Lvl {_cbd =append (_cbd ,NumberingLevel {_ffed });};return _cbd ;};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_dfbdg *Document ;_cgbef *_bfba .WdInline ;};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_cdgg *_bfba .CT_Fonts };const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_fcdc *Document )GetImageByRelID (relID string )(_age .ImageRef ,bool ){for _ ,_caa :=range _fcdc .Images {if _caa .RelID ()==relID {return _caa ,true ;};};return _age .ImageRef {},false ;};

// SetKerning sets the run's font kerning.
func (_dbecg RunProperties )SetKerning (size _ebdb .Distance ){_dbecg ._eece .Kern =_bfba .NewCT_HpsMeasure ();_dbecg ._eece .Kern .ValAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (size /_ebdb .HalfPoint ));};var _dbba =[...]uint8 {0,20,37,58,79};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_ebb *Document )Footnote (id int64 )Footnote {for _ ,_bdb :=range _ebb .Footnotes (){if _bdb .id ()==id {return _bdb ;};};return Footnote {};};

// SetRowBandSize sets the number of Rows in the row band
func (_gdge TableStyleProperties )SetRowBandSize (rows int64 ){_gdge ._fdce .TblStyleRowBandSize =_bfba .NewCT_DecimalNumber ();_gdge ._fdce .TblStyleRowBandSize .ValAttr =rows ;};

// SizeValue returns the value of paragraph font size in points.
func (_eeba ParagraphProperties )SizeValue ()float64 {if _bbfc :=_eeba ._ddd .RPr .Sz ;_bbfc !=nil {_fdbfd :=_bbfc .ValAttr ;if _fdbfd .ST_UnsignedDecimalNumber !=nil {return float64 (*_fdbfd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetTop sets the cell top margin
func (_efbg CellMargins )SetTop (d _ebdb .Distance ){_efbg ._dfcc .Top =_bfba .NewCT_TblWidth ();_gcbb (_efbg ._dfcc .Top ,d );};

// SetCellSpacing sets the cell spacing within a table.
func (_aefc TableProperties )SetCellSpacing (m _ebdb .Distance ){_aefc ._eaae .TblCellSpacing =_bfba .NewCT_TblWidth ();_aefc ._eaae .TblCellSpacing .TypeAttr =_bfba .ST_TblWidthDxa ;_aefc ._eaae .TblCellSpacing .WAttr =&_bfba .ST_MeasurementOrPercent {};_aefc ._eaae .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_aefc ._eaae .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (m /_ebdb .Dxa ));};

// SetNextStyle sets the style that the next paragraph will use.
func (_gcga Style )SetNextStyle (name string ){if name ==""{_gcga ._bcdge .Next =nil ;}else {_gcga ._bcdge .Next =_bfba .NewCT_String ();_gcga ._bcdge .Next .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_eddg Endnote )X ()*_bfba .CT_FtnEdn {return _eddg ._ege };

// Strike returns true if run is striked.
func (_bdd RunProperties )Strike ()bool {return _bdg (_bdd ._eece .Strike )};

// Fonts returns the style's Fonts.
func (_dafba RunProperties )Fonts ()Fonts {if _dafba ._eece .RFonts ==nil {_dafba ._eece .RFonts =_bfba .NewCT_Fonts ();};return Fonts {_dafba ._eece .RFonts };};

// Text returns the underlying tet in the run.
func (_abcd Run )Text ()string {if len (_abcd ._gcf .EG_RunInnerContent )==0{return "";};_gaff :=_bfgf .Buffer {};for _ ,_adg :=range _abcd ._gcf .EG_RunInnerContent {if _adg .T !=nil {_gaff .WriteString (_adg .T .Content );};if _adg .Tab !=nil {_gaff .WriteByte ('\t');};};return _gaff .String ();};

// SetSemiHidden controls if the style is hidden in the UI.
func (_cad Style )SetSemiHidden (b bool ){if b {_cad ._bcdge .SemiHidden =_bfba .NewCT_OnOff ();}else {_cad ._bcdge .SemiHidden =nil ;};};

// SetThemeColor sets the color from the theme.
func (_gfbf Color )SetThemeColor (t _bfba .ST_ThemeColor ){_gfbf ._dded .ThemeColorAttr =t };

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_agc *_bfba .CT_FFData ;_fgcf *_bfba .EG_RunInnerContent ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new gooxml document support headings
// from level 1 to 8.
func (_eaeb ParagraphProperties )SetHeadingLevel (idx int ){_eaeb .SetStyle (_fae .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _eaeb ._ddd .NumPr ==nil {_eaeb ._ddd .NumPr =_bfba .NewCT_NumPr ();};_eaeb ._ddd .NumPr .Ilvl =_bfba .NewCT_DecimalNumber ();_eaeb ._ddd .NumPr .Ilvl .ValAttr =int64 (idx );};

// SetName sets the name of the style.
func (_gaaee Style )SetName (name string ){_gaaee ._bcdge .Name =_bfba .NewCT_String ();_gaaee ._bcdge .Name .ValAttr =name ;};

// RightToLeft returns true if paragraph text goes from right to left.
func (_afbcc ParagraphProperties )RightToLeft ()bool {return _bdg (_afbcc ._ddd .RPr .Rtl )};

// Name returns the name of the style if set.
func (_egfb Style )Name ()string {if _egfb ._bcdge .Name ==nil {return "";};return _egfb ._bcdge .Name .ValAttr ;};func (_abf Paragraph )ensurePPr (){if _abf ._efa .PPr ==nil {_abf ._efa .PPr =_bfba .NewCT_PPr ();};};

// SetToolTip sets the tooltip text for a hyperlink.
func (_ebe HyperLink )SetToolTip (text string ){if text ==""{_ebe ._cgcb .TooltipAttr =nil ;}else {_ebe ._cgcb .TooltipAttr =_efb .String (text );};};func _gcbb (_afef *_bfba .CT_TblWidth ,_cbb _ebdb .Distance ){_afef .TypeAttr =_bfba .ST_TblWidthDxa ;_afef .WAttr =&_bfba .ST_MeasurementOrPercent {};_afef .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_afef .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (_cbb /_ebdb .Dxa ));};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_bagc ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_bagc ._beb .KeepLines =nil ;}else {_bagc ._beb .KeepLines =_bfba .NewCT_OnOff ();};};

// SetWidthPercent sets the table to a width percentage.
func (_abcbg TableProperties )SetWidthPercent (pct float64 ){_abcbg ._eaae .TblW =_bfba .NewCT_TblWidth ();_abcbg ._eaae .TblW .TypeAttr =_bfba .ST_TblWidthPct ;_abcbg ._eaae .TblW .WAttr =&_bfba .ST_MeasurementOrPercent {};_abcbg ._eaae .TblW .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_abcbg ._eaae .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (pct *50));};

// X returns the inner wrapped XML type.
func (_gefd TableProperties )X ()*_bfba .CT_TblPr {return _gefd ._eaae };

// SetLeft sets the cell left margin
func (_gaa CellMargins )SetLeft (d _ebdb .Distance ){_gaa ._dfcc .Left =_bfba .NewCT_TblWidth ();_gcbb (_gaa ._dfcc .Left ,d );};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_daeb FormField )PossibleValues ()[]string {if _daeb ._agc .DdList ==nil {return nil ;};_dbf :=[]string {};for _ ,_cdag :=range _daeb ._agc .DdList .ListEntry {if _cdag ==nil {continue ;};_dbf =append (_dbf ,_cdag .ValAttr );};return _dbf ;};

// StyleID returns the style ID.
func (_bcaaf Style )StyleID ()string {if _bcaaf ._bcdge .StyleIdAttr ==nil {return "";};return *_bcaaf ._bcdge .StyleIdAttr ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_cfc ParagraphSpacing )SetAfter (after _ebdb .Distance ){_cfc ._caeg .AfterAttr =&_agge .ST_TwipsMeasure {};_cfc ._caeg .AfterAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (after /_ebdb .Twips ));};

// AddStyle adds a new empty style.
func (_dga Styles )AddStyle (styleID string ,t _bfba .ST_StyleType ,isDefault bool )Style {_bbg :=_bfba .NewCT_Style ();_bbg .TypeAttr =t ;if isDefault {_bbg .DefaultAttr =&_agge .ST_OnOff {};_bbg .DefaultAttr .Bool =_efb .Bool (isDefault );};_bbg .StyleIdAttr =_efb .String (styleID );_dga ._cebd .Style =append (_dga ._cebd .Style ,_bbg );return Style {_bbg };};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_gdb RunProperties )RStyle ()string {if _gdb ._eece .RStyle !=nil {return _gdb ._eece .RStyle .ValAttr ;};return "";};

// SetStartIndent controls the start indent of the paragraph.
func (_ged ParagraphStyleProperties )SetStartIndent (m _ebdb .Distance ){if _ged ._beb .Ind ==nil {_ged ._beb .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_ged ._beb .Ind .StartAttr =nil ;}else {_ged ._beb .Ind .StartAttr =&_bfba .ST_SignedTwipsMeasure {};_ged ._beb .Ind .StartAttr .Int64 =_efb .Int64 (int64 (m /_ebdb .Twips ));};};

// Runs returns all of the runs in a paragraph.
func (_ecb Paragraph )Runs ()[]Run {_dgga :=[]Run {};for _ ,_ffdb :=range _ecb ._efa .EG_PContent {for _ ,_agd :=range _ffdb .EG_ContentRunContent {if _agd .R !=nil {_dgga =append (_dgga ,Run {_ecb ._efgb ,_agd .R });};if _agd .Sdt !=nil &&_agd .Sdt .SdtContent !=nil {for _ ,_degg :=range _agd .Sdt .SdtContent .EG_ContentRunContent {if _degg .R !=nil {_dgga =append (_dgga ,Run {_ecb ._efgb ,_degg .R });};};};};};return _dgga ;};

// SetColor sets a specific color or auto.
func (_faee Color )SetColor (v _degb .Color ){if v .IsAuto (){_faee ._dded .ValAttr .ST_HexColorAuto =_bfba .ST_HexColorAutoAuto ;_faee ._dded .ValAttr .ST_HexColorRGB =nil ;}else {_faee ._dded .ValAttr .ST_HexColorAuto =_bfba .ST_HexColorAutoUnset ;_faee ._dded .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};

// InsertRowAfter inserts a row after another row
func (_cae Table )InsertRowAfter (r Row )Row {for _dfdd ,_eee :=range _cae ._fccd .EG_ContentRowContent {if len (_eee .Tr )> 0&&r .X ()==_eee .Tr [0]{_ebdc :=_bfba .NewEG_ContentRowContent ();if len (_cae ._fccd .EG_ContentRowContent )<=_dfdd +2{return _cae .AddRow ();};_cae ._fccd .EG_ContentRowContent =append (_cae ._fccd .EG_ContentRowContent ,nil );copy (_cae ._fccd .EG_ContentRowContent [_dfdd +2:],_cae ._fccd .EG_ContentRowContent [_dfdd +1:]);_cae ._fccd .EG_ContentRowContent [_dfdd +1]=_ebdc ;_eafcd :=_bfba .NewCT_Row ();_ebdc .Tr =append (_ebdc .Tr ,_eafcd );return Row {_cae ._bbbd ,_eafcd };};};return _cae .AddRow ();};

// TableProperties are the properties for a table within a document
type TableProperties struct{_eaae *_bfba .CT_TblPr };

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_fga AnchoredDrawing )SetHAlignment (h _bfba .WdST_AlignH ){_fga ._fdgd .PositionH .Choice =&_bfba .WdCT_PosHChoice {};_fga ._fdgd .PositionH .Choice .Align =h ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_abe AnchoredDrawing )GetImage ()(_age .ImageRef ,bool ){_ccca :=_abe ._fdgd .Graphic .GraphicData .Any ;if len (_ccca )> 0{_dgec ,_eed :=_ccca [0].(*_dafb .Pic );if _eed {if _dgec .BlipFill !=nil &&_dgec .BlipFill .Blip !=nil &&_dgec .BlipFill .Blip .EmbedAttr !=nil {return _abe ._efbc .GetImageByRelID (*_dgec .BlipFill .Blip .EmbedAttr );};};};return _age .ImageRef {},false ;};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_edga TableProperties )TableLook ()TableLook {if _edga ._eaae .TblLook ==nil {_edga ._eaae .TblLook =_bfba .NewCT_TblLook ();};return TableLook {_edga ._eaae .TblLook };};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_b Bookmark )SetName (name string ){_b ._dc .NameAttr =name };

// SetHeader sets a section header.
func (_ecee Section )SetHeader (h Header ,t _bfba .ST_HdrFtr ){_ab :=_bfba .NewEG_HdrFtrReferences ();_ecee ._gggd .EG_HdrFtrReferences =append (_ecee ._gggd .EG_HdrFtrReferences ,_ab );_ab .HeaderReference =_bfba .NewCT_HdrFtrRef ();_ab .HeaderReference .TypeAttr =t ;_adgg :=_ecee ._dbac ._dbg .FindRIDForN (h .Index (),_efb .HeaderType );if _adgg ==""{_fcbg .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_ab .HeaderReference .IdAttr =_adgg ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dda Header )AddImage (i _age .Image )(_age .ImageRef ,error ){var _aag _age .Relationships ;for _ebab ,_aaea :=range _dda ._feda ._bafc {if _aaea ==_dda ._fbcb {_aag =_dda ._feda ._gagb [_ebab ];};};_ccgc :=_age .MakeImageRef (i ,&_dda ._feda .DocBase ,_aag );if i .Data ==nil &&i .Path ==""{return _ccgc ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ccgc ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ccgc ,_ecbc .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_dda ._feda .Images =append (_dda ._feda .Images ,_ccgc );_dafa :=_fae .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_dda ._feda .Images ),i .Format );_bcg :=_aag .AddRelationship (_dafa ,_efb .ImageType );_ccgc .SetRelID (_bcg .X ().IdAttr );return _ccgc ,nil ;};

// Paragraphs returns the paragraphs defined in a footnote.
func (_dfcg Footnote )Paragraphs ()[]Paragraph {_ecce :=[]Paragraph {};for _ ,_ffb :=range _dfcg .content (){for _ ,_bdef :=range _ffb .P {_ecce =append (_ecce ,Paragraph {_dfcg ._ccdd ,_bdef });};};return _ecce ;};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_cbf ParagraphProperties )EastAsiaFont ()string {if _dadg :=_cbf ._ddd .RPr .RFonts ;_dadg !=nil {if _dadg .EastAsiaAttr !=nil {return *_dadg .EastAsiaAttr ;};};return "";};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_ece *Document )MailMerge (mergeContent map[string ]string ){_dggg :=_ece .mergeFields ();_fdb :=map[Paragraph ][]Run {};for _ ,_dfd :=range _dggg {_dba ,_gede :=mergeContent [_dfd ._fdde ];if _gede {if _dfd ._gdg {_dba =_efacb .ToUpper (_dba );}else if _dfd ._ccfe {_dba =_efacb .ToLower (_dba );}else if _dfd ._afga {_dba =_efacb .Title (_dba );}else if _dfd ._dbgb {_acee :=_bfgf .Buffer {};for _bcae ,_adcc :=range _dba {if _bcae ==0{_acee .WriteRune (_bgce .ToUpper (_adcc ));}else {_acee .WriteRune (_adcc );};};_dba =_acee .String ();};if _dba !=""&&_dfd ._aab !=""{_dba =_dfd ._aab +_dba ;};if _dba !=""&&_dfd ._aagc !=""{_dba =_dba +_dfd ._aagc ;};};if _dfd ._fcd {if len (_dfd ._cggd .FldSimple )==1&&len (_dfd ._cggd .FldSimple [0].EG_PContent )==1&&len (_dfd ._cggd .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_dfbb :=&_bfba .EG_ContentRunContent {};_dfbb .R =_dfd ._cggd .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_dfd ._cggd .FldSimple =nil ;_cgbc :=Run {_ece ,_dfbb .R };_cgbc .ClearContent ();_cgbc .AddText (_dba );_dfd ._cggd .EG_ContentRunContent =append (_dfd ._cggd .EG_ContentRunContent ,_dfbb );};}else {_afe :=_dfd ._gbce .Runs ();for _cca :=_dfd ._gbb ;_cca <=_dfd ._degf ;_cca ++{if _cca ==_dfd ._cabf +1{_afe [_cca ].ClearContent ();_afe [_cca ].AddText (_dba );}else {_fdb [_dfd ._gbce ]=append (_fdb [_dfd ._gbce ],_afe [_cca ]);};};};};for _fbgca ,_cegbc :=range _fdb {for _ ,_fff :=range _cegbc {_fbgca .RemoveRun (_fff );};};_ece .Settings .RemoveMailMerge ();};

// SetSize sets the size of the displayed image on the page.
func (_ecbb AnchoredDrawing )SetSize (w ,h _ebdb .Distance ){_ecbb ._fdgd .Extent .CxAttr =int64 (float64 (w *_ebdb .Pixel72 )/_ebdb .EMU );_ecbb ._fdgd .Extent .CyAttr =int64 (float64 (h *_ebdb .Pixel72 )/_ebdb .EMU );};

// Color controls the run or styles color.
type Color struct{_dded *_bfba .CT_Color };

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_fdgbe ParagraphProperties )SizeMeasure ()string {if _gaab :=_fdgbe ._ddd .RPr .Sz ;_gaab !=nil {_edeb :=_gaab .ValAttr ;if _edeb .ST_PositiveUniversalMeasure !=nil {return *_edeb .ST_PositiveUniversalMeasure ;};};return "";};

// SetLeftIndent controls the left indent of the paragraph.
func (_afccf ParagraphStyleProperties )SetLeftIndent (m _ebdb .Distance ){if _afccf ._beb .Ind ==nil {_afccf ._beb .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_afccf ._beb .Ind .LeftAttr =nil ;}else {_afccf ._beb .Ind .LeftAttr =&_bfba .ST_SignedTwipsMeasure {};_afccf ._beb .Ind .LeftAttr .Int64 =_efb .Int64 (int64 (m /_ebdb .Twips ));};};

// X returns the inner wrapped XML type.
func (_dfac Fonts )X ()*_bfba .CT_Fonts {return _dfac ._cdgg };

// Borders allows manipulation of the table borders.
func (_acce TableStyleProperties )Borders ()TableBorders {if _acce ._fdce .TblBorders ==nil {_acce ._fdce .TblBorders =_bfba .NewCT_TblBorders ();};return TableBorders {_acce ._fdce .TblBorders };};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_eacc *Document ;_ddd *_bfba .CT_PPr ;};

// IsItalic returns true if the run has been set to italics.
func (_cbegg RunProperties )IsItalic ()bool {return _cbegg .ItalicValue ()==OnOffValueOn };

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_efbc *Document ;_fdgd *_bfba .WdAnchor ;};

// GetOrCreateCustomProperties returns the custom properties of the document (and if they not exist yet, creating them first)
func (_adggd *Document )GetOrCreateCustomProperties ()_age .CustomProperties {if _adggd .CustomProperties .X ()==nil {_adggd .createCustomProperties ();};return _adggd .CustomProperties ;};

// Properties returns the numbering level paragraph properties.
func (_cdaac NumberingLevel )Properties ()ParagraphStyleProperties {if _cdaac ._eae .PPr ==nil {_cdaac ._eae .PPr =_bfba .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cdaac ._eae .PPr };};

// Borders allows manipulation of the table borders.
func (_ag TableProperties )Borders ()TableBorders {if _ag ._eaae .TblBorders ==nil {_ag ._eaae .TblBorders =_bfba .NewCT_TblBorders ();};return TableBorders {_ag ._eaae .TblBorders };};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_caag ParagraphProperties )ComplexSizeMeasure ()string {if _edd :=_caag ._ddd .RPr .SzCs ;_edd !=nil {_abbf :=_edd .ValAttr ;if _abbf .ST_PositiveUniversalMeasure !=nil {return *_abbf .ST_PositiveUniversalMeasure ;};};return "";};

// Footer is a footer for a document section.
type Footer struct{_dgee *Document ;_eafb *_bfba .Ftr ;};

// Caps returns true if paragraph font is capitalized.
func (_faefg ParagraphProperties )Caps ()bool {return _bdg (_faefg ._ddd .RPr .Caps )};func (_gae *Document )insertParagraph (_bgeb Paragraph ,_faeff bool )Paragraph {if _gae ._aca .Body ==nil {return _gae .AddParagraph ();};_bgd :=_bgeb .X ();for _ ,_ecf :=range _gae ._aca .Body .EG_BlockLevelElts {for _ ,_gbcff :=range _ecf .EG_ContentBlockContent {for _fdg ,_bcf :=range _gbcff .P {if _bcf ==_bgd {_gcg :=_bfba .NewCT_P ();_gbcff .P =append (_gbcff .P ,nil );if _faeff {copy (_gbcff .P [_fdg +1:],_gbcff .P [_fdg :]);_gbcff .P [_fdg ]=_gcg ;}else {copy (_gbcff .P [_fdg +2:],_gbcff .P [_fdg +1:]);_gbcff .P [_fdg +1]=_gcg ;};return Paragraph {_gae ,_gcg };};};for _ ,_cfab :=range _gbcff .Tbl {for _ ,_dbdb :=range _cfab .EG_ContentRowContent {for _ ,_daa :=range _dbdb .Tr {for _ ,_dfag :=range _daa .EG_ContentCellContent {for _ ,_cgab :=range _dfag .Tc {for _ ,_efaa :=range _cgab .EG_BlockLevelElts {for _ ,_dgg :=range _efaa .EG_ContentBlockContent {for _fegf ,_bec :=range _dgg .P {if _bec ==_bgd {_acc :=_bfba .NewCT_P ();_dgg .P =append (_dgg .P ,nil );if _faeff {copy (_dgg .P [_fegf +1:],_dgg .P [_fegf :]);_dgg .P [_fegf ]=_acc ;}else {copy (_dgg .P [_fegf +2:],_dgg .P [_fegf +1:]);_dgg .P [_fegf +1]=_acc ;};return Paragraph {_gae ,_acc };};};};};};};};};};if _gbcff .Sdt !=nil &&_gbcff .Sdt .SdtContent !=nil &&_gbcff .Sdt .SdtContent .P !=nil {for _ecc ,_afd :=range _gbcff .Sdt .SdtContent .P {if _afd ==_bgd {_cec :=_bfba .NewCT_P ();_gbcff .Sdt .SdtContent .P =append (_gbcff .Sdt .SdtContent .P ,nil );if _faeff {copy (_gbcff .Sdt .SdtContent .P [_ecc +1:],_gbcff .Sdt .SdtContent .P [_ecc :]);_gbcff .Sdt .SdtContent .P [_ecc ]=_cec ;}else {copy (_gbcff .Sdt .SdtContent .P [_ecc +2:],_gbcff .Sdt .SdtContent .P [_ecc +1:]);_gbcff .Sdt .SdtContent .P [_ecc +1]=_cec ;};return Paragraph {_gae ,_cec };};};};};};return _gae .AddParagraph ();};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_eff *Document )Validate ()error {if _eff ==nil ||_eff ._aca ==nil {return _ecbc .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_bfed :=range []func ()error {_eff .validateTableCells ,_eff .validateBookmarks }{if _gfce :=_bfed ();_gfce !=nil {return _gfce ;};};if _acaf :=_eff ._aca .Validate ();_acaf !=nil {return _acaf ;};return nil ;};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_bfba .NewStyles ()}};

// SetAlignment sets the paragraph alignment
func (_bafbc NumberingLevel )SetAlignment (j _bfba .ST_Jc ){if j ==_bfba .ST_JcUnset {_bafbc ._eae .LvlJc =nil ;}else {_bafbc ._eae .LvlJc =_bfba .NewCT_Jc ();_bafbc ._eae .LvlJc .ValAttr =j ;};};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_ffe RunProperties )ItalicValue ()OnOffValue {return _dcb (_ffe ._eece .I )};

// X returns the inner wrapped XML type.
func (_gbca TableLook )X ()*_bfba .CT_TblLook {return _gbca ._bd };

// Clear removes all of the content from within a run.
func (_dbe Run )Clear (){_dbe ._gcf .EG_RunInnerContent =nil };

// SetVAlignment sets the vertical alignment for an anchored image.
func (_g AnchoredDrawing )SetVAlignment (v _bfba .WdST_AlignV ){_g ._fdgd .PositionV .Choice =&_bfba .WdCT_PosVChoice {};_g ._fdgd .PositionV .Choice .Align =v ;};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_ed ,_cegb :=_cfage .Open (filename );if _cegb !=nil {return nil ,_fae .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cegb );};defer _ed .Close ();_bacfb ,_cegb :=_cfage .Stat (filename );if _cegb !=nil {return nil ,_fae .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cegb );};_ =_bacfb ;return Read (_ed ,_bacfb .Size ());};

// SetBold sets the run to bold.
func (_beg RunProperties )SetBold (b bool ){if !b {_beg ._eece .B =nil ;_beg ._eece .BCs =nil ;}else {_beg ._eece .B =_bfba .NewCT_OnOff ();_beg ._eece .BCs =_bfba .NewCT_OnOff ();};};type mergeFieldInfo struct{_fdde string ;_aagc string ;_aab string ;_gdg bool ;_ccfe bool ;_dbgb bool ;_afga bool ;_gbce Paragraph ;_gbb ,_cabf ,_degf int ;_cggd *_bfba .EG_PContent ;_fcd bool ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_gce TableBorders )SetBottom (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_gce ._dgafc .Bottom =_bfba .NewCT_Border ();_fedc (_gce ._dgafc .Bottom ,t ,c ,thickness );};

// Style is a style within the styles.xml file.
type Style struct{_bcdge *_bfba .CT_Style };

// SetHANSITheme sets the font H ANSI Theme.
func (_bacf Fonts )SetHANSITheme (t _bfba .ST_Theme ){_bacf ._cdgg .HAnsiThemeAttr =t };

// Italic returns true if paragraph font is italic.
func (_afaf ParagraphProperties )Italic ()bool {_fabb :=_afaf ._ddd .RPr ;return _bdg (_fabb .I )||_bdg (_fabb .ICs );};

// SetColor sets the text color.
func (_bded RunProperties )SetColor (c _degb .Color ){_bded ._eece .Color =_bfba .NewCT_Color ();_bded ._eece .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// SetPrimaryStyle marks the style as a primary style.
func (_abdb Style )SetPrimaryStyle (b bool ){if b {_abdb ._bcdge .QFormat =_bfba .NewCT_OnOff ();}else {_abdb ._bcdge .QFormat =nil ;};};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_ddaa CellProperties )SetColumnSpan (cols int ){if cols ==0{_ddaa ._ecfa .GridSpan =nil ;}else {_ddaa ._ecfa .GridSpan =_bfba .NewCT_DecimalNumber ();_ddaa ._ecfa .GridSpan .ValAttr =int64 (cols );};};

// SetImprint sets the run to imprinted text.
func (_dedec RunProperties )SetImprint (b bool ){if !b {_dedec ._eece .Imprint =nil ;}else {_dedec ._eece .Imprint =_bfba .NewCT_OnOff ();};};

// SetRight sets the right border to a specified type, color and thickness.
func (_caff CellBorders )SetRight (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_caff ._ggff .Right =_bfba .NewCT_Border ();_fedc (_caff ._ggff .Right ,t ,c ,thickness );};func (_faga *Document )addCustomRelationships (){_faga .ContentTypes .AddOverride ("/\u0064o\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063u\u0073\u0074\u006f\u006d.x\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065n\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u0075\u0073\u0074\u006f\u006d\u002d\u0070r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073+\u0078\u006d\u006c");_faga .Rels .AddRelationship ("\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c",_efb .CustomPropertiesType );};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_fdf *Document )Paragraphs ()[]Paragraph {_beea :=[]Paragraph {};if _fdf ._aca .Body ==nil {return nil ;};for _ ,_dg :=range _fdf ._aca .Body .EG_BlockLevelElts {for _ ,_fcfd :=range _dg .EG_ContentBlockContent {for _ ,_bccf :=range _fcfd .P {_beea =append (_beea ,Paragraph {_fdf ,_bccf });};};};for _ ,_babe :=range _fdf .Tables (){for _ ,_fed :=range _babe .Rows (){for _ ,_aac :=range _fed .Cells (){_beea =append (_beea ,_aac .Paragraphs ()...);};};};return _beea ;};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_gb TableLook )SetHorizontalBanding (on bool ){if !on {_gb ._bd .NoHBandAttr =&_agge .ST_OnOff {};_gb ._bd .NoHBandAttr .ST_OnOff1 =_agge .ST_OnOff1On ;}else {_gb ._bd .NoHBandAttr =&_agge .ST_OnOff {};_gb ._bd .NoHBandAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;};};

// Paragraphs returns the paragraphs within a structured document tag.
func (_edda StructuredDocumentTag )Paragraphs ()[]Paragraph {if _edda ._fafb .SdtContent ==nil {return nil ;};_cge :=[]Paragraph {};for _ ,_ef :=range _edda ._fafb .SdtContent .P {_cge =append (_cge ,Paragraph {_edda ._dddg ,_ef });};return _cge ;};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_bcge Paragraph )RemoveEndnote (id int64 ){_baf :=_bcge ._efgb ._fdgb ;var _fdbfc int ;for _cbbg ,_dgf :=range _baf .CT_Endnotes .Endnote {if _dgf .IdAttr ==id {_fdbfc =_cbbg ;};};_fdbfc =0;_baf .CT_Endnotes .Endnote [_fdbfc ]=nil ;_baf .CT_Endnotes .Endnote [_fdbfc ]=_baf .CT_Endnotes .Endnote [len (_baf .CT_Endnotes .Endnote )-1];_baf .CT_Endnotes .Endnote =_baf .CT_Endnotes .Endnote [:len (_baf .CT_Endnotes .Endnote )-1];var _befb Run ;for _ ,_bbcb :=range _bcge .Runs (){if _egf ,_cfdd :=_bbcb .IsEndnote ();_egf {if _cfdd ==id {_befb =_bbcb ;};};};_bcge .RemoveRun (_befb );};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_fgd RunProperties )SetCharacterSpacing (size _ebdb .Distance ){_fgd ._eece .Spacing =_bfba .NewCT_SignedTwipsMeasure ();_fgd ._eece .Spacing .ValAttr .Int64 =_efb .Int64 (int64 (size /_ebdb .Twips ));};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_fbgd ParagraphStyleProperties )SetSpacing (before ,after _ebdb .Distance ){if _fbgd ._beb .Spacing ==nil {_fbgd ._beb .Spacing =_bfba .NewCT_Spacing ();};if before ==_ebdb .Zero {_fbgd ._beb .Spacing .BeforeAttr =nil ;}else {_fbgd ._beb .Spacing .BeforeAttr =&_agge .ST_TwipsMeasure {};_fbgd ._beb .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (before /_ebdb .Twips ));};if after ==_ebdb .Zero {_fbgd ._beb .Spacing .AfterAttr =nil ;}else {_fbgd ._beb .Spacing .AfterAttr =&_agge .ST_TwipsMeasure {};_fbgd ._beb .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (after /_ebdb .Twips ));};};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_feeg Style )SetUnhideWhenUsed (b bool ){if b {_feeg ._bcdge .UnhideWhenUsed =_bfba .NewCT_OnOff ();}else {_feeg ._bcdge .UnhideWhenUsed =nil ;};};

// EastAsiaFont returns the name of run font family for East Asia.
func (_cabfb RunProperties )EastAsiaFont ()string {if _gbcfd :=_cabfb ._eece .RFonts ;_gbcfd !=nil {if _gbcfd .EastAsiaAttr !=nil {return *_gbcfd .EastAsiaAttr ;};};return "";};

// HyperLink is a link within a document.
type HyperLink struct{_bbge *Document ;_cgcb *_bfba .CT_Hyperlink ;};

// SetEndIndent controls the end indentation.
func (_geaf ParagraphProperties )SetEndIndent (m _ebdb .Distance ){if _geaf ._ddd .Ind ==nil {_geaf ._ddd .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_geaf ._ddd .Ind .EndAttr =nil ;}else {_geaf ._ddd .Ind .EndAttr =&_bfba .ST_SignedTwipsMeasure {};_geaf ._ddd .Ind .EndAttr .Int64 =_efb .Int64 (int64 (m /_ebdb .Twips ));};};

// SetSize sets the font size for a run.
func (_gcae RunProperties )SetSize (size _ebdb .Distance ){_gcae ._eece .Sz =_bfba .NewCT_HpsMeasure ();_gcae ._eece .Sz .ValAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (size /_ebdb .HalfPoint ));_gcae ._eece .SzCs =_bfba .NewCT_HpsMeasure ();_gcae ._eece .SzCs .ValAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (size /_ebdb .HalfPoint ));};

// Margins allows controlling individual cell margins.
func (_gbg CellProperties )Margins ()CellMargins {if _gbg ._ecfa .TcMar ==nil {_gbg ._ecfa .TcMar =_bfba .NewCT_TcMar ();};return CellMargins {_gbg ._ecfa .TcMar };};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_ffa AnchoredDrawing )SetOffset (x ,y _ebdb .Distance ){_ffa .SetXOffset (x );_ffa .SetYOffset (y )};

// SetWidthAuto sets the the cell width to automatic.
func (_adgf CellProperties )SetWidthAuto (){_adgf ._ecfa .TcW =_bfba .NewCT_TblWidth ();_adgf ._ecfa .TcW .TypeAttr =_bfba .ST_TblWidthAuto ;};

// Styles returns all styles.
func (_dae Styles )Styles ()[]Style {_cccg :=[]Style {};for _ ,_gcba :=range _dae ._cebd .Style {_cccg =append (_cccg ,Style {_gcba });};return _cccg ;};

// VerticalAlign returns the value of run vertical align.
func (_deb RunProperties )VerticalAlignment ()_agge .ST_VerticalAlignRun {if _gff :=_deb ._eece .VertAlign ;_gff !=nil {return _gff .ValAttr ;};return 0;};

// SetEffect sets a text effect on the run.
func (_acca RunProperties )SetEffect (e _bfba .ST_TextEffect ){if e ==_bfba .ST_TextEffectUnset {_acca ._eece .Effect =nil ;}else {_acca ._eece .Effect =_bfba .NewCT_TextEffect ();_acca ._eece .Effect .ValAttr =_bfba .ST_TextEffectShimmer ;};};

// RemoveParagraph removes a paragraph from the footnote.
func (_cgc Footnote )RemoveParagraph (p Paragraph ){for _ ,_dccc :=range _cgc .content (){for _cfgb ,_gca :=range _dccc .P {if _gca ==p ._efa {copy (_dccc .P [_cfgb :],_dccc .P [_cfgb +1:]);_dccc .P =_dccc .P [0:len (_dccc .P )-1];return ;};};};};

// SetAlignment controls the paragraph alignment
func (_fbge ParagraphProperties )SetAlignment (align _bfba .ST_Jc ){if align ==_bfba .ST_JcUnset {_fbge ._ddd .Jc =nil ;}else {_fbge ._ddd .Jc =_bfba .NewCT_Jc ();_fbge ._ddd .Jc .ValAttr =align ;};};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_bb *Document ;_gcf *_bfba .CT_R ;};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_bdfbg Paragraph )AddFootnote (text string )Footnote {var _ecec int64 ;if _bdfbg ._efgb .HasFootnotes (){for _ ,_fgfc :=range _bdfbg ._efgb .Footnotes (){if _fgfc .id ()> _ecec {_ecec =_fgfc .id ();};};_ecec ++;}else {_ecec =0;_bdfbg ._efgb ._acf =&_bfba .Footnotes {};_bdfbg ._efgb ._acf .CT_Footnotes =_bfba .CT_Footnotes {};_bdfbg ._efgb ._acf .Footnote =make ([]*_bfba .CT_FtnEdn ,0);};_bbea :=_bfba .NewCT_FtnEdn ();_bcbc :=_bfba .NewCT_FtnEdnRef ();_bcbc .IdAttr =_ecec ;_bdfbg ._efgb ._acf .CT_Footnotes .Footnote =append (_bdfbg ._efgb ._acf .CT_Footnotes .Footnote ,_bbea );_gbcg :=_bdfbg .AddRun ();_gdcg :=_gbcg .Properties ();_gdcg .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_gbcg ._gcf .EG_RunInnerContent =[]*_bfba .EG_RunInnerContent {_bfba .NewEG_RunInnerContent ()};_gbcg ._gcf .EG_RunInnerContent [0].FootnoteReference =_bcbc ;_adcb :=Footnote {_bdfbg ._efgb ,_bbea };_adcb ._aecf .IdAttr =_ecec ;_adcb ._aecf .EG_BlockLevelElts =[]*_bfba .EG_BlockLevelElts {_bfba .NewEG_BlockLevelElts ()};_dfde :=_adcb .AddParagraph ();_dfde .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_dfde ._efa .PPr .RPr =_bfba .NewCT_ParaRPr ();_ccc :=_dfde .AddRun ();_ccc .AddTab ();_ccc .AddText (text );return _adcb ;};

// Type returns the type of the style.
func (_cga Style )Type ()_bfba .ST_StyleType {return _cga ._bcdge .TypeAttr };

// Italic returns true if run font is italic.
func (_adcd RunProperties )Italic ()bool {_dcc :=_adcd ._eece ;return _bdg (_dcc .I )||_bdg (_dcc .ICs )};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_bdgd TableStyleProperties )SetCellSpacingPercent (pct float64 ){_bdgd ._fdce .TblCellSpacing =_bfba .NewCT_TblWidth ();_bdgd ._fdce .TblCellSpacing .TypeAttr =_bfba .ST_TblWidthPct ;_bdgd ._fdce .TblCellSpacing .WAttr =&_bfba .ST_MeasurementOrPercent {};_bdgd ._fdce .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_bdgd ._fdce .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (pct *50));};

// Tables returns the tables defined in the footer.
func (_fba Footer )Tables ()[]Table {_edgcc :=[]Table {};if _fba ._eafb ==nil {return nil ;};for _ ,_fbgg :=range _fba ._eafb .EG_ContentBlockContent {for _ ,_ff :=range _fba ._dgee .tables (_fbgg ){_edgcc =append (_edgcc ,_ff );};};return _edgcc ;};func (_cgad *Document )InsertTableBefore (relativeTo Paragraph )Table {return _cgad .insertTable (relativeTo ,true );};

// Strike returns true if paragraph is striked.
func (_ggf ParagraphProperties )Strike ()bool {return _bdg (_ggf ._ddd .RPr .Strike )};

// SetAll sets all of the borders to a given value.
func (_cddd TableBorders )SetAll (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_cddd .SetBottom (t ,c ,thickness );_cddd .SetLeft (t ,c ,thickness );_cddd .SetRight (t ,c ,thickness );_cddd .SetTop (t ,c ,thickness );_cddd .SetInsideHorizontal (t ,c ,thickness );_cddd .SetInsideVertical (t ,c ,thickness );};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_gbga Run )AddDrawingAnchored (img _age .ImageRef )(AnchoredDrawing ,error ){_afg :=_gbga .newIC ();_afg .Drawing =_bfba .NewCT_Drawing ();_egae :=_bfba .NewWdAnchor ();_bdba :=AnchoredDrawing {_gbga ._bb ,_egae };_egae .SimplePosAttr =_efb .Bool (false );_egae .AllowOverlapAttr =true ;_egae .CNvGraphicFramePr =_bfc .NewCT_NonVisualGraphicFrameProperties ();_afg .Drawing .Anchor =append (_afg .Drawing .Anchor ,_egae );_egae .Graphic =_bfc .NewGraphic ();_egae .Graphic .GraphicData =_bfc .NewCT_GraphicalObjectData ();_egae .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_egae .SimplePos .XAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_egae .SimplePos .YAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_egae .PositionH .RelativeFromAttr =_bfba .WdST_RelFromHPage ;_egae .PositionH .Choice =&_bfba .WdCT_PosHChoice {};_egae .PositionH .Choice .PosOffset =_efb .Int32 (0);_egae .PositionV .RelativeFromAttr =_bfba .WdST_RelFromVPage ;_egae .PositionV .Choice =&_bfba .WdCT_PosVChoice {};_egae .PositionV .Choice .PosOffset =_efb .Int32 (0);_egae .Extent .CxAttr =int64 (float64 (img .Size ().X *_ebdb .Pixel72 )/_ebdb .EMU );_egae .Extent .CyAttr =int64 (float64 (img .Size ().Y *_ebdb .Pixel72 )/_ebdb .EMU );_egae .Choice =&_bfba .WdEG_WrapTypeChoice {};_egae .Choice .WrapSquare =_bfba .NewWdCT_WrapSquare ();_egae .Choice .WrapSquare .WrapTextAttr =_bfba .WdST_WrapTextBothSides ;_fdbe :=0x7FFFFFFF&_dabbb .Uint32 ();_egae .DocPr .IdAttr =_fdbe ;_dadc :=_dafb .NewPic ();_dadc .NvPicPr .CNvPr .IdAttr =_fdbe ;_gec :=img .RelID ();if _gec ==""{return _bdba ,_ecbc .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_egae .Graphic .GraphicData .Any =append (_egae .Graphic .GraphicData .Any ,_dadc );_dadc .BlipFill =_bfc .NewCT_BlipFillProperties ();_dadc .BlipFill .Blip =_bfc .NewCT_Blip ();_dadc .BlipFill .Blip .EmbedAttr =&_gec ;_dadc .BlipFill .Stretch =_bfc .NewCT_StretchInfoProperties ();_dadc .BlipFill .Stretch .FillRect =_bfc .NewCT_RelativeRect ();_dadc .SpPr =_bfc .NewCT_ShapeProperties ();_dadc .SpPr .Xfrm =_bfc .NewCT_Transform2D ();_dadc .SpPr .Xfrm .Off =_bfc .NewCT_Point2D ();_dadc .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_dadc .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_efb .Int64 (0);_dadc .SpPr .Xfrm .Ext =_bfc .NewCT_PositiveSize2D ();_dadc .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_ebdb .Point );_dadc .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_ebdb .Point );_dadc .SpPr .PrstGeom =_bfc .NewCT_PresetGeometry2D ();_dadc .SpPr .PrstGeom .PrstAttr =_bfc .ST_ShapeTypeRect ;return _bdba ,nil ;};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_faag Paragraph )AddBookmark (name string )Bookmark {_fdec :=_bfba .NewEG_PContent ();_agdaf :=_bfba .NewEG_ContentRunContent ();_fdec .EG_ContentRunContent =append (_fdec .EG_ContentRunContent ,_agdaf );_gac :=_bfba .NewEG_RunLevelElts ();_agdaf .EG_RunLevelElts =append (_agdaf .EG_RunLevelElts ,_gac );_gf :=_bfba .NewEG_RangeMarkupElements ();_bggd :=_bfba .NewCT_Bookmark ();_gf .BookmarkStart =_bggd ;_gac .EG_RangeMarkupElements =append (_gac .EG_RangeMarkupElements ,_gf );_gf =_bfba .NewEG_RangeMarkupElements ();_gf .BookmarkEnd =_bfba .NewCT_MarkupRange ();_gac .EG_RangeMarkupElements =append (_gac .EG_RangeMarkupElements ,_gf );_faag ._efa .EG_PContent =append (_faag ._efa .EG_PContent ,_fdec );_aea :=Bookmark {_bggd };_aea .SetName (name );return _aea ;};

// ClearColor clears the text color.
func (_cab RunProperties )ClearColor (){_cab ._eece .Color =nil };

// Endnote is an individual endnote reference within the document.
type Endnote struct{_ffd *Document ;_ege *_bfba .CT_FtnEdn ;};

// AddRun adds a run to a paragraph.
func (_egbd Paragraph )AddRun ()Run {_cbbc :=_bfba .NewEG_PContent ();_egbd ._efa .EG_PContent =append (_egbd ._efa .EG_PContent ,_cbbc );_ggbb :=_bfba .NewEG_ContentRunContent ();_cbbc .EG_ContentRunContent =append (_cbbc .EG_ContentRunContent ,_ggbb );_bddd :=_bfba .NewCT_R ();_ggbb .R =_bddd ;return Run {_egbd ._efgb ,_bddd };};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_gfcec *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_ceff :=[]StructuredDocumentTag {};for _ ,_fgdd :=range _gfcec ._aca .Body .EG_BlockLevelElts {for _ ,_eagca :=range _fgdd .EG_ContentBlockContent {if _eagca .Sdt !=nil {_ceff =append (_ceff ,StructuredDocumentTag {_gfcec ,_eagca .Sdt });};};};return _ceff ;};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_fead HyperLink )AddRun ()Run {_caed :=_bfba .NewEG_ContentRunContent ();_fead ._cgcb .EG_ContentRunContent =append (_fead ._cgcb .EG_ContentRunContent ,_caed );_gaaa :=_bfba .NewCT_R ();_caed .R =_gaaa ;return Run {_fead ._bbge ,_gaaa };};

// X returns the inner wrapped XML type.
func (_aedc Color )X ()*_bfba .CT_Color {return _aedc ._dded };

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_eae *_bfba .CT_Lvl };

// RemoveParagraph removes a paragraph from a footer.
func (_efda Footer )RemoveParagraph (p Paragraph ){for _ ,_fagb :=range _efda ._eafb .EG_ContentBlockContent {for _fdbf ,_bdgg :=range _fagb .P {if _bdgg ==p ._efa {copy (_fagb .P [_fdbf :],_fagb .P [_fdbf +1:]);_fagb .P =_fagb .P [0:len (_fagb .P )-1];return ;};};};};

// UnderlineColor returns the hex color value of run underline.
func (_gace RunProperties )UnderlineColor ()string {if _dfacg :=_gace ._eece .U ;_dfacg !=nil {_baga :=_dfacg .ColorAttr ;if _baga !=nil &&_baga .ST_HexColorRGB !=nil {return *_baga .ST_HexColorRGB ;};};return "";};func (_cbca *Document )validateBookmarks ()error {_efdg :=make (map[string ]struct{});for _ ,_fbae :=range _cbca .Bookmarks (){if _ ,_ffcb :=_efdg [_fbae .Name ()];_ffcb {return _fae .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_fbae .Name ());};_efdg [_fbae .Name ()]=struct{}{};};return nil ;};func (_bf *Document )insertTable (_cecb Paragraph ,_eab bool )Table {_bcac :=_bf ._aca .Body ;if _bcac ==nil {return _bf .AddTable ();};_agca :=_cecb .X ();for _acfc ,_dfaee :=range _bcac .EG_BlockLevelElts {for _ ,_bbb :=range _dfaee .EG_ContentBlockContent {for _fcba ,_fabd :=range _bbb .P {if _fabd ==_agca {_caec :=_bfba .NewCT_Tbl ();_bagaa :=_bfba .NewEG_BlockLevelElts ();_bagd :=_bfba .NewEG_ContentBlockContent ();_bagaa .EG_ContentBlockContent =append (_bagaa .EG_ContentBlockContent ,_bagd );_bagd .Tbl =append (_bagd .Tbl ,_caec );_bcac .EG_BlockLevelElts =append (_bcac .EG_BlockLevelElts ,nil );if _eab {copy (_bcac .EG_BlockLevelElts [_acfc +1:],_bcac .EG_BlockLevelElts [_acfc :]);_bcac .EG_BlockLevelElts [_acfc ]=_bagaa ;if _fcba !=0{_afb :=_bfba .NewEG_BlockLevelElts ();_dcbf :=_bfba .NewEG_ContentBlockContent ();_afb .EG_ContentBlockContent =append (_afb .EG_ContentBlockContent ,_dcbf );_dcbf .P =_bbb .P [:_fcba ];_bcac .EG_BlockLevelElts =append (_bcac .EG_BlockLevelElts ,nil );copy (_bcac .EG_BlockLevelElts [_acfc +1:],_bcac .EG_BlockLevelElts [_acfc :]);_bcac .EG_BlockLevelElts [_acfc ]=_afb ;};_bbb .P =_bbb .P [_fcba :];}else {copy (_bcac .EG_BlockLevelElts [_acfc +2:],_bcac .EG_BlockLevelElts [_acfc +1:]);_bcac .EG_BlockLevelElts [_acfc +1]=_bagaa ;if _fcba !=len (_bbb .P )-1{_efgaf :=_bfba .NewEG_BlockLevelElts ();_daeaa :=_bfba .NewEG_ContentBlockContent ();_efgaf .EG_ContentBlockContent =append (_efgaf .EG_ContentBlockContent ,_daeaa );_daeaa .P =_bbb .P [_fcba +1:];_bcac .EG_BlockLevelElts =append (_bcac .EG_BlockLevelElts ,nil );copy (_bcac .EG_BlockLevelElts [_acfc +3:],_bcac .EG_BlockLevelElts [_acfc +2:]);_bcac .EG_BlockLevelElts [_acfc +2]=_efgaf ;};_bbb .P =_bbb .P [:_fcba +1];};return Table {_bf ,_caec };};};for _ ,_cbce :=range _bbb .Tbl {for _ ,_edb :=range _cbce .EG_ContentRowContent {for _ ,_bgbb :=range _edb .Tr {for _ ,_ffdd :=range _bgbb .EG_ContentCellContent {for _ ,_abag :=range _ffdd .Tc {for _ggbc ,_aed :=range _abag .EG_BlockLevelElts {for _ ,_cbcc :=range _aed .EG_ContentBlockContent {for _efaba ,_dagce :=range _cbcc .P {if _dagce ==_agca {_gbfc :=_bfba .NewEG_BlockLevelElts ();_efbgb :=_bfba .NewEG_ContentBlockContent ();_gbfc .EG_ContentBlockContent =append (_gbfc .EG_ContentBlockContent ,_efbgb );_dadd :=_bfba .NewCT_Tbl ();_efbgb .Tbl =append (_efbgb .Tbl ,_dadd );_abag .EG_BlockLevelElts =append (_abag .EG_BlockLevelElts ,nil );if _eab {copy (_abag .EG_BlockLevelElts [_ggbc +1:],_abag .EG_BlockLevelElts [_ggbc :]);_abag .EG_BlockLevelElts [_ggbc ]=_gbfc ;if _efaba !=0{_fbbdg :=_bfba .NewEG_BlockLevelElts ();_gcdg :=_bfba .NewEG_ContentBlockContent ();_fbbdg .EG_ContentBlockContent =append (_fbbdg .EG_ContentBlockContent ,_gcdg );_gcdg .P =_cbcc .P [:_efaba ];_abag .EG_BlockLevelElts =append (_abag .EG_BlockLevelElts ,nil );copy (_abag .EG_BlockLevelElts [_ggbc +1:],_abag .EG_BlockLevelElts [_ggbc :]);_abag .EG_BlockLevelElts [_ggbc ]=_fbbdg ;};_cbcc .P =_cbcc .P [_efaba :];}else {copy (_abag .EG_BlockLevelElts [_ggbc +2:],_abag .EG_BlockLevelElts [_ggbc +1:]);_abag .EG_BlockLevelElts [_ggbc +1]=_gbfc ;if _efaba !=len (_bbb .P )-1{_fdef :=_bfba .NewEG_BlockLevelElts ();_cbfg :=_bfba .NewEG_ContentBlockContent ();_fdef .EG_ContentBlockContent =append (_fdef .EG_ContentBlockContent ,_cbfg );_cbfg .P =_cbcc .P [_efaba +1:];_abag .EG_BlockLevelElts =append (_abag .EG_BlockLevelElts ,nil );copy (_abag .EG_BlockLevelElts [_ggbc +3:],_abag .EG_BlockLevelElts [_ggbc +2:]);_abag .EG_BlockLevelElts [_ggbc +2]=_fdef ;};_cbcc .P =_cbcc .P [:_efaba +1];};return Table {_bf ,_dadd };};};};};};};};};};};};return _bf .AddTable ();};

// X returns the inner wrapped XML type.
func (_ge TableConditionalFormatting )X ()*_bfba .CT_TblStylePr {return _ge ._acb };

// ParagraphProperties returns the paragraph style properties.
func (_ecba Style )ParagraphProperties ()ParagraphStyleProperties {if _ecba ._bcdge .PPr ==nil {_ecba ._bcdge .PPr =_bfba .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_ecba ._bcdge .PPr };};

// Shadow returns true if run shadow is on.
func (_abdc RunProperties )Shadow ()bool {return _bdg (_abdc ._eece .Shadow )};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_cgb CellProperties )SetVerticalAlignment (align _bfba .ST_VerticalJc ){if align ==_bfba .ST_VerticalJcUnset {_cgb ._ecfa .VAlign =nil ;}else {_cgb ._ecfa .VAlign =_bfba .NewCT_VerticalJc ();_cgb ._ecfa .VAlign .ValAttr =align ;};};

// Tables returns the tables defined in the header.
func (_fbfe Header )Tables ()[]Table {_gbcf :=[]Table {};if _fbfe ._fbcb ==nil {return nil ;};for _ ,_fbfg :=range _fbfe ._fbcb .EG_ContentBlockContent {for _ ,_bdf :=range _fbfe ._feda .tables (_fbfg ){_gbcf =append (_gbcf ,_bdf );};};return _gbcf ;};

// Bookmarks returns all of the bookmarks defined in the document.
func (_egfe Document )Bookmarks ()[]Bookmark {if _egfe ._aca .Body ==nil {return nil ;};_fccdb :=[]Bookmark {};for _ ,_eccee :=range _egfe ._aca .Body .EG_BlockLevelElts {for _ ,_agb :=range _eccee .EG_ContentBlockContent {for _ ,_dbb :=range _gbef (_agb ){_fccdb =append (_fccdb ,_dbb );};};};return _fccdb ;};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_dage Run )AddTab (){_bgb :=_dage .newIC ();_bgb .Tab =_bfba .NewCT_Empty ()};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_fdce *_bfba .CT_TblPrBase };

// SetAlignment sets the alignment of a table within the page.
func (_dfcb TableProperties )SetAlignment (align _bfba .ST_JcTable ){if align ==_bfba .ST_JcTableUnset {_dfcb ._eaae .Jc =nil ;}else {_dfcb ._eaae .Jc =_bfba .NewCT_JcTable ();_dfcb ._eaae .Jc .ValAttr =align ;};};

// Clear clears all content within a header
func (_aeca Header )Clear (){_aeca ._fbcb .EG_ContentBlockContent =nil };

// Rows returns the rows defined in the table.
func (_adccb Table )Rows ()[]Row {_aec :=[]Row {};for _ ,_fded :=range _adccb ._fccd .EG_ContentRowContent {for _ ,_fdgbc :=range _fded .Tr {_aec =append (_aec ,Row {_adccb ._bbbd ,_fdgbc });};if _fded .Sdt !=nil &&_fded .Sdt .SdtContent !=nil {for _ ,_fcef :=range _fded .Sdt .SdtContent .Tr {_aec =append (_aec ,Row {_adccb ._bbbd ,_fcef });};};};return _aec ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_bcgbg ParagraphSpacing )SetLineSpacing (d _ebdb .Distance ,rule _bfba .ST_LineSpacingRule ){if rule ==_bfba .ST_LineSpacingRuleUnset {_bcgbg ._caeg .LineRuleAttr =_bfba .ST_LineSpacingRuleUnset ;_bcgbg ._caeg .LineAttr =nil ;}else {_bcgbg ._caeg .LineRuleAttr =rule ;_bcgbg ._caeg .LineAttr =&_bfba .ST_SignedTwipsMeasure {};_bcgbg ._caeg .LineAttr .Int64 =_efb .Int64 (int64 (d /_ebdb .Twips ));};};

// SetOutlineLevel sets the outline level of this style.
func (_adeg ParagraphStyleProperties )SetOutlineLevel (lvl int ){_adeg ._beb .OutlineLvl =_bfba .NewCT_DecimalNumber ();_adeg ._beb .OutlineLvl .ValAttr =int64 (lvl );};

// Font returns the name of run font family.
func (_dea RunProperties )Font ()string {if _agda :=_dea ._eece .RFonts ;_agda !=nil {if _agda .AsciiAttr !=nil {return *_agda .AsciiAttr ;}else if _agda .HAnsiAttr !=nil {return *_agda .HAnsiAttr ;}else if _agda .CsAttr !=nil {return *_agda .CsAttr ;};};return "";};

// Save writes the document to an io.Writer in the Zip package format.
func (_gee *Document )Save (w _fe .Writer )error {if _dbacd :=_gee ._aca .Validate ();_dbacd !=nil {_efb .Log ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_dbacd );};_dd :=_efb .DocTypeDocument ;if !_abaf .GetLicenseKey ().IsLicensed ()&&_eeb .Lookup ("\u0074\u0065\u0073\u0074\u002e\u0076")==nil {_fae .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_fae .Println ("\u002d\u0020Ge\u0074\u0020\u0061 \u006c\u0069\u0063\u0065nse\u0020on\u0020\u0068\u0074\u0074\u0070\u0073\u003a//\u0075\u006e\u0069\u0064\u006f\u0063\u002ei\u006f");_dfaa :=_gee .AddHeader ();_aeda :=_dfaa .AddParagraph ();_aeda .Properties ().AddTabStop (2.5*_ebdb .Inch ,_bfba .ST_TabJcCenter ,_bfba .ST_TabTlcNone );_gdab :=_aeda .AddRun ();_gdab .AddTab ();_gdab .AddText ("\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064\u0020\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020\u006ff\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u002d\u0020\u0047\u0065\u0074\u0020\u0061\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a/\u002f\u0075\u006ei\u0064\u006f\u0063\u002e\u0069\u006f");_gdab .Properties ().SetBold (true );_gdab .Properties ().SetSize (14);_gdab .Properties ().SetColor (_degb .Red );_gee .BodySection ().SetHeader (_dfaa ,_bfba .ST_HdrFtrDefault );};_ecbg :=_bfeg .NewWriter (w );defer _ecbg .Close ();if _fabf :=_egb .MarshalXML (_ecbg ,_efb .BaseRelsFilename ,_gee .Rels .X ());_fabf !=nil {return _fabf ;};if _bgggc :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .ExtendedPropertiesType ,_gee .AppProperties .X ());_bgggc !=nil {return _bgggc ;};if _cbcb :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .CorePropertiesType ,_gee .CoreProperties .X ());_cbcb !=nil {return _cbcb ;};if _gee .CustomProperties .X ()!=nil {if _bdag :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .CustomPropertiesType ,_gee .CustomProperties .X ());_bdag !=nil {return _bdag ;};};if _gee .Thumbnail !=nil {_ffdf ,_bag :=_ecbg .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _bag !=nil {return _bag ;};if _ce :=_bbd .Encode (_ffdf ,_gee .Thumbnail ,nil );_ce !=nil {return _ce ;};};if _fagcg :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .SettingsType ,_gee .Settings .X ());_fagcg !=nil {return _fagcg ;};_dfbg :=_efb .AbsoluteFilename (_dd ,_efb .OfficeDocumentType ,0);if _edg :=_egb .MarshalXML (_ecbg ,_dfbg ,_gee ._aca );_edg !=nil {return _edg ;};if _gdbe :=_egb .MarshalXML (_ecbg ,_egb .RelationsPathFor (_dfbg ),_gee ._dbg .X ());_gdbe !=nil {return _gdbe ;};if _gee .Numbering .X ()!=nil {if _dfbd :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .NumberingType ,_gee .Numbering .X ());_dfbd !=nil {return _dfbd ;};};if _ebee :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .StylesType ,_gee .Styles .X ());_ebee !=nil {return _ebee ;};if _gee ._bfa !=nil {if _ccd :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .WebSettingsType ,_gee ._bfa );_ccd !=nil {return _ccd ;};};if _gee ._efaf !=nil {if _ggb :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .FontTableType ,_gee ._efaf );_ggb !=nil {return _ggb ;};};if _gee ._fdgb !=nil {if _gfca :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .EndNotesType ,_gee ._fdgb );_gfca !=nil {return _gfca ;};};if _gee ._acf !=nil {if _bbed :=_egb .MarshalXMLByType (_ecbg ,_dd ,_efb .FootNotesType ,_gee ._acf );_bbed !=nil {return _bbed ;};};for _fca ,_bbeb :=range _gee ._edead {if _bgdf :=_egb .MarshalXMLByTypeIndex (_ecbg ,_dd ,_efb .ThemeType ,_fca +1,_bbeb );_bgdf !=nil {return _bgdf ;};};for _bgec ,_gge :=range _gee ._bafc {_bgg :=_efb .AbsoluteFilename (_dd ,_efb .HeaderType ,_bgec +1);if _ebaa :=_egb .MarshalXML (_ecbg ,_bgg ,_gge );_ebaa !=nil {return _ebaa ;};if !_gee ._gagb [_bgec ].IsEmpty (){_egb .MarshalXML (_ecbg ,_egb .RelationsPathFor (_bgg ),_gee ._gagb [_bgec ].X ());};};for _gbgcb ,_bbcd :=range _gee ._accc {_ace :=_efb .AbsoluteFilename (_dd ,_efb .FooterType ,_gbgcb +1);if _bfea :=_egb .MarshalXMLByTypeIndex (_ecbg ,_dd ,_efb .FooterType ,_gbgcb +1,_bbcd );_bfea !=nil {return _bfea ;};if !_gee ._ada [_gbgcb ].IsEmpty (){_egb .MarshalXML (_ecbg ,_egb .RelationsPathFor (_ace ),_gee ._ada [_gbgcb ].X ());};};for _efgfg ,_abd :=range _gee .Images {if _gaee :=_age .AddImageToZip (_ecbg ,_abd ,_efgfg +1,_efb .DocTypeDocument );_gaee !=nil {return _gaee ;};};if _gde :=_egb .MarshalXML (_ecbg ,_efb .ContentTypesFilename ,_gee .ContentTypes .X ());_gde !=nil {return _gde ;};if _bce :=_gee .WriteExtraFiles (_ecbg );_bce !=nil {return _bce ;};return _ecbg .Close ();};func (_gd *Document )tables (_gbdc *_bfba .EG_ContentBlockContent )[]Table {_gagc :=[]Table {};for _ ,_efd :=range _gbdc .Tbl {_gagc =append (_gagc ,Table {_gd ,_efd });for _ ,_dce :=range _efd .EG_ContentRowContent {for _ ,_geddd :=range _dce .Tr {for _ ,_fgfb :=range _geddd .EG_ContentCellContent {for _ ,_cafe :=range _fgfb .Tc {for _ ,_fdebb :=range _cafe .EG_BlockLevelElts {for _ ,_gecec :=range _fdebb .EG_ContentBlockContent {for _ ,_feg :=range _gd .tables (_gecec ){_gagc =append (_gagc ,_feg );};};};};};};};};return _gagc ;};

// X returns the inner wrapped XML type.
func (_dge Footnote )X ()*_bfba .CT_FtnEdn {return _dge ._aecf };

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_dfed RunProperties )CharacterSpacingValue ()int64 {if _fgg :=_dfed ._eece .Spacing ;_fgg !=nil {_ddgb :=_fgg .ValAttr ;if _ddgb .Int64 !=nil {return *_ddgb .Int64 ;};};return int64 (0);};

// Headers returns the headers defined in the document.
func (_gbaed *Document )Headers ()[]Header {_acfe :=[]Header {};for _ ,_fde :=range _gbaed ._bafc {_acfe =append (_acfe ,Header {_gbaed ,_fde });};return _acfe ;};

// Color returns the style's Color.
func (_dagea RunProperties )Color ()Color {if _dagea ._eece .Color ==nil {_dagea ._eece .Color =_bfba .NewCT_Color ();};return Color {_dagea ._eece .Color };};

// InitializeDefault constructs the default styles.
func (_cgcd Styles )InitializeDefault (){_cgcd .initializeDocDefaults ();_cgcd .initializeStyleDefaults ();};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_eea Run )DrawingAnchored ()[]AnchoredDrawing {_afbc :=[]AnchoredDrawing {};for _ ,_fbfa :=range _eea ._gcf .EG_RunInnerContent {if _fbfa .Drawing ==nil {continue ;};for _ ,_fdeg :=range _fbfa .Drawing .Anchor {_afbc =append (_afbc ,AnchoredDrawing {_eea ._bb ,_fdeg });};};return _afbc ;};

// AddParagraph adds a paragraph to the header.
func (_aeef Header )AddParagraph ()Paragraph {_cbfc :=_bfba .NewEG_ContentBlockContent ();_aeef ._fbcb .EG_ContentBlockContent =append (_aeef ._fbcb .EG_ContentBlockContent ,_cbfc );_gbcb :=_bfba .NewCT_P ();_cbfc .P =append (_cbfc .P ,_gbcb );return Paragraph {_aeef ._feda ,_gbcb };};

// SetWidth sets the cell width to a specified width.
func (_abc CellProperties )SetWidth (d _ebdb .Distance ){_abc ._ecfa .TcW =_bfba .NewCT_TblWidth ();_abc ._ecfa .TcW .TypeAttr =_bfba .ST_TblWidthDxa ;_abc ._ecfa .TcW .WAttr =&_bfba .ST_MeasurementOrPercent {};_abc ._ecfa .TcW .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_abc ._ecfa .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (d /_ebdb .Twips ));};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_fef ParagraphProperties )AddSection (t _bfba .ST_SectionMark )Section {_fef ._ddd .SectPr =_bfba .NewCT_SectPr ();if t !=_bfba .ST_SectionMarkUnset {_fef ._ddd .SectPr .Type =_bfba .NewCT_SectType ();_fef ._ddd .SectPr .Type .ValAttr =t ;};return Section {_fef ._eacc ,_fef ._ddd .SectPr };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_dgage CellBorders )SetBottom (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_dgage ._ggff .Bottom =_bfba .NewCT_Border ();_fedc (_dgage ._ggff .Bottom ,t ,c ,thickness );};

// Footers returns the footers defined in the document.
func (_acd *Document )Footers ()[]Footer {_ggcb :=[]Footer {};for _ ,_ebda :=range _acd ._accc {_ggcb =append (_ggcb ,Footer {_acd ,_ebda });};return _ggcb ;};

// Paragraph is a paragraph within a document.
type Paragraph struct{_efgb *Document ;_efa *_bfba .CT_P ;};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ebf RunProperties )SizeMeasure ()string {if _cace :=_ebf ._eece .Sz ;_cace !=nil {_aafc :=_cace .ValAttr ;if _aafc .ST_PositiveUniversalMeasure !=nil {return *_aafc .ST_PositiveUniversalMeasure ;};};return "";};func (_bgae *Document )createCustomProperties (){_bgae .CustomProperties =_age .NewCustomProperties ();_bgae .addCustomRelationships ();};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_dc *_bfba .CT_Bookmark };

// SetLeft sets the left border to a specified type, color and thickness.
func (_cfag TableBorders )SetLeft (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_cfag ._dgafc .Left =_bfba .NewCT_Border ();_fedc (_cfag ._dgafc .Left ,t ,c ,thickness );};

// Outline returns true if paragraph outline is on.
func (_aggc ParagraphProperties )Outline ()bool {return _bdg (_aggc ._ddd .RPr .Outline )};

// Properties returns the cell properties.
func (_aebg Cell )Properties ()CellProperties {if _aebg ._ccfb .TcPr ==nil {_aebg ._ccfb .TcPr =_bfba .NewCT_TcPr ();};return CellProperties {_aebg ._ccfb .TcPr };};

// Font returns the name of paragraph font family.
func (_fcea ParagraphProperties )Font ()string {if _bbgb :=_fcea ._ddd .RPr .RFonts ;_bbgb !=nil {if _bbgb .AsciiAttr !=nil {return *_bbgb .AsciiAttr ;}else if _bbgb .HAnsiAttr !=nil {return *_bbgb .HAnsiAttr ;}else if _bbgb .CsAttr !=nil {return *_bbgb .CsAttr ;};};return "";};func (_ggd Document )mergeFields ()[]mergeFieldInfo {_acac :=[]Paragraph {};_cefg :=[]mergeFieldInfo {};for _ ,_dgb :=range _ggd .Tables (){for _ ,_ec :=range _dgb .Rows (){for _ ,_debcc :=range _ec .Cells (){_acac =append (_acac ,_debcc .Paragraphs ()...);};};};_acac =append (_acac ,_ggd .Paragraphs ()...);for _ ,_aff :=range _acac {_gdd :=_aff .Runs ();_caecb :=-1;_ggfa :=-1;_cbg :=-1;_bafgf :=mergeFieldInfo {};for _ ,_add :=range _aff ._efa .EG_PContent {for _ ,_bfac :=range _add .FldSimple {if _efacb .Contains (_bfac .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_dfadb :=_bgcb (_bfac .InstrAttr );_dfadb ._fcd =true ;_dfadb ._gbce =_aff ;_dfadb ._cggd =_add ;_cefg =append (_cefg ,_dfadb );};};};for _gabf :=0;_gabf < len (_gdd );_gabf ++{_dfa :=_gdd [_gabf ];for _ ,_bcdb :=range _dfa .X ().EG_RunInnerContent {if _bcdb .FldChar !=nil {switch _bcdb .FldChar .FldCharTypeAttr {case _bfba .ST_FldCharTypeBegin :_caecb =_gabf ;case _bfba .ST_FldCharTypeSeparate :_ggfa =_gabf ;case _bfba .ST_FldCharTypeEnd :_cbg =_gabf ;if _bafgf ._fdde !=""{_bafgf ._gbce =_aff ;_bafgf ._gbb =_caecb ;_bafgf ._degf =_cbg ;_bafgf ._cabf =_ggfa ;_cefg =append (_cefg ,_bafgf );};_caecb =-1;_ggfa =-1;_cbg =-1;_bafgf =mergeFieldInfo {};};}else if _bcdb .InstrText !=nil &&_efacb .Contains (_bcdb .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _caecb !=-1&&_cbg ==-1{_bafgf =_bgcb (_bcdb .InstrText .Content );};};};};};return _cefg ;};

// X returns the inner wrapped XML type.
func (_dfgb Styles )X ()*_bfba .Styles {return _dfgb ._cebd };

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_cffc TableLook )SetLastRow (on bool ){if !on {_cffc ._bd .LastRowAttr =&_agge .ST_OnOff {};_cffc ._bd .LastRowAttr .ST_OnOff1 =_agge .ST_OnOff1Off ;}else {_cffc ._bd .LastRowAttr =&_agge .ST_OnOff {};_cffc ._bd .LastRowAttr .ST_OnOff1 =_agge .ST_OnOff1On ;};};

// SetTarget sets the URL target of the hyperlink.
func (_befa HyperLink )SetTarget (url string ){_aage :=_befa ._bbge .AddHyperlink (url );_befa ._cgcb .IdAttr =_efb .String (_age .Relationship (_aage ).ID ());_befa ._cgcb .AnchorAttr =nil ;};

// RemoveParagraph removes a paragraph from a document.
func (_eaeg *Document )RemoveParagraph (p Paragraph ){if _eaeg ._aca .Body ==nil {return ;};for _ ,_cde :=range _eaeg ._aca .Body .EG_BlockLevelElts {for _ ,_fdgaa :=range _cde .EG_ContentBlockContent {for _gcgd ,_eade :=range _fdgaa .P {if _eade ==p ._efa {copy (_fdgaa .P [_gcgd :],_fdgaa .P [_gcgd +1:]);_fdgaa .P =_fdgaa .P [0:len (_fdgaa .P )-1];return ;};};if _fdgaa .Sdt !=nil &&_fdgaa .Sdt .SdtContent !=nil &&_fdgaa .Sdt .SdtContent .P !=nil {for _ebeb ,_bdbe :=range _fdgaa .Sdt .SdtContent .P {if _bdbe ==p ._efa {copy (_fdgaa .P [_ebeb :],_fdgaa .P [_ebeb +1:]);_fdgaa .P =_fdgaa .P [0:len (_fdgaa .P )-1];return ;};};};};};};

// X returns the inner wrapped XML type.
func (_cdde Cell )X ()*_bfba .CT_Tc {return _cdde ._ccfb };

// SetShadow sets the run to shadowed text.
func (_addef RunProperties )SetShadow (b bool ){if !b {_addef ._eece .Shadow =nil ;}else {_addef ._eece .Shadow =_bfba .NewCT_OnOff ();};};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_aefd ParagraphProperties )SetFirstLineIndent (m _ebdb .Distance ){if _aefd ._ddd .Ind ==nil {_aefd ._ddd .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_aefd ._ddd .Ind .FirstLineAttr =nil ;}else {_aefd ._ddd .Ind .FirstLineAttr =&_agge .ST_TwipsMeasure {};_aefd ._ddd .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (m /_ebdb .Twips ));};};

// SetBefore sets the spacing that comes before the paragraph.
func (_agcg ParagraphSpacing )SetBefore (before _ebdb .Distance ){_agcg ._caeg .BeforeAttr =&_agge .ST_TwipsMeasure {};_agcg ._caeg .BeforeAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (before /_ebdb .Twips ));};

// SetOutline sets the run to outlined text.
func (_ccdg RunProperties )SetOutline (b bool ){if !b {_ccdg ._eece .Outline =nil ;}else {_ccdg ._eece .Outline =_bfba .NewCT_OnOff ();};};

// SetStyle sets the table style name.
func (_edc TableProperties )SetStyle (name string ){if name ==""{_edc ._eaae .TblStyle =nil ;}else {_edc ._eaae .TblStyle =_bfba .NewCT_String ();_edc ._eaae .TblStyle .ValAttr =name ;};};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_feca RunProperties )SetFontFamily (family string ){if _feca ._eece .RFonts ==nil {_feca ._eece .RFonts =_bfba .NewCT_Fonts ();};_feca ._eece .RFonts .AsciiAttr =_efb .String (family );_feca ._eece .RFonts .HAnsiAttr =_efb .String (family );_feca ._eece .RFonts .EastAsiaAttr =_efb .String (family );};

// SetBottomPct sets the cell bottom margin
func (_gbae CellMargins )SetBottomPct (pct float64 ){_gbae ._dfcc .Bottom =_bfba .NewCT_TblWidth ();_gadf (_gbae ._dfcc .Bottom ,pct );};

// SetFooter sets a section footer.
func (_edcd Section )SetFooter (f Footer ,t _bfba .ST_HdrFtr ){_bdbb :=_bfba .NewEG_HdrFtrReferences ();_edcd ._gggd .EG_HdrFtrReferences =append (_edcd ._gggd .EG_HdrFtrReferences ,_bdbb );_bdbb .FooterReference =_bfba .NewCT_HdrFtrRef ();_bdbb .FooterReference .TypeAttr =t ;_daea :=_edcd ._dbac ._dbg .FindRIDForN (f .Index (),_efb .FooterType );if _daea ==""{_fcbg .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_bdbb .FooterReference .IdAttr =_daea ;};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_bcgg ,_ead :=Open (filename );if _ead !=nil {return nil ,_ead ;};_bcgg ._aca .Body =_bfba .NewCT_Body ();return _bcgg ,nil ;};

// AddParagraph adds a paragraph to the endnote.
func (_cfec Endnote )AddParagraph ()Paragraph {_cac :=_bfba .NewEG_ContentBlockContent ();_fddf :=len (_cfec ._ege .EG_BlockLevelElts [0].EG_ContentBlockContent );_cfec ._ege .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_cfec ._ege .EG_BlockLevelElts [0].EG_ContentBlockContent ,_cac );_daff :=_bfba .NewCT_P ();var _beddf *_bfba .CT_String ;if _fddf !=0{_gage :=len (_cfec ._ege .EG_BlockLevelElts [0].EG_ContentBlockContent [_fddf -1].P );_beddf =_cfec ._ege .EG_BlockLevelElts [0].EG_ContentBlockContent [_fddf -1].P [_gage -1].PPr .PStyle ;}else {_beddf =_bfba .NewCT_String ();_beddf .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_cac .P =append (_cac .P ,_daff );_bfeae :=Paragraph {_cfec ._ffd ,_daff };_bfeae ._efa .PPr =_bfba .NewCT_PPr ();_bfeae ._efa .PPr .PStyle =_beddf ;_bfeae ._efa .PPr .RPr =_bfba .NewCT_ParaRPr ();return _bfeae ;};

// Paragraphs returns the paragraphs defined in a header.
func (_bee Header )Paragraphs ()[]Paragraph {_fd :=[]Paragraph {};for _ ,_afed :=range _bee ._fbcb .EG_ContentBlockContent {for _ ,_eaee :=range _afed .P {_fd =append (_fd ,Paragraph {_bee ._feda ,_eaee });};};for _ ,_gcd :=range _bee .Tables (){for _ ,_eaf :=range _gcd .Rows (){for _ ,_defc :=range _eaf .Cells (){_fd =append (_fd ,_defc .Paragraphs ()...);};};};return _fd ;};

// AddRow adds a row to a table.
func (_faab Table )AddRow ()Row {_eada :=_bfba .NewEG_ContentRowContent ();_faab ._fccd .EG_ContentRowContent =append (_faab ._fccd .EG_ContentRowContent ,_eada );_fbba :=_bfba .NewCT_Row ();_eada .Tr =append (_eada .Tr ,_fbba );return Row {_faab ._bbbd ,_fbba };};

// SetVerticalMerge controls the vertical merging of cells.
func (_ddcc CellProperties )SetVerticalMerge (mergeVal _bfba .ST_Merge ){if mergeVal ==_bfba .ST_MergeUnset {_ddcc ._ecfa .VMerge =nil ;}else {_ddcc ._ecfa .VMerge =_bfba .NewCT_VMerge ();_ddcc ._ecfa .VMerge .ValAttr =mergeVal ;};};

// SetUnderline controls underline for a run style.
func (_eafc RunProperties )SetUnderline (style _bfba .ST_Underline ,c _degb .Color ){if style ==_bfba .ST_UnderlineUnset {_eafc ._eece .U =nil ;}else {_eafc ._eece .U =_bfba .NewCT_Underline ();_eafc ._eece .U .ColorAttr =&_bfba .ST_HexColor {};_eafc ._eece .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_eafc ._eece .U .ValAttr =style ;};};

// X returns the inner wrapped XML type.
func (_egc ParagraphStyleProperties )X ()*_bfba .CT_PPrGeneral {return _egc ._beb };

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_beb *_bfba .CT_PPrGeneral };

// SetShading controls the cell shading.
func (_gbdf CellProperties )SetShading (shd _bfba .ST_Shd ,foreground ,fill _degb .Color ){if shd ==_bfba .ST_ShdUnset {_gbdf ._ecfa .Shd =nil ;}else {_gbdf ._ecfa .Shd =_bfba .NewCT_Shd ();_gbdf ._ecfa .Shd .ValAttr =shd ;_gbdf ._ecfa .Shd .ColorAttr =&_bfba .ST_HexColor {};if foreground .IsAuto (){_gbdf ._ecfa .Shd .ColorAttr .ST_HexColorAuto =_bfba .ST_HexColorAutoAuto ;}else {_gbdf ._ecfa .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_gbdf ._ecfa .Shd .FillAttr =&_bfba .ST_HexColor {};if fill .IsAuto (){_gbdf ._ecfa .Shd .FillAttr .ST_HexColorAuto =_bfba .ST_HexColorAutoAuto ;}else {_gbdf ._ecfa .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// SetColumnBandSize sets the number of Columns in the column band
func (_gggb TableStyleProperties )SetColumnBandSize (cols int64 ){_gggb ._fdce .TblStyleColBandSize =_bfba .NewCT_DecimalNumber ();_gggb ._fdce .TblStyleColBandSize .ValAttr =cols ;};

// X returns the inner wrapped XML type.
func (_fcbf Paragraph )X ()*_bfba .CT_P {return _fcbf ._efa };

// SetAll sets all of the borders to a given value.
func (_ebgc CellBorders )SetAll (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_ebgc .SetBottom (t ,c ,thickness );_ebgc .SetLeft (t ,c ,thickness );_ebgc .SetRight (t ,c ,thickness );_ebgc .SetTop (t ,c ,thickness );_ebgc .SetInsideHorizontal (t ,c ,thickness );_ebgc .SetInsideVertical (t ,c ,thickness );};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_eege TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _eege ._acb .PPr ==nil {_eege ._acb .PPr =_bfba .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_eege ._acb .PPr };};

// RightToLeft returns true if run text goes from right to left.
func (_bbbc RunProperties )RightToLeft ()bool {return _bdg (_bbbc ._eece .Rtl )};func _gbef (_gbfd *_bfba .EG_ContentBlockContent )[]Bookmark {_bfcf :=[]Bookmark {};for _ ,_agg :=range _gbfd .P {for _ ,_fbg :=range _agg .EG_PContent {for _ ,_daf :=range _fbg .EG_ContentRunContent {for _ ,_fcbad :=range _daf .EG_RunLevelElts {for _ ,_dbfe :=range _fcbad .EG_RangeMarkupElements {if _dbfe .BookmarkStart !=nil {_bfcf =append (_bfcf ,Bookmark {_dbfe .BookmarkStart });};};};};};};for _ ,_bedba :=range _gbfd .EG_RunLevelElts {for _ ,_fcca :=range _bedba .EG_RangeMarkupElements {if _fcca .BookmarkStart !=nil {_bfcf =append (_bfcf ,Bookmark {_fcca .BookmarkStart });};};};for _ ,_ebef :=range _gbfd .Tbl {for _ ,_egec :=range _ebef .EG_ContentRowContent {for _ ,_dagga :=range _egec .Tr {for _ ,_acdd :=range _dagga .EG_ContentCellContent {for _ ,_gbgag :=range _acdd .Tc {for _ ,_bfce :=range _gbgag .EG_BlockLevelElts {for _ ,_fbbf :=range _bfce .EG_ContentBlockContent {for _ ,_afcc :=range _gbef (_fbbf ){_bfcf =append (_bfcf ,_afcc );};};};};};};};};return _bfcf ;};

// RemoveParagraph removes a paragraph from the endnote.
func (_edgc Endnote )RemoveParagraph (p Paragraph ){for _ ,_dccgg :=range _edgc .content (){for _dafbf ,_beeg :=range _dccgg .P {if _beeg ==p ._efa {copy (_dccgg .P [_dafbf :],_dccgg .P [_dafbf +1:]);_dccgg .P =_dccgg .P [0:len (_dccgg .P )-1];return ;};};};};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_bcd RunProperties )SetVerticalAlignment (v _agge .ST_VerticalAlignRun ){if v ==_agge .ST_VerticalAlignRunUnset {_bcd ._eece .VertAlign =nil ;}else {_bcd ._eece .VertAlign =_bfba .NewCT_VerticalAlignRun ();_bcd ._eece .VertAlign .ValAttr =v ;};};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_ebbb TableProperties )SetCellSpacingPercent (pct float64 ){_ebbb ._eaae .TblCellSpacing =_bfba .NewCT_TblWidth ();_ebbb ._eaae .TblCellSpacing .TypeAttr =_bfba .ST_TblWidthPct ;_ebbb ._eaae .TblCellSpacing .WAttr =&_bfba .ST_MeasurementOrPercent {};_ebbb ._eaae .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bfba .ST_DecimalNumberOrPercent {};_ebbb ._eaae .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_efb .Int64 (int64 (pct *50));};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_bef ParagraphProperties )RStyle ()string {if _bef ._ddd .RPr .RStyle !=nil {return _bef ._ddd .RPr .RStyle .ValAttr ;};return "";};

// SetStyle sets the font size.
func (_dcbe RunProperties )SetStyle (style string ){if style ==""{_dcbe ._eece .RStyle =nil ;}else {_dcbe ._eece .RStyle =_bfba .NewCT_String ();_dcbe ._eece .RStyle .ValAttr =style ;};};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_gcb TableBorders )SetInsideHorizontal (t _bfba .ST_Border ,c _degb .Color ,thickness _ebdb .Distance ){_gcb ._dgafc .InsideH =_bfba .NewCT_Border ();_fedc (_gcb ._dgafc .InsideH ,t ,c ,thickness );};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_cfa FormField )SetChecked (b bool ){if _cfa ._agc .CheckBox ==nil {return ;};if !b {_cfa ._agc .CheckBox .Checked =nil ;}else {_cfa ._agc .CheckBox .Checked =_bfba .NewCT_OnOff ();};};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_caf ParagraphStyleProperties )SetHangingIndent (m _ebdb .Distance ){if _caf ._beb .Ind ==nil {_caf ._beb .Ind =_bfba .NewCT_Ind ();};if m ==_ebdb .Zero {_caf ._beb .Ind .HangingAttr =nil ;}else {_caf ._beb .Ind .HangingAttr =&_agge .ST_TwipsMeasure {};_caf ._beb .Ind .HangingAttr .ST_UnsignedDecimalNumber =_efb .Uint64 (uint64 (m /_ebdb .Twips ));};};

// DoubleStrike returns true if run is double striked.
func (_bac RunProperties )DoubleStrike ()bool {return _bdg (_bac ._eece .Dstrike )};

// SetStart sets the cell start margin
func (_fgdf CellMargins )SetStart (d _ebdb .Distance ){_fgdf ._dfcc .Start =_bfba .NewCT_TblWidth ();_gcbb (_fgdf ._dfcc .Start ,d );};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_fac *Document )AddImage (i _age .Image )(_age .ImageRef ,error ){_egda :=_age .MakeImageRef (i ,&_fac .DocBase ,_fac ._dbg );if i .Data ==nil &&i .Path ==""{return _egda ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _egda ,_ecbc .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _egda ,_ecbc .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_fac .Images =append (_fac .Images ,_egda );_gccb :=_fae .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_fac .Images ),i .Format );_bdfb :=_fac ._dbg .AddRelationship (_gccb ,_efb .ImageType );_fac .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_fac .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fac .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fac .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_fac .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_egda .SetRelID (_bdfb .X ().IdAttr );return _egda ,nil ;};const _fcc ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";

// SetRightPct sets the cell right margin
func (_egbfc CellMargins )SetRightPct (pct float64 ){_egbfc ._dfcc .Right =_bfba .NewCT_TblWidth ();_gadf (_egbfc ._dfcc .Right ,pct );};

// AddDefinition adds a new numbering definition.
func (_gcda Numbering )AddDefinition ()NumberingDefinition {_eda :=_bfba .NewCT_Num ();_gece :=int64 (1);for _ ,_fdgf :=range _gcda .Definitions (){if _fdgf .AbstractNumberID ()>=_gece {_gece =_fdgf .AbstractNumberID ()+1;};};_efac :=int64 (1);for _ ,_ecece :=range _gcda .X ().Num {if _ecece .NumIdAttr >=_efac {_efac =_ecece .NumIdAttr +1;};};_eda .NumIdAttr =_efac ;_eda .AbstractNumId =_bfba .NewCT_DecimalNumber ();_eda .AbstractNumId .ValAttr =_gece ;_gade :=_bfba .NewCT_AbstractNum ();_gade .AbstractNumIdAttr =_gece ;_gcda ._fbcf .AbstractNum =append (_gcda ._fbcf .AbstractNum ,_gade );_gcda ._fbcf .Num =append (_gcda ._fbcf .Num ,_eda );return NumberingDefinition {_gade };};

// X returns the inner wrapped XML type.
func (_dcg CellProperties )X ()*_bfba .CT_TcPr {return _dcg ._ecfa };

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_bc AnchoredDrawing )SetName (name string ){_bc ._fdgd .DocPr .NameAttr =name ;for _ ,_cbgd :=range _bc ._fdgd .Graphic .GraphicData .Any {if _ac ,_fadf :=_cbgd .(*_dafb .Pic );_fadf {_ac .NvPicPr .CNvPr .DescrAttr =_efb .String (name );};};};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_adaf AnchoredDrawing )SetTextWrapNone (){_adaf ._fdgd .Choice =&_bfba .WdEG_WrapTypeChoice {};_adaf ._fdgd .Choice .WrapNone =_bfba .NewWdCT_WrapNone ();};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_ceef TableProperties )SetLayout (l _bfba .ST_TblLayoutType ){if l ==_bfba .ST_TblLayoutTypeUnset ||l ==_bfba .ST_TblLayoutTypeAutofit {_ceef ._eaae .TblLayout =nil ;}else {_ceef ._eaae .TblLayout =_bfba .NewCT_TblLayoutType ();_ceef ._eaae .TblLayout .TypeAttr =l ;};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_de :=_bfba .NewNumbering ();return Numbering {_de }};