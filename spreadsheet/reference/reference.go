//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_gf "errors";_ccd "fmt";_dg "github.com/unidoc/unioffice/spreadsheet/update";_dfb "regexp";_gab "strconv";_df "strings";);

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_df .ToUpper (col );_ca :=uint32 (0);for _ ,_cb :=range col {_ca *=26;_ca +=uint32 (_cb -'A'+1);};return _ca -1;};

// String returns a string representation of ColumnReference.
func (_fc ColumnReference )String ()string {_ccg :=make ([]byte ,0,4);if _fc .AbsoluteColumn {_ccg =append (_ccg ,'$');};_ccg =append (_ccg ,_fc .Column ...);return string (_ccg );};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_b ,_gdd CellReference ,_a error ){_gc :="";_e :=_df .Split (s ,"\u0021");if len (_e )==2{_gc =_e [0];s =_e [1];};_ge :=_df .Split (s ,"\u003a");if len (_ge )!=2{return CellReference {},CellReference {},_gf .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _gc !=""{_ge [0]=_gc +"\u0021"+_ge [0];_ge [1]=_gc +"\u0021"+_ge [1];};_ce ,_a :=ParseCellReference (_ge [0]);if _a !=nil {return CellReference {},CellReference {},_a ;};_dc ,_a :=ParseCellReference (_ge [1]);if _a !=nil {return CellReference {},CellReference {},_a ;};return _ce ,_dc ,nil ;};

// String returns a string representation of CellReference.
func (_db CellReference )String ()string {_dab :=make ([]byte ,0,4);if _db .AbsoluteColumn {_dab =append (_dab ,'$');};_dab =append (_dab ,_db .Column ...);if _db .AbsoluteRow {_dab =append (_dab ,'$');};_dab =_gab .AppendInt (_dab ,int64 (_db .RowIdx ),10);return string (_dab );};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};var _ga =_dfb .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_df .TrimSpace (s );if len (s )< 2{return CellReference {},_gf .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_cd :=CellReference {};_fe :=_df .Split (s ,"\u0021");if len (_fe )==2{_cd .SheetName =_fe [0];s =_fe [1];};if s [0]=='$'{_cd .AbsoluteColumn =true ;s =s [1:];};_g :=-1;_fcgd :for _cba :=0;_cba < len (s );_cba ++{switch {case s [_cba ]>='0'&&s [_cba ]<='9'||s [_cba ]=='$':_g =_cba ;break _fcgd ;};};switch _g {case 0:return CellReference {},_ccd .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",s );case -1:return CellReference {},_ccd .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",s );};_cd .Column =s [0:_g ];if s [_g ]=='$'{_cd .AbsoluteRow =true ;_g ++;};_cd .ColumnIdx =ColumnToIndex (_cd .Column );_f ,_ff :=_gab .ParseUint (s [_g :],10,32);if _ff !=nil {return CellReference {},_ccd .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_ff );};_cd .RowIdx =uint32 (_f );return _cd ,nil ;};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_d ,_feg ColumnReference ,_gef error ){_cbc :="";_gdg :=_df .Split (s ,"\u0021");if len (_gdg )==2{_cbc =_gdg [0];s =_gdg [1];};_cdc :=_df .Split (s ,"\u003a");if len (_cdc )!=2{return ColumnReference {},ColumnReference {},_gf .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _cbc !=""{_cdc [0]=_cbc +"\u0021"+_cdc [0];_cdc [1]=_cbc +"\u0021"+_cdc [1];};_gd ,_gef :=ParseColumnReference (_cdc [0]);if _gef !=nil {return ColumnReference {},ColumnReference {},_gef ;};_cg ,_gef :=ParseColumnReference (_cdc [1]);if _gef !=nil {return ColumnReference {},ColumnReference {},_gef ;};return _gd ,_cg ,nil ;};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_aa *CellReference )Update (updateType _dg .UpdateAction )*CellReference {switch updateType {case _dg .UpdateActionRemoveColumn :_fcg :=_aa ;_fcg .ColumnIdx =_aa .ColumnIdx -1;_fcg .Column =IndexToColumn (_fcg .ColumnIdx );return _fcg ;default:return _aa ;};};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _cc [64+1]byte ;_fd :=len (_cc );_fa :=col ;const _ee =26;for _fa >=_ee {_fd --;_c :=_fa /_ee ;_cc [_fd ]=byte ('A'+uint (_fa -_c *_ee ));_fa =_c -1;};_fd --;_cc [_fd ]=byte ('A'+uint (_fa ));return string (_cc [_fd :]);};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_bb *ColumnReference )Update (updateType _dg .UpdateAction )*ColumnReference {switch updateType {case _dg .UpdateActionRemoveColumn :_aag :=_bb ;_aag .ColumnIdx =_bb .ColumnIdx -1;_aag .Column =IndexToColumn (_aag .ColumnIdx );return _aag ;default:return _bb ;};};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_df .TrimSpace (s );if len (s )< 1{return ColumnReference {},_gf .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_cde :=ColumnReference {};_ba :=_df .Split (s ,"\u0021");if len (_ba )==2{_cde .SheetName =_ba [0];s =_ba [1];};if s [0]=='$'{_cde .AbsoluteColumn =true ;s =s [1:];};if !_ga .MatchString (s ){return ColumnReference {},_gf .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_cde .Column =s ;_cde .ColumnIdx =ColumnToIndex (_cde .Column );return _cde ,nil ;};