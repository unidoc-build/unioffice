//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_ab "encoding/xml";_c "fmt";_ge "github.com/unidoc/unioffice";);type CT_Empty struct{};

// Validate validates the CT_Empty and its children
func (_ca *CT_Empty )Validate ()error {return _ca .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func (_be *Textdata )UnmarshalXML (d *_ab .Decoder ,start _ab .StartElement )error {_be .CT_Rel =*NewCT_Rel ();for _ ,_fade :=range start .Attr {if _fade .Name .Local =="\u0069\u0064"{_fad ,_bf :=_fade .Value ,error (nil );if _bf !=nil {return _bf ;};_be .IdAttr =&_fad ;continue ;};};for {_ag ,_fc :=d .Token ();if _fc !=nil {return _c .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_fc );};if _af ,_bb :=_ag .(_ab .EndElement );_bb &&_af .Name ==start .Name {break ;};};return nil ;};func (_g *Textdata )MarshalXML (e *_ab .Encoder ,start _ab .StartElement )error {start .Attr =append (start .Attr ,_ab .Attr {Name :_ab .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_ab .Attr {Name :_ab .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _g .CT_Rel .MarshalXML (e ,start );};func (_bcb *Iscomment )MarshalXML (e *_ab .Encoder ,start _ab .StartElement )error {start .Attr =append (start .Attr ,_ab .Attr {Name :_ab .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_ab .Attr {Name :_ab .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _bcb .CT_Empty .MarshalXML (e ,start );};type Textdata struct{CT_Rel };

// Validate validates the Iscomment and its children
func (_d *Iscomment )Validate ()error {return _d .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func NewCT_Empty ()*CT_Empty {_cc :=&CT_Empty {};return _cc };

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_efge *CT_Rel )ValidateWithPath (path string )error {return nil };func (_ebg *Iscomment )UnmarshalXML (d *_ab .Decoder ,start _ab .StartElement )error {_ebg .CT_Empty =*NewCT_Empty ();for {_gb ,_ga :=d .Token ();if _ga !=nil {return _c .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_ga );};if _bcg ,_dg :=_gb .(_ab .EndElement );_dg &&_bcg .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Rel and its children
func (_e *CT_Rel )Validate ()error {return _e .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_cbe *Textdata )ValidateWithPath (path string )error {if _bd :=_cbe .CT_Rel .ValidateWithPath (path );_bd !=nil {return _bd ;};return nil ;};type CT_Rel struct{IdAttr *string ;};

// Validate validates the Textdata and its children
func (_cbf *Textdata )Validate ()error {return _cbf .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_fg *CT_Rel )UnmarshalXML (d *_ab .Decoder ,start _ab .StartElement )error {for _ ,_f :=range start .Attr {if _f .Name .Local =="\u0069\u0064"{_dd ,_a :=_f .Value ,error (nil );if _a !=nil {return _a ;};_fg .IdAttr =&_dd ;continue ;};};for {_ae ,_bbe :=d .Token ();if _bbe !=nil {return _c .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_bbe );};if _bdc ,_b :=_ae .(_ab .EndElement );_b &&_bdc .Name ==start .Name {break ;};};return nil ;};func (_eb *CT_Empty )MarshalXML (e *_ab .Encoder ,start _ab .StartElement )error {e .EncodeToken (start );e .EncodeToken (_ab .EndElement {Name :start .Name });return nil ;};func NewTextdata ()*Textdata {_ea :=&Textdata {};_ea .CT_Rel =*NewCT_Rel ();return _ea };func NewCT_Rel ()*CT_Rel {_df :=&CT_Rel {};return _df };type Iscomment struct{CT_Empty };func (_dgf *CT_Rel )MarshalXML (e *_ab .Encoder ,start _ab .StartElement )error {if _dgf .IdAttr !=nil {start .Attr =append (start .Attr ,_ab .Attr {Name :_ab .Name {Local :"\u0069\u0064"},Value :_c .Sprintf ("\u0025\u0076",*_dgf .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_ab .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_dc *CT_Empty )ValidateWithPath (path string )error {return nil };func NewIscomment ()*Iscomment {_cb :=&Iscomment {};_cb .CT_Empty =*NewCT_Empty ();return _cb };func (_caa *CT_Empty )UnmarshalXML (d *_ab .Decoder ,start _ab .StartElement )error {for {_ef ,_cd :=d .Token ();if _cd !=nil {return _c .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_cd );};if _efg ,_ba :=_ef .(_ab .EndElement );_ba &&_efg .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_bc *Iscomment )ValidateWithPath (path string )error {if _agg :=_bc .CT_Empty .ValidateWithPath (path );_agg !=nil {return _agg ;};return nil ;};func init (){_ge .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_ge .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_ge .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_ge .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};