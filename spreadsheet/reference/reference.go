//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_b "errors";_f "fmt";_dg "github.com/unidoc/unioffice/spreadsheet/update";_e "regexp";_ea "strconv";_db "strings";);var _dfc =_e .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// String returns a string representation of CellReference.
func (_eg CellReference )String ()string {_bf :=make ([]byte ,0,4);if _eg .AbsoluteColumn {_bf =append (_bf ,'$');};_bf =append (_bf ,_eg .Column ...);if _eg .AbsoluteRow {_bf =append (_bf ,'$');};_bf =_ea .AppendInt (_bf ,int64 (_eg .RowIdx ),10);return string (_bf );};func _egg (_fc string )(string ,string ,error ){_fd :="";_fbb :=_db .LastIndex (_fc ,"\u0021");if _fbb > -1{_fd =_fc [:_fbb ];_fc =_fc [_fbb +1:];if _fd ==""{return "","",_b .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");};};return _fd ,_fc ,nil ;};

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_db .TrimSpace (s );if len (s )< 2{return CellReference {},_b .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_dc :=CellReference {};_df ,_g ,_dgb :=_egg (s );if _dgb !=nil {return CellReference {},_dgb ;};if _df !=""{_dc .SheetName =_df ;};if s [0]=='$'{_dc .AbsoluteColumn =true ;_g =_g [1:];};_fg :=-1;_gd :for _fgd :=0;_fgd < len (_g );_fgd ++{switch {case _g [_fgd ]>='0'&&_g [_fgd ]<='9'||_g [_fgd ]=='$':_fg =_fgd ;break _gd ;};};switch _fg {case 0:return CellReference {},_f .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_g );case -1:return CellReference {},_f .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_g );};_dc .Column =_g [0:_fg ];if _g [_fg ]=='$'{_dc .AbsoluteRow =true ;_fg ++;};_dc .ColumnIdx =ColumnToIndex (_dc .Column );_fgf ,_dgb :=_ea .ParseUint (_g [_fg :],10,32);if _dgb !=nil {return CellReference {},_f .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_dgb );};if _fgf ==0{return CellReference {},_f .Errorf ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0072\u006f\u0077\u003a \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0030");};_dc .RowIdx =uint32 (_fgf );return _dc ,nil ;};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_db .TrimSpace (s );if len (s )< 1{return ColumnReference {},_b .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_dd :=ColumnReference {};_bc ,_gc ,_c :=_egg (s );if _c !=nil {return ColumnReference {},_c ;};if _bc !=""{_dd .SheetName =_bc ;};if _gc [0]=='$'{_dd .AbsoluteColumn =true ;_gc =_gc [1:];};if !_dfc .MatchString (_gc ){return ColumnReference {},_b .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_dd .Column =_gc ;_dd .ColumnIdx =ColumnToIndex (_dd .Column );return _dd ,nil ;};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _ff [64+1]byte ;_dgdb :=len (_ff );_cb :=col ;const _fb =26;for _cb >=_fb {_dgdb --;_dff :=_cb /_fb ;_ff [_dgdb ]=byte ('A'+uint (_cb -_dff *_fb ));_cb =_dff -1;};_dgdb --;_ff [_dgdb ]=byte ('A'+uint (_cb ));return string (_ff [_dgdb :]);};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_ba *ColumnReference )Update (updateType _dg .UpdateAction )*ColumnReference {switch updateType {case _dg .UpdateActionRemoveColumn :_dgd :=_ba ;_dgd .ColumnIdx =_ba .ColumnIdx -1;_dgd .Column =IndexToColumn (_dgd .ColumnIdx );return _dgd ;default:return _ba ;};};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_ecf ,_ege CellReference ,_bff error ){_fe ,_gb ,_bff :=_egg (s );if _bff !=nil {return CellReference {},CellReference {},_bff ;};_bd :=_db .Split (_gb ,"\u003a");if len (_bd )!=2{return CellReference {},CellReference {},_b .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _fe !=""{_bd [0]=_fe +"\u0021"+_bd [0];_bd [1]=_fe +"\u0021"+_bd [1];};_daf ,_bff :=ParseCellReference (_bd [0]);if _bff !=nil {return CellReference {},CellReference {},_bff ;};_gcb ,_bff :=ParseCellReference (_bd [1]);if _bff !=nil {return CellReference {},CellReference {},_bff ;};return _daf ,_gcb ,nil ;};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_db .ToUpper (col );_dfa :=uint32 (0);for _ ,_ga :=range col {_dfa *=26;_dfa +=uint32 (_ga -'A'+1);};return _dfa -1;};

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_bb *CellReference )Update (updateType _dg .UpdateAction )*CellReference {switch updateType {case _dg .UpdateActionRemoveColumn :_a :=_bb ;_a .ColumnIdx =_bb .ColumnIdx -1;_a .Column =IndexToColumn (_a .ColumnIdx );return _a ;default:return _bb ;};};

// String returns a string representation of ColumnReference.
func (_da ColumnReference )String ()string {_ec :=make ([]byte ,0,4);if _da .AbsoluteColumn {_ec =append (_ec ,'$');};_ec =append (_ec ,_da .Column ...);return string (_ec );};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_ddg ,_gbd ColumnReference ,_ad error ){_gf :="";_dcd :=_db .Split (s ,"\u0021");if len (_dcd )==2{_gf =_dcd [0];s =_dcd [1];};_ee :=_db .Split (s ,"\u003a");if len (_ee )!=2{return ColumnReference {},ColumnReference {},_b .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _gf !=""{_ee [0]=_gf +"\u0021"+_ee [0];_ee [1]=_gf +"\u0021"+_ee [1];};_bg ,_ad :=ParseColumnReference (_ee [0]);if _ad !=nil {return ColumnReference {},ColumnReference {},_ad ;};_bba ,_ad :=ParseColumnReference (_ee [1]);if _ad !=nil {return ColumnReference {},ColumnReference {},_ad ;};return _bg ,_bba ,nil ;};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};