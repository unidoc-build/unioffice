//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_e "bytes";_d "fmt";_ab "github.com/unidoc/unioffice";_fb "io";_dcd "math";_a "strconv";_dc "strings";_g "time";);

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _ccg (_eec ,_dg float64 ,_bbc Format )[]byte {if len (_bbc .Whole )==0{return nil ;};_abbb :=_g .Date (1899,12,30,0,0,0,0,_g .UTC );_efg :=_abbb .Add (_g .Duration (_dg *float64 (24*_g .Hour )));_efg =_gagf (_efg );_bcd :=_a .AppendFloat (nil ,_eec ,'f',-1,64);_aa :=make ([]byte ,0,len (_bcd ));_eg :=0;_gfc :=1;_be :for _ec :=len (_bbc .Whole )-1;_ec >=0;_ec --{_adg :=len (_bcd )-1-_eg ;_gge :=_bbc .Whole [_ec ];switch _gge .Type {case FmtTypeDigit :if _adg >=0{_aa =append (_aa ,_bcd [_adg ]);_eg ++;_gfc =_ec ;}else {_aa =append (_aa ,'0');};case FmtTypeDigitOpt :if _adg >=0{_aa =append (_aa ,_bcd [_adg ]);_eg ++;_gfc =_ec ;}else {for _gdd :=_ec ;_gdd >=0;_gdd --{_aeg :=_bbc .Whole [_gdd ];if _aeg .Type ==FmtTypeLiteral {_aa =append (_aa ,_aeg .Literal );};};break _be ;};case FmtTypeDollar :for _ddf :=_eg ;_ddf < len (_bcd );_ddf ++{_aa =append (_aa ,_bcd [len (_bcd )-1-_ddf ]);_eg ++;};_aa =append (_aa ,'$');case FmtTypeComma :if !_bbc ._fg {_aa =append (_aa ,',');};case FmtTypeLiteral :_aa =append (_aa ,_gge .Literal );case FmtTypeDate :_aa =append (_aa ,_bg (_geg (_efg ,_gge .DateTime ))...);case FmtTypeTime :_aa =append (_aa ,_bg (_ceg (_efg ,_dg ,_gge .DateTime ))...);default:_ab .Log ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_gge );};};_fe :=_bg (_aa );if _eg < len (_bcd )&&(_eg !=0||_bbc ._dad ){_ecg :=len (_bcd )-_eg ;_cgd :=make ([]byte ,len (_fe )+_ecg );copy (_cgd ,_fe [0:_gfc ]);copy (_cgd [_gfc :],_bcd [0:]);copy (_cgd [_gfc +_ecg :],_fe [_gfc :]);_fe =_cgd ;};if _bbc ._fg {_de :=_e .Buffer {};_dgb :=0;for _gbg :=len (_fe )-1;_gbg >=0;_gbg --{if !(_fe [_gbg ]>='0'&&_fe [_gbg ]<='9'){_dgb ++;}else {break ;};};for _fec :=0;_fec < len (_fe );_fec ++{_ea :=(len (_fe )-_fec -_dgb );if _ea %3==0&&_ea !=0&&_fec !=0{_de .WriteByte (',');};_de .WriteByte (_fe [_fec ]);};_fe =_de .Bytes ();};return _fe ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ee bool ;_ad bool ;_fbe bool ;_fg bool ;_ce bool ;_dad bool ;_dd int64 ;_ac int ;};func _ccge (_gaf int64 )int64 {if _gaf < 0{return -_gaf ;};return _gaf ;};

// AddToken adds a format token to the format.
func (_ge *Format )AddToken (t FmtType ,l []byte ){if _ge ._ce {_ge ._ce =false ;return ;};switch t {case FmtTypeDecimal :_ge ._dad =true ;case FmtTypeUnderscore :_ge ._ce =true ;case FmtTypeText :_ge .Whole =append (_ge .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_ge .Whole =append (_ge .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_ge ._ad =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_cc :=range l {if _ge .IsExponential {_ge .Exponent =append (_ge .Exponent ,Token {Type :t ,Literal :_cc });}else if !_ge ._dad {_ge .Whole =append (_ge .Whole ,Token {Type :t ,Literal :_cc });}else {_ge .Fractional =append (_ge .Fractional ,Token {Type :t ,Literal :_cc });};};case FmtTypeDigitOptThousands :_ge ._fg =true ;case FmtTypeFraction :_eb :=_dc .Split (string (l ),"\u002f");if len (_eb )==2{_ge ._ee =true ;_ge ._dd ,_ =_a .ParseInt (_eb [1],10,64);for _ ,_gd :=range _eb [1]{if _gd =='?'||_gd =='0'{_ge ._ac ++;};};};default:_ab .Log ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};const _adce int =-1;func _cfc (_ddfd []byte )[]byte {_aac :=len (_ddfd );_cgg :=false ;_gcc :=false ;for _cac :=len (_ddfd )-1;_cac >=0;_cac --{if _ddfd [_cac ]=='0'&&!_gcc &&!_cgg {_aac =_cac ;}else if _ddfd [_cac ]=='.'{_cgg =true ;}else {_gcc =true ;};};if _cgg &&_gcc {if _ddfd [_aac -1]=='.'{_aac --;};return _ddfd [0:_aac ];};return _ddfd ;};func _gagf (_agbc _g .Time )_g .Time {_agbc =_agbc .UTC ();return _g .Date (_agbc .Year (),_agbc .Month (),_agbc .Day (),_agbc .Hour (),_agbc .Minute (),_agbc .Second (),_agbc .Nanosecond (),_g .Local );};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _dcd .Abs (v )>=_fd ||_dcd .Abs (v )<=_da &&v !=0{return _ca (v );};_bag :=make ([]byte ,0,15);_bag =_a .AppendFloat (_bag ,v ,'f',-1,64);if len (_bag )> 11{_ag :=_bag [11]-'0';if _ag >=5&&_ag <=9{_bag [10]++;_bag =_bag [0:11];_bag =_fae (_bag );};_bag =_bag [0:11];}else if len (_bag )==11{if _bag [len (_bag )-1]=='9'{_bag [len (_bag )-1]++;_bag =_fae (_bag );};};_bag =_cfc (_bag );return string (_bag );};func _ed (_fgg float64 ,_ff Format ,_cga bool )string {if _ff ._fbe {return NumberGeneric (_fgg );};_eeb :=make ([]byte ,0,20);_db :=_dcd .Signbit (_fgg );_ae :=_dcd .Abs (_fgg );_ffb :=int64 (0);_dbf :=int64 (0);if _ff .IsExponential {for _ae >=10{_dbf ++;_ae /=10;};for _ae < 1{_dbf --;_ae *=10;};}else if _ff ._ad {_ae *=100;}else if _ff ._ee {if _ff ._dd ==0{_bc :=_dcd .Pow (10,float64 (_ff ._ac ));_abb ,_gg :=1.0,1.0;_ =_abb ;for _gb :=1.0;_gb < _bc ;_gb ++{_ ,_cca :=_dcd .Modf (_ae *float64 (_gb ));if _cca < _gg {_gg =_cca ;_abb =_gb ;if _cca ==0{break ;};};};_ff ._dd =int64 (_abb );};_ffb =int64 (_ae *float64 (_ff ._dd )+0.5);if len (_ff .Whole )> 0&&_ffb > _ff ._dd {_ffb =int64 (_ae *float64 (_ff ._dd ))%_ff ._dd ;_ae -=float64 (_ffb )/float64 (_ff ._dd );}else {_ae -=float64 (_ffb )/float64 (_ff ._dd );if _dcd .Abs (_ae )< 1{_dbg :=true ;for _ ,_ccf :=range _ff .Whole {if _ccf .Type ==FmtTypeDigitOpt {continue ;};if _ccf .Type ==FmtTypeLiteral &&_ccf .Literal ==' '{continue ;};_dbg =false ;};if _dbg {_ff .Whole =nil ;};};};};_ef :=1;for _ ,_gc :=range _ff .Fractional {if _gc .Type ==FmtTypeDigit ||_gc .Type ==FmtTypeDigitOpt {_ef ++;};};_ae +=5*_dcd .Pow10 (-_ef );_ebb ,_cfa :=_dcd .Modf (_ae );_eeb =append (_eeb ,_ccg (_ebb ,_fgg ,_ff )...);_eeb =append (_eeb ,_ffd (_cfa ,_fgg ,_ff )...);_eeb =append (_eeb ,_dada (_dbf ,_ff )...);if _ff ._ee {_eeb =_a .AppendInt (_eeb ,_ffb ,10);_eeb =append (_eeb ,'/');_eeb =_a .AppendInt (_eeb ,_ff ._dd ,10);};if !_cga &&_db {return "\u002d"+string (_eeb );};return string (_eeb );};func _geg (_aee _g .Time ,_cgff string )[]byte {_bdb :=[]byte {};_egc :=0;for _cfg :=0;_cfg < len (_cgff );_cfg ++{var _afc string ;if _cgff [_cfg ]=='/'{_afc =string (_cgff [_egc :_cfg ]);_egc =_cfg +1;}else if _cfg ==len (_cgff )-1{_afc =string (_cgff [_egc :_cfg +1]);}else {continue ;};switch _afc {case "\u0079\u0079":_bdb =_aee .AppendFormat (_bdb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_bdb =_aee .AppendFormat (_bdb ,"\u0032\u0030\u0030\u0036");case "\u006d":_bdb =_aee .AppendFormat (_bdb ,"\u0031");case "\u006d\u006d":_bdb =_aee .AppendFormat (_bdb ,"\u0030\u0031");case "\u006d\u006d\u006d":_bdb =_aee .AppendFormat (_bdb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_bdb =_aee .AppendFormat (_bdb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _aee .Month (){case _g .January ,_g .July ,_g .June :_bdb =append (_bdb ,'J');case _g .February :_bdb =append (_bdb ,'M');case _g .March ,_g .May :_bdb =append (_bdb ,'M');case _g .April ,_g .August :_bdb =append (_bdb ,'A');case _g .September :_bdb =append (_bdb ,'S');case _g .October :_bdb =append (_bdb ,'O');case _g .November :_bdb =append (_bdb ,'N');case _g .December :_bdb =append (_bdb ,'D');};case "\u0064":_bdb =_aee .AppendFormat (_bdb ,"\u0032");case "\u0064\u0064":_bdb =_aee .AppendFormat (_bdb ,"\u0030\u0032");case "\u0064\u0064\u0064":_bdb =_aee .AppendFormat (_bdb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_bdb =_aee .AppendFormat (_bdb ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_ab .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_afc );};if _cgff [_cfg ]=='/'{_bdb =append (_bdb ,'/');};};return _bdb ;};const _fd =1e11;func Parse (s string )[]Format {_dce :=Lexer {};_dce .Lex (_dc .NewReader (s ));_dce ._ccb =append (_dce ._ccb ,_dce ._cef );return _dce ._ccb ;};const _bcg int =-1;const _fcd int =0;func (_c FmtType )String ()string {if _c >=FmtType (len (_bf )-1){return _d .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_c );};return _b [_bf [_c ]:_bf [_c +1]];};func (_adf *Lexer )Lex (r _fb .Reader ){_dddf ,_dbbe ,_feb :=0,0,0;_fga :=-1;_dffa ,_dcc ,_bbb :=0,0,0;_ =_dcc ;_ =_bbb ;_eba :=1;_ =_eba ;_ebbb :=make ([]byte ,4096);_cacb :=false ;for !_cacb {_fgb :=0;if _dffa > 0{_fgb =_dbbe -_dffa ;};_dbbe =0;_cbd ,_dgfc :=r .Read (_ebbb [_fgb :]);if _cbd ==0||_dgfc !=nil {_cacb =true ;};_feb =_cbd +_fgb ;if _feb < len (_ebbb ){_fga =_feb ;};{_dddf =_eda ;_dffa =0;_dcc =0;_bbb =0;};{if _dbbe ==_feb {goto _aae ;};switch _dddf {case 34:goto _cbeg ;case 35:goto _aef ;case 0:goto _age ;case 36:goto _dfda ;case 37:goto _efd ;case 1:goto _eff ;case 2:goto _fdd ;case 38:goto _eaag ;case 3:goto _gabe ;case 4:goto _deeg ;case 39:goto _edg ;case 5:goto _gfe ;case 6:goto _cba ;case 7:goto _dfg ;case 8:goto _ced ;case 40:goto _ccgg ;case 9:goto _aegc ;case 41:goto _gfeb ;case 10:goto _fca ;case 42:goto _aag ;case 11:goto _gfbc ;case 43:goto _egff ;case 44:goto _ccdg ;case 45:goto _aba ;case 12:goto _ddfb ;case 46:goto _afac ;case 13:goto _dae ;case 14:goto _gag ;case 15:goto _gbb ;case 16:goto _edf ;case 47:goto _gecg ;case 17:goto _baa ;case 48:goto _abab ;case 18:goto _cecf ;case 19:goto _efb ;case 20:goto _gcf ;case 49:goto _cae ;case 50:goto _deg ;case 21:goto _eaac ;case 22:goto _cce ;case 23:goto _ffbg ;case 24:goto _efa ;case 25:goto _dea ;case 51:goto _ffce ;case 26:goto _acf ;case 52:goto _gfee ;case 53:goto _gddd ;case 54:goto _dag ;case 55:goto _cbda ;case 56:goto _acg ;case 57:goto _cbed ;case 27:goto _dddg ;case 28:goto _dbgff ;case 29:goto _gfbd ;case 30:goto _dgee ;case 31:goto _eegb ;case 58:goto _fgd ;case 32:goto _dbd ;case 59:goto _bgfc ;case 33:goto _edff ;case 60:goto _bfee ;case 61:goto _cea ;case 62:goto _cgffa ;};goto _daa ;_cgdf :switch _bbb {case 2:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeDigit ,nil );};case 3:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_dbbe =(_dcc )-1;};case 8:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypePercent ,nil );};case 13:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeFraction ,_ebbb [_dffa :_dcc ]);};case 14:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeDate ,_ebbb [_dffa :_dcc ]);};case 15:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeTime ,_ebbb [_dffa :_dcc ]);};case 16:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeTime ,_ebbb [_dffa :_dcc ]);};case 18:{_dbbe =(_dcc )-1;};case 20:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa :_dcc ]);};case 21:{_dbbe =(_dcc )-1;_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa +1:_dcc -1]);};};goto _eeg ;_gafg :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeFraction ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_bge :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeDigitOpt ,nil );};goto _eeg ;_fgc :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeDigitOptThousands ,nil );};goto _eeg ;_gcaff :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypePercent ,nil );};goto _eeg ;_cbe :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeDate ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_ggd :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeDigit ,nil );};goto _eeg ;_fag :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeTime ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_ccbf :_dbbe =(_dcc )-1;{_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_beb :_dcc =_dbbe +1;{_adf ._cef ._fbe =true ;};goto _eeg ;_cad :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_bab :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeDollar ,nil );};goto _eeg ;_fcg :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeComma ,nil );};goto _eeg ;_gec :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeDecimal ,nil );};goto _eeg ;_ggdb :_dcc =_dbbe +1;{_adf .nextFmt ();};goto _eeg ;_febb :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeText ,nil );};goto _eeg ;_cee :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeUnderscore ,nil );};goto _eeg ;_fafd :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_cbdf :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa +1:_dcc -1]);};goto _eeg ;_agc :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeDigitOpt ,nil );};goto _eeg ;_gfcg :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeFraction ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_cgcf :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypePercent ,nil );};goto _eeg ;_gabf :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeDate ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_eac :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeDigit ,nil );};goto _eeg ;_fge :_dcc =_dbbe ;_dbbe --;{_adf ._cef .AddToken (FmtTypeTime ,_ebbb [_dffa :_dcc ]);};goto _eeg ;_fdc :_dcc =_dbbe ;_dbbe --;{};goto _eeg ;_cge :_dcc =_dbbe +1;{_adf ._cef .IsExponential =true ;};goto _eeg ;_ebdc :_dcc =_dbbe +1;{_adf ._cef .AddToken (FmtTypeLiteral ,_ebbb [_dffa +1:_dcc ]);};goto _eeg ;_eeg :_dffa =0;if _dbbe ++;_dbbe ==_feb {goto _fbf ;};_cbeg :_dffa =_dbbe ;switch _ebbb [_dbbe ]{case 34:goto _aaf ;case 35:goto _bcf ;case 36:goto _bab ;case 37:goto _bfd ;case 44:goto _fcg ;case 46:goto _gec ;case 47:goto _adb ;case 48:goto _cag ;case 58:goto _gcaa ;case 59:goto _ggdb ;case 63:goto _aefc ;case 64:goto _febb ;case 65:goto _bfdd ;case 69:goto _fac ;case 71:goto _afee ;case 91:goto _cged ;case 92:goto _efc ;case 95:goto _cee ;case 100:goto _adb ;case 104:goto _gcaa ;case 109:goto _dded ;case 115:goto _gdb ;case 121:goto _dcf ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _cab ;};goto _cad ;_aaf :_dcc =_dbbe +1;_bbb =20;goto _egf ;_egf :if _dbbe ++;_dbbe ==_feb {goto _cbac ;};_aef :if _ebbb [_dbbe ]==34{goto _fcgd ;};goto _fbgc ;_fbgc :if _dbbe ++;_dbbe ==_feb {goto _afeg ;};_age :if _ebbb [_dbbe ]==34{goto _fcgd ;};goto _fbgc ;_fcgd :_dcc =_dbbe +1;_bbb =21;goto _afaf ;_afaf :if _dbbe ++;_dbbe ==_feb {goto _fbc ;};_dfda :if _ebbb [_dbbe ]==34{goto _fbgc ;};goto _cbdf ;_bcf :_dcc =_dbbe +1;_bbb =3;goto _gda ;_gda :if _dbbe ++;_dbbe ==_feb {goto _beg ;};_efd :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _efge ;case 44:goto _afg ;case 47:goto _gdc ;case 48:goto _efge ;case 63:goto _efge ;};goto _agc ;_efge :if _dbbe ++;_dbbe ==_feb {goto _gged ;};_eff :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _efge ;case 47:goto _gdc ;case 48:goto _efge ;case 63:goto _efge ;};goto _cgdf ;_gdc :if _dbbe ++;_dbbe ==_feb {goto _gbc ;};_fdd :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _fdcb ;case 48:goto _agf ;case 63:goto _agd ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffg ;};goto _cgdf ;_agd :_dcc =_dbbe +1;goto _eed ;_eed :if _dbbe ++;_dbbe ==_feb {goto _gbae ;};_eaag :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _agd ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _agd ;case 63:goto _agd ;case 65:goto _cacc ;};goto _gfcg ;_cacc :if _dbbe ++;_dbbe ==_feb {goto _ddfdf ;};_gabe :switch _ebbb [_dbbe ]{case 47:goto _dba ;case 77:goto _bgf ;};goto _gafg ;_dba :if _dbbe ++;_dbbe ==_feb {goto _febe ;};_deeg :if _ebbb [_dbbe ]==80{goto _caa ;};goto _gafg ;_caa :_dcc =_dbbe +1;goto _fegg ;_fegg :if _dbbe ++;_dbbe ==_feb {goto _fgf ;};_edg :if _ebbb [_dbbe ]==65{goto _cacc ;};goto _gfcg ;_bgf :if _dbbe ++;_dbbe ==_feb {goto _aff ;};_gfe :if _ebbb [_dbbe ]==47{goto _fedf ;};goto _gafg ;_fedf :if _dbbe ++;_dbbe ==_feb {goto _aaa ;};_cba :if _ebbb [_dbbe ]==80{goto _faa ;};goto _gafg ;_faa :if _dbbe ++;_dbbe ==_feb {goto _dgbc ;};_dfg :if _ebbb [_dbbe ]==77{goto _caa ;};goto _gafg ;_fdcb :if _dbbe ++;_dbbe ==_feb {goto _adgf ;};_ced :switch _ebbb [_dbbe ]{case 35:goto _dab ;case 37:goto _fcca ;case 63:goto _dab ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _gba ;};goto _cgdf ;_dab :_dcc =_dbbe +1;goto _adgg ;_adgg :if _dbbe ++;_dbbe ==_feb {goto _fegge ;};_ccgg :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _caf ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _agd ;case 63:goto _agd ;case 65:goto _cacc ;};goto _gfcg ;_caf :if _dbbe ++;_dbbe ==_feb {goto _gbec ;};_aegc :switch _ebbb [_dbbe ]{case 35:goto _ageg ;case 44:goto _ageg ;case 46:goto _ageg ;case 48:goto _ageg ;case 63:goto _ageg ;};goto _gafg ;_ageg :_dcc =_dbbe +1;goto _eebd ;_eebd :if _dbbe ++;_dbbe ==_feb {goto _afd ;};_gfeb :switch _ebbb [_dbbe ]{case 35:goto _ageg ;case 44:goto _ageg ;case 46:goto _ageg ;case 48:goto _ageg ;case 63:goto _ageg ;case 65:goto _cacc ;};goto _gfcg ;_fcca :if _dbbe ++;_dbbe ==_feb {goto _ccba ;};_fca :if _ebbb [_dbbe ]==37{goto _fcca ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _gba ;};goto _cgdf ;_gba :_dcc =_dbbe +1;_bbb =13;goto _bfea ;_bfea :if _dbbe ++;_dbbe ==_feb {goto _agcf ;};_aag :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _ddg ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _febg ;case 63:goto _agd ;case 65:goto _cacc ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _gba ;};goto _gfcg ;_ddg :if _dbbe ++;_dbbe ==_feb {goto _fbae ;};_gfbc :switch _ebbb [_dbbe ]{case 35:goto _ageg ;case 37:goto _fcca ;case 44:goto _ageg ;case 46:goto _ageg ;case 63:goto _ageg ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _gba ;};goto _gafg ;_febg :_dcc =_dbbe +1;goto _bcda ;_bcda :if _dbbe ++;_dbbe ==_feb {goto _gdbd ;};_egff :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _febg ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _febg ;case 63:goto _agd ;case 65:goto _cacc ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _gba ;};goto _gfcg ;_agf :_dcc =_dbbe +1;goto _eca ;_eca :if _dbbe ++;_dbbe ==_feb {goto _gefb ;};_ccdg :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _febg ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _agf ;case 63:goto _agd ;case 65:goto _cacc ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffg ;};goto _gfcg ;_ffg :_dcc =_dbbe +1;goto _fcgb ;_fcgb :if _dbbe ++;_dbbe ==_feb {goto _bbe ;};_aba :switch _ebbb [_dbbe ]{case 35:goto _agd ;case 37:goto _gba ;case 44:goto _agd ;case 46:goto _agd ;case 48:goto _agf ;case 63:goto _agd ;case 65:goto _cacc ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffg ;};goto _gfcg ;_afg :if _dbbe ++;_dbbe ==_feb {goto _agegc ;};_ddfb :if _ebbb [_dbbe ]==35{goto _fgc ;};goto _bge ;_bfd :_dcc =_dbbe +1;_bbb =8;goto _bcb ;_bcb :if _dbbe ++;_dbbe ==_feb {goto _cdb ;};_afac :switch _ebbb [_dbbe ]{case 35:goto _ecea ;case 37:goto _agb ;case 48:goto _edgg ;case 63:goto _ecea ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffbf ;};goto _cgcf ;_ecea :if _dbbe ++;_dbbe ==_feb {goto _ccec ;};_dae :switch _ebbb [_dbbe ]{case 35:goto _ecea ;case 47:goto _gdc ;case 48:goto _ecea ;case 63:goto _ecea ;};goto _gcaff ;_agb :if _dbbe ++;_dbbe ==_feb {goto _fcec ;};_gag :if _ebbb [_dbbe ]==37{goto _agb ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffbf ;};goto _cgdf ;_ffbf :if _dbbe ++;_dbbe ==_feb {goto _acgg ;};_gbb :switch _ebbb [_dbbe ]{case 37:goto _agb ;case 47:goto _gdc ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffbf ;};goto _cgdf ;_edgg :if _dbbe ++;_dbbe ==_feb {goto _acad ;};_edf :switch _ebbb [_dbbe ]{case 35:goto _ecea ;case 37:goto _agb ;case 47:goto _gdc ;case 48:goto _edgg ;case 63:goto _ecea ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffbf ;};goto _gcaff ;_adb :_dcc =_dbbe +1;goto _geff ;_geff :if _dbbe ++;_dbbe ==_feb {goto _ebga ;};_gecg :switch _ebbb [_dbbe ]{case 47:goto _adb ;case 100:goto _adb ;case 109:goto _adb ;case 121:goto _gff ;};goto _gabf ;_gff :if _dbbe ++;_dbbe ==_feb {goto _ffe ;};_baa :if _ebbb [_dbbe ]==121{goto _adb ;};goto _cbe ;_cag :_dcc =_dbbe +1;_bbb =2;goto _caac ;_caac :if _dbbe ++;_dbbe ==_feb {goto _fffd ;};_abab :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _fea ;case 47:goto _gdc ;case 48:goto _babf ;case 63:goto _efge ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _bad ;};goto _eac ;_fea :if _dbbe ++;_dbbe ==_feb {goto _aace ;};_cecf :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _fea ;case 47:goto _gdc ;case 48:goto _fea ;case 63:goto _efge ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _ffbf ;};goto _ggd ;_babf :if _dbbe ++;_dbbe ==_feb {goto _gde ;};_efb :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _fea ;case 47:goto _gdc ;case 48:goto _babf ;case 63:goto _efge ;};if 49<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _bad ;};goto _ggd ;_bad :if _dbbe ++;_dbbe ==_feb {goto _bgg ;};_gcf :switch _ebbb [_dbbe ]{case 37:goto _ffbf ;case 47:goto _gdc ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _bad ;};goto _cgdf ;_cab :_dcc =_dbbe +1;_bbb =20;goto _adcg ;_adcg :if _dbbe ++;_dbbe ==_feb {goto _bbec ;};_cae :switch _ebbb [_dbbe ]{case 37:goto _ffbf ;case 47:goto _gdc ;};if 48<=_ebbb [_dbbe ]&&_ebbb [_dbbe ]<=57{goto _bad ;};goto _fafd ;_gcaa :_dcc =_dbbe +1;_bbb =15;goto _fba ;_fba :if _dbbe ++;_dbbe ==_feb {goto _gae ;};_deg :switch _ebbb [_dbbe ]{case 58:goto _gcaa ;case 65:goto _gecc ;case 104:goto _gcaa ;case 109:goto _gcaa ;case 115:goto _gdb ;};goto _fge ;_gecc :if _dbbe ++;_dbbe ==_feb {goto _fdcg ;};_eaac :switch _ebbb [_dbbe ]{case 47:goto _becd ;case 77:goto _gea ;};goto _cgdf ;_becd :if _dbbe ++;_dbbe ==_feb {goto _fbad ;};_cce :if _ebbb [_dbbe ]==80{goto _gcaa ;};goto _cgdf ;_gea :if _dbbe ++;_dbbe ==_feb {goto _baf ;};_ffbg :if _ebbb [_dbbe ]==47{goto _adcge ;};goto _cgdf ;_adcge :if _dbbe ++;_dbbe ==_feb {goto _ceda ;};_efa :if _ebbb [_dbbe ]==80{goto _bcge ;};goto _cgdf ;_bcge :if _dbbe ++;_dbbe ==_feb {goto _deda ;};_dea :if _ebbb [_dbbe ]==77{goto _gcaa ;};goto _cgdf ;_gdb :_dcc =_dbbe +1;_bbb =15;goto _gbe ;_gbe :if _dbbe ++;_dbbe ==_feb {goto _aegd ;};_ffce :switch _ebbb [_dbbe ]{case 46:goto _ecag ;case 58:goto _gcaa ;case 65:goto _gecc ;case 104:goto _gcaa ;case 109:goto _gcaa ;case 115:goto _gdb ;};goto _fge ;_ecag :if _dbbe ++;_dbbe ==_feb {goto _dgeg ;};_acf :if _ebbb [_dbbe ]==48{goto _abfg ;};goto _fag ;_abfg :_dcc =_dbbe +1;_bbb =15;goto _bea ;_bea :if _dbbe ++;_dbbe ==_feb {goto _dbge ;};_gfee :switch _ebbb [_dbbe ]{case 48:goto _bdc ;case 58:goto _gcaa ;case 65:goto _gecc ;case 104:goto _gcaa ;case 109:goto _gcaa ;case 115:goto _gdb ;};goto _fge ;_bdc :_dcc =_dbbe +1;_bbb =15;goto _cbde ;_cbde :if _dbbe ++;_dbbe ==_feb {goto _bgeg ;};_gddd :switch _ebbb [_dbbe ]{case 48:goto _gcaa ;case 58:goto _gcaa ;case 65:goto _gecc ;case 104:goto _gcaa ;case 109:goto _gcaa ;case 115:goto _gdb ;};goto _fge ;_aefc :_dcc =_dbbe +1;_bbb =5;goto _cff ;_cff :if _dbbe ++;_dbbe ==_feb {goto _dccd ;};_dag :switch _ebbb [_dbbe ]{case 35:goto _efge ;case 37:goto _efge ;case 47:goto _gdc ;case 48:goto _efge ;case 63:goto _efge ;};goto _fdc ;_bfdd :_dcc =_dbbe +1;_bbb =20;goto _gfce ;_gfce :if _dbbe ++;_dbbe ==_feb {goto _ege ;};_cbda :switch _ebbb [_dbbe ]{case 47:goto _becd ;case 77:goto _gea ;};goto _fafd ;_fac :if _dbbe ++;_dbbe ==_feb {goto _aabe ;};_acg :switch _ebbb [_dbbe ]{case 43:goto _cge ;case 45:goto _cge ;};goto _fafd ;_afee :_dcc =_dbbe +1;goto _bgb ;_bgb :if _dbbe ++;_dbbe ==_feb {goto _adaa ;};_cbed :if _ebbb [_dbbe ]==101{goto _bfb ;};goto _fafd ;_bfb :if _dbbe ++;_dbbe ==_feb {goto _cabc ;};_dddg :if _ebbb [_dbbe ]==110{goto _ggca ;};goto _ccbf ;_ggca :if _dbbe ++;_dbbe ==_feb {goto _bgff ;};_dbgff :if _ebbb [_dbbe ]==101{goto _bcfg ;};goto _ccbf ;_bcfg :if _dbbe ++;_dbbe ==_feb {goto _add ;};_gfbd :if _ebbb [_dbbe ]==114{goto _cbb ;};goto _ccbf ;_cbb :if _dbbe ++;_dbbe ==_feb {goto _cfcb ;};_dgee :if _ebbb [_dbbe ]==97{goto _egfc ;};goto _ccbf ;_egfc :if _dbbe ++;_dbbe ==_feb {goto _fbdd ;};_eegb :if _ebbb [_dbbe ]==108{goto _beb ;};goto _ccbf ;_cged :_dcc =_dbbe +1;_bbb =20;goto _ddca ;_ddca :if _dbbe ++;_dbbe ==_feb {goto _deab ;};_fgd :switch _ebbb [_dbbe ]{case 104:goto _febd ;case 109:goto _febd ;case 115:goto _febd ;};goto _adgd ;_adgd :if _dbbe ++;_dbbe ==_feb {goto _abg ;};_dbd :if _ebbb [_dbbe ]==93{goto _adfe ;};goto _adgd ;_adfe :_dcc =_dbbe +1;_bbb =18;goto _aagc ;_ceec :_dcc =_dbbe +1;_bbb =16;goto _aagc ;_aagc :if _dbbe ++;_dbbe ==_feb {goto _ead ;};_bgfc :if _ebbb [_dbbe ]==93{goto _adfe ;};goto _adgd ;_febd :if _dbbe ++;_dbbe ==_feb {goto _bbg ;};_edff :if _ebbb [_dbbe ]==93{goto _ceec ;};goto _adgd ;_efc :if _dbbe ++;_dbbe ==_feb {goto _ebbc ;};_bfee :goto _ebdc ;_dded :_dcc =_dbbe +1;_bbb =14;goto _cgae ;_cgae :if _dbbe ++;_dbbe ==_feb {goto _cgfd ;};_cea :switch _ebbb [_dbbe ]{case 47:goto _adb ;case 58:goto _gcaa ;case 65:goto _gecc ;case 100:goto _adb ;case 104:goto _gcaa ;case 109:goto _dded ;case 115:goto _gdb ;case 121:goto _gff ;};goto _gabf ;_dcf :if _dbbe ++;_dbbe ==_feb {goto _dfgd ;};_cgffa :if _ebbb [_dbbe ]==121{goto _adb ;};goto _fafd ;_daa :_fbf :_dddf =34;goto _aae ;_cbac :_dddf =35;goto _aae ;_afeg :_dddf =0;goto _aae ;_fbc :_dddf =36;goto _aae ;_beg :_dddf =37;goto _aae ;_gged :_dddf =1;goto _aae ;_gbc :_dddf =2;goto _aae ;_gbae :_dddf =38;goto _aae ;_ddfdf :_dddf =3;goto _aae ;_febe :_dddf =4;goto _aae ;_fgf :_dddf =39;goto _aae ;_aff :_dddf =5;goto _aae ;_aaa :_dddf =6;goto _aae ;_dgbc :_dddf =7;goto _aae ;_adgf :_dddf =8;goto _aae ;_fegge :_dddf =40;goto _aae ;_gbec :_dddf =9;goto _aae ;_afd :_dddf =41;goto _aae ;_ccba :_dddf =10;goto _aae ;_agcf :_dddf =42;goto _aae ;_fbae :_dddf =11;goto _aae ;_gdbd :_dddf =43;goto _aae ;_gefb :_dddf =44;goto _aae ;_bbe :_dddf =45;goto _aae ;_agegc :_dddf =12;goto _aae ;_cdb :_dddf =46;goto _aae ;_ccec :_dddf =13;goto _aae ;_fcec :_dddf =14;goto _aae ;_acgg :_dddf =15;goto _aae ;_acad :_dddf =16;goto _aae ;_ebga :_dddf =47;goto _aae ;_ffe :_dddf =17;goto _aae ;_fffd :_dddf =48;goto _aae ;_aace :_dddf =18;goto _aae ;_gde :_dddf =19;goto _aae ;_bgg :_dddf =20;goto _aae ;_bbec :_dddf =49;goto _aae ;_gae :_dddf =50;goto _aae ;_fdcg :_dddf =21;goto _aae ;_fbad :_dddf =22;goto _aae ;_baf :_dddf =23;goto _aae ;_ceda :_dddf =24;goto _aae ;_deda :_dddf =25;goto _aae ;_aegd :_dddf =51;goto _aae ;_dgeg :_dddf =26;goto _aae ;_dbge :_dddf =52;goto _aae ;_bgeg :_dddf =53;goto _aae ;_dccd :_dddf =54;goto _aae ;_ege :_dddf =55;goto _aae ;_aabe :_dddf =56;goto _aae ;_adaa :_dddf =57;goto _aae ;_cabc :_dddf =27;goto _aae ;_bgff :_dddf =28;goto _aae ;_add :_dddf =29;goto _aae ;_cfcb :_dddf =30;goto _aae ;_fbdd :_dddf =31;goto _aae ;_deab :_dddf =58;goto _aae ;_abg :_dddf =32;goto _aae ;_ead :_dddf =59;goto _aae ;_bbg :_dddf =33;goto _aae ;_ebbc :_dddf =60;goto _aae ;_cgfd :_dddf =61;goto _aae ;_dfgd :_dddf =62;goto _aae ;_aae :{};if _dbbe ==_fga {switch _dddf {case 35:goto _fafd ;case 0:goto _cgdf ;case 36:goto _cbdf ;case 37:goto _agc ;case 1:goto _cgdf ;case 2:goto _cgdf ;case 38:goto _gfcg ;case 3:goto _gafg ;case 4:goto _gafg ;case 39:goto _gfcg ;case 5:goto _gafg ;case 6:goto _gafg ;case 7:goto _gafg ;case 8:goto _cgdf ;case 40:goto _gfcg ;case 9:goto _gafg ;case 41:goto _gfcg ;case 10:goto _cgdf ;case 42:goto _gfcg ;case 11:goto _gafg ;case 43:goto _gfcg ;case 44:goto _gfcg ;case 45:goto _gfcg ;case 12:goto _bge ;case 46:goto _cgcf ;case 13:goto _gcaff ;case 14:goto _cgdf ;case 15:goto _cgdf ;case 16:goto _gcaff ;case 47:goto _gabf ;case 17:goto _cbe ;case 48:goto _eac ;case 18:goto _ggd ;case 19:goto _ggd ;case 20:goto _cgdf ;case 49:goto _fafd ;case 50:goto _fge ;case 21:goto _cgdf ;case 22:goto _cgdf ;case 23:goto _cgdf ;case 24:goto _cgdf ;case 25:goto _cgdf ;case 51:goto _fge ;case 26:goto _fag ;case 52:goto _fge ;case 53:goto _fge ;case 54:goto _fdc ;case 55:goto _fafd ;case 56:goto _fafd ;case 57:goto _fafd ;case 27:goto _ccbf ;case 28:goto _ccbf ;case 29:goto _ccbf ;case 30:goto _ccbf ;case 31:goto _ccbf ;case 58:goto _fafd ;case 32:goto _cgdf ;case 59:goto _cgdf ;case 33:goto _ccbf ;case 60:goto _fafd ;case 61:goto _gabf ;case 62:goto _fafd ;};};};if _dffa > 0{copy (_ebbb [0:],_ebbb [_dffa :]);};};_ =_fga ;if _dddf ==_adce {_ab .Log ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};var _bf =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};type Lexer struct{_cef Format ;_ccb []Format ;};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_cfd :=Parse (f );var _dfc Format ;if len (_cfd )==1{_dfc =_cfd [0];}else if len (_cfd )==4{_dfc =_cfd [3];};_bb :=false ;for _ ,_afb :=range _dfc .Whole {if _afb .Type ==FmtTypeText {_bb =true ;};};if !_bb {return v ;};_fbg :=_e .Buffer {};for _ ,_bfe :=range _dfc .Whole {switch _bfe .Type {case FmtTypeLiteral :_fbg .WriteByte (_bfe .Literal );case FmtTypeText :_fbg .WriteString (v );};};return _fbg .String ();};const _aad int =34;func _fae (_aca []byte )[]byte {for _dbb :=len (_aca )-1;_dbb > 0;_dbb --{if _aca [_dbb ]=='9'+1{_aca [_dbb ]='0';if _aca [_dbb -1]=='.'{_dbb --;};_aca [_dbb -1]++;};};if _aca [0]=='9'+1{_aca [0]='0';copy (_aca [1:],_aca [0:]);_aca [0]='1';};return _aca ;};func _ceg (_aga _g .Time ,_ebe float64 ,_gfg string )[]byte {_fecf :=[]byte {};_cfb :=0;for _aegb :=0;_aegb < len (_gfg );_aegb ++{var _fed string ;if _gfg [_aegb ]==':'{_fed =string (_gfg [_cfb :_aegb ]);_cfb =_aegb +1;}else if _aegb ==len (_gfg )-1{_fed =string (_gfg [_cfb :_aegb +1]);}else {continue ;};switch _fed {case "\u0064":_fecf =_aga .AppendFormat (_fecf ,"\u0032");case "\u0068":_fecf =_aga .AppendFormat (_fecf ,"\u0033");case "\u0068\u0068":_fecf =_aga .AppendFormat (_fecf ,"\u0031\u0035");case "\u006d":_fecf =_aga .AppendFormat (_fecf ,"\u0034");case "\u006d\u006d":_fecf =_aga .AppendFormat (_fecf ,"\u0030\u0034");case "\u0073":_fecf =_aga .Round (_g .Second ).AppendFormat (_fecf ,"\u0035");case "\u0073\u002e\u0030":_fecf =_aga .Round (_g .Second /10).AppendFormat (_fecf ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_fecf =_aga .Round (_g .Second /100).AppendFormat (_fecf ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_fecf =_aga .Round (_g .Second /1000).AppendFormat (_fecf ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_fecf =_aga .Round (_g .Second ).AppendFormat (_fecf ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_fecf =_aga .Round (_g .Second /10).AppendFormat (_fecf ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_fecf =_aga .Round (_g .Second /100).AppendFormat (_fecf ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_fecf =_aga .Round (_g .Second /1000).AppendFormat (_fecf ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_fecf =_aga .AppendFormat (_fecf ,"\u0050\u004d");case "\u005b\u0068\u005d":_fecf =_a .AppendInt (_fecf ,int64 (_ebe *24),10);case "\u005b\u006d\u005d":_fecf =_a .AppendInt (_fecf ,int64 (_ebe *24*60),10);case "\u005b\u0073\u005d":_fecf =_a .AppendInt (_fecf ,int64 (_ebe *24*60*60),10);case "":default:_ab .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_fed );};if _gfg [_aegb ]==':'{_fecf =append (_fecf ,':');};};return _fecf ;};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_cf ,_ :=_a .ParseFloat (v ,64);return Number (_cf ,f );};return String (v ,f );};const _ded int =0;func _dada (_ddc int64 ,_gcd Format )[]byte {if !_gcd .IsExponential ||len (_gcd .Exponent )==0{return nil ;};_dde :=_a .AppendInt (nil ,_ccge (_ddc ),10);_eaa :=make ([]byte ,0,len (_dde )+2);_eaa =append (_eaa ,'E');if _ddc >=0{_eaa =append (_eaa ,'+');}else {_eaa =append (_eaa ,'-');_ddc *=-1;};_bd :=0;_bac :for _adc :=len (_gcd .Exponent )-1;_adc >=0;_adc --{_bde :=len (_dde )-1-_bd ;_feg :=_gcd .Exponent [_adc ];switch _feg .Type {case FmtTypeDigit :if _bde >=0{_eaa =append (_eaa ,_dde [_bde ]);_bd ++;}else {_eaa =append (_eaa ,'0');};case FmtTypeDigitOpt :if _bde >=0{_eaa =append (_eaa ,_dde [_bde ]);_bd ++;}else {for _fbb :=_adc ;_fbb >=0;_fbb --{_afa :=_gcd .Exponent [_fbb ];if _afa .Type ==FmtTypeLiteral {_eaa =append (_eaa ,_afa .Literal );};};break _bac ;};case FmtTypeLiteral :_eaa =append (_eaa ,_feg .Literal );default:_ab .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_feg );};};if _bd < len (_dde ){_eaa =append (_eaa ,_dde [len (_dde )-_bd -1:_bd -1]...);};_bg (_eaa [2:]);return _eaa ;};

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func IsNumber (data string )(_abf bool ){_bdd ,_fdb ,_dge :=0,0,len (data );_gfd :=len (data );_aeeb ,_ecb ,_ece :=0,0,0;_ =_ecb ;_ =_ece ;_ =_aeeb ;{_bdd =_ded ;_aeeb =0;_ecb =0;_ece =0;};{if _fdb ==_dge {goto _aab ;};switch _bdd {case 0:goto _cec ;case 1:goto _fggf ;case 2:goto _ddd ;case 3:goto _ada ;case 4:goto _ebg ;case 5:goto _dca ;case 6:goto _ggc ;case 7:goto _gab ;};goto _gcaf ;_ccd :_ecb =_fdb ;_fdb --;{_abf =false ;};goto _ccga ;_dbc :_ecb =_fdb ;_fdb --;{_abf =_ecb ==len (data );};goto _ccga ;_gafd :_ecb =_fdb ;_fdb --;{_abf =_ecb ==len (data );};goto _ccga ;_gbf :switch _ece {case 2:{_fdb =(_ecb )-1;_abf =_ecb ==len (data );};case 3:{_fdb =(_ecb )-1;_abf =false ;};};goto _ccga ;_ccga :_aeeb =0;if _fdb ++;_fdb ==_dge {goto _fbda ;};_cec :_aeeb =_fdb ;switch data [_fdb ]{case 43:goto _ddcb ;case 45:goto _ddcb ;};if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _bgc ;};goto _bee ;_bee :if _fdb ++;_fdb ==_dge {goto _daf ;};_fggf :goto _bee ;_ddcb :if _fdb ++;_fdb ==_dge {goto _afe ;};_ddd :if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _bgc ;};goto _bee ;_bgc :if _fdb ++;_fdb ==_dge {goto _bage ;};_ada :if data [_fdb ]==46{goto _ebd ;};if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _bgc ;};goto _bee ;_ebd :if _fdb ++;_fdb ==_dge {goto _dff ;};_ebg :if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _bec ;};goto _bee ;_bec :if _fdb ++;_fdb ==_dge {goto _dbgf ;};_dca :if data [_fdb ]==69{goto _ffc ;};if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _bec ;};goto _bee ;_ffc :if _fdb ++;_fdb ==_dge {goto _dee ;};_ggc :switch data [_fdb ]{case 43:goto _fff ;case 45:goto _fff ;};goto _bee ;_fff :_ecb =_fdb +1;_ece =3;goto _dcg ;_fffg :_ecb =_fdb +1;_ece =2;goto _dcg ;_dcg :if _fdb ++;_fdb ==_dge {goto _fbbc ;};_gab :if 48<=data [_fdb ]&&data [_fdb ]<=57{goto _fffg ;};goto _bee ;_gcaf :_fbda :_bdd =0;goto _aab ;_daf :_bdd =1;goto _aab ;_afe :_bdd =2;goto _aab ;_bage :_bdd =3;goto _aab ;_dff :_bdd =4;goto _aab ;_dbgf :_bdd =5;goto _aab ;_dee :_bdd =6;goto _aab ;_fbbc :_bdd =7;goto _aab ;_aab :{};if _fdb ==_gfd {switch _bdd {case 1:goto _ccd ;case 2:goto _ccd ;case 3:goto _dbc ;case 4:goto _ccd ;case 5:goto _gafd ;case 6:goto _ccd ;case 7:goto _gbf ;};};};if _bdd ==_adce {return false ;};return ;};func _ffd (_fcc ,_dfd float64 ,_cd Format )[]byte {if len (_cd .Fractional )==0{return nil ;};_ged :=_a .AppendFloat (nil ,_fcc ,'f',-1,64);if len (_ged )> 2{_ged =_ged [2:];}else {_ged =nil ;};_cdc :=make ([]byte ,0,len (_ged ));_cdc =append (_cdc ,'.');_bce :=0;_dfe :for _gca :=0;_gca < len (_cd .Fractional );_gca ++{_fad :=_gca ;_cgf :=_cd .Fractional [_gca ];switch _cgf .Type {case FmtTypeDigit :if _fad < len (_ged ){_cdc =append (_cdc ,_ged [_fad ]);_bce ++;}else {_cdc =append (_cdc ,'0');};case FmtTypeDigitOpt :if _fad >=0{_cdc =append (_cdc ,_ged [_fad ]);_bce ++;}else {break _dfe ;};case FmtTypeLiteral :_cdc =append (_cdc ,_cgf .Literal );default:_ab .Log ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_cgf );};};return _cdc ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _da =1e-10;const _edd int =34;func _ca (_ccc float64 )string {_cgc :=_a .FormatFloat (_ccc ,'E',-1,64);_faf :=_a .FormatFloat (_ccc ,'E',5,64);if len (_cgc )< len (_faf ){return _a .FormatFloat (_ccc ,'E',2,64);};return _faf ;};const _cde int =0;

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_af :=Parse (f );if len (_af )==1{return _ed (v ,_af [0],false );}else if len (_af )> 1&&v < 0{return _ed (v ,_af [1],true );}else if len (_af )> 2&&v ==0{return _ed (v ,_af [2],false );};return _ed (v ,_af [0],false );};func (_fde *Lexer )nextFmt (){_fde ._ccb =append (_fde ._ccb ,_fde ._cef );_fde ._cef =Format {}};const _eda int =34;func _bg (_fbd []byte )[]byte {for _dcb :=0;_dcb < len (_fbd )/2;_dcb ++{_ba :=len (_fbd )-1-_dcb ;_fbd [_dcb ],_fbd [_ba ]=_fbd [_ba ],_fbd [_dcb ];};return _fbd ;};const _b ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";