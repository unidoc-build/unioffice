//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _ab (_ceb ,_bc []rune ,_ee bool )bool {for len (_bc )> 0{switch _bc [0]{default:if len (_ceb )==0||_ceb [0]!=_bc [0]{return false ;};case '?':if len (_ceb )==0&&!_ee {return false ;};case '*':return _ab (_ceb ,_bc [1:],_ee )||(len (_ceb )> 0&&_ab (_ceb [1:],_bc ,_ee ));};_ceb =_ceb [1:];_bc =_bc [1:];};return len (_ceb )==0&&len (_bc )==0;};func Match (pattern ,name string )(_dd bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_ce :=make ([]rune ,0,len (name ));_cgg :=make ([]rune ,0,len (pattern ));for _ ,_c :=range name {_ce =append (_ce ,_c );};for _ ,_af :=range pattern {_cgg =append (_cgg ,_af );};_f :=false ;return _ab (_ce ,_cgg ,_f );};func _b (_ag ,_cb []rune ,_ba int )int {for len (_cb )> 0{switch _cb [0]{default:if len (_ag )==0{return -1;};if _ag [0]!=_cb [0]{return _b (_ag [1:],_cb ,_ba +1);};case '?':if len (_ag )==0{return -1;};case '*':if len (_ag )==0{return -1;};_bce :=_b (_ag ,_cb [1:],_ba );if _bce !=-1{return _ba ;}else {_bce =_b (_ag [1:],_cb ,_ba );if _bce !=-1{return _ba ;}else {return -1;};};};_ag =_ag [1:];_cb =_cb [1:];};return _ba ;};func Index (pattern ,name string )(_ca int ){if pattern ==""||pattern =="\u002a"{return 0;};_ad :=make ([]rune ,0,len (name ));_cg :=make ([]rune ,0,len (pattern ));for _ ,_gcc :=range name {_ad =append (_ad ,_gcc );};for _ ,_eg :=range pattern {_cg =append (_cg ,_eg );};return _b (_ad ,_cg ,0);};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_dc :=make ([]rune ,0,len (name ));_aa :=make ([]rune ,0,len (pattern ));for _ ,_agc :=range name {_dc =append (_dc ,_agc );};for _ ,_gc :=range pattern {_aa =append (_aa ,_gc );};_fd :=true ;return _ab (_dc ,_aa ,_fd );};