//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, gooxml leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the gooxml evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_cdcba "bytes";_ddaf "fmt";_cbfb "github.com/unidoc/unioffice";_baga "github.com/unidoc/unioffice/internal/mergesort";_fggb "github.com/unidoc/unioffice/internal/wildcard";_eggdg "github.com/unidoc/unioffice/spreadsheet/format";_dfbf "github.com/unidoc/unioffice/spreadsheet/reference";_ccdc "github.com/unidoc/unioffice/spreadsheet/update";_abcdc "io";_degc "math";_dabfg "math/big";_bcfg "math/rand";_bbfef "regexp";_afgb "sort";_eggd "strconv";_abcg "strings";_efdg "sync";_cbaa "time";_ccab "unicode";);

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func _fbe (_fdgb []Result ,_fe bool ,_agbae string )Result {var _egfd ,_bbbb string ;if _fe {_egfd ="\u0074\u0068\u0072e\u0065";_bbbb ="\u006f\u0064\u0064";}else {_egfd ="\u0074\u0077\u006f";_bbbb ="\u0065\u0076\u0065\u006e";};_eeaf :=len (_fdgb );if (_fe &&_eeaf < 3)||(!_fe &&_eeaf < 2){return MakeErrorResult (_agbae +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_egfd +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_eeaf /2*2==_eeaf )==_fe {return MakeErrorResult (_agbae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bbbb +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gaea :=-1;_cdag :=-1;for _aaee :=0;_aaee < _eeaf ;_aaee +=2{_cgdddb :=_fdgb [_aaee ];if _cgdddb .Type !=ResultTypeArray &&_cgdddb .Type !=ResultTypeList {return MakeErrorResult (_agbae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_gagd :=_bgeb (_cgdddb );if _cdag ==-1{_cdag =len (_gagd );_gaea =len (_gagd [0]);}else if len (_gagd )!=_cdag ||len (_gagd [0])!=_gaea {return MakeErrorResult (_agbae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fe &&_aaee ==0{_aaee --;};};return _adega ;};const _deaga ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_cecd :=_fbe (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _cecd .Type !=ResultTypeEmpty {return _cecd ;};_affb :=_beg (args [1:]);_ggcc :=_degc .MaxFloat64 ;_bfcf :=_bgeb (args [0]);for _ ,_aega :=range _affb {_fegeg :=_bfcf [_aega ._gadeg ][_aega ._dddb ].ValueNumber ;if _ggcc > _fegeg {_ggcc =_fegeg ;};};if _ggcc ==_degc .MaxFloat64 {_ggcc =0;};return MakeNumberResult (float64 (_ggcc ));};func _bdaa (_fcdgda []Result ,_ggfe string )(*couponArgs ,Result ){_eefef :=len (_fcdgda );if _eefef !=3&&_eefef !=4{return nil ,MakeErrorResult (_ggfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aagbg ,_fcfc ,_agfe :=_geda (_fcdgda [0],_fcdgda [1],_ggfe );if _agfe .Type ==ResultTypeError {return nil ,_agfe ;};if _fcdgda [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggfe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbge :=_fcdgda [2].ValueNumber ;if !_dgcef (_bbge ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_ggfe );};_gadc :=0;if _eefef ==4&&_fcdgda [3].Type !=ResultTypeEmpty {if _fcdgda [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggfe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gadc =int (_fcdgda [3].ValueNumber );if !_dgea (_gadc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ggfe );};};return &couponArgs {_aagbg ,_fcfc ,int (_bbge ),_gadc },_adega ;};var _bcce =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};type node struct{_bga tokenType ;_fgb string ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _bdgad (args ,false )};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _adega Result =MakeEmptyResult ();func _dfd (_bgcf ,_baaab int )int {switch _baaab {case 1:if _eebg (_bgcf ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cdedg :=len (args );if _cdedg < 3||_cdedg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bafeb :=args [1].ValueNumber ;if _bafeb !=float64 (int (_bafeb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffea :=args [2].ValueNumber ;_fcbc :=0.0;if _cdedg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbc =args [3].ValueNumber ;};_ddbe :=0;if _cdedg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbe =int (args [4].ValueNumber );if _ddbe !=0{_ddbe =1;};};return MakeNumberResult (_aegf (_fdea ,_bafeb ,_ffea ,_fcbc ,_ddbe ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_accc ,_gadd :=_bbega ("\u0046\u0049\u004e\u0044",args );if _gadd .Type !=ResultTypeEmpty {return _gadd ;};_aege :=_abcg .ToLower (_accc ._ae );_caeb :=_abcg .ToLower (_accc ._dgab );if _aege ==""{return MakeNumberResult (1.0);};_bdbg :=_accc ._bgaaae -1;_gccg :=1;_c :=0;for _fgbf :=range _caeb {if _fgbf !=0{_gcfeb :=1;if _fgbf -_c > 1{_gcfeb =2;};_gccg +=_gcfeb ;};if _gccg > _bdbg {_bedg :=_fggb .Index (_aege ,_caeb [_fgbf :]);if _bedg ==0{return MakeNumberResult (float64 (_gccg ));};};_c =_fgbf ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Reference returns an invalid reference for ConstArrayExpr.
func (_effeb ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type parsedReplaceObject struct{_eafcg string ;_eggb int ;_eec int ;_addc string ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_egcb ,_dgg :=_bbega ("\u0046\u0049\u004e\u0044",args );if _dgg .Type !=ResultTypeEmpty {return _dgg ;};_ecddf :=_egcb ._ae ;if _ecddf ==""{return MakeNumberResult (1.0);};_bcfba :=_egcb ._dgab ;_cbge :=_egcb ._bgaaae -1;_bcac :=1;_ecbg :=0;for _abfgg :=range _bcfba {if _abfgg !=0{_eeag :=1;if _abfgg -_ecbg > 1{_eeag =2;};_bcac +=_eeag ;};if _bcac > _cbge {_cbac :=_abcg .Index (_bcfba [_abfgg :],_ecddf );if _cbac ==0{return MakeNumberResult (float64 (_bcac ));};};_ecbg =_abfgg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates and returns the result of a sheet expression.
func (_decfd SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Reference returns a string reference value to a range with prefix.
func (_edcae PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_bcgf :=_edcae ._fdef .Reference (ctx ,ev );_caa :=_edcae ._cae .Reference (ctx ,ev );_ceec :=_edcae ._ddfd .Reference (ctx ,ev );if _bcgf .Type ==ReferenceTypeSheet &&_caa .Type ==ReferenceTypeCell &&_ceec .Type ==ReferenceTypeCell {return MakeRangeReference (_aagd (_bcgf ,_caa ,_ceec ));};return ReferenceInvalid ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_eggcc :=_fbe (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _eggcc .Type !=ResultTypeEmpty {return _eggcc ;};_dddg :=_beg (args [1:]);_ddfe :=-_degc .MaxFloat64 ;_cdga :=_bgeb (args [0]);for _ ,_cgfa :=range _dddg {_eefb :=_cdga [_cgfa ._gadeg ][_cgfa ._dddb ].ValueNumber ;if _ddfe < _eefb {_ddfe =_eefb ;};};if _ddfe ==-_degc .MaxFloat64 {_ddfe =0;};return MakeNumberResult (float64 (_ddfe ));};var _ccdff *_bcfg .Rand ;func _cgfg (_gdbd _cbaa .Time )_cbaa .Time {_gdbd =_gdbd .UTC ();return _cbaa .Date (_gdbd .Year (),_gdbd .Month (),_gdbd .Day (),_gdbd .Hour (),_gdbd .Minute (),_gdbd .Second (),_gdbd .Nanosecond (),_cbaa .Local );};const _gdbb =57351;

// Update returns the same object as updating sheet references does not affect Number.
func (_cgdgg Number )Update (q *_ccdc .UpdateQuery )Expression {return _cgdgg };func _dcb (_gbff string )(int ,int ,int ,bool ,Result ){_cgaf :="";_eacc :=[]string {};for _dfdfe ,_ecbb :=range _afa {_eacc =_ecbb .FindStringSubmatch (_gbff );if len (_eacc )> 1{_cgaf =_dfdfe ;break ;};};if _cgaf ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_gece :=false ;var _fgd ,_eddb ,_eag int ;var _ccfg error ;switch _cgaf {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_eddb ,_ccfg =_eggd .Atoi (_eacc [1]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_eag ,_ccfg =_eggd .Atoi (_eacc [3]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_fgd ,_ccfg =_eggd .Atoi (_eacc [5]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};if _fgd < 0||_fgd > 9999||(_fgd > 99&&_fgd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_fgd =_ceba (_fgd );_gece =_eacc [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_eddb =_bbcdg [_eacc [1]];_eag ,_ccfg =_eggd .Atoi (_eacc [14]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_fgd ,_ccfg =_eggd .Atoi (_eacc [16]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};if _fgd < 0||_fgd > 9999||(_fgd > 99&&_fgd < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_fgd =_ceba (_fgd );_gece =_eacc [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_dbfc ,_ceded :=_eggd .Atoi (_eacc [1]);if _ceded !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_agcb ,_ceded :=_eggd .Atoi (_eacc [3]);if _ceded !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_cdcfa ,_ceded :=_eggd .Atoi (_eacc [5]);if _ceded !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};if _dbfc >=1900&&_dbfc < 10000{_fgd =_dbfc ;_eddb =_agcb ;_eag =_cdcfa ;}else if _dbfc > 0&&_dbfc < 13{_eddb =_dbfc ;_eag =_agcb ;_fgd =_cdcfa ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_gece =_eacc [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fgd ,_ccfg =_eggd .Atoi (_eacc [16]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_eddb =_bbcdg [_eacc [3]];_eag ,_ccfg =_eggd .Atoi (_eacc [1]);if _ccfg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};_gece =_eacc [19]=="";};if !_ggc (_fgd ,_eddb ,_eag ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgdb );};return _fgd ,_eddb ,_eag ,_gece ,_adega ;};

// Reference returns an invalid reference for String.
func (_gbgfe String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _ffbg ,_daedb float64 ;switch args [0].Type {case ResultTypeNumber :_daedb =args [0].ValueNumber ;case ResultTypeString :_cfga :=DateValue ([]Result {args [0]});if _cfga .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_daedb =_cfga .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_ffbg =args [1].ValueNumber ;if _ffbg < 62&&_daedb >=62{_ffbg --;};case ResultTypeString :_fgea :=DateValue ([]Result {args [1]});if _fgea .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_ffbg =_fgea .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gcag :=float64 (int (_daedb -_ffbg ));return MakeNumberResult (_gcag );};func _ggc (_cdfd ,_dad ,_gcg int )bool {if _dad < 1||_dad > 12{return false ;};if _gcg < 1{return false ;};return _gcg <=_acacc (_cdfd ,_dad );};

// Update updates the horizontal range references after removing a row/column.
func (_ddfeb HorizontalRange )Update (q *_ccdc .UpdateQuery )Expression {return _ddfeb };var _aggb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_edgaf *defEval )LastEvalIsRef ()bool {return _edgaf ._bgfa };

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fdcc :=ctx .GetEpoch ();_fged ,_eed :=_gffg (args [0].Value (),_fdcc );if _eed !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gbd :=_fged .Year ();return MakeBoolResult (_eebg (_gbd ));};func _acacc (_cdbg ,_fcgda int )int {if _fcgda ==2&&_eebg (_cdbg ){return 29;}else {return _gbea [_fcgda -1];};};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gafa :=args [0].ValueNumber ;_ceea :=args [1].ValueNumber ;if _ceea < _gafa {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _ceea ==_gafa {return MakeNumberResult (0);};_dedd :=_abcg .ToLower (args [2].ValueString );if _dedd =="\u0064"{return MakeNumberResult (_ceea -_gafa );};_ddfg :=_eefcf (_gafa );_edbd :=_eefcf (_ceea );_bcegd ,_fbff ,_ccag :=_ddfg .Date ();_abgc ,_cdccc ,_afgcc :=_edbd .Date ();_fbfa :=int (_fbff );_gddee :=int (_cdccc );var _gfce float64 ;switch _dedd {case "\u0079":_gfce =float64 (_abgc -_bcegd );if _gddee < _fbfa ||(_gddee ==_fbfa &&_afgcc < _ccag ){_gfce --;};case "\u006d":_begd :=_abgc -_bcegd ;_ggda :=_gddee -_fbfa ;if _afgcc < _ccag {_ggda --;};if _ggda < 0{_begd --;_ggda +=12;};_gfce =float64 (_begd *12+_ggda );case "\u006d\u0064":_dddf :=_gddee ;if _afgcc < _ccag {_dddf --;};_gfce =float64 (int (_ceea -_edcg (_abgc ,_dddf ,_ccag )));case "\u0079\u006d":_gfce =float64 (_gddee -_fbfa );if _afgcc < _ccag {_gfce --;};if _gfce < 0{_gfce +=12;};case "\u0079\u0064":_edeae :=_abgc ;if _gddee < _fbfa ||(_gddee ==_fbfa &&_afgcc < _ccag ){_edeae --;};_gfce =float64 (int (_ceea -_edcg (_edeae ,_fbfa ,_ccag )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gfce );};func _eedd (_dgad ,_ddge float64 ,_gabd ,_gdca int )float64 {_dgfd :=_eefcf (_dgad );_fgggg :=_eefcf (_ddge );_bgaa :=_fbgab (_dgfd ,_fgggg ,_gabd );return _aeea (_dgfd ,_bgaa ,_gdca );};

// Match implements the MATCH function.
func Match (args []Result )Result {_gagf :=len (args );if _gagf !=2&&_gagf !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_badb :=1;if _gagf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_dccd :=args [2].ValueNumber ;if _dccd ==-1||_dccd ==0{_badb =int (_dccd );};};_becag :=args [1];var _bgebc []Result ;switch _becag .Type {case ResultTypeList :_bgebc =_becag .ValueList ;case ResultTypeArray :_adcf :=_becag .ValueArray ;if len (_adcf [0])!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};for _ ,_aaeb :=range _adcf {_bgebc =append (_bgebc ,_aaeb [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_aab :=_egdc (args [0]);switch _badb {case 0:for _eafce ,_bdag :=range _bgebc {if _bdgd (_bdag ,_aab ){return MakeNumberResult (float64 (_eafce +1));};};case -1:for _bfea :=0;_bfea < len (_bgebc );_bfea ++{if _bdgd (_bgebc [_bfea ],_aab ){return MakeNumberResult (float64 (_bfea +1));};if _aab ._ccc &&(_bgebc [_bfea ].ValueNumber < _aab ._facbe ){if _bfea ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bfea ));};};case 1:for _gfec :=0;_gfec < len (_bgebc );_gfec ++{if _bdgd (_bgebc [_gfec ],_aab ){return MakeNumberResult (float64 (_gfec +1));};if _aab ._ccc &&(_bgebc [_gfec ].ValueNumber > _aab ._facbe ){if _gfec ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gfec ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};var _fef =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Update returns the same object as updating sheet references does not affect Bool.
func (_beeg Bool )Update (q *_ccdc .UpdateQuery )Expression {return _beeg };

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _cbbc (args ,true )};func _fccce (_cbfc Result )Result {if _cbfc .Type ==ResultTypeEmpty {return _cbfc ;};_fegd :=_cbfc .AsString ();if _fegd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cbfc .IsBoolean {if _fegd .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fegd .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_abcg .ToLower (_fegd .ValueString ));};};var _gabca =false ;

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ddf (args ,_gcgfb ))};func _fgfd (_caab Result ,_eedec *criteriaParsed )bool {if _caab .IsBoolean {return false ;};_gdbg :=_caab .Type ;if _eedec ._ccc {return _gdbg ==ResultTypeNumber &&_caab .ValueNumber ==_eedec ._facbe ;}else if _gdbg ==ResultTypeNumber {return _ad (_caab .ValueNumber ,_eedec ._eefe );};return _acdcc (_caab ,_eedec );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_fbcg ,_fcaea :=_bdaa (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _fcaea .Type ==ResultTypeError {return _fcaea ;};_deb :=_fbcg ._ebda ;_addba :=_fbcg ._eadg ;_gca ,_fcaea :=_bbcd (_fbcg ._bdba ,_fbcg ._dcf ,_deb ,_addba );if _fcaea .Type ==ResultTypeError {return _fcaea ;};return MakeNumberResult (_gca );};const _fgfg ="\u005e\u0028\u0028"+_bbec +"\u007c"+_aee +"\u007c"+_ecdef +"\u007c"+_acgc +"\u0029\u0020\u0029\u003f";

// Update updates references in the PrefixExpr after removing a row/column.
func (_beab PrefixExpr )Update (q *_ccdc .UpdateQuery )Expression {_fgcf :=_beab ;_bbdc :=_beab ._bdc .String ();if _bbdc ==q .SheetToUpdate {_fffb :=*q ;_fffb .UpdateCurrentSheet =true ;_fgcf ._baaa =_beab ._baaa .Update (&_fffb );};return _fgcf ;};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_aebe ,_aeeab ,_cbeb :=_faf (args );if _cbeb .Type ==ResultTypeError {return _cbeb ;};return MakeNumberResult (_edef (_aebe )/_aeeab );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ccac :=args [0].Ref ;for _ccac .Type ==ReferenceTypeNamedRange {_ccac =ctx .NamedRange (_ccac .Value );};_gcef :="";switch _ccac .Type {case ReferenceTypeCell :_gcef =_ccac .Value ;case ReferenceTypeRange :_gbc :=_abcg .Split (_ccac .Value ,"\u003a");if len (_gbc )==2{_gcef =_gbc [0];};default:return MakeErrorResult (_ddaf .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ccac .Type ));};_efef ,_cgbaee :=_dfbf .ParseCellReference (_gcef );if _cgbaee !=nil {return MakeErrorResult (_ddaf .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cgbaee .Error ()));};_eda ,_fgcg ,_gbae :=_efef .Column ,_efef .RowIdx ,_efef .SheetName ;_afb :=args [1].AsNumber ();if _afb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_bacb :=args [2].AsNumber ();if _bacb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _fcda ,_fbgc Result ;if len (args )==3{_fcda =MakeNumberResult (1);_fbgc =MakeNumberResult (1);}else {_fcda =args [3].AsNumber ();if _fcda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _fcda .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_fbgc =args [4].AsNumber ();if _fbgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _fbgc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_cgbce :=_dfbf .ColumnToIndex (_eda );_fdbf :=_fgcg +uint32 (_afb .ValueNumber );_gdgf :=_cgbce +uint32 (_bacb .ValueNumber );_gbac :=_fdbf +uint32 (_fcda .ValueNumber );_eafd :=_gdgf +uint32 (_fbgc .ValueNumber );if _fcda .ValueNumber > 0{_gbac --;}else {_gbac ++;_fdbf ,_gbac =_gbac ,_fdbf ;};if _fbgc .ValueNumber > 0{_eafd --;}else {_eafd ++;_gdgf ,_eafd =_eafd ,_gdgf ;};_abfb :=_ddaf .Sprintf ("\u0025\u0073\u0025\u0064",_dfbf .IndexToColumn (_gdgf ),_fdbf );_aa :=_ddaf .Sprintf ("\u0025\u0073\u0025\u0064",_dfbf .IndexToColumn (_eafd ),_gbac );if _gbae ==""{return _bad (ctx ,ev ,_abfb ,_aa );}else {return _bad (ctx .Sheet (_gbae ),ev ,_abfb ,_aa );};};func (_gede *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gfba :=_abcg .ToLower (args [0].ValueString );if !_baba (_gfba ){_ ,_ ,_ ,_bgaaa ,_gbga :=_dcb (_gfba );if _gbga .Type ==ResultTypeError {_gbga .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _gbga ;};if _bgaaa {return MakeNumberResult (0);};};_cbbg ,_gbbbe ,_aaaa ,_bcdec ,_ ,_gdfg :=_baegd (_gfba );if _gdfg .Type ==ResultTypeError {return _gdfg ;};_eb :=_deaf (float64 (_cbbg ),float64 (_gbbbe ),_aaaa );if _bcdec {_eb +=0.5;}else if _eb >=1{_eb -=float64 (int (_eb ));};return MakeNumberResult (_eb );};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afaec :=args [0];switch _afaec .Type {case ResultTypeError :return _afaec ;case ResultTypeNumber ,ResultTypeString :return _fccce (args [0]);case ResultTypeList :_fbcc :=_afaec .ValueList ;_geag :=[]Result {};for _ ,_eegb :=range _fbcc {_gccd :=_fccce (_eegb );if _gccd .Type ==ResultTypeError {return _gccd ;};_geag =append (_geag ,_gccd );};return MakeListResult (_geag );case ResultTypeArray :_bba :=_afaec .ValueArray ;_bddc :=[][]Result {};for _ ,_deeg :=range _bba {_fabbd :=[]Result {};for _ ,_aede :=range _deeg {_gefdd :=_fccce (_aede );if _gefdd .Type ==ResultTypeError {return _gefdd ;};_fabbd =append (_fabbd ,_gefdd );};_bddc =append (_bddc ,_fabbd );};return MakeArrayResult (_bddc );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};const _deag ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_accg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_accg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ffaa :=_bgeb (args [1]);for _ ,_adbca :=range _ffaa {for _ ,_effd :=range _adbca {if _effd .Type !=ResultTypeNumber ||_effd .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_accg *=1.0+_effd .ValueNumber ;};};return MakeNumberResult (_accg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _acea (_cbca ,_dfcd _cbaa .Time )bool {_fecb :=_cbca .Unix ();_ggfgf :=_dfcd .Unix ();_bfcb :=_cbca .Year ();_aedb :=_efaf (_bfcb ,_cbaa .March ,1);if _eebg (_bfcb )&&_fecb < _aedb &&_ggfgf >=_aedb {return true ;};var _faaf =_dfcd .Year ();var _gafd =_efaf (_faaf ,_cbaa .March ,1);return (_eebg (_faaf )&&_ggfgf >=_gafd &&_fecb < _gafd );};func (_ebcd *Lexer )lex (_ffag _abcdc .Reader ){_abdgb ,_abgec ,_egcd :=0,0,0;_bbedd :=-1;_efea ,_ebggd ,_beff :=0,0,0;_ =_beff ;_edbc :=1;_ =_edbc ;_gffcf :=make ([]byte ,4096);_cfea :=false ;for !_cfea {_begc :=0;if _efea > 0{_begc =_abgec -_efea ;};_abgec =0;_abfe ,_cbcb :=_ffag .Read (_gffcf [_begc :]);if _abfe ==0||_cbcb !=nil {_cfea =true ;};_egcd =_abfe +_begc ;if _egcd < len (_gffcf ){_bbedd =_egcd ;};{_abdgb =_gcce ;_efea =0;_ebggd =0;_beff =0;};{var _ddba int ;var _ccebe uint ;if _abgec ==_egcd {goto _dcbdc ;};if _abdgb ==0{goto _addfe ;};_eccab :_ddba =int (_baceg [_abdgb ]);_ccebe =uint (_gcda [_ddba ]);_ddba ++;for ;_ccebe > 0;_ccebe --{_ddba ++;switch _gcda [_ddba -1]{case 2:_efea =_abgec ;};};switch _abdgb {case 30:switch _gffcf [_abgec ]{case 34:goto _gfga ;case 35:goto _gec ;case 36:goto _dcca ;case 38:goto _aaaf ;case 39:goto _fdg ;case 40:goto _aabff ;case 41:goto _aabe ;case 42:goto _gedab ;case 43:goto _adgc ;case 44:goto _efdf ;case 45:goto _cbdag ;case 47:goto _gdde ;case 58:goto _cece ;case 59:goto _dcbf ;case 60:goto _cdcc ;case 61:goto _baada ;case 62:goto _ccagb ;case 63:goto _ffeag ;case 70:goto _ggf ;case 84:goto _dgcdf ;case 92:goto _bfgc ;case 94:goto _cbbfb ;case 95:goto _cca ;case 123:goto _acaa ;case 125:goto _abdg ;};switch {case _gffcf [_abgec ]< 65:switch {case _gffcf [_abgec ]> 37:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _edfd ;};case _gffcf [_abgec ]>=33:goto _ffeag ;};case _gffcf [_abgec ]> 90:switch {case _gffcf [_abgec ]> 93:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ffgab ;};case _gffcf [_abgec ]>=91:goto _ffeag ;};default:goto _cef ;};goto _agb ;case 1:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _afcfg ;case 123:goto _afcfg ;case 125:goto _afcfg ;};switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _afcfg ;};case _gffcf [_abgec ]> 45:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _afcfg ;};case _gffcf [_abgec ]>=58:goto _afcfg ;};default:goto _afcfg ;};goto _agb ;case 0:goto _addfe ;case 2:if _gffcf [_abgec ]==34{goto _befdg ;};goto _gfga ;case 31:if _gffcf [_abgec ]==34{goto _gfga ;};goto _fbf ;case 3:switch _gffcf [_abgec ]{case 78:goto _ddbce ;case 82:goto _dce ;};goto _ffeag ;case 4:switch _gffcf [_abgec ]{case 47:goto _abdaad ;case 85:goto _deea ;};goto _ffeag ;case 5:if _gffcf [_abgec ]==65{goto _gfdac ;};goto _ffeag ;case 6:switch _gffcf [_abgec ]{case 76:goto _ffe ;case 77:goto _dfaad ;};goto _ffeag ;case 7:if _gffcf [_abgec ]==76{goto _dfaad ;};goto _ffeag ;case 8:if _gffcf [_abgec ]==33{goto _gfdac ;};goto _ffeag ;case 9:if _gffcf [_abgec ]==69{goto _cgd ;};goto _ffeag ;case 10:if _gffcf [_abgec ]==70{goto _cfab ;};goto _ffeag ;case 11:if _gffcf [_abgec ]==33{goto _fceg ;};goto _ffeag ;case 12:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _ffeag ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _ffeag ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]< 65:if 58<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=63{goto _ffeag ;};case _gffcf [_abgec ]> 90:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _ffeag ;};default:goto _gacg ;};default:goto _ggcg ;};goto _agb ;case 13:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _ffeag ;case 58:goto _gffgdd ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _ffeag ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _ffeag ;};case _gffcf [_abgec ]>=59:goto _ffeag ;};default:goto _ggcg ;};goto _agb ;case 14:if _gffcf [_abgec ]==36{goto _dgbc ;};if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ffde ;};goto _afcfg ;case 15:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ffde ;};goto _afcfg ;case 32:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ffde ;};goto _feg ;case 16:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 47:goto _ffeag ;case 58:goto _eefec ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 45:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _fege ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]> 90:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _ffeag ;};case _gffcf [_abgec ]>=65:goto _gacg ;};default:goto _ffeag ;};goto _agb ;case 17:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _afcfg ;case 123:goto _afcfg ;case 125:goto _afcfg ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _afcfg ;};case _gffcf [_abgec ]>=34:goto _afcfg ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _afcfg ;};case _gffcf [_abgec ]>=58:goto _afcfg ;};default:goto _fege ;};goto _agb ;case 33:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _bcfbf ;case 123:goto _bcfbf ;case 125:goto _bcfbf ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _bcfbf ;};case _gffcf [_abgec ]>=34:goto _bcfbf ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _bcfbf ;};case _gffcf [_abgec ]>=58:goto _bcfbf ;};default:goto _fege ;};goto _agb ;case 18:if _gffcf [_abgec ]==36{goto _dafdd ;};if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _cdcaa ;};goto _afcfg ;case 19:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _cdcaa ;};goto _afcfg ;case 34:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _cdcaa ;};goto _gdeb ;case 20:switch _gffcf [_abgec ]{case 39:goto _ffeag ;case 42:goto _ffeag ;case 47:goto _ffeag ;case 58:goto _ffeag ;case 63:goto _ffeag ;};if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=93{goto _ffeag ;};goto _edcgd ;case 21:switch _gffcf [_abgec ]{case 39:goto _fabbf ;case 42:goto _ffeag ;case 47:goto _ffeag ;case 58:goto _ffeag ;case 63:goto _ffeag ;};if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=93{goto _ffeag ;};goto _edcgd ;case 22:if _gffcf [_abgec ]==33{goto _bfabb ;};goto _ffeag ;case 35:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _bbdfde ;case 58:goto _gffgdd ;case 101:goto _agcc ;case 123:goto _fcgd ;case 125:goto _fcgd ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=47{goto _fcgd ;};case _gffcf [_abgec ]>=34:goto _fcgd ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _fcgd ;};case _gffcf [_abgec ]>=59:goto _fcgd ;};default:goto _edfd ;};goto _agb ;case 36:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _fcgd ;case 101:goto _agcc ;case 123:goto _fcgd ;case 125:goto _fcgd ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _fcgd ;};case _gffcf [_abgec ]>=34:goto _fcgd ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _fcgd ;};case _gffcf [_abgec ]>=58:goto _fcgd ;};default:goto _bbdfde ;};goto _agb ;case 23:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _decg ;case 123:goto _decg ;case 125:goto _decg ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _decg ;};case _gffcf [_abgec ]>=34:goto _decg ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _decg ;};case _gffcf [_abgec ]>=58:goto _decg ;};default:goto _edec ;};goto _agb ;case 37:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 47:goto _fcgd ;case 123:goto _fcgd ;case 125:goto _fcgd ;};switch {case _gffcf [_abgec ]< 48:switch {case _gffcf [_abgec ]> 35:if 37<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=45{goto _fcgd ;};case _gffcf [_abgec ]>=34:goto _fcgd ;};case _gffcf [_abgec ]> 57:switch {case _gffcf [_abgec ]> 63:if 91<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=94{goto _fcgd ;};case _gffcf [_abgec ]>=58:goto _fcgd ;};default:goto _edec ;};goto _agb ;case 38:switch _gffcf [_abgec ]{case 61:goto _feaa ;case 62:goto _dgfgd ;};goto _dgafc ;case 39:if _gffcf [_abgec ]==61{goto _gaaaf ;};goto _afff ;case 24:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _ffeag ;};default:goto _ffeag ;};goto _agb ;case 40:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 40:goto _ggac ;case 46:goto _efeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _efeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _efeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 41:switch _gffcf [_abgec ]{case 46:goto _cabc ;case 92:goto _cabc ;case 95:goto _cabc ;};switch {case _gffcf [_abgec ]< 65:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cabc ;};case _gffcf [_abgec ]> 90:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _cabc ;};default:goto _cabc ;};goto _gad ;case 42:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 43:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 40:goto _ggac ;case 46:goto _efeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _bcfbf ;case 125:goto _bcfbf ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _bcfbf ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};default:goto _bcfbf ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _efeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _bcfbf ;};default:goto _bcfbf ;};goto _agb ;case 44:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _afcfg ;case 125:goto _afcfg ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _afcfg ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _afcfg ;};default:goto _afcfg ;};goto _agb ;case 25:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 65:goto _faef ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 66<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _ffeag ;};default:goto _ffeag ;};goto _agb ;case 45:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 76:goto _febe ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 46:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 83:goto _ccdcc ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 47:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 69:goto _gbgff ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 26:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 79:goto _cce ;case 82:goto _aeec ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _ffeag ;};default:goto _ffeag ;};goto _agb ;case 48:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 68:goto _fad ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 49:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 79:goto _egdff ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 50:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 36:goto _dfdgc ;case 40:goto _ggac ;case 46:goto _efeb ;case 58:goto _eefec ;case 85:goto _ccdcc ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 59:switch {case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cfdf ;};case _gffcf [_abgec ]>=34:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gffcg ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 27:switch _gffcf [_abgec ]{case 46:goto _cabc ;case 92:goto _cabc ;case 95:goto _cabc ;};switch {case _gffcf [_abgec ]< 65:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _cabc ;};case _gffcf [_abgec ]> 90:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _cabc ;};default:goto _cabc ;};goto _ffeag ;case 28:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 120:goto _aaef ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _ffeag ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _ffeag ;};default:goto _ffeag ;};goto _agb ;case 51:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 108:goto _cfa ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 52:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 102:goto _gcbba ;case 110:goto _eeacf ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 53:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 110:goto _fbfe ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 54:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _gcf ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 55:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _gdgc ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gdgc ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 56:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 40:goto _dgf ;case 46:goto _gdgc ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _gdgc ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _gdgc ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 57:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 109:goto _adcg ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 58:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _geea ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _gad ;case 125:goto _gad ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _gad ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _gad ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _gad ;};default:goto _gad ;};goto _agb ;case 59:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _adff ;case 123:goto _afcfg ;case 125:goto _afcfg ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _afcfg ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _afcfg ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _adff ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _afcfg ;};default:goto _afcfg ;};goto _agb ;case 29:switch _gffcf [_abgec ]{case 33:goto _fccf ;case 46:goto _ddeb ;case 92:goto _cabc ;case 95:goto _ddeb ;case 123:goto _ffeag ;case 125:goto _ffeag ;};switch {case _gffcf [_abgec ]< 58:switch {case _gffcf [_abgec ]< 37:if 34<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=35{goto _ffeag ;};case _gffcf [_abgec ]> 47:if 48<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=57{goto _ddeb ;};default:goto _ffeag ;};case _gffcf [_abgec ]> 63:switch {case _gffcf [_abgec ]< 91:if 65<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=90{goto _ddeb ;};case _gffcf [_abgec ]> 94:if 97<=_gffcf [_abgec ]&&_gffcf [_abgec ]<=122{goto _ddeb ;};default:goto _ffeag ;};default:goto _ffeag ;};goto _agb ;};_ffeag :_abdgb =0;goto _eaab ;_agb :_abdgb =1;goto _eaab ;_gfga :_abdgb =2;goto _eaab ;_gec :_abdgb =3;goto _eaab ;_ddbce :_abdgb =4;goto _eaab ;_abdaad :_abdgb =5;goto _eaab ;_deea :_abdgb =6;goto _eaab ;_ffe :_abdgb =7;goto _eaab ;_dfaad :_abdgb =8;goto _eaab ;_dce :_abdgb =9;goto _eaab ;_cgd :_abdgb =10;goto _eaab ;_cfab :_abdgb =11;goto _eaab ;_dcca :_abdgb =12;goto _eaab ;_ggcg :_abdgb =13;goto _eaab ;_gffgdd :_abdgb =14;goto _eaab ;_dgbc :_abdgb =15;goto _eaab ;_gacg :_abdgb =16;goto _eaab ;_dfdgc :_abdgb =17;goto _eaab ;_eefec :_abdgb =18;goto _eaab ;_dafdd :_abdgb =19;goto _eaab ;_fdg :_abdgb =20;goto _eaab ;_edcgd :_abdgb =21;goto _eaab ;_fabbf :_abdgb =22;goto _eaab ;_agcc :_abdgb =23;goto _eaab ;_cef :_abdgb =24;goto _eaab ;_ggf :_abdgb =25;goto _eaab ;_dgcdf :_abdgb =26;goto _eaab ;_bfgc :_abdgb =27;goto _eaab ;_cca :_abdgb =28;goto _eaab ;_ffgab :_abdgb =29;goto _eaab ;_afcfg :_abdgb =30;goto _ccaf ;_fccf :_abdgb =30;goto _cbfd ;_gfdac :_abdgb =30;goto _dfebc ;_fceg :_abdgb =30;goto _dbdg ;_bfabb :_abdgb =30;goto _gagad ;_decg :_abdgb =30;goto _cdde ;_ggac :_abdgb =30;goto _ade ;_aaaf :_abdgb =30;goto _abgcc ;_aabff :_abdgb =30;goto _gbdb ;_aabe :_abdgb =30;goto _bbdf ;_gedab :_abdgb =30;goto _cgda ;_adgc :_abdgb =30;goto _dbdf ;_efdf :_abdgb =30;goto _cdaa ;_cbdag :_abdgb =30;goto _geddc ;_gdde :_abdgb =30;goto _dgce ;_cece :_abdgb =30;goto _ddgae ;_dcbf :_abdgb =30;goto _cfdff ;_baada :_abdgb =30;goto _cbde ;_cbbfb :_abdgb =30;goto _eaeg ;_acaa :_abdgb =30;goto _bafe ;_abdg :_abdgb =30;goto _ada ;_fbf :_abdgb =30;goto _egg ;_feg :_abdgb =30;goto _cgbae ;_bcfbf :_abdgb =30;goto _ggg ;_gdeb :_abdgb =30;goto _dcgd ;_fcgd :_abdgb =30;goto _cddf ;_dgafc :_abdgb =30;goto _ededa ;_feaa :_abdgb =30;goto _fbdc ;_dgfgd :_abdgb =30;goto _deage ;_afff :_abdgb =30;goto _cddfc ;_gaaaf :_abdgb =30;goto _cage ;_gad :_abdgb =30;goto _ecgdca ;_dgf :_abdgb =30;goto _dfbe ;_befdg :_abdgb =31;goto _egcdb ;_ffde :_abdgb =32;goto _eaab ;_fege :_abdgb =33;goto _gead ;_cdcaa :_abdgb =34;goto _eaab ;_edfd :_abdgb =35;goto _bee ;_bbdfde :_abdgb =36;goto _bee ;_edec :_abdgb =37;goto _bee ;_cdcc :_abdgb =38;goto _eaab ;_ccagb :_abdgb =39;goto _eaab ;_efeb :_abdgb =40;goto _acbd ;_cabc :_abdgb =41;goto _eaab ;_ddeb :_abdgb =42;goto _acbd ;_cfdf :_abdgb =43;goto _gead ;_gffcg :_abdgb =44;goto _acbd ;_gbgff :_abdgb =44;goto _geabg ;_egdff :_abdgb =44;goto _daee ;_faef :_abdgb =45;goto _acbd ;_febe :_abdgb =46;goto _acbd ;_ccdcc :_abdgb =47;goto _acbd ;_cce :_abdgb =48;goto _acbd ;_fad :_abdgb =49;goto _acbd ;_aeec :_abdgb =50;goto _acbd ;_aaef :_abdgb =51;goto _acbd ;_cfa :_abdgb =52;goto _acbd ;_gcbba :_abdgb =53;goto _acbd ;_fbfe :_abdgb =54;goto _acbd ;_gcf :_abdgb =55;goto _acbd ;_gdgc :_abdgb =56;goto _acbd ;_eeacf :_abdgb =57;goto _acbd ;_adcg :_abdgb =58;goto _acbd ;_geea :_abdgb =59;goto _acbd ;_adff :_abdgb =59;goto _egag ;_dfebc :_ddba =3;goto _gbbff ;_dbdg :_ddba =5;goto _gbbff ;_cbfd :_ddba =7;goto _gbbff ;_gagad :_ddba =9;goto _gbbff ;_ade :_ddba =11;goto _gbbff ;_dfbe :_ddba =13;goto _gbbff ;_abgcc :_ddba =15;goto _gbbff ;_bafe :_ddba =17;goto _gbbff ;_ada :_ddba =19;goto _gbbff ;_gbdb :_ddba =21;goto _gbbff ;_bbdf :_ddba =23;goto _gbbff ;_dbdf :_ddba =25;goto _gbbff ;_geddc :_ddba =27;goto _gbbff ;_cgda :_ddba =29;goto _gbbff ;_dgce :_ddba =31;goto _gbbff ;_eaeg :_ddba =33;goto _gbbff ;_cbde :_ddba =35;goto _gbbff ;_fbdc :_ddba =37;goto _gbbff ;_cage :_ddba =39;goto _gbbff ;_deage :_ddba =41;goto _gbbff ;_ddgae :_ddba =43;goto _gbbff ;_cfdff :_ddba =45;goto _gbbff ;_cdaa :_ddba =47;goto _gbbff ;_cddf :_ddba =49;goto _gbbff ;_ggg :_ddba =51;goto _gbbff ;_cgbae :_ddba =53;goto _gbbff ;_dcgd :_ddba =55;goto _gbbff ;_ecgdca :_ddba =57;goto _gbbff ;_egg :_ddba =59;goto _gbbff ;_ededa :_ddba =61;goto _gbbff ;_cddfc :_ddba =63;goto _gbbff ;_cdde :_ddba =65;goto _gbbff ;_ccaf :_ddba =67;goto _gbbff ;_geabg :_ddba =72;goto _gbbff ;_bee :_ddba =75;goto _gbbff ;_gead :_ddba =78;goto _gbbff ;_daee :_ddba =81;goto _gbbff ;_egag :_ddba =84;goto _gbbff ;_acbd :_ddba =87;goto _gbbff ;_egcdb :_ddba =90;goto _gbbff ;_gbbff :_ccebe =uint (_gcda [_ddba ]);_ddba ++;for ;_ccebe > 0;_ccebe --{_ddba ++;switch _gcda [_ddba -1]{case 3:_ebggd =_abgec +1;case 4:_beff =1;case 5:_beff =2;case 6:_beff =3;case 7:_beff =4;case 8:_beff =11;case 9:_beff =14;case 10:_beff =15;case 11:_ebggd =_abgec +1;{_ebcd .emit (_bfge ,_gffcf [_efea :_ebggd ]);};case 12:_ebggd =_abgec +1;{_ebcd .emit (_cebec ,_gffcf [_efea :_ebggd ]);};case 13:_ebggd =_abgec +1;{_ebcd .emit (_cafbc ,_gffcf [_efea :_ebggd -1]);};case 14:_ebggd =_abgec +1;{_ebcd .emit (_cafbc ,_gffcf [_efea +1:_ebggd -2]);};case 15:_ebggd =_abgec +1;{_ebcd .emit (_bcegc ,_gffcf [_efea :_ebggd -1]);};case 16:_ebggd =_abgec +1;{_ebcd .emit (_bcegc ,_gffcf [_efea :_ebggd -1]);};case 17:_ebggd =_abgec +1;{_ebcd .emit (_dadb ,_gffcf [_efea :_ebggd ]);};case 18:_ebggd =_abgec +1;{_ebcd .emit (_cgfc ,_gffcf [_efea :_ebggd ]);};case 19:_ebggd =_abgec +1;{_ebcd .emit (_age ,_gffcf [_efea :_ebggd ]);};case 20:_ebggd =_abgec +1;{_ebcd .emit (_dbbcc ,_gffcf [_efea :_ebggd ]);};case 21:_ebggd =_abgec +1;{_ebcd .emit (_bcda ,_gffcf [_efea :_ebggd ]);};case 22:_ebggd =_abgec +1;{_ebcd .emit (_bcgea ,_gffcf [_efea :_ebggd ]);};case 23:_ebggd =_abgec +1;{_ebcd .emit (_abe ,_gffcf [_efea :_ebggd ]);};case 24:_ebggd =_abgec +1;{_ebcd .emit (_edge ,_gffcf [_efea :_ebggd ]);};case 25:_ebggd =_abgec +1;{_ebcd .emit (_cbef ,_gffcf [_efea :_ebggd ]);};case 26:_ebggd =_abgec +1;{_ebcd .emit (_cdgd ,_gffcf [_efea :_ebggd ]);};case 27:_ebggd =_abgec +1;{_ebcd .emit (_ccfbb ,_gffcf [_efea :_ebggd ]);};case 28:_ebggd =_abgec +1;{_ebcd .emit (_acab ,_gffcf [_efea :_ebggd ]);};case 29:_ebggd =_abgec +1;{_ebcd .emit (_ceeff ,_gffcf [_efea :_ebggd ]);};case 30:_ebggd =_abgec +1;{_ebcd .emit (_fce ,_gffcf [_efea :_ebggd ]);};case 31:_ebggd =_abgec +1;{_ebcd .emit (_agda ,_gffcf [_efea :_ebggd ]);};case 32:_ebggd =_abgec +1;{_ebcd .emit (_cgee ,_gffcf [_efea :_ebggd ]);};case 33:_ebggd =_abgec +1;{_ebcd .emit (_cdab ,_gffcf [_efea :_ebggd ]);};case 34:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_bbg ,_gffcf [_efea :_ebggd ]);};case 35:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_edf ,_gffcf [_efea :_ebggd ]);};case 36:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_cab ,_gffcf [_efea :_ebggd ]);};case 37:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_ebeec ,_gffcf [_efea :_ebggd ]);};case 38:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_gdbb ,_gffcf [_efea :_ebggd ]);};case 39:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_cfg ,_gffcf [_efea +1:_ebggd -1]);};case 40:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_fegg ,_gffcf [_efea :_ebggd ]);};case 41:_ebggd =_abgec ;_abgec --;{_ebcd .emit (_gafab ,_gffcf [_efea :_ebggd ]);};case 42:_abgec =(_ebggd )-1;{_ebcd .emit (_bbg ,_gffcf [_efea :_ebggd ]);};case 43:switch _beff {case 0:{_abdgb =0;goto _eaab ;};case 1:{_abgec =(_ebggd )-1;_ebcd .emit (_feca ,_gffcf [_efea :_ebggd ]);};case 2:{_abgec =(_ebggd )-1;_ebcd .emit (_bbg ,_gffcf [_efea :_ebggd ]);};case 3:{_abgec =(_ebggd )-1;_ebcd .emit (_edf ,_gffcf [_efea :_ebggd ]);};case 4:{_abgec =(_ebggd )-1;_ebcd .emit (_bfgf ,_gffcf [_efea :_ebggd ]);};case 11:{_abgec =(_ebggd )-1;_ebcd .emit (_deff ,_gffcf [_efea :_ebggd ]);};case 14:{_abgec =(_ebggd )-1;_ebcd .emit (_gdbb ,_gffcf [_efea :_ebggd ]);};case 15:{_abgec =(_ebggd )-1;_ebcd .emit (_cfg ,_gffcf [_efea +1:_ebggd -1]);};};};};goto _eaab ;_eaab :_ddba =int (_fbce [_abdgb ]);_ccebe =uint (_gcda [_ddba ]);_ddba ++;for ;_ccebe > 0;_ccebe --{_ddba ++;switch _gcda [_ddba -1]{case 0:_efea =0;case 1:_beff =0;};};if _abdgb ==0{goto _addfe ;};if _abgec ++;_abgec !=_egcd {goto _eccab ;};_dcbdc :{};if _abgec ==_bbedd {switch _abdgb {case 1:goto _afcfg ;case 2:goto _afcfg ;case 31:goto _fbf ;case 14:goto _afcfg ;case 15:goto _afcfg ;case 32:goto _feg ;case 17:goto _afcfg ;case 33:goto _bcfbf ;case 18:goto _afcfg ;case 19:goto _afcfg ;case 34:goto _gdeb ;case 35:goto _fcgd ;case 36:goto _fcgd ;case 23:goto _decg ;case 37:goto _fcgd ;case 38:goto _dgafc ;case 39:goto _afff ;case 40:goto _gad ;case 41:goto _gad ;case 42:goto _gad ;case 43:goto _bcfbf ;case 44:goto _afcfg ;case 45:goto _gad ;case 46:goto _gad ;case 47:goto _gad ;case 48:goto _gad ;case 49:goto _gad ;case 50:goto _gad ;case 51:goto _gad ;case 52:goto _gad ;case 53:goto _gad ;case 54:goto _gad ;case 55:goto _gad ;case 56:goto _gad ;case 57:goto _gad ;case 58:goto _gad ;case 59:goto _afcfg ;};};_addfe :{};};if _efea > 0{copy (_gffcf [0:],_gffcf [_efea :]);};};_ =_bbedd ;if _abdgb ==_cbf {_ebcd .emit (_cdae ,nil );};close (_ebcd ._dbfec );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_cadg ,_cgeb :=_bdaa (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _cgeb .Type ==ResultTypeError {return _cgeb ;};return MakeNumberResult (_gaaa (_cadg ._bdba ,_cadg ._dcf ,_cadg ._ebda ,_cadg ._eadg ));};const _cdab =57376;

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecgeg :=args [0].AsNumber ();if _ecgeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdccg :=int (_ecgeg .ValueNumber );if _gdccg < 0||_gdccg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_ddaf .Sprintf ("\u0025\u0063",_gdccg ));};const _dbbcc =57362;const _efca ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _gde (_gffa []Result )Result {_gbfb :=_gffa [0].ValueList ;_bccf :=len (_gbfb );switch len (_gffa ){case 1:_dcc :=[]Result {};for _ ,_dabe :=range _gbfb {_dcc =append (_dcc ,MakeBoolResult (_dabe .ValueNumber !=0));};return MakeListResult (_dcc );case 2:_eggee :=_gffa [1];switch _eggee .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_dgcc :=[]Result {};for _ ,_afe :=range _gbfb {var _abdbb Result ;if _afe .ValueNumber ==0{_abdbb =MakeBoolResult (false );}else {_abdbb =_eggee ;};_dgcc =append (_dgcc ,_abdbb );};return MakeListResult (_dgcc );case ResultTypeList :_eabdb :=_cfda (_eggee ,_bccf );_cgbd :=[]Result {};for _cgaeg ,_cag :=range _gbfb {var _agg Result ;if _cag .ValueNumber ==0{_agg =MakeBoolResult (false );}else {_agg =_eabdb [_cgaeg ];};_cgbd =append (_cgbd ,_agg );};return MakeListResult (_cgbd );case ResultTypeArray :_ace :=_gbgce (_eggee ,len (_eggee .ValueArray ),_bccf );_bbda :=[][]Result {};for _ ,_cf :=range _ace {_bgcgac :=[]Result {};for _effdc ,_ddfebf :=range _gbfb {var _begb Result ;if _ddfebf .ValueNumber ==0{_begb =MakeBoolResult (false );}else {_begb =_cf [_effdc ];};_bgcgac =append (_bgcgac ,_begb );};_bbda =append (_bbda ,_bgcgac );};return MakeArrayResult (_bbda );};case 3:_bagd :=_gffa [1];_bfdc :=_gffa [2];_fdcb :=_beefc (_bagd );_fgfca :=_beefc (_bfdc );if _fdcb &&_fgfca {_ddcc :=[]Result {};for _ ,_gffd :=range _gbfb {var _cgac Result ;if _gffd .ValueNumber ==0{_cgac =_bfdc ;}else {_cgac =_bagd ;};_ddcc =append (_ddcc ,_cgac );};return MakeListResult (_ddcc );};if _bagd .Type !=ResultTypeArray &&_bfdc .Type !=ResultTypeArray {_eccd :=_cfda (_bagd ,_bccf );_gfdb :=_cfda (_bfdc ,_bccf );_dfcf :=[]Result {};for _abce ,_caca :=range _gbfb {var _ebc Result ;if _caca .ValueNumber ==0{_ebc =_gfdb [_abce ];}else {_ebc =_eccd [_abce ];};_dfcf =append (_dfcf ,_ebc );};return MakeListResult (_dfcf );};_facg :=len (_bagd .ValueArray );if len (_bfdc .ValueArray )> _facg {_facg =len (_bfdc .ValueArray );};_cecg :=_gbgce (_bagd ,_facg ,_bccf );_ccgd :=_gbgce (_bfdc ,_facg ,_bccf );_eedbe :=[][]Result {};for _becdc :=0;_becdc < _facg ;_becdc ++{_eefca :=[]Result {};for _cc ,_fefe :=range _gbfb {var _aaccb Result ;if _fefe .ValueNumber ==0{_aaccb =_ccgd [_becdc ][_cc ];}else {_aaccb =_cecg [_becdc ][_cc ];};_eefca =append (_eefca ,_aaccb );};_eedbe =append (_eedbe ,_eefca );};return MakeArrayResult (_eedbe );};return MakeErrorResult ("");};func init (){_gfff ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func (_eggcb *Lexer )Next ()*node {_eggcb ._ceee .Lock ();defer _eggcb ._ceee .Unlock ();if len (_eggcb ._ege )> 0{_gabc :=_eggcb ._ege [0];_eggcb ._ege =_eggcb ._ege [1:];return _gabc ;};return _eggcb .nextRaw ();};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_agab :=&defEval {};_agab .evCache =_dfac ();return _agab };

// Eval evaluates and returns a string.
func (_aagbb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_aagbb ._egbab )};func _fccbc (_dbdag string ,_ceeca *_ccdc .UpdateQuery )string {_cgcf ,_efbc :=_dfbf .ParseCellReference (_dbdag );if _efbc !=nil {return "\u0023\u0052\u0045F\u0021";};if _ceeca .UpdateType ==_ccdc .UpdateActionRemoveColumn {_bgdg :=_ceeca .ColumnIdx ;_afgbe :=_cgcf .ColumnIdx ;if _afgbe < _bgdg {return _dbdag ;}else if _afgbe ==_bgdg {return "\u0023\u0052\u0045F\u0021";}else {return _cgcf .Update (_ccdc .UpdateActionRemoveColumn ).String ();};};return _dbdag ;};const _cab =57346;func LexReader (r _abcdc .Reader )chan*node {_agdd :=NewLexer ();go _agdd .lex (r );return _agdd ._dbfec };

// Update updates references in the VerticalRange after removing a row/column.
func (_bddbf VerticalRange )Update (q *_ccdc .UpdateQuery )Expression {if q .UpdateType ==_ccdc .UpdateActionRemoveColumn {_gfge :=_bddbf ;if q .UpdateCurrentSheet {_aaf :=q .ColumnIdx ;_gfge ._aadc =_cbba (_bddbf ._aadc ,_aaf );_gfge ._feaf =_cbba (_bddbf ._feaf ,_aaf );};return _gfge ;};return _bddbf ;};func _bbgg (_bdcb string ,_adad func (_ggade float64 )float64 )Function {return func (_gcdc []Result )Result {if len (_gcdc )!=1{return MakeErrorResult (_bdcb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eefge :=_gcdc [0].AsNumber ();switch _eefge .Type {case ResultTypeNumber :_baeg :=_adad (_eefge .ValueNumber );if _degc .IsNaN (_baeg ){return MakeErrorResult (_bdcb +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _degc .IsInf (_baeg ,0){return MakeErrorResult (_bdcb +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_baeg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bdcb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eefge ;default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdcb ,_eefge .Type ));};};};func _aeea (_gbf ,_ffba _cbaa .Time ,_eedf int )float64 {if _gbf .After (_ffba ){_gbf ,_ffba =_ffba ,_gbf ;};_bea :=0;_ccaaa ,_cddc ,_geac :=_gbf .Date ();_agfb ,_adea ,_ca :=_ffba .Date ();_bgebb ,_fbbe :=int (_cddc ),int (_adea );_dgff ,_cfec :=_gdcea (_ccaaa ,_bgebb ,_geac ,_eedf ),_gdcea (_agfb ,_fbbe ,_ca ,_eedf );if !_becd (_eedf ){return _edcg (_agfb ,_fbbe ,_cfec )-_edcg (_ccaaa ,_bgebb ,_dgff );};if _eedf ==0{if (_bgebb ==2||_dgff < 30)&&_ca ==31{_cfec =31;}else if _fbbe ==2&&_cfec ==_acacc (_agfb ,_fbbe ){_cfec =_acacc (_agfb ,2);};}else {if _bgebb ==2&&_dgff ==30{_dgff =_acacc (_ccaaa ,2);};if _fbbe ==2&&_cfec ==30{_cfec =_acacc (_agfb ,2);};};if _ccaaa < _agfb ||(_ccaaa ==_agfb &&_bgebb < _fbbe ){_bea =30-_dgff +1;_geac =1;_dgff =1;_aecac :=_cbaa .Date (_ccaaa ,_cbaa .Month (_bgebb ),_geac ,0,0,0,0,_cbaa .UTC ).AddDate (0,1,0);if _aecac .Year ()< _agfb {_bea +=_fgbc (_aecac .Year (),int (_aecac .Month ()),12,_eedf );_aecac =_aecac .AddDate (0,13-int (_aecac .Month ()),0);_bea +=_abbd (_aecac .Year (),_agfb -1,_eedf );};_bea +=_fgbc (_agfb ,int (_aecac .Month ()),_fbbe -1,_eedf );_aecac =_aecac .AddDate (0,_fbbe -int (_aecac .Month ()),0);_bgebb =_aecac .Day ();};_bea +=_cfec -_dgff ;if _bea > 0{return float64 (_bea );}else {return 0;};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {lhs ,rhs ,op };};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_cdb :=len (args );if _cdb > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_deee :=_bgeb (args [0]);_bffc :=[]float64 {};for _ ,_afcd :=range _deee {for _ ,_gcfg :=range _afcd {if _gcfg .Type ==ResultTypeNumber &&!_gcfg .IsBoolean {_bffc =append (_bffc ,_gcfg .ValueNumber );};};};_gfg :=len (_bffc );if len (_bffc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_eadd :=0.1;if _cdb ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eadd =args [1].ValueNumber ;if _eadd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_fcff :=[]float64 {};for _gcfec :=0;_gcfec < _gfg ;_gcfec ++{if _gcfec ==0{_fcff =append (_fcff ,0);}else {_fcff =append (_fcff ,_fcff [_gcfec -1]+365);};};return _agbb (_bffc ,_fcff ,_eadd );};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_abgb PrefixVerticalRange )Update (q *_ccdc .UpdateQuery )Expression {if q .UpdateType ==_ccdc .UpdateActionRemoveColumn {_egd :=_abgb ;_edgc :=_abgb ._bbga .String ();if _edgc ==q .SheetToUpdate {_ggag :=q .ColumnIdx ;_egd ._dfabd =_cbba (_abgb ._dfabd ,_ggag );_egd ._aaaab =_cbba (_abgb ._aaaab ,_ggag );};return _egd ;};return _abgb ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _acdf (args ,false )};type cumulArgs struct{_ffeaa float64 ;_egagd float64 ;_gddf float64 ;_fbdd float64 ;_fgeba float64 ;_eefbb int ;};func _fdaf (_gff []Result ,_afdfe string )(float64 ,float64 ,Result ){if len (_gff )!=2{return 0,0,MakeErrorResult (_afdfe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gff [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_afdfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbcag :=_gff [0].ValueNumber ;if _gff [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_afdfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aec :=float64 (int (_gff [1].ValueNumber ));if _aec < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_afdfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _cbcag ,_aec ,_adega ;};func (_gebf *plex )Lex (lval *yySymType )int {_aacfc =true ;_bfae :=<-_gebf ._eeaff ;if _bfae !=nil {lval ._acbf =_bfae ;return int (lval ._acbf ._bga );};return 0;};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {v }};func _abfg (_gcae ,_edcf Result ,_cdaee ,_fea bool )cmpResult {_gcae =_gcae .AsNumber ();_edcf =_edcf .AsNumber ();if _gcae .Type !=_edcf .Type {return _gacff ;};if _gcae .Type ==ResultTypeNumber {if _gcae .ValueNumber ==_edcf .ValueNumber {return _ccdffd ;};if _gcae .ValueNumber < _edcf .ValueNumber {return _bdec ;};return _adbga ;};if _gcae .Type ==ResultTypeString {_dfg :=_gcae .ValueString ;_ceae :=_edcf .ValueString ;if !_cdaee {_dfg =_abcg .ToLower (_dfg );_ceae =_abcg .ToLower (_ceae );};if _fea {_bgfc :=_fggb .Match (_ceae ,_dfg );if _bgfc {return _ccdffd ;}else {return _adbga ;};};return cmpResult (_abcg .Compare (_dfg ,_ceae ));};if _gcae .Type ==ResultTypeEmpty {return _ccdffd ;};if _gcae .Type ==ResultTypeList {if len (_gcae .ValueList )< len (_edcf .ValueList ){return _bdec ;};if len (_gcae .ValueList )> len (_edcf .ValueList ){return _adbga ;};for _fadf :=range _gcae .ValueList {_cffdc :=_abfg (_gcae .ValueList [_fadf ],_edcf .ValueList [_fadf ],_cdaee ,_fea );if _cffdc !=_ccdffd {return _cffdc ;};};return _ccdffd ;};if _gcae .Type ==ResultTypeList {if len (_gcae .ValueArray )< len (_edcf .ValueArray ){return _bdec ;};if len (_gcae .ValueArray )> len (_edcf .ValueArray ){return _adbga ;};for _fcdf :=range _gcae .ValueArray {_becef :=_gcae .ValueArray [_fcdf ];_dffef :=_gcae .ValueArray [_fcdf ];if len (_becef )< len (_dffef ){return _bdec ;};if len (_becef )> len (_dffef ){return _adbga ;};for _dacg :=range _becef {_dfce :=_abfg (_becef [_dacg ],_dffef [_dacg ],_cdaee ,_fea );if _dfce !=_ccdffd {return _dfce ;};};};return _ccdffd ;};return _gacff ;};type Reference struct{Type ReferenceType ;Value string ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func _cbgea (_dfab ,_fcecd float64 )float64 {_dfab =_degc .Trunc (_dfab );_fcecd =_degc .Trunc (_fcecd );if _dfab ==0{return _fcecd ;};if _fcecd ==0{return _dfab ;};for _dfab !=_fcecd {if _dfab > _fcecd {_dfab =_dfab -_fcecd ;}else {_fcecd =_fcecd -_dfab ;};};return _dfab ;};var _gfgde float64 =25569.0;

// GetWidth returns 0 for the invalid reference context.
func (_defc *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eadab :=int (args [0].ValueNumber );return MakeBoolResult (_eadab ==_eadab /2*2);};func _cbba (_cgad string ,_edfg uint32 )string {_ddfa :=_dfbf .ColumnToIndex (_cgad );if _ddfa ==_edfg {return "\u0023\u0052\u0045F\u0021";}else if _ddfa > _edfg {return _dfbf .IndexToColumn (_ddfa -1);}else {return _cgad ;};};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_egge :=len (args );if _egge !=4&&_egge !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaggb ,_ddfgf ,_ecg :=_geda (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ecg .Type ==ResultTypeError {return _ecg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddda :=args [2].ValueNumber ;if _ddda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ggfec :=args [3].ValueNumber ;if _ggfec <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_gfgb :=0;if _egge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfgb =int (args [4].ValueNumber );if !_dgea (_gfgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_cafa ,_ecg :=_gebb (_aaggb ,_ddfgf ,_gfgb );if _ecg .Type ==ResultTypeError {return _ecg ;};return MakeNumberResult ((_ggfec /_ddda -1)/_cafa );};func _cfda (_ebdd Result ,_ffddcf int )[]Result {_aad :=[]Result {};switch _ebdd .Type {case ResultTypeList :_fggfcd :=_ebdd .ValueList ;_fceb :=len (_fggfcd );for _fead :=0;_fead < _ffddcf ;_fead ++{if _fead < _fceb {_aad =append (_aad ,_fggfcd [_fead ]);}else {_aad =append (_aad ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _fbcd :=0;_fbcd < _ffddcf ;_fbcd ++{_aad =append (_aad ,_ebdd );};};return _aad ;};

// Eval evaluates and returns an expression with prefix.
func (_caade PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_gded :=_caade ._bdc .Reference (ctx ,ev );switch _gded .Type {case ReferenceTypeSheet :_dgb :=ctx .Sheet (_gded .Value );return _caade ._baaa .Eval (_dgb ,ev );default:return MakeErrorResult (_ddaf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gded .Type ));};};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bff .Lock ();defer _bff .Unlock ();if _effb ,_ddcg :=_aagfg [name ];_ddcg {return _effb ;};return nil ;};type countMode byte ;

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_bcdeb :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_gfdbc :=args [1].ValueNumber !=0;_dfff :=_fgdd (args [2:],[]string {},_gfdbc );return MakeStringResult (_abcg .Join (_dfff ,_bcdeb ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_cbaae Result )ListValues ()[]Result {if _cbaae .Type ==ResultTypeArray {_eggdga :=[]Result {};for _ ,_dcda :=range _cbaae .ValueArray {for _ ,_bcgg :=range _dcda {_eggdga =append (_eggdga ,_bcgg );};};return _eggdga ;};if _cbaae .Type ==ResultTypeList {return _cbaae .ValueList ;};return nil ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgf :=args [0].AsNumber ();_bcaf :=args [1].AsNumber ();if _cfgf .Type !=ResultTypeNumber ||_bcaf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eddd :=_degc .Trunc (_cfgf .ValueNumber );_edde :=_degc .Trunc (_bcaf .ValueNumber );if _edde > _eddd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _edde ==_eddd ||_edde ==0{return MakeNumberResult (1);};_fabb :=float64 (1);for _ddee :=float64 (1);_ddee <=_edde ;_ddee ++{_fabb *=(_eddd +1-_ddee )/_ddee ;};return MakeNumberResult (_fabb );};func Parse (r _abcdc .Reader )Expression {_gfddf :=&plex {LexReader (r ),nil };_gadce (_gfddf );return _gfddf ._cfdb ;};

// String returns a string representation of SheetPrefixExpr.
func (_dfaa SheetPrefixExpr )String ()string {return _dfaa ._dgca };func _abbd (_agcad ,_gbcc ,_afcc int )int {if _agcad > _gbcc {return 0;};if _becd (_afcc ){return (_gbcc -_agcad +1)*360;};_acfb :=0;for _cdgdb :=_agcad ;_cdgdb <=_gbcc ;_cdgdb ++{_bcbd :=365;if _eebg (_cdgdb ){_bcbd =366;};_acfb +=_bcbd ;};return _acfb ;};func _cbbc (_agfd []Result ,_afcca bool )Result {_bbdd :="\u004d\u0049\u004e";if _afcca {_bbdd ="\u004d\u0049\u004e\u0041";};if len (_agfd )==0{return MakeErrorResult (_bbdd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbg :=_degc .MaxFloat64 ;for _ ,_cffd :=range _agfd {switch _cffd .Type {case ResultTypeNumber :if (_afcca ||!_cffd .IsBoolean )&&_cffd .ValueNumber < _cgbg {_cgbg =_cffd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fbdg :=_cbbc (_cffd .ListValues (),_afcca );if _fbdg .ValueNumber < _cgbg {_cgbg =_fbdg .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ffagc :=0.0;if _afcca {_ffagc =_cffd .AsNumber ().ValueNumber ;};if _ffagc < _cgbg {_cgbg =_ffagc ;};default:_cbfb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bbdd +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cffd .Type );};};if _cgbg ==_degc .MaxFloat64 {_cgbg =0;};return MakeNumberResult (_cgbg );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bff .Lock ();defer _bff .Unlock ();if _ ,_eeeg :=_aagfg [name ];_eeeg {_cbfb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_aagfg [name ]=fn ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_gbeba NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cbfgd :=ctx .NamedRange (_gbeba ._bfbff );_fbcb :=_cbfgd .Value ;if _deda ,_fcage :=ev .GetFromCache (_fbcb );_fcage {return _deda ;};_fbd :=_abcg .Split (_fbcb ,"\u0021");if len (_fbd )!=2{return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_fbcb ));};_dafe :=ctx .Sheet (_fbd [0]);_cgfbc :=_abcg .Split (_fbd [1],"\u003a");switch len (_cgfbc ){case 1:_aef :=ev .Eval (_dafe ,_cgfbc [0]);ev .SetCache (_fbcb ,_aef );return _aef ;case 2:_fbbbc :=_bad (_dafe ,ev ,_cgfbc [0],_cgfbc [1]);ev .SetCache (_fbcb ,_fbbbc );return _fbbbc ;};return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cbfgd .Type ));};const _cfg =57354;const _eae int =30;func _fabe (_eaeeb ,_gaead ,_badab ,_aagg ,_feaea float64 )float64 {var _ccfa float64 ;_eaagf :=_feaea /_badab ;if _eaagf >=1{_eaagf =1;if _aagg ==1{_ccfa =_eaeeb ;}else {_ccfa =0;};}else {_ccfa =_eaeeb *_degc .Pow (1-_eaagf ,_aagg -1);};_fgcgg :=_eaeeb *_degc .Pow (1-_eaagf ,_aagg );var _dedeg float64 ;if _fgcgg < _gaead {_dedeg =_ccfa -_gaead ;}else {_dedeg =_ccfa -_fgcgg ;};if _dedeg < 0{_dedeg =0;};return _dedeg ;};

// Update updates references in the Range after removing a row/column.
func (_fcadg Range )Update (q *_ccdc .UpdateQuery )Expression {_gcbf :=_fcadg ;if q .UpdateCurrentSheet {_gcbf ._fbfg =_fcadg ._fbfg .Update (q );_gcbf ._daed =_fcadg ._daed .Update (q );};return _gcbf ;};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_cfff ,_caf :=_eggd .ParseBool (v );if _caf !=nil {_cbfb .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_caf );};return Bool {_cfff };};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bddg :=len (args );if _bddg !=4&&_bddg !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggadc ,_afdfg ,_fggf :=_geda (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _fggf .Type ==ResultTypeError {return _fggf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_edddg :=args [2].ValueNumber ;if _edddg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cfabc :=args [3].ValueNumber ;if _cfabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_edgd :=0;if _bddg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_edgd =int (args [4].ValueNumber );if !_dgea (_edgd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ffddc ,_fggf :=_gebb (_ggadc ,_afdfg ,_edgd );if _fggf .Type ==ResultTypeError {return _fggf ;};return MakeNumberResult ((_cfabc -_edddg )/_edddg /_ffddc );};func _gbgce (_dgaa Result ,_edgfd ,_eagg int )[][]Result {_ecacg :=[][]Result {};switch _dgaa .Type {case ResultTypeArray :for _bgb ,_cbdgg :=range _dgaa .ValueArray {if _bgb < _edgfd {_ecacg =append (_ecacg ,_cfda (MakeListResult (_cbdgg ),_eagg ));}else {_ecacg =append (_ecacg ,_cfda (MakeErrorResultType (ErrorTypeNA ,""),_eagg ));};};case ResultTypeList :_bdggf :=_cfda (_dgaa ,_eagg );for _bde :=0;_bde < _edgfd ;_bde ++{_ecacg =append (_ecacg ,_bdggf );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _dcdga :=0;_dcdga < _edgfd ;_dcdga ++{_eeff :=_cfda (_dgaa ,_eagg );_ecacg =append (_ecacg ,_eeff );};};return _ecacg ;};func _gebb (_befb ,_cffba float64 ,_dbfa int )(float64 ,Result ){_agad ,_afgd :=_eefcf (_befb ),_eefcf (_cffba );_gfbfb :=_agad .Unix ();_a :=_afgd .Unix ();if _gfbfb ==_a {return 0,_adega ;};_eacf ,_bfcfa ,_dga :=_agad .Date ();_affc ,_ddbeb ,_fffa :=_afgd .Date ();_ged ,_cbbef :=int (_bfcfa ),int (_ddbeb );var _gffbg ,_dfeg float64 ;switch _dbfa {case 0:if _dga ==31{_dga --;};if _dga ==30&&_fffa ==31{_fffa --;}else if _cee :=_eebg (_eacf );_ged ==2&&((_cee &&_dga ==29)||(!_cee &&_dga ==28)){_dga =30;if _fbbb :=_eebg (_affc );_cbbef ==2&&((_fbbb &&_fffa ==29)||(!_fbbb &&_fffa ==28)){_fffa =30;};};_gffbg =float64 ((_affc -_eacf )*360+(_cbbef -_ged )*30+(_fffa -_dga ));_dfeg =360;case 1:_gffbg =_cffba -_befb ;_ecaf :=_eacf !=_affc ;if _ecaf &&(_affc !=_eacf +1||_ged < _cbbef ||(_ged ==_cbbef &&_dga < _fffa )){_ced :=0;for _bgfab :=_eacf ;_bgfab <=_affc ;_bgfab ++{_ced +=_dfd (_bgfab ,1);};_dfeg =float64 (_ced )/float64 (_affc -_eacf +1);}else {if !_ecaf &&_eebg (_eacf ){_dfeg =366;}else {if _ecaf &&((_eebg (_eacf )&&(_ged < 2||(_ged ==2&&_dga <=29)))||(_eebg (_affc )&&(_cbbef > 2||(_cbbef ==2&&_fffa ==29)))){_dfeg =366;}else {_dfeg =365;};};};case 2:_gffbg =_cffba -_befb ;_dfeg =360;case 3:_gffbg =_cffba -_befb ;_dfeg =365;case 4:if _dga ==31{_dga --;};if _fffa ==31{_fffa --;};_gffbg =float64 ((_affc -_eacf )*360+(_cbbef -_ged )*30+(_fffa -_dga ));_dfeg =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _gffbg /_dfeg ,_adega ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afag :=ctx .GetEpoch ();_adba ,_bddcc :=_gffg (args [0].Value (),_afag );if _bddcc !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_adba .Year ()));};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggceda :=args [0].AsString ();if _ggceda .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_egff :=_cdcba .Buffer {};for _ ,_gcea :=range _ggceda .ValueString {if _ccab .IsPrint (_gcea ){_egff .WriteRune (_gcea );};};return MakeStringResult (_egff .String ());};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func (_ecca *noCache )GetFromCache (key string )(Result ,bool ){return _adega ,false };func _dbbcf (_bada Context ,_gbfg ,_egee int )(string ,string ){_cga :="\u0041"+_eggd .Itoa (_gbfg );_cda :=_bada .LastColumn (_gbfg ,_egee );_gefe :=_cda +_eggd .Itoa (_egee );return _cga ,_gefe ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_agde :=len (args );if _agde < 3||_agde > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgfb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_acgf :=args [1].ValueNumber ;if _acgf !=float64 (int (_acgf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecebg :=args [2].ValueNumber ;_abcc :=0.0;if _agde >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abcc =args [3].ValueNumber ;};_feffc :=0.0;if _agde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_feffc =args [4].ValueNumber ;if _feffc !=0{_feffc =1;};};if _bgfb ==0{return MakeNumberResult (-_ecebg *_acgf -_abcc );}else {return MakeNumberResult ((((1-_degc .Pow (1+_bgfb ,_acgf ))/_bgfb )*_ecebg *(1+_bgfb *_feffc )-_abcc )/_degc .Pow (1+_bgfb ,_acgf ));};};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_decc :=len (args );if (_decc !=2&&_decc !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acac :=0;if _decc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acac =int (args [2].ValueNumber );if !_dgea (_acac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cagce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfdag :=args [1].ValueNumber ;_eebf ,_ggbdf :=_gebb (_cagce ,_cfdag ,_acac );if _ggbdf .Type ==ResultTypeError {return _ggbdf ;};return MakeNumberResult (_eebf );};func _egba (_fefbg ,_abdgg ,_ecga ,_fcfe float64 ,_cdgf int )float64 {var _cgca float64 ;if _fefbg ==0{_cgca =(_ecga +_fcfe )/_abdgg ;}else {_agag :=_degc .Pow (1+_fefbg ,_abdgg );if _cdgf ==1{_cgca =(_fcfe *_fefbg /(_agag -1)+_ecga *_fefbg /(1-1/_agag ))/(1+_fefbg );}else {_cgca =_fcfe *_fefbg /(_agag -1)+_ecga *_fefbg /(1-1/_agag );};};return -_cgca ;};func _dgea (_cac int )bool {return _cac >=0&&_cac <=4};var _gadfc =[...]int {0};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_cge ,_fcee :=_bbega ("\u0046\u0049\u004e\u0044",args );if _fcee .Type !=ResultTypeEmpty {return _fcee ;};_bfcd :=_abcg .ToLower (_cge ._ae );if _bfcd ==""{return MakeNumberResult (1.0);};_ggdd :=_abcg .ToLower (_cge ._dgab );_baed :=_cge ._bgaaae ;_gbcfe :=1;for _adaa :=range _ggdd {if _gbcfe < _baed {_gbcfe ++;continue ;};_aggd :=_fggb .Index (_bfcd ,_ggdd [_adaa :]);if _aggd ==0{return MakeNumberResult (float64 (_gbcfe ));};_gbcfe ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};type defEval struct{evCache ;_bgfa bool ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ece :=args [1].ValueNumber ;_dfgb :=args [0];var _efae float64 ;switch _dfgb .Type {case ResultTypeEmpty :_efae =0;case ResultTypeNumber :_efae =_dfgb .ValueNumber ;case ResultTypeString :_ebef :=DateValue ([]Result {args [0]});if _ebef .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_efae =_ebef .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ceff :=_eefcf (_efae );_ecgc :=_ceff .AddDate (0,int (_ece +1),0);_gdfa ,_agcf ,_ :=_ecgc .Date ();_baac :=_edcg (_gdfa ,int (_agcf ),0);if _baac < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _gdfa ==1900&&_agcf ==3{_baac --;};return MakeNumberResult (_baac );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afg :=args [0];switch _afg .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_bagcc :=0.0;_agfed :=0.0;for _ ,_dccaf :=range _afg .ValueString {_aeg :=0.0;switch _dccaf {case 'I':_aeg =1;case 'V':_aeg =5;case 'X':_aeg =10;case 'L':_aeg =50;case 'C':_aeg =100;case 'D':_aeg =500;case 'M':_aeg =1000;};_bagcc +=_aeg ;switch {case _agfed ==_aeg &&(_agfed ==5||_agfed ==50||_agfed ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_agfed ==_aeg :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _agfed < _aeg {_bagcc -=2*_agfed ;};_agfed =_aeg ;};return MakeNumberResult (_bagcc );case ResultTypeError :return _afg ;default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afg .Type ));};};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fedc :=args [0].ValueNumber ;if _fedc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_egc :=float64 (int (args [1].ValueNumber ));if _egc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_degc .Pow (_fedc +1,1/_egc )-1)*_egc );};func _dfa (_afbe ,_aaff int64 )float64 {return float64 (int (0.5+float64 ((_aaff -_afbe )/86400)))};

// Reference returns a string reference value to a sheet.
func (_fcfea SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_fcfea ._dgca };};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_gadb Expression ;_ebcag ,_gbgdg int ;};const _cdgd =57368;

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbga :=args [0].AsNumber ();if _cbga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aagaa :=0;if len (args )> 1{_fadg :=args [1];if _fadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_aagaa =int (_fadg .ValueNumber );if _aagaa < 0{_aagaa =0;}else if _aagaa > 4{_aagaa =4;};};_geed :=_bcce ;switch _aagaa {case 1:_geed =_gaac ;case 2:_geed =_ebfgd ;case 3:_geed =_dbad ;case 4:_geed =_daff ;};_ffcg :=_degc .Trunc (_cbga .ValueNumber );_bgce :=_cdcba .Buffer {};for _ ,_aaaaf :=range _geed {for _ffcg >=_aaaaf ._ggfa {_bgce .WriteString (_aaaaf ._eafb );_ffcg -=_aaaaf ._ggfa ;};};return MakeStringResult (_bgce .String ());};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ddf (args ,_fbaa ));};func _fcgb (){_fabbdf =_bbfef .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_acgff =_bbfef .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_eaaa =_bbfef .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_fba =_bbfef .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_afbeb =_bbfef .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_cbff =_bbfef .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _bfaa (_ccfaf string )*criteriaRegex {_ecff :=&criteriaRegex {};if _ccfaf ==""{return _ecff ;};if _cggf :=_fabbdf .FindStringSubmatch (_ccfaf );len (_cggf )> 1{_ecff ._afee =_fbbbe ;_ecff ._ea =_cggf [1];}else if _dabg :=_acgff .FindStringSubmatch (_ccfaf );len (_dabg )> 1{_ecff ._afee =_fbbbe ;_ecff ._ea =_dabg [1];}else if _feee :=_afbeb .FindStringSubmatch (_ccfaf );len (_feee )> 1{_ecff ._afee =_dca ;_ecff ._ea =_feee [1];}else if _deeef :=_cbff .FindStringSubmatch (_ccfaf );len (_deeef )> 1{_ecff ._afee =_fdgf ;_ecff ._ea =_deeef [1];}else if _ccfaff :=_eaaa .FindStringSubmatch (_ccfaf );len (_ccfaff )> 1{_ecff ._afee =_dgac ;_ecff ._ea =_ccfaff [1];}else if _fdecg :=_fba .FindStringSubmatch (_ccfaf );len (_fdecg )> 1{_ecff ._afee =_bgdc ;_ecff ._ea =_fdecg [1];};return _ecff ;};func _gbacg (_dfeb BinOpType ,_ggcf ,_cgebg []Result )Result {_gefcb :=[]Result {};for _adc :=range _ggcf {_edab :=_ggcf [_adc ].AsNumber ();_edcb :=_cgebg [_adc ].AsNumber ();if _edab .Type !=ResultTypeNumber ||_edcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dfeb {case BinOpTypePlus :_gefcb =append (_gefcb ,MakeNumberResult (_edab .ValueNumber +_edcb .ValueNumber ));case BinOpTypeMinus :_gefcb =append (_gefcb ,MakeNumberResult (_edab .ValueNumber -_edcb .ValueNumber ));case BinOpTypeMult :_gefcb =append (_gefcb ,MakeNumberResult (_edab .ValueNumber *_edcb .ValueNumber ));case BinOpTypeDiv :if _edcb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gefcb =append (_gefcb ,MakeNumberResult (_edab .ValueNumber /_edcb .ValueNumber ));case BinOpTypeExp :_gefcb =append (_gefcb ,MakeNumberResult (_degc .Pow (_edab .ValueNumber ,_edcb .ValueNumber )));case BinOpTypeLT :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber < _edcb .ValueNumber ));case BinOpTypeGT :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber > _edcb .ValueNumber ));case BinOpTypeEQ :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber ==_edcb .ValueNumber ));case BinOpTypeLEQ :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber <=_edcb .ValueNumber ));case BinOpTypeGEQ :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber >=_edcb .ValueNumber ));case BinOpTypeNE :_gefcb =append (_gefcb ,MakeBoolResult (_edab .ValueNumber !=_edcb .ValueNumber ));default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dfeb ));};};return MakeListResult (_gefcb );};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgc :=args [0].AsNumber ();if _cgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_fgef :=float64 (1);if _cgc .ValueNumber < 0{_fgef =-1;};if len (args )> 1{_dde :=args [1].AsNumber ();if _dde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgef =_dde .ValueNumber ;};if _fgef < 0&&_cgc .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_degc .Ceil (_cgc .ValueNumber ));};_fgeded :=_cgc .ValueNumber ;_fgeded ,_cgadb :=_degc .Modf (_fgeded /_fgef );if _cgadb > 0{_fgeded ++;};return MakeNumberResult (_fgeded *_fgef );};var _bdbd =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};type xargs struct{_beeb []float64 ;_fbb []float64 ;};func (_bgab *evCache )GetFromCache (key string )(Result ,bool ){_bgab ._bgbd .Lock ();_becc ,_gdgg :=_bgab ._aade [key ];_bgab ._bgbd .Unlock ();return _becc ,_gdgg ;};func (_fafa ResultType )String ()string {if _fafa >=ResultType (len (_bfagf )-1){return _ddaf .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fafa );};return _efca [_bfagf [_fafa ]:_bfagf [_fafa +1]];};func _eadf (_aed ,_gbb []float64 ,_fda float64 )float64 {_cedgf :=_fda +1;_gcaef :=0.0;_fefa :=len (_aed );_acf :=_gbb [0];for _eaag :=1;_eaag < _fefa ;_eaag ++{_dafa :=(_gbb [_eaag ]-_acf )/365;_gcaef -=_dafa *_aed [_eaag ]/_degc .Pow (_cedgf ,_dafa +1);};return _gcaef ;};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceca :=args [0].Ref ;if _ceca .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_ceca .Value ));};func _bcc (_dcfe []Result ,_dcfed string )(*cumulArgs ,Result ){if len (_dcfe )!=6{return nil ,MakeErrorResult (_dcfed +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dcfe [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcfed +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccea :=_dcfe [0].ValueNumber ;if _ccea <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dcfe [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcfed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adcd :=_dcfe [1].ValueNumber ;if _adcd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dcfe [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcfed +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbgge :=_dcfe [2].ValueNumber ;if _fbgge <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dcfe [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcfed +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ffg :=_dcfe [3].ValueNumber ;if _ffg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dcfe [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcfed +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgf :=_dcfe [4].ValueNumber ;if _cgf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _cgf < _ffg {return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _cgf > _adcd {return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_dge :=int (_dcfe [5].ValueNumber );if _dge !=0&&_dge !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcfed +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_ccea ,_adcd ,_fbgge ,_ffg ,_cgf ,_dge },_adega ;};var _fabbdf ,_acgff ,_fba ,_eaaa ,_cbff ,_afbeb *_bbfef .Regexp ;func _bbfedg (_aefe ,_dffg _cbaa .Time ,_fabg ,_acfg int )_cbaa .Time {_bgee :=_dffg ;_aefea :=_aefe .Year ()-_dffg .Year ();_bgee =_bgee .AddDate (_aefea ,0,0);if _aefe .After (_bgee ){_bgee =_bgee .AddDate (1,0,0);};_fbgcd :=-12/_fabg ;for _bgee .After (_aefe ){_bgee =_bgee .AddDate (0,_fbgcd ,0);};return _bgee ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_beed ,_ceced ,_cdgc :=_geda (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cdgc .Type ==ResultTypeError {return _cdgc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfad :=_ceced -_beed ;if _dfad > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dfcdb :=args [2].ValueNumber ;if _dfcdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ga :=(100-_dfcdb )/_dfcdb ;_gfbf :=360/_dfad ;return MakeNumberResult (_ga *_gfbf );};

// Reference returns an invalid reference for FunctionCall.
func (_gegd FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation for Bool.
func (_ecbd Bool )String ()string {if _ecbd ._aggea {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};type durationArgs struct{_cgdga float64 ;_fff float64 ;_dgadc float64 ;_cdfb float64 ;_ddeg float64 ;_bgac int ;};func _fgbc (_ggdad ,_edea ,_acge ,_bdgb int )int {if _edea > _acge {return 0;};if _becd (_bdgb ){return (_acge -_edea +1)*30;};_abda :=0;for _bage :=_edea ;_bage <=_acge ;_bage ++{_abda +=_acacc (_ggdad ,_bage );};return _abda ;};

// Eval evaluates and returns the result of an empty expression.
func (_dada EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};const _dadb =57377;var _bdd =map[string ]Function {};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Db implements the Excel DB function.
func Db (args []Result )Result {_cddd :=len (args );if _cddd !=4&&_cddd !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_edeaa :=args [0].ValueNumber ;if _edeaa < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbe :=args [1].ValueNumber ;if _cbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbda :=args [2].ValueNumber ;if _dbda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccga :=args [3].ValueNumber ;if _ccga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ccga -_dbda > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_efbaf :=12.0;if _cddd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efbaf =args [4].ValueNumber ;if _efbaf < 1||_efbaf > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _efbaf ==12&&_ccga > _dbda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _cbe >=_edeaa {return MakeNumberResult (0);};_bgcce :=1-_degc .Pow (_cbe /_edeaa ,1/_dbda );_bgcce =float64 (int (_bgcce *1000+0.5))/1000;_edgaa :=_edeaa *_bgcce *_efbaf /12;if _ccga ==1{return MakeNumberResult (_edgaa );};_afca :=_edgaa ;_bbeb :=0.0;_debc :=_dbda ;if _debc > _ccga {_debc =_ccga ;};for _deca :=2.0;_deca <=_debc ;_deca ++{_bbeb =(_edeaa -_afca )*_bgcce ;_afca +=_bbeb ;};if _ccga > _dbda {return MakeNumberResult ((_edeaa -_afca )*_bgcce *(12-_efbaf )/12);};return MakeNumberResult (_bbeb );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fced :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_febb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aggffb :=args [2].ValueNumber ;if _aggffb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggd :=args [3].ValueNumber ;return MakeNumberResult (_ggd *_fced *(_febb /_aggffb -1));};func (_ecaab HorizontalRange )horizontalRangeReference ()string {return _ddaf .Sprintf ("\u0025\u0064\u003a%\u0064",_ecaab ._bagc ,_ecaab ._bbed );};func _fbge (_eagb float64 )float64 {return float64 (int (_eagb +0.5))};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_bagc ,_bbed int };func _ecgfd (_cedb yyLexer ,_adcc *yySymType )(_cgae ,_dbbaf int ){_dbbaf =0;_cgae =_cedb .Lex (_adcc );if _cgae <=0{_dbbaf =_ddbg [0];goto _ff ;};if _cgae < len (_ddbg ){_dbbaf =_ddbg [_cgae ];goto _ff ;};if _cgae >=_cffbfa {if _cgae < _cffbfa +len (_bdbd ){_dbbaf =_bdbd [_cgae -_cffbfa ];goto _ff ;};};for _egaf :=0;_egaf < len (_gadfc );_egaf +=2{_dbbaf =_gadfc [_egaf +0];if _dbbaf ==_cgae {_dbbaf =_gadfc [_egaf +1];goto _ff ;};};_ff :if _dbbaf ==0{_dbbaf =_bdbd [1];};if _fed >=3{_ddaf .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_gfbe (_dbbaf ),uint (_cgae ));};return _cgae ,_dbbaf ;};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdcg :=args [0].AsNumber ();if _cdcg .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdbca :=float64 (1);if _cdcg .ValueNumber < 0{_bdbca =-1;};if len (args )> 1{_cgcd :=args [1].AsNumber ();if _cgcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_bdbca =_cgcd .ValueNumber ;};_effe :=float64 (1);if len (args )> 2{_geca :=args [2].AsNumber ();if _geca .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_effe =_geca .ValueNumber ;};if len (args )==1{return MakeNumberResult (_degc .Floor (_cdcg .ValueNumber ));};_adda :=_cdcg .ValueNumber ;_adda ,_dbb :=_degc .Modf (_adda /_bdbca );if _dbb !=0&&_cdcg .ValueNumber < 0&&_effe > 0{_adda ++;};return MakeNumberResult (_adda *_bdbca );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gccc :=args [0].AsString ();_dgbg :=args [1].AsString ();if _gccc .Type !=ResultTypeString ||_dgbg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_gccc .ValueString ==_dgbg .ValueString );};type yyParserImpl struct{_gacb yySymType ;_gcgff [_eea ]yySymType ;_ggfg int ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_ebeb :=len (args );if _ebeb !=6&&_ebeb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbdag ,_eaea ,_adffe :=_geda (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _adffe .Type ==ResultTypeError {return _adffe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becgf :=args [2].ValueNumber ;if _becgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_edbf :=args [3].ValueNumber ;if _edbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fadda :=args [4].ValueNumber ;if _fadda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afbeg :=args [5];if _afbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gcab :=_afbeg .ValueNumber ;if !_dgcef (_gcab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cfd :=0;if _ebeb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfd =int (args [6].ValueNumber );if !_dgea (_cfd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_adb ,_adffe :=_fafc (_fbdag ,_eaea ,_becgf ,_edbf ,_fadda ,_gcab ,_cfd );if _adffe .Type ==ResultTypeError {return _adffe ;};return MakeNumberResult (_adb );};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_fgged ,_gbgc :=_bbega ("\u0046\u0049\u004e\u0044",args );if _gbgc .Type !=ResultTypeEmpty {return _gbgc ;};_gaae :=_fgged ._ae ;if _gaae ==""{return MakeNumberResult (1.0);};_cfcg :=_fgged ._dgab ;_cdbe :=_fgged ._bgaaae ;_gffca :=1;for _ed :=range _cfcg {if _gffca < _cdbe {_gffca ++;continue ;};_fbed :=_abcg .Index (_cfcg [_ed :],_gaae );if _fbed ==0{return MakeNumberResult (float64 (_gffca ));};_gffca ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_adfc :=len (args );if _adfc < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfee :=args [0].ValueNumber ;if _cfee ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eff :=[]float64 {};for _ ,_acaf :=range args [1:]{switch _acaf .Type {case ResultTypeNumber :_eff =append (_eff ,_acaf .ValueNumber );case ResultTypeArray ,ResultTypeList :_dea :=_bgeb (_acaf );for _ ,_eeecb :=range _dea {for _ ,_afccg :=range _eeecb {if _afccg .Type ==ResultTypeNumber &&!_afccg .IsBoolean {_eff =append (_eff ,_afccg .ValueNumber );};};};};};_gdfda :=0.0;for _bc ,_bgde :=range _eff {_gdfda +=_bgde /_degc .Pow (1+_cfee ,float64 (_bc )+1);};return MakeNumberResult (_gdfda );};

// String returns a string representation of a range with prefix.
func (_baad PrefixRangeExpr )String ()string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_baad ._fdef .String (),_baad ._cae .String (),_baad ._ddfd .String ());};func _efaf (_ccaa int ,_fggbe _cbaa .Month ,_ffgb int )int64 {if _ccaa ==1900&&int (_fggbe )<=2{_ffgb --;};_gfebc :=_cbaa .Date (_ccaa ,_fggbe ,_ffgb ,0,0,0,0,_cbaa .UTC );return _gfebc .Unix ();};func _fcad (_dfec ,_febaf float64 )float64 {_dfec =_degc .Trunc (_dfec );_febaf =_degc .Trunc (_febaf );if _dfec ==0&&_febaf ==0{return 0;};return _dfec *_febaf /_cbgea (_dfec ,_febaf );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdg :=args [0].AsNumber ();_faca :=args [1].AsNumber ();if _dfdg .Type !=ResultTypeNumber ||_faca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bcaac :=_degc .Trunc (_dfdg .ValueNumber );_adbg :=_degc .Trunc (_faca .ValueNumber );if _bcaac < _adbg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _bcaac ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_bcaac +_adbg -1);args [1]=MakeNumberResult (_bcaac -1);return Combin (args );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggae :=args [0].Type ;for _ ,_baacc :=range args {if _baacc .Type !=_ggae {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _ggae {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_dccdc :=len (args [0].ListValues ());_eeef :=make ([]float64 ,_dccdc );for _dbc :=range _eeef {_eeef [_dbc ]=1.0;};for _ ,_fcagb :=range args {if len (_fcagb .ListValues ())!=_dccdc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _geg ,_beaa :=range _fcagb .ListValues (){_beaa =_beaa .AsNumber ();if _beaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_eeef [_geg ]=_eeef [_geg ]*_beaa .ValueNumber ;};};_dcfg :=0.0;for _ ,_gdfd :=range _eeef {_dcfg +=_gdfd ;};return MakeNumberResult (_dcfg );};return MakeNumberResult (1.0);};type rmode byte ;

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cege :=args [0].AsString ();if _cege .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_cege .ValueString )));};const _edbfg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebeae :=args [0].AsString ();if _ebeae .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_abcg .ToUpper (_ebeae .ValueString ));};func (_ccbd *plex )Error (s string ){_cbfb .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_fefd :=args [0].AsNumber ();if _fefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_eadaf :=int (_fefd .ValueNumber );_ddgaeb :=make ([][]Result ,0,_eadaf );for _edd :=0;_edd < _eadaf ;_edd ++{_cbfga :=make ([]Result ,_eadaf );for _gddd :=0;_gddd < _eadaf ;_gddd ++{if _edd ==_gddd {_cbfga [_gddd ]=MakeNumberResult (1.0);}else {_cbfga [_gddd ]=MakeNumberResult (0.0);};};_ddgaeb =append (_ddgaeb ,_cbfga );};return MakeArrayResult (_ddgaeb );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {s }};type ivr struct{};

// Update updates references in the Negate after removing a row/column.
func (_baeb Negate )Update (q *_ccdc .UpdateQuery )Expression {return Negate {_baeb ._ecag .Update (q )}};func (_bcdg Result )String ()string {return _bcdg .Value ()};

// String returns an empty string for EmptyExpr.
func (_acaae EmptyExpr )String ()string {return ""};

// String returns a string representation of a named range.
func (_gdaa NamedRangeRef )String ()string {return _gdaa ._bfbff };

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdbgc :=args [0].AsString ();if _gdbgc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_gdbgc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_gdbgc .ValueString [0]));};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebgab :=args [0].AsNumber ();if _ebgab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abc :=float64 (1);_faac :=args [1].AsNumber ();if _faac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_abc =_faac .ValueNumber ;if _abc < 0&&_ebgab .ValueNumber > 0||_abc > 0&&_ebgab .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_bbfc :=_ebgab .ValueNumber ;_bbfc ,_ffb :=_degc .Modf (_bbfc /_abc );if _degc .Trunc (_ffb +0.5)> 0{_bbfc ++;};return MakeNumberResult (_bbfc *_abc );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _cgdb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _acdf (args ,true )};var _dbad =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// IsBool returns false for the invalid reference context.
func (_bfd *ivr )IsBool (cellRef string )bool {return false };

// Update returns the same object as updating sheet references does not affect named ranges.
func (_ccb NamedRangeRef )Update (q *_ccdc .UpdateQuery )Expression {return _ccb };func _fafc (_fdfg ,_eceb ,_ffc ,_fdced ,_afgg ,_deegg float64 ,_gee int )(float64 ,Result ){_bfa :=int (_deegg );_bgag :=_gaaa (_fdfg ,_eceb ,_bfa ,_gee );_bdab :=_eedd (_fdfg ,_eceb ,_bfa ,_gee )/_bgag ;_beceb ,_bffbe :=_bbcd (_fdfg ,_eceb ,_bfa ,_gee );if _bffbe .Type ==ResultTypeError {return 0,_bffbe ;};_fffe :=_cgdggc (_fdfg ,_eceb ,_bfa ,_gee );_ccfb :=_afgg /_degc .Pow (1+_fdced /_deegg ,_beceb -1+_bdab );_ccfb -=100*_ffc /_deegg *_fffe /_bgag ;_beee :=100*_ffc /_deegg ;_cdgg :=1+_fdced /_deegg ;for _ebcfe :=0.0;_ebcfe < _beceb ;_ebcfe ++{_ccfb +=_beee /_degc .Pow (_cdgg ,_ebcfe +_bdab );};return _ccfb ,MakeEmptyResult ();};const _fce =57374;

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};var _daff =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgg :=args [0].Ref ;if _bgg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_bgg .Value ,ev ).IsBoolean );};func _edcg (_aabag ,_dfga ,_ffeae int )float64 {return float64 (_efaf (_aabag ,_cbaa .Month (_dfga ),_ffeae )/86400)+_gfgde ;};

// Reference returns a string reference value to an expression with prefix.
func (_bbd PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_ecffg :=_bbd ._bdc .Reference (ctx ,ev );_gbce :=_bbd ._baaa .Reference (ctx ,ev );if _ecffg .Type ==ReferenceTypeSheet &&_gbce .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_ecffg .Value +"\u0021"+_gbce .Value };};return ReferenceInvalid ;};func (_bce VerticalRange )verticalRangeReference ()string {return _ddaf .Sprintf ("\u0025\u0073\u003a%\u0073",_bce ._aadc ,_bce ._feaf );};

// String is a string expression.
type String struct{_egbab string };const _bcgea =57364;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};type evCache struct{_aade map[string ]Result ;_bgbd *_efdg .Mutex ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_becce :=args [0];if _becce .Type !=ResultTypeArray &&_becce .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bca :=_bgeb (_becce );_gcbfa :=args [2];if _gcbfa .Type !=ResultTypeArray &&_gcbfa .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ee :=_bgeb (_gcbfa );_bcdf :=_egdc (args [1]);_cfbc :=0.0;for _eccaa ,_cccf :=range _bca {for _ac ,_efa :=range _cccf {if _fgfd (_efa ,_bcdf ){_cfbc +=_ee [_eccaa ][_ac ].ValueNumber ;};};};return MakeNumberResult (_cfbc );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_dgcd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgcd =int (args [1].ValueNumber );if _dgcd < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _dgcd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dgc :=args [0].Value ();_bgf :=len (_dgc );if _dgcd > _bgf {return MakeStringResult (_dgc );};return MakeStringResult (_dgc [_bgf -_dgcd :_bgf ]);};const _cffbfa =57344;func _efgc (_aceg int )string {if _aceg >=0&&_aceg < len (_cbd ){if _cbd [_aceg ]!=""{return _cbd [_aceg ];};};return _ddaf .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_aceg );};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Negate is a negate expression like -A1.
type Negate struct{_ecag Expression };var _gebd =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// HasFormula returns FALSE for the invalid reference context.
func (_gaf *ivr )HasFormula (cellRef string )bool {return false };func _aegf (_aba ,_aggee ,_be ,_fcac float64 ,_bdbb int )float64 {var _ccadf float64 ;if _aba ==0{_ccadf =_fcac +_be *_aggee ;}else {_dede :=_degc .Pow (1+_aba ,_aggee );if _bdbb ==1{_ccadf =_fcac *_dede +_be *(1+_aba )*(_dede -1)/_aba ;}else {_ccadf =_fcac *_dede +_be *(_dede -1)/_aba ;};};return -_ccadf ;};const _age =57361;const (_ byte =iota ;_fbbbe ;_dca ;_fdgf ;_dgac ;_bgdc ;);

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_ageg EmptyExpr )Update (q *_ccdc .UpdateQuery )Expression {return _ageg };func _abcf (_eedg []string ,_edbdf int )string {return _eggd .Itoa (len (_eedg [len (_eedg )-1-_edbdf ]))};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aff :=false ;for _ ,_eaee :=range args {switch _eaee .Type {case ResultTypeList ,ResultTypeArray :_gfdfc :=Or (_eaee .ListValues ());if _gfdfc .Type ==ResultTypeError {return _gfdfc ;};if _gfdfc .ValueNumber !=0{_aff =true ;};case ResultTypeNumber :if _eaee .ValueNumber !=0{_aff =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _eaee ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_aff );};func _bfbfb (_efag ,_gabcb float64 )bool {return _degc .Abs (_efag -_gabcb )< 1.0e-6};func _faf (_egde []Result )(float64 ,float64 ,Result ){_gaa :=0.0;_bceb :=1.0;for _ ,_gffb :=range _egde {switch _gffb .Type {case ResultTypeNumber :_gaa +=_gffb .ValueNumber ;_bceb *=_edef (_gffb .ValueNumber );case ResultTypeList ,ResultTypeArray :_gbdf ,_fgaee ,_gfda :=_faf (_gffb .ListValues ());_gaa +=_gbdf ;_bceb *=_edef (_fgaee );if _gfda .Type ==ResultTypeError {return 0,0,_gfda ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_gffb ;};};return _gaa ,_bceb ,_adega ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_daafg :=args [0];_fcadd :=args [1];if _fcadd .Type !=ResultTypeArray &&_fcadd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eegbg :=_fgede (_fcadd );_bbfde :=-1;for _eaf ,_gcbbd :=range _eegbg {if _abfg (_daafg ,_gcbbd ,false ,false )==_ccdffd {_bbfde =_eaf ;};};if _bbfde ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_fcae :=_eegbg ;if len (args )==3{_fcae =_fgede (args [2]);};if _bbfde < 0||_bbfde >=len (_fcae ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _fcae [_bbfde ];};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_gdcg Context ,formula string )Result ;SetCache (_cbcbg string ,_ecgdc Result );GetFromCache (_ddea string )(Result ,bool );LastEvalIsRef ()bool ;};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {return Range {from ,to }};func _gaaa (_gfgd ,_fgae float64 ,_added ,_bgdec int )float64 {_eggg :=_eefcf (_gfgd );_afcf :=_eefcf (_fgae );if _bgdec ==1{_dcge :=_bbfedg (_eggg ,_afcf ,_added ,1);_efeg :=_dcge .AddDate (0,12/_added ,0);return _aeea (_dcge ,_efeg ,_bgdec );};return float64 (_dfd (0,_bgdec ))/float64 (_added );};var _gge =[...]int {-1,1,1,-1,-2,0};func NewLexer ()*Lexer {return &Lexer {_dbfec :make (chan*node )}};const _gcce int =30;func (_ddc PrefixHorizontalRange )horizontalRangeReference (_aebfc string )string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_aebfc ,_ddc ._ebcag ,_ddc ._gbgdg );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_gdda :=len (args );if _gdda !=5&&_gdda !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfb ,_addef ,_debb :=_geda (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _debb .Type ==ResultTypeError {return _debb ;};_fbdfg ,_debb :=_dgd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _debb .Type ==ResultTypeError {return _debb ;};if _fbdfg >=_bfb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgcbe :=args [3].ValueNumber ;if _fgcbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aage :=args [4].ValueNumber ;if _aage < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cdfcf :=0;if _gdda ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdfcf =int (args [5].ValueNumber );if !_dgea (_cdfcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_acabb ,_debb :=_gebb (_bfb ,_addef ,_cdfcf );if _debb .Type ==ResultTypeError {return _debb ;};_ecec ,_debb :=_gebb (_fbdfg ,_addef ,_cdfcf );if _debb .Type ==ResultTypeError {return _debb ;};_bcaa ,_debb :=_gebb (_fbdfg ,_bfb ,_cdfcf );if _debb .Type ==ResultTypeError {return _debb ;};_cb :=1+_ecec *_fgcbe ;_gaeec :=1+_acabb *_aage ;return MakeNumberResult ((_cb /_gaeec -_bcaa *_fgcbe )*100);};

// String returns a string representation of a vertical range.
func (_dcg VerticalRange )String ()string {return _dcg .verticalRangeReference ()};func init (){_fccfb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};var InvalidReferenceContext =&ivr {};func _edgb (_ggga BinOpType ,_bffa []Result ,_cdece Result )Result {_bbfcg :=[]Result {};switch _cdece .Type {case ResultTypeNumber :_gbbb :=_cdece .ValueNumber ;for _bebb :=range _bffa {_daaf :=_bffa [_bebb ].AsNumber ();if _daaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ggga {case BinOpTypePlus :_bbfcg =append (_bbfcg ,MakeNumberResult (_daaf .ValueNumber +_gbbb ));case BinOpTypeMinus :_bbfcg =append (_bbfcg ,MakeNumberResult (_daaf .ValueNumber -_gbbb ));case BinOpTypeMult :_bbfcg =append (_bbfcg ,MakeNumberResult (_daaf .ValueNumber *_gbbb ));case BinOpTypeDiv :if _gbbb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bbfcg =append (_bbfcg ,MakeNumberResult (_daaf .ValueNumber /_gbbb ));case BinOpTypeExp :_bbfcg =append (_bbfcg ,MakeNumberResult (_degc .Pow (_daaf .ValueNumber ,_gbbb )));case BinOpTypeLT :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber < _gbbb ));case BinOpTypeGT :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber > _gbbb ));case BinOpTypeEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber ==_gbbb ));case BinOpTypeLEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber <=_gbbb ));case BinOpTypeGEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber >=_gbbb ));case BinOpTypeNE :_bbfcg =append (_bbfcg ,MakeBoolResult (_daaf .ValueNumber !=_gbbb ));default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ggga ));};};case ResultTypeString :_bfag :=_cdece .ValueString ;for _fefb :=range _bffa {_cbab :=_bffa [_fefb ].AsString ();if _cbab .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ggga {case BinOpTypeLT :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString < _bfag ));case BinOpTypeGT :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString > _bfag ));case BinOpTypeEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString ==_bfag ));case BinOpTypeLEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString <=_bfag ));case BinOpTypeGEQ :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString >=_bfag ));case BinOpTypeNE :_bbfcg =append (_bbfcg ,MakeBoolResult (_cbab .ValueString !=_bfag ));default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ggga ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_bbfcg );};

// GetLocked returns FALSE for the invalid reference context.
func (_fbde *ivr )GetLocked (cellRef string )bool {return false };func _edef (_dfc float64 )float64 {_aggdb :=float64 (1);for _afdbb :=float64 (2);_afdbb <=_dfc ;_afdbb ++{_aggdb *=_afdbb ;};return _aggdb ;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gbcf :=[]float64 {};for _ ,_eagaa :=range args {switch _eagaa .Type {case ResultTypeString :_abgf :=_eagaa .AsNumber ();if _abgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbcf =append (_gbcf ,_abgf .ValueNumber );case ResultTypeList :_fbeg :=LCM (_eagaa .ValueList );if _fbeg .Type !=ResultTypeNumber {return _fbeg ;};_gbcf =append (_gbcf ,_fbeg .ValueNumber );case ResultTypeNumber :_gbcf =append (_gbcf ,_eagaa .ValueNumber );case ResultTypeError :return _eagaa ;};};if _gbcf [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gbcf )==1{return MakeNumberResult (_gbcf [0]);};_abd :=_gbcf [0];for _eadfe :=1;_eadfe < len (_gbcf );_eadfe ++{if _gbcf [_eadfe ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abd =_fcad (_abd ,_gbcf [_eadfe ]);};return MakeNumberResult (_abd );};const _cgfc =57360;var _ebfgd =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _acdad int64 =_efaf (1900,_cbaa .January ,1);

// BinaryExpr is a binary expression.
type BinaryExpr struct{_fcec ,_gcaba Expression ;_eece BinOpType ;};var _bbcdg =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};const _deff =57348;func _dade (_bdf ,_cbda int )string {const TOKSTART =4;if !_aacfc {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_gfb :=range _egcde {if _gfb ._bdga ==_bdf &&_gfb ._debac ==_cbda {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_gfb ._bacdc ;};};_eaga :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_gfbe (_cbda );_fddg :=make ([]int ,0,4);_daegf :=_gebd [_bdf ];for _gbbbd :=TOKSTART ;_gbbbd -1< len (_fef );_gbbbd ++{if _fgfbe :=_daegf +_gbbbd ;_fgfbe >=0&&_fgfbe < _abge &&_fbac [_fbbg [_fgfbe ]]==_gbbbd {if len (_fddg )==cap (_fddg ){return _eaga ;};_fddg =append (_fddg ,_gbbbd );};};if _aggb [_bdf ]==-2{_fgdff :=0;for _gge [_fgdff ]!=-1||_gge [_fgdff +1]!=_bdf {_fgdff +=2;};for _fgdff +=2;_gge [_fgdff ]>=0;_fgdff +=2{_abgecb :=_gge [_fgdff ];if _abgecb < TOKSTART ||_gge [_fgdff +1]==0{continue ;};if len (_fddg )==cap (_fddg ){return _eaga ;};_fddg =append (_fddg ,_abgecb );};if _gge [_fgdff +1]!=0{return _eaga ;};};for _efcb ,_ebdaa :=range _fddg {if _efcb ==0{_eaga +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_eaga +="\u0020\u006f\u0072\u0020";};_eaga +=_gfbe (_ebdaa );};return _eaga ;};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_daccb :=args [0].AsNumber ();_gbab :=args [1].AsNumber ();if _daccb .Type !=ResultTypeNumber ||_gbab .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gbab .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_ebff ,_cec :=_degc .Modf (_daccb .ValueNumber /_gbab .ValueNumber );if _cec < 0{_ebff --;};return MakeNumberResult (_daccb .ValueNumber -_gbab .ValueNumber *_ebff );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_bac :=args [0];if _bac .Type !=ResultTypeArray &&_bac .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbe :=_egdc (args [1]);_cfbg :=0;for _ ,_gaee :=range _bgeb (_bac ){for _ ,_dcfd :=range _gaee {if _fgfd (_dcfd ,_gbe ){_cfbg ++;};};};return MakeNumberResult (float64 (_cfbg ));};func _aedg (_aeeg Context ,_afd ,_cead string )(string ,string ){_bebf :=_afd +"\u0031";_eccc :=_aeeg .LastRow (_afd );_ggba :=_cead +_eggd .Itoa (_eccc );return _bebf ,_ggba ;};func _cbbff (_fgdb [][]Result )float64 {if len (_fgdb )==2{_defdb :=_fgdb [0][0].AsNumber ();_bdcf :=_fgdb [0][1].AsNumber ();_fgcb :=_fgdb [1][0].AsNumber ();_fbece :=_fgdb [1][1].AsNumber ();if _defdb .Type !=ResultTypeNumber ||_bdcf .Type !=ResultTypeNumber ||_fgcb .Type !=ResultTypeNumber ||_fbece .Type !=ResultTypeNumber {return _degc .NaN ();};return _defdb .ValueNumber *_fbece .ValueNumber -_fgcb .ValueNumber *_bdcf .ValueNumber ;};_edda :=float64 (0);_bdef :=float64 (1);for _gcgec :=range _fgdb {_edda +=_bdef *_fgdb [0][_gcgec ].ValueNumber *_cbbff (_edfb (_fgdb ,_gcgec ));_bdef *=-1;};return _edda ;};func _deaf (_gfefb ,_gae ,_dgccc float64 )float64 {return (_gfefb *3600+_gae *60+_dgccc )/86400};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_bae Context ,_cadgc Evaluator ,_becebf []Result )Result ;

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bcgge :=args [0].AsNumber ();_gbceb :=args [1].AsNumber ();if _bcgge .Type !=ResultTypeNumber ||_gbceb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _gbceb .ValueNumber < _bcgge .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_cagb :=int64 (_bcgge .ValueNumber );_edbb :=int64 (_gbceb .ValueNumber );return MakeNumberResult (float64 (_ccdff .Int63n (_edbb -_cagb +1)+_cagb ));};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_dbebd :=len (args );if _dbebd !=3&&_dbebd !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcec ,_geagg :=_cbdee (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _geagg .Type ==ResultTypeError {return _geagg ;};_bdgg ,_geagg :=_cbdee (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _geagg .Type ==ResultTypeError {return _geagg ;};_gcfd ,_geagg :=_cbdee (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _geagg .Type ==ResultTypeError {return _geagg ;};_agdc :=0;if _dbebd ==3{return MakeStringResult (_abcg .Replace (_dcec ,_bdgg ,_gcfd ,-1));}else {_fddb ,_egdffe :=_gabdc (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _egdffe .Type ==ResultTypeError {return _egdffe ;};_agdc =int (_fddb );if _agdc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_afccge :=_dcec ;_eccac :=_agdc ;_bffd :=-1;_gadg :=len (_bdgg );_adbfb :=0;for {_eccac --;_bagg :=_abcg .Index (_afccge ,_bdgg );if _bagg ==-1{_bffd =-1;break ;}else {_bffd =_bagg +_adbfb ;if _eccac ==0{break ;};_abdbg :=_gadg +_bagg ;_adbfb +=_abdbg ;_afccge =_afccge [_abdbg :];};};if _bffd ==-1{return MakeStringResult (_dcec );}else {_egf :=_dcec [:_bffd ];_dcfdd :=_dcec [_bffd +_gadg :];return MakeStringResult (_egf +_gcfd +_dcfdd );};};};

// Eval evaluates and returns the result of a constant array expression.
func (_ddga ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_dcdg :=[][]Result {};for _ ,_ggagf :=range _ddga ._ebaad {_ded :=[]Result {};for _ ,_cdfdg :=range _ggagf {_ded =append (_ded ,_cdfdg .Eval (ctx ,ev ));};_dcdg =append (_dcdg ,_ded );};return MakeArrayResult (_dcdg );};func (_dfgdd *ivr )Sheet (name string )Context {return _dfgdd };

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {name ,args }};type noCache struct{};

// CellRef is a reference to a single cell
type CellRef struct{_ddb string };

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};var _aefg =map[string ]*_bbfef .Regexp {};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddcbd :=args [0];if _ddcbd .Type ==ResultTypeNumber {return _ddcbd ;};if _ddcbd .Type ==ResultTypeString {_ebfed ,_bb :=_eggd .ParseFloat (_ddcbd .Value (),64);if _bb ==nil {return MakeNumberResult (_ebfed );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};const (_ccdffd cmpResult =0;_bdec cmpResult =-1;_adbga cmpResult =1;_gacff cmpResult =2;);func _aagd (_eeea ,_addff ,_gcecg Reference )string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eeea .Value ,_addff .Value ,_gcecg .Value );};func _fgede (_ccfad Result )[]Result {_dgagg :=_ccfad .ValueList ;if _ccfad .Type ==ResultTypeArray {_dgagg =nil ;for _ ,_degd :=range _ccfad .ValueArray {if len (_degd )> 0{_dgagg =append (_dgagg ,_degd [0]);}else {_dgagg =append (_dgagg ,_adega );};};};return _dgagg ;};

// String returns a string representation of String.
func (_gaggd String )String ()string {return "\u0022"+_gaggd ._egbab +"\u0022"};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_cefgf :=len (args );if _cefgf < 3||_cefgf > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agacd :=args [0].ValueNumber ;if _agacd !=float64 (int (_agacd )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_baa :=args [2].ValueNumber ;_ggcbf :=0.0;if _cefgf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ggcbf =args [3].ValueNumber ;};_e :=0.0;if _cefgf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_e =args [4].ValueNumber ;if _e !=0{_e =1;};};_ccgbb :=0.1;if _cefgf >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgbb =args [5].ValueNumber ;};_cadc :=100;_afad :=0;_cceb :=false ;_edfdd :=1e-6;_gadf :=_ccgbb ;for _afad < _cadc &&!_cceb {_bfgcf :=_degc .Pow (_gadf +1,_agacd );_ecege :=_degc .Pow (_gadf +1,_agacd -1);_gddg :=_gadf *_e +1;_gcd :=_dafd *(_bfgcf -1);_bded :=_ggcbf +_bfgcf *_baa +_gcd *_gddg /_gadf ;_feba :=_agacd *_ecege *_baa -_gcd *_gddg /_degc .Pow (_gadf ,2);_ggad :=(_agacd *_dafd *_ecege *_gddg +_gcd *_e )/_gadf ;_aafg :=_bded /(_feba +_ggad );if _degc .Abs (_aafg )< _edfdd {_cceb =true ;};_afad ++;_gadf -=_aafg ;};return MakeNumberResult (_gadf );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gagff :=args [0].AsNumber ();if _gagff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cebc :=10.0;if len (args )> 1{_cbfdg :=args [1].AsNumber ();if _cbfdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_cebc =args [1].ValueNumber ;};if _gagff .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _cebc ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_degc .Log (_gagff .ValueNumber )/_degc .Log (_cebc ));};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebecd :=args [0];switch _ebecd .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_fabc :=_eefcf (_ebecd .ValueNumber );return MakeNumberResult (float64 (_fabc .Day ()));case ResultTypeString :_gfeb :=_abcg .ToLower (_ebecd .ValueString );if !_cadca (_gfeb ){_ ,_ ,_ ,_ ,_bbef ,_adgf :=_baegd (_gfeb );if _adgf .Type ==ResultTypeError {_adgf .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _adgf ;};if _bbef {return MakeNumberResult (0);};};_ ,_ ,_dagf ,_ ,_feff :=_dcb (_gfeb );if _feff .Type ==ResultTypeError {return _feff ;};return MakeNumberResult (float64 (_dagf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func init (){_ccdff =_bcfg .New (_bcfg .NewSource (_cbaa .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bbgg ("\u0041\u0053\u0049\u004e",_degc .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bbgg ("\u0041\u0053\u0049\u004e",_degc .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bbgg ("\u0041\u0053\u0049\u004e",_degc .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bbgg ("\u0041\u0043\u004f\u0054",func (_gffgd float64 )float64 {return _degc .Pi /2-_degc .Atan (_gffgd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bbgg ("\u0041\u0043\u004fT\u0048",func (_cebg float64 )float64 {return _degc .Atanh (1/_cebg )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bbgg ("\u0041\u0053\u0049\u004e",_degc .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bbgg ("\u0041\u0053\u0049N\u0048",_degc .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bbgg ("\u0041\u0054\u0041\u004e",_degc .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bbgg ("\u0041\u0054\u0041N\u0048",_degc .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bbgg ("\u0043\u004f\u0053",_degc .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bbgg ("\u0043\u004f\u0053\u0048",_degc .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_cggd ("\u0043\u004f\u0054",_degc .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_cggd ("\u0043\u004f\u0054\u0048",_degc .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_cggd ("\u0043\u0053\u0043",_degc .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_cggd ("\u0043\u0053\u0043",_degc .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bbgg ("\u0045\u0058\u0050",_degc .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bbgg ("\u004c\u004e",_degc .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bbgg ("\u004c\u004f\u00471\u0030",_degc .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_cggd ("\u0053\u0045\u0043",_degc .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_cggd ("\u0053\u0045\u0043\u0048",_degc .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bbgg ("\u0053\u0049\u004e",_degc .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bbgg ("\u0053\u0049\u004e\u0048",_degc .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bbgg ("\u0053\u0051\u0052\u0054",_degc .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bbgg ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gbgffc float64 )float64 {return _degc .Sqrt (_gbgffc *_degc .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bbgg ("\u0054\u0041\u004e",_degc .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bbgg ("\u0054\u0041\u004e\u0048",_degc .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_gdee ,_eegg :=_cabbd (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _eegg .Type ==ResultTypeError {return _eegg ;};_cbgg :=_gdee ._cgdga ;_ecfa :=_gdee ._fff ;_ede :=_gdee ._dgadc ;_dbaf :=_gdee ._cdfb ;_gcgf :=_gdee ._ddeg ;_dfge :=_gdee ._bgac ;return _eccg (_cbgg ,_ecfa ,_ede ,_dbaf ,_gcgf ,_dfge );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_aabf PrefixRangeExpr )Update (q *_ccdc .UpdateQuery )Expression {_gbbg :=_aabf ;_egae :=_aabf ._fdef .String ();if _egae ==q .SheetToUpdate {_dege :=*q ;_dege .UpdateCurrentSheet =true ;_gbbg ._cae =_aabf ._cae .Update (&_dege );_gbbg ._ddfd =_aabf ._ddfd .Update (&_dege );};return _gbbg ;};func _agbb (_de ,_fcb []float64 ,_cfbgf float64 )Result {_baca :=false ;_aeed :=false ;for _bcae :=0;_bcae < len (_de );_bcae ++{if _de [_bcae ]> 0{_baca =true ;};if _de [_bcae ]< 0{_aeed =true ;};};if !_baca ||!_aeed {return MakeErrorResultType (ErrorTypeNum ,"");};_bbea :=_cfbgf ;_fcbb :=1e-10;_decdf :=0;_agaa :=50;_baec :=false ;for {_egffc :=_bda (_de ,_fcb ,_bbea );_fac :=_bbea -_egffc /_eadf (_de ,_fcb ,_bbea );_bega :=_degc .Abs (_fac -_bbea );_bbea =_fac ;_decdf ++;if _bega <=_fcbb ||_degc .Abs (_egffc )<=_fcbb {break ;};if _decdf > _agaa {_baec =true ;break ;};};if _baec ||_degc .IsNaN (_bbea )||_degc .IsInf (_bbea ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bbea );};func _gfef (_ecdga []Result ,_bbfd bool )(float64 ,float64 ){_abac :=0.0;_bcea :=0.0;for _ ,_ddag :=range _ecdga {switch _ddag .Type {case ResultTypeNumber :if _bbfd ||!_ddag .IsBoolean {_bcea +=_ddag .ValueNumber ;_abac ++;};case ResultTypeList ,ResultTypeArray :_abee ,_geaf :=_gfef (_ddag .ListValues (),_bbfd );_bcea +=_abee ;_abac +=_geaf ;case ResultTypeString :if _bbfd {_abac ++;};case ResultTypeEmpty :};};return _bcea ,_abac ;};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_agggb :=_fbe (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _agggb .Type !=ResultTypeEmpty {return _agggb ;};_cdec :=_beg (args );return MakeNumberResult (float64 (len (_cdec )));};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ageac :=args [0];if _ageac .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaae :=len (_ageac .ValueArray );for _ ,_cfc :=range _ageac .ValueArray {if len (_cfc )!=_aaae {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_cbbff (_ageac .ValueArray ));};func _beefc (_gagg Result )bool {_fdff :=_gagg .Type ;return _fdff !=ResultTypeArray &&_fdff !=ResultTypeList ;};var _gbea =[]int {31,28,31,30,31,30,31,31,30,31,30,31};var _dec =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_decdd :=MakeNumberResult (0);for _ ,_aced :=range args {_aced =_aced .AsNumber ();switch _aced .Type {case ResultTypeNumber :_decdd .ValueNumber +=_aced .ValueNumber *_aced .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gcb :=SumSquares (_aced .ListValues ());if _gcb .Type !=ResultTypeNumber {return _gcb ;};_decdd .ValueNumber +=_gcb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _aced ;case ResultTypeEmpty :default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_aced .Type ));};};return _decdd ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eeee :=0;_fdgdg :=false ;for _ ,_eded :=range args {switch _eded .Type {case ResultTypeList ,ResultTypeArray :_gffbb :=Xor (_eded .ListValues ());if _gffbb .Type ==ResultTypeError {return _gffbb ;};if _gffbb .ValueNumber !=0{_eeee ++;};_fdgdg =true ;case ResultTypeNumber :if _eded .ValueNumber !=0{_eeee ++;};_fdgdg =true ;case ResultTypeString :case ResultTypeError :return _eded ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_fdgdg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_eeee %2!=0);};func _beg (_eecbf []Result )[]rangeIndex {_efec :=[]rangeIndex {};_adcb :=len (_eecbf );for _gbebg :=0;_gbebg < _adcb -1;_gbebg +=2{_aeca :=[]rangeIndex {};_decca :=_bgeb (_eecbf [_gbebg ]);_cdc :=_egdc (_eecbf [_gbebg +1]);if _gbebg ==0{for _fgf ,_faab :=range _decca {for _aacge ,_aeab :=range _faab {if _fgfd (_aeab ,_cdc ){_aeca =append (_aeca ,rangeIndex {_fgf ,_aacge });};};};}else {for _ ,_cdeg :=range _efec {_dcdf :=_decca [_cdeg ._gadeg ][_cdeg ._dddb ];if _fgfd (_dcdf ,_cdc ){_aeca =append (_aeca ,_cdeg );};};};if len (_aeca )==0{return []rangeIndex {};};_efec =_aeca [:];};return _efec ;};

// String returns a string representation of Number.
func (_cegd Number )String ()string {return _eggd .FormatFloat (_cegd ._cfgb ,'f',-1,64)};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {v }};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_efab :=len (args );if _efab !=6&&_efab !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgdbd ,_cccbf ,_bebfc :=_geda (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bebfc .Type ==ResultTypeError {return _bebfc ;};_ecge :=args [2];if _ecge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdce :=_ecge .ValueNumber ;if _fdce < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fcgdg :=args [3];if _fcgdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gabcba :=_fcgdg .ValueNumber ;if _gabcba <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_acg :=args [4];if _acg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bgd :=_acg .ValueNumber ;if _bgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fbbbg :=args [5];if _fbbbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgaf :=float64 (int (_fbbbg .ValueNumber ));if !_dgcef (_bgaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dddae :=0;if _efab ==7&&args [6].Type !=ResultTypeEmpty {_bedgc :=args [6];if _bedgc .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dddae =int (_bedgc .ValueNumber );if !_dgea (_dddae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_dff :=0.0;_eac :=0.0;_gbgd :=1.0;_fdaab ,_bebfc :=_fafc (_cgdbd ,_cccbf ,_fdce ,_eac ,_bgd ,_bgaf ,_dddae );if _bebfc .Type ==ResultTypeError {return _bebfc ;};_gcegb ,_bebfc :=_fafc (_cgdbd ,_cccbf ,_fdce ,_gbgd ,_bgd ,_bgaf ,_dddae );if _bebfc .Type ==ResultTypeError {return _bebfc ;};_abgcd :=(_gbgd -_eac )*0.5;for _bcdb :=0;_bcdb < 100&&_dff !=_gabcba ;_bcdb ++{_dff ,_bebfc =_fafc (_cgdbd ,_cccbf ,_fdce ,_abgcd ,_bgd ,_bgaf ,_dddae );if _bebfc .Type ==ResultTypeError {return _bebfc ;};if _gabcba ==_fdaab {return MakeNumberResult (_eac );}else if _gabcba ==_gcegb {return MakeNumberResult (_gbgd );}else if _gabcba ==_dff {return MakeNumberResult (_abgcd );}else if _gabcba < _gcegb {_gbgd *=2.0;_gcegb ,_bebfc =_fafc (_cgdbd ,_cccbf ,_fdce ,_gbgd ,_bgd ,_bgaf ,_dddae );if _bebfc .Type ==ResultTypeError {return _bebfc ;};_abgcd =(_gbgd -_eac )*0.5;}else {if _gabcba < _dff {_eac =_abgcd ;_fdaab =_dff ;}else {_gbgd =_abgcd ;_gcegb =_dff ;};_abgcd =_gbgd -(_gbgd -_eac )*((_gabcba -_gcegb )/(_fdaab -_gcegb ));};};return MakeNumberResult (_abgcd );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gaga :=args [0].AsNumber ();if _gaga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_debd :=float64 (0);if len (args )> 1{_ddcd :=args [1].AsNumber ();if _ddcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_debd =_ddcd .ValueNumber ;};_dcecg :=_gaga .ValueNumber ;_affd :=1.0;if _debd >=0{_affd =_degc .Pow (1/10.0,_debd );}else {return MakeNumberResult (0);};_dcecg ,_fbdaa :=_degc .Modf (_dcecg /_affd );_febec :=0.99999;if _fbdaa > _febec {_dcecg ++;}else if _fbdaa < -_febec {_dcecg --;};_ =_fbdaa ;return MakeNumberResult (_dcecg *_affd );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_dedb ,_egad :=_gfef (args ,true );if _egad ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_dedb /_egad );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edcc ,_dffe ,_dgbb :=_geda (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dgbb .Type ==ResultTypeError {return _dgbb ;};_cbcd ,_dgbb :=_dgd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dgbb .Type ==ResultTypeError {return _dgbb ;};if _cbcd >=_edcc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_cgb :=args [3];if _cgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_eddc :=_cgb .ValueNumber ;if _eddc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cddaa :=args [4];if _cddaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_agf :=_cddaa .ValueNumber ;if _agf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dgfg :=args [5];if _dgfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gfbb :=_dgfg .ValueNumber ;if _gfbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bfbf :=args [6];if _bfbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baadd :=float64 (int (_bfbf .ValueNumber ));if !_dgcef (_baadd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_faa :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_dgeg :=args [7];if _dgeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_faa =int (_dgeg .ValueNumber );if !_dgea (_faa ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_egcdg ,_dgbb :=_gebb (_cbcd ,_dffe ,_faa );if _dgbb .Type ==ResultTypeError {return _dgbb ;};_egcdg *=_baadd ;_ebdg ,_dgbb :=_gebb (_edcc ,_dffe ,_faa );if _dgbb .Type ==ResultTypeError {return _dgbb ;};_ebdg *=_baadd ;_cgff ,_dgbb :=_gebb (_cbcd ,_edcc ,_faa );if _dgbb .Type ==ResultTypeError {return _dgbb ;};_cgff *=_baadd ;_bfgg :=_gfbb +_egcdg *100*_eddc /_baadd ;_bfgg /=_ebdg *_agf /_baadd +1;_bfgg -=_cgff *100*_eddc /_baadd ;return MakeNumberResult (_bfgg );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_egdf :=args [0].AsNumber ();if _egdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _egdf .ValueNumber < 0{return MakeNumberResult (-1);}else if _egdf .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func _acd (_egfa BinOpType ,_daa [][]Result ,_dcbd Result )Result {_gdc :=[][]Result {};for _cbdg :=range _daa {_cfb :=_edgb (_egfa ,_daa [_cbdg ],_dcbd );if _cfb .Type ==ResultTypeError {return _cfb ;};_gdc =append (_gdc ,_cfb .ValueList );};return MakeArrayResult (_gdc );};

// Eval evaluates and returns the result of an error expression.
func (_baedb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_baedb ._gadff )};var _bff _efdg .Mutex ;var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _fgdd (_efda []Result ,_gfc []string ,_caddb bool )[]string {for _ ,_fbec :=range _efda {switch _fbec .Type {case ResultTypeEmpty :if !_caddb {_gfc =append (_gfc ,"");};case ResultTypeString :if _fbec .ValueString !=""||!_caddb {_gfc =append (_gfc ,_fbec .ValueString );};case ResultTypeNumber :_gfc =append (_gfc ,_fbec .Value ());case ResultTypeList :_gfc =_feab (_gfc ,_fgdd (_fbec .ValueList ,[]string {},_caddb ));case ResultTypeArray :for _ ,_acdd :=range _fbec .ValueArray {_gfc =_feab (_gfc ,_fgdd (_acdd ,[]string {},_caddb ));};};};return _gfc ;};const _bcegc =57359;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_ccdff .Float64 ());};func (_eeaga *Lexer )nextRaw ()*node {for len (_eeaga ._ebfd )!=0{_aeba :=<-_eeaga ._ebfd [len (_eeaga ._ebfd )-1];if _aeba !=nil {return _aeba ;};_eeaga ._ebfd =_eeaga ._ebfd [0:len (_eeaga ._ebfd )-1];};return <-_eeaga ._dbfec ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_dgca string };var _gaac =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _eebg (_bgbf int )bool {if _bgbf ==_bgbf /400*400{return true ;};if _bgbf ==_bgbf /100*100{return false ;};return _bgbf ==_bgbf /4*4;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};var _fafg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _cabbd (_bbddg []Result ,_feb string )(*durationArgs ,Result ){_ceafe :=len (_bbddg );if _ceafe !=5&&_ceafe !=6{return nil ,MakeErrorResult (_feb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdbc ,_bdaec ,_efegd :=_geda (_bbddg [0],_bbddg [1],_feb );if _efegd .Type ==ResultTypeError {return nil ,_efegd ;};_fadfd :=_bbddg [2];if _fadfd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gddac :=_fadfd .ValueNumber ;if _gddac < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_eefd :=_bbddg [3];if _eefd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_egdcf :=_eefd .ValueNumber ;if _egdcf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_dgge :=_bbddg [4];if _dgge .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfda :=float64 (int (_dgge .ValueNumber ));if !_dgcef (_bfda ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efba :=0;if _ceafe ==6&&_bbddg [5].Type !=ResultTypeEmpty {_bgfee :=_bbddg [5];if _bgfee .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efba =int (_bgfee .ValueNumber );if !_dgea (_efba ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_feb );};};return &durationArgs {_bdbc ,_bdaec ,_gddac ,_egdcf ,_bfda ,_efba },_adega ;};const _cafbc =57357;func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_abcg .NewReader (s ));};const _ggced =-1000;

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbdce :=args [0].AsNumber ();if _cbdce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgdf :=float64 (1);if _cbdce .ValueNumber < 0{_fgdf =-1;};if len (args )> 1{_dcdd :=args [1].AsNumber ();if _dcdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_fgdf =_degc .Abs (_dcdd .ValueNumber );};if len (args )==1{return MakeNumberResult (_degc .Floor (_cbdce .ValueNumber ));};_eebc :=_cbdce .ValueNumber ;_eebc ,_dgba :=_degc .Modf (_eebc /_fgdf );if _dgba !=0{if _cbdce .ValueNumber < 0{_eebc --;};};return MakeNumberResult (_eebc *_fgdf );};const _decb ="\u0028\u0020\u0028"+_edbfg +"\u007c"+_ceac +"\u007c"+_facbg +"\u007c"+_deaga +"\u0029\u0029\u003f\u0024";const (_fbcbe rmode =iota ;_agdba ;_bcad ;);

// Reference returns a string reference value to a range.
func (_aegbb Range )Reference (ctx Context ,ev Evaluator )Reference {_gda :=_aegbb ._fbfg .Reference (ctx ,ev );_daege :=_aegbb ._daed .Reference (ctx ,ev );if _gda .Type ==ReferenceTypeCell &&_daege .Type ==ReferenceTypeCell {return MakeRangeReference (_caaf (_gda ,_daege ));};return ReferenceInvalid ;};

// Eval evaluates a range returning a list of results or an error.
func (_aaafa Range )Eval (ctx Context ,ev Evaluator )Result {_dfdd :=_aaafa ._fbfg .Reference (ctx ,ev );_efgg :=_aaafa ._daed .Reference (ctx ,ev );_dccda :=_caaf (_dfdd ,_efgg );if _dfdd .Type ==ReferenceTypeCell &&_efgg .Type ==ReferenceTypeCell {if _dba ,_ebagg :=ev .GetFromCache (_dccda );_ebagg {return _dba ;}else {_cged :=_bad (ctx ,ev ,_dfdd .Value ,_efgg .Value );ev .SetCache (_dccda ,_cged );return _cged ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dccda );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_bdc Expression ;_baaa Expression ;};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeac :=args [0].AsString ();if _eeac .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_eeac .ValueString ,ev );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0049\u0046\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecac :=args [0];switch _ecac .Type {case ResultTypeError :return _ecac ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_ecac .ValueNumber !=0);};if _ecac .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gde (args );case ResultTypeArray :return _fgfc (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_efge :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_efge =int (args [1].ValueNumber );if _efge < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _efge ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_agbac :=args [0].Value ();if _efge > len (_agbac ){return MakeStringResult (_agbac );};return MakeStringResult (_agbac [0:_efge ]);};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bgdcc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dfba :=_bgdcc ._bbga .Reference (ctx ,ev );switch _dfba .Type {case ReferenceTypeSheet :_ecbe :=_bgdcc .verticalRangeReference (_dfba .Value );if _ffgf ,_aca :=ev .GetFromCache (_ecbe );_aca {return _ffgf ;};_fcbbe :=ctx .Sheet (_dfba .Value );_acdc ,_geacb :=_aedg (_fcbbe ,_bgdcc ._dfabd ,_bgdcc ._aaaab );_fdae :=_bad (_fcbbe ,ev ,_acdc ,_geacb );ev .SetCache (_ecbe ,_fdae );return _fdae ;default:return MakeErrorResult (_ddaf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfba .Type ));};};var (_fed =0;_aacfc =false ;);type yyLexer interface{Lex (_febeb *yySymType )int ;Error (_feae string );};

// String returns a string representation of a horizontal range.
func (_dacgf HorizontalRange )String ()string {return _dacgf .horizontalRangeReference ()};func _bdgd (_bfbd Result ,_fggg *criteriaParsed )bool {if _bfbd .Type ==ResultTypeEmpty {return false ;};if _fggg ._ccc {return _bfbd .ValueNumber ==_fggg ._facbe ;}else {_cgab :=_abcg .ToLower (_bfbd .ValueString );return _fggg ._bd ==_cgab ||_fggb .Match (_fggg ._bd ,_cgab );};};var _egcde =[...]struct{_bdga int ;_debac int ;_bacdc string ;}{};

// Number is a nubmer expression.
type Number struct{_cfgb float64 };const _aafgb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bffb :=args [0].AsNumber ();if _bffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _fbba float64 ;_ebca :=args [1].AsNumber ();if _ebca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbba =_ebca .ValueNumber ;if _fbba < 0&&_bffb .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_bccc :=_bffb .ValueNumber ;_bccc ,_fb :=_degc .Modf (_bccc /_fbba );if _fb !=0{if _bffb .ValueNumber < 0&&_fb < 0{_bccc --;};};return MakeNumberResult (_bccc *_fbba );};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_abcg .Replace (v ,"\u0022\u0022","\u0022",-1);return String {v };};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gffc :=args [0].AsString ();if _gffc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbbf :=args [1].AsNumber ();if _fbbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daea :=_gffc .ValueString ;if len (_daea )> 2&&(_abcg .HasPrefix (_daea ,"\u0030\u0078")||_abcg .HasPrefix (_daea ,"\u0030\u0058")){_daea =_daea [2:];};_ebcf ,_bgagb :=_eggd .ParseInt (_daea ,int (_fbbf .ValueNumber ),64);if _bgagb !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_ebcf ));};const _cbef =57367;const _feca =57352;func init (){_fcgb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Reference returns a string reference value to a vertical range with prefix.
func (_fcca PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_fgaf :=_fcca ._bbga .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fcca .verticalRangeReference (_fgaf .Value )};};func _fggfc (_gage []Result )[]float64 {_bced :=make ([]float64 ,0);for _ ,_fcbf :=range _gage {if _fcbf .Type ==ResultTypeEmpty {continue ;};_fcbf =_fcbf .AsNumber ();switch _fcbf .Type {case ResultTypeNumber :if !_fcbf .IsBoolean {_bced =append (_bced ,_fcbf .ValueNumber );};case ResultTypeList ,ResultTypeArray :_bced =append (_bced ,_fggfc (_fcbf .ListValues ())...);case ResultTypeString :default:_cbfb .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcbf .Type );};};return _bced ;};

// Reference returns a string reference value to a named range.
func (_afeg NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_afeg ._bfbff };};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeeb :=args [0].ValueNumber ;if _aeeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbfa :=args [1].ValueNumber ;if _gfbfa <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cafb :=args [2].ValueNumber ;if _cafb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_degc .Log10 (_cafb )-_degc .Log10 (_gfbfa ))/_degc .Log10 (1+_aeeb ));};func _acfbg (_eeebc ,_cfbe ,_ebb ,_ebffd ,_fcdac float64 ,_cdda int )float64 {_acgffb :=_egba (_eeebc ,_ebb ,_ebffd ,_fcdac ,_cdda );var _ddfb float64 ;if _cfbe ==1{if _cdda ==1{_ddfb =0;}else {_ddfb =-_ebffd ;};}else {if _cdda ==1{_ddfb =_aegf (_eeebc ,_cfbe -2,_acgffb ,_ebffd ,1)-_acgffb ;}else {_ddfb =_aegf (_eeebc ,_cfbe -1,_acgffb ,_ebffd ,0);};};return _ddfb *_eeebc ;};func _dgcef (_ebbf float64 )bool {return _ebbf ==1||_ebbf ==2||_ebbf ==4};

// Reference returns a string reference value to a cell.
func (_cbag CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cbag ._ddb };};func _gdcea (_gbgb ,_feeb ,_edbfgf ,_cfdec int )int {if !_becd (_cfdec ){return _edbfgf ;};_gcgdd :=_edbfgf ;_caabc :=_acacc (_gbgb ,_feeb );if _gcgdd > 30||_edbfgf >=_caabc ||_gcgdd >=_caabc {_gcgdd =30;};return _gcgdd ;};

// Update updates the FunctionCall references after removing a row/column.
func (_cded FunctionCall )Update (q *_ccdc .UpdateQuery )Expression {_ebge :=[]Expression {};for _ ,_fcd :=range _cded ._cad {_fdgd :=_fcd .Update (q );_ebge =append (_ebge ,_fdgd );};return FunctionCall {_cgbc :_cded ._cgbc ,_cad :_ebge };};func _cacea ()yyParser {return &yyParserImpl {}};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abfag :=args [0].AsNumber ();if _abfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_degc .Pi *_abfag .ValueNumber );};var _fbce []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_eaac PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ggde :=_eaac ._gadb .Reference (ctx ,ev );switch _ggde .Type {case ReferenceTypeSheet :_agff :=_eaac .horizontalRangeReference (_ggde .Value );if _bfe ,_bbag :=ev .GetFromCache (_agff );_bbag {return _bfe ;};_gfcce :=ctx .Sheet (_ggde .Value );_ccef ,_cdcbc :=_dbbcf (_gfcce ,_eaac ._ebcag ,_eaac ._gbgdg );_dgaac :=_bad (_gfcce ,ev ,_ccef ,_cdcbc );ev .SetCache (_agff ,_dgaac );return _dgaac ;default:return MakeErrorResult (_ddaf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggde .Type ));};};func _eccg (_aaba ,_fgfda ,_ffdb ,_bceg ,_aada float64 ,_dfgbe int )Result {_gga ,_ebab :=_gebb (_aaba ,_fgfda ,_dfgbe );if _ebab .Type ==ResultTypeError {return _ebab ;};_gafcf ,_fgcge :=_bbcd (_aaba ,_fgfda ,int (_aada ),_dfgbe );if _fgcge .Type ==ResultTypeError {return _fgcge ;};_fdbb :=0.0;_aedf :=0.0;_ffdb *=100/_aada ;_bceg /=_aada ;_bceg ++;_dgafd :=_gga *_aada -_gafcf ;for _ggb :=1.0;_ggb < _gafcf ;_ggb ++{_dfb :=_ggb +_dgafd ;_bgcgf :=_ffdb /_degc .Pow (_bceg ,_dfb );_aedf +=_bgcgf ;_fdbb +=_dfb *_bgcgf ;};_ba :=(_ffdb +100)/_degc .Pow (_bceg ,_gafcf +_dgafd );_aedf +=_ba ;_fdbb +=(_gafcf +_dgafd )*_ba ;_fdbb /=_aedf ;_fdbb /=_aada ;return MakeNumberResult (_fdbb );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func _fbbbb (_fbc string ,_fc []Result )(*parsedReplaceObject ,Result ){if len (_fc )!=4{return nil ,MakeErrorResult (_fbc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fc [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_fbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_edee :=_fc [0].ValueString ;if _fc [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_abfed :=int (_fc [1].ValueNumber )-1;if _fc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bagea :=int (_fc [2].ValueNumber );if _fc [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_fbc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_beceg :=_fc [3].ValueString ;return &parsedReplaceObject {_edee ,_abfed ,_bagea ,_beceg },_adega ;};const _abge =187;

// Update returns the same object as updating sheet references does not affect Error.
func (_bdae Error )Update (q *_ccdc .UpdateQuery )Expression {return _bdae };

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcab ,_ggfbb ,_agcbb :=_geda (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _agcbb .Type ==ResultTypeError {return _agcbb ;};_abgdc ,_agcbb :=_dgd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _agcbb .Type ==ResultTypeError {return _agcbb ;};if _abgdc >=_fcab {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgfff :=args [3].ValueNumber ;if _fgfff < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggdf :=args [4].ValueNumber ;if _ggdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dcgb :=args [5].ValueNumber ;if _dcgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dadf :=float64 (int (args [6].ValueNumber ));if !_dgcef (_dadf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebebg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebebg =int (args [7].ValueNumber );if !_dgea (_ebebg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_febf ,_agcbb :=_gebb (_abgdc ,_ggfbb ,_ebebg );if _agcbb .Type ==ResultTypeError {return _agcbb ;};_febf *=_dadf ;_abcd ,_agcbb :=_gebb (_fcab ,_ggfbb ,_ebebg );if _agcbb .Type ==ResultTypeError {return _agcbb ;};_abcd *=_dadf ;_bcbf ,_agcbb :=_gebb (_abgdc ,_fcab ,_ebebg );if _agcbb .Type ==ResultTypeError {return _agcbb ;};_bcbf *=_dadf ;_ceb :=_dcgb +_febf *100*_fgfff /_dadf ;_ceb /=_ggdf +_bcbf *100*_fgfff /_dadf ;_ceb --;_ceb *=_dadf /_abcd ;return MakeNumberResult (_ceb );};func _baegd (_fadgb string )(int ,int ,float64 ,bool ,bool ,Result ){_gbgf :="";_daada :=[]string {};for _deccc ,_adbcad :=range _aefg {_daada =_adbcad .FindStringSubmatch (_fadgb );if len (_daada )> 1{_gbgf =_deccc ;break ;};};if _gbgf ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_feaed :=_daada [1]=="";_daada =_daada [49:];_dbdaf :=len (_daada );_dfegc :=_daada [_dbdaf -1];_adcdf :=_dfegc =="\u0061\u006d";_dffd :=_dfegc =="\u0070\u006d";var _ecde ,_bbee int ;var _bagf float64 ;var _gfdf error ;switch _gbgf {case "\u0068\u0068":_ecde ,_gfdf =_eggd .Atoi (_daada [0]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bbee =0;_bagf =0;case "\u0068\u0068\u003am\u006d":_ecde ,_gfdf =_eggd .Atoi (_daada [0]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bbee ,_gfdf =_eggd .Atoi (_daada [2]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bagf =0;case "\u006d\u006d\u003as\u0073":_ecde =0;_bbee ,_gfdf =_eggd .Atoi (_daada [0]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bagf ,_gfdf =_eggd .ParseFloat (_daada [2],64);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_ecde ,_gfdf =_eggd .Atoi (_daada [0]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bbee ,_gfdf =_eggd .Atoi (_daada [2]);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};_bagf ,_gfdf =_eggd .ParseFloat (_daada [4],64);if _gfdf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};};if _bbee >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};if _adcdf ||_dffd {if _ecde > 12||_bagf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );}else if _ecde ==12{_ecde =0;};}else if _ecde >=24||_bagf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_aafgb );};return _ecde ,_bbee ,_bagf ,_dffd ,_feaed ,_adega ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_bfdf CellRef )Update (q *_ccdc .UpdateQuery )Expression {if q .UpdateCurrentSheet {_bfdf ._ddb =_fccbc (_bfdf ._ddb ,q );};return _bfdf ;};

// GetFormat returns an empty string for the invalid reference context.
func (_acfcb *ivr )GetFormat (cellRef string )string {return ""};const _eea =16;

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_aeae ,_dggee :=_fgee (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dggee .Type ==ResultTypeError {return _dggee ;};_efbag :=_aeae ._dcef ;_cced :=_aeae ._aaaag ;_gg :=_aeae ._ebf ;_afce :=_aeae ._gffaa ;_ededag :=_aeae ._edgf ;_aeac :=_aeae ._fge ;_cgdag :=_aeae ._gdfc ;_dabff ,_ecgf :=_gebb (_cced ,_gg ,_cgdag );if _ecgf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_dbfcd :=_dabff *_aeac *_efbag ;if _ededag ==0{return MakeNumberResult (_dbfcd );};_cbgd :=_efbag *_aeac ;_bbde :=_efbag -_afce ;_aacdf :=int ((_bbde -_dbfcd )/_cbgd );if _ededag <=_aacdf {return MakeNumberResult (_cbgd );}else if _ededag ==_aacdf +1{return MakeNumberResult (_bbde -_cbgd *float64 (_aacdf )-_dbfcd );}else {return MakeNumberResult (0);};};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ccbf :=len (args );if _ccbf < 4||_ccbf > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggbe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbeg :=args [1].ValueNumber ;if _bbeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adga :=args [2].ValueNumber ;if _adga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cd :=args [3].ValueNumber ;_bbab :=0.0;if _ccbf > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bbab =args [4].ValueNumber ;};_deecg :=0;if _ccbf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_deecg =int (args [5].ValueNumber );if _deecg !=0{_deecg =1;};};return MakeNumberResult (_acfbg (_ggbe ,_bbeg ,_adga ,_cd ,_bbab ,_deecg ));};type yySymType struct{_bgbccd int ;_acbf *node ;_decce Expression ;_ffdf []Expression ;_fbga [][]Expression ;};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afdb :=args [0].AsNumber ();if _afdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dafg :=args [1].AsNumber ();if _dafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efddg :=int (_dafg .ValueNumber );if _efddg < 0||_efddg > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_ggfd :=0;if len (args )> 2{_dac :=args [2].AsNumber ();if _dac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggfd =int (_dac .ValueNumber );};_dacd :=_eggd .FormatInt (int64 (_afdb .ValueNumber ),_efddg );if len (_dacd )< _ggfd {_dacd =_abcg .Repeat ("\u0030",_ggfd -len (_dacd ))+_dacd ;};return MakeStringResult (_dacd );};const _cgee =57378;

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {v }};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_eade ,_aegef :=_bcc (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _aegef .Type ==ResultTypeError {return _aegef ;};_feac :=_eade ._ffeaa ;_gggf :=_eade ._egagd ;_gbgdd :=_eade ._gddf ;_bgcc :=_eade ._fbdd ;_edbaf :=_eade ._fgeba ;_edega :=_eade ._eefbb ;_gc :=_egba (_feac ,_gggf ,_gbgdd ,0,_edega );_bdb :=0.0;if _bgcc ==1{if _edega ==0{_bdb =-_gbgdd ;_bgcc ++;};};for _cbg :=_bgcc ;_cbg <=_edbaf ;_cbg ++{if _edega ==1{_bdb +=_aegf (_feac ,_cbg -2,_gc ,_gbgdd ,1)-_gc ;}else {_bdb +=_aegf (_feac ,_cbg -1,_gc ,_gbgdd ,0);};};_bdb *=_feac ;return MakeNumberResult (_bdb );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_fcfg :=args [0];switch _fcfg .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_ddffc :=_eefcf (_fcfg .ValueNumber );return MakeNumberResult (float64 (_ddffc .Month ()));case ResultTypeString :_gbec :=_abcg .ToLower (_fcfg .ValueString );if !_cadca (_gbec ){_ ,_ ,_ ,_ ,_fadd ,_bfcdc :=_baegd (_gbec );if _bfcdc .Type ==ResultTypeError {_bfcdc .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bfcdc ;};if _fadd {return MakeNumberResult (1);};};_ ,_ebdbe ,_ ,_ ,_ebcc :=_dcb (_gbec );if _ebcc .Type ==ResultTypeError {return _ebcc ;};return MakeNumberResult (float64 (_ebdbe ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_fgge HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fdee :=_fgge .horizontalRangeReference ();if _geab ,_cfbd :=ev .GetFromCache (_fdee );_cfbd {return _geab ;};_eefc ,_bddbc :=_dbbcf (ctx ,_fgge ._bagc ,_fgge ._bbed );_dbfb :=_bad (ctx ,ev ,_eefc ,_bddbc );ev .SetCache (_fdee ,_dbfb );return _dbfb ;};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_geef :=args [0].ValueNumber ;_eddgb :=args [1].ValueNumber ;_aagb :=args [2].ValueNumber ;_bfgb :=_deaf (_geef ,_eddgb ,_aagb );if _bfgb >=0{return MakeNumberResult (_bfgb );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func _bda (_bbfe ,_bcgca []float64 ,_aggff float64 )float64 {_bbbg :=_aggff +1;_ceeg :=_bbfe [0];_fccee :=len (_bbfe );_ebfg :=_bcgca [0];for _ceef :=1;_ceef < _fccee ;_ceef ++{_ceeg +=_bbfe [_ceef ]/_degc .Pow (_bbbg ,(_bcgca [_ceef ]-_ebfg )/365);};return _ceeg ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bgge :=args [0].AsString ();if _bgge .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_eced :=args [1].AsNumber ();if _eced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _eced .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _eced .ValueNumber ==0{return MakeStringResult ("");};_gabe :=_cdcba .Buffer {};for _eecb :=0;_eecb < int (_eced .ValueNumber );_eecb ++{_gabe .WriteString (_bgge .ValueString );};return MakeStringResult (_gabe .String ());};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbdc :=args [0].ValueNumber ;if _cbdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bbfed :=float64 (int (args [1].ValueNumber ));if _bbfed < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_degc .Pow ((1+_cbdc /_bbfed ),_bbfed )-1);};

// Eval evaluates and returns the result of the cell reference.
func (_cfaa CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_cfaa ._ddb ,ev )};type plex struct{_eeaff chan*node ;_cfdb Expression ;};const _ccfbb =57369;const _gafab =57371;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_aafgf ,_fecec :=_bdaa (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _fecec .Type ==ResultTypeError {return _fecec ;};return MakeNumberResult (_eedd (_aafgf ._bdba ,_aafgf ._dcf ,_aafgf ._ebda ,_aafgf ._eadg ));};const _bcda =57363;

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bff .Lock ();defer _bff .Unlock ();if _ ,_gfa :=_bdd [name ];_gfa {_cbfb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_bdd [name ]=fn ;};const _edf =57358;func (_bcd PrefixVerticalRange )verticalRangeReference (_bedb string )string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bedb ,_bcd ._dfabd ,_bcd ._aaaab );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gadeed :=[]float64 {};for _ ,_bge :=range args {switch _bge .Type {case ResultTypeString :_bacg :=_bge .AsNumber ();if _bacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gadeed =append (_gadeed ,_bacg .ValueNumber );case ResultTypeList ,ResultTypeArray :_accda :=GCD (_bge .ListValues ());if _accda .Type !=ResultTypeNumber {return _accda ;};_gadeed =append (_gadeed ,_accda .ValueNumber );case ResultTypeNumber :_gadeed =append (_gadeed ,_bge .ValueNumber );case ResultTypeError :return _bge ;default:return MakeErrorResult (_ddaf .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bge .Type ));};};if _gadeed [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gadeed )==1{return MakeNumberResult (_gadeed [0]);};_fdab :=_gadeed [0];for _ddeff :=1;_ddeff < len (_gadeed );_ddeff ++{if _gadeed [_ddeff ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdab =_cbgea (_fdab ,_gadeed [_ddeff ]);};return MakeNumberResult (_fdab );};func _gadce (_efcaa yyLexer )int {return _cacea ().Parse (_efcaa )};var _efcc =[]*_bbfef .Regexp {};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_aegd :=len (args );if _aegd !=5&&_aegd !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gadfg ,_becac ,_decd :=_geda (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _decd .Type ==ResultTypeError {return _decd ;};_ffgae ,_decd :=_dgd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _decd .Type ==ResultTypeError {return _decd ;};if _ffgae >=_gadfg {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgdda :=args [3].ValueNumber ;if _fgdda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_eedb :=args [4].ValueNumber ;if _eedb <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_bccdg :=0;if _aegd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bccdg =int (args [5].ValueNumber );if !_dgea (_bccdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_abdac ,_decd :=_gebb (_ffgae ,_becac ,_bccdg );if _decd .Type ==ResultTypeError {return _decd ;};_fede ,_decd :=_gebb (_ffgae ,_gadfg ,_bccdg );if _decd .Type ==ResultTypeError {return _decd ;};_deeae ,_decd :=_gebb (_gadfg ,_becac ,_bccdg );if _decd .Type ==ResultTypeError {return _decd ;};_gac :=1+_abdac *_fgdda ;_gac /=_eedb /100+_fede *_fgdda ;_gac --;_gac /=_deeae ;return MakeNumberResult (_gac );};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_daadb :=args [0];if _daadb .Type !=ResultTypeArray &&_daadb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gfdd :=_daadb .ValueArray ;if len (_gfdd )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_gfdd [0])));};var _fbac =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};func (_eeed *Lexer )emit (_edbbg tokenType ,_caef []byte ){if _gabca {_ddaf .Println ("\u0065\u006d\u0069\u0074",_edbbg ,_dgffb (string (_caef )));};_eeed ._dbfec <-&node {_edbbg ,string (_caef )};};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_dbfec chan*node ;_ceee _efdg .Mutex ;_ebfd []chan*node ;_ege []*node ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_abba ,_ecab :=_fbbbb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _ecab .Type !=ResultTypeEmpty {return _ecab ;};_fecf :=_abba ._eafcg ;_abea :=_abba ._eggb ;_abdb :=_abba ._eec ;_abfa :=_abba ._addc ;_gbed :=len (_fecf );if _abea > _gbed {_abea =_gbed ;};_bgcg :=_abea +_abdb ;if _bgcg > _gbed {_bgcg =_gbed ;};_bbdfb :=_fecf [0:_abea ]+_abfa +_fecf [_bgcg :];return MakeStringResult (_bbdfb );};func _bbega (_ddffa string ,_acbg []Result )(*parsedSearchObject ,Result ){_fdaac :=len (_acbg );if _fdaac !=2&&_fdaac !=3{return nil ,MakeErrorResult (_ddffa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cace :=_acbg [0];if _cace .Type ==ResultTypeError {return nil ,_cace ;};if _cace .Type !=ResultTypeString &&_cace .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_aedga :=_acbg [1];if _aedga .Type ==ResultTypeError {return nil ,_aedga ;};if _aedga .Type !=ResultTypeString &&_aedga .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cefg :=_aedga .Value ();_gdg :=_cace .Value ();_bec :=1;if _fdaac ==3&&_acbg [2].Type !=ResultTypeEmpty {_badd :=_acbg [2];if _badd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_bec =int (_badd .ValueNumber );if _bec < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _bec > len (_cefg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_gdg ,_cefg ,_bec },_adega ;};var _fdda =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};const _cebec =57356;

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fab :=args [0].AsString ();if _fab .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgdaa :=_cdcba .Buffer {};_ebee :=false ;_faccb :=false ;_bfcfg :=0;for _ ,_b :=range _fab .ValueString {_gcc :=_b ==' ';if _gcc {if !_ebee {continue ;};if !_faccb {_bfcfg ++;_cgdaa .WriteRune (_b );};}else {_bfcfg =0;_ebee =true ;_cgdaa .WriteRune (_b );};_faccb =_gcc ;};_cgdaa .Truncate (_cgdaa .Len ()-_bfcfg );return MakeStringResult (_cgdaa .String ());};

// Reference returns an invalid reference for EmptyExpr.
func (_cgbb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edbdb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acc :=args [2].ValueNumber ;if _acc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagd :=args [3].ValueNumber ;if _dagd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _dagd > _acc {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gaaafe :=(_edbdb -_gcdd )*(_acc -_dagd +1)*2;_acfbf :=_acc *(_acc +1);return MakeNumberResult (_gaaafe /_acfbf );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbcfd :=args [0].Ref ;if _gbcfd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_bcfce ,_ebfe :=_dfbf .ParseCellReference (_gbcfd .Value );if _ebfe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbcfd .Value );};return MakeNumberResult (float64 (_bcfce .ColumnIdx +1));};

// Update updates references in the BinaryExpr after removing a row/column.
func (_eaceg BinaryExpr )Update (q *_ccdc .UpdateQuery )Expression {_gagb :=_eaceg ;_gagb ._fcec =_eaceg ._fcec .Update (q );_gagb ._gcaba =_eaceg ._gcaba .Update (q );return _gagb ;};type criteriaParsed struct{_ccc bool ;_facbe float64 ;_bd string ;_eefe *criteriaRegex ;};

// Reference returns a string reference value to a horizontal range.
func (_deefg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_deefg .horizontalRangeReference ()};};func _fcbdc (_gggc ,_gefce [][]Result )bool {if len (_gggc )!=len (_gefce ){return false ;};for _cdeab :=range _gggc {if len (_gggc [_cdeab ])!=len (_gefce [_cdeab ]){return false ;};};return true ;};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_bbga Expression ;_dfabd ,_aaaab string ;};func _baba (_afdag string )bool {for _ ,_ceecaa :=range _efcc {_gdcc :=_ceecaa .FindStringSubmatch (_afdag );if len (_gdcc )> 1{return true ;};};return false ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_dbcbf :=len (args );if _dbcbf < 4||_dbcbf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgdce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgg :=args [1].ValueNumber ;if _fgg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgef :=args [2].ValueNumber ;if _bgef < _fgg {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adeg :=args [3].ValueNumber ;_bgec :=0.0;if _dbcbf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgec =args [4].ValueNumber ;};_cfdbg :=0;if _dbcbf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfdbg =int (args [5].ValueNumber );if _cfdbg !=0{_cfdbg =1;};};return MakeNumberResult (_egba (_cgdce ,_bgef ,_adeg ,_bgec ,_cfdbg )-_acfbg (_cgdce ,_fgg ,_bgef ,_adeg ,_bgec ,_cfdbg ));};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_fbfg ,_daed Expression };var _fbbg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};type rangeIndex struct{_gadeg int ;_dddb int ;};func (_bccd *defEval )checkLastEvalIsRef (_abb Context ,_fca Expression ){switch _fca .(type ){case FunctionCall :switch _fca .(FunctionCall )._cgbc {case "\u0049\u0053\u0052E\u0046":for _ ,_gagge :=range _fca .(FunctionCall )._cad {switch _gagge .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cgfe :=_gagge .Eval (_abb ,_bccd );_bccd ._bgfa =!(_cgfe .Type ==ResultTypeError &&_cgfe .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_bccd ._bgfa =false ;};};};};};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_faccc :=len (args );if _faccc !=4&&_faccc !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ebea ,_fbfgf :=_dgd (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fbfgf .Type ==ResultTypeError {return _fbfgf ;};_decf ,_fbfgf :=_dgd (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fbfgf .Type ==ResultTypeError {return _fbfgf ;};if _ebea >=_decf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_efggc :=args [2].ValueNumber ;if _efggc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edb :=args [3].ValueNumber ;if _edb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaeee :=0;if _faccc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaeee =int (args [4].ValueNumber );if !_dgea (_gaeee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_ffgc ,_fbfgf :=_gebb (_ebea ,_decf ,_gaeee );if _fbfgf .Type ==ResultTypeError {return _fbfgf ;};return MakeNumberResult (_edb *_efggc *_ffgc );};func _ffcd (_dccg ,_cbfg Result ,_gdbf string )(*xargs ,Result ){if _dccg .Type !=ResultTypeList &&_dccg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_dcbb :=_bgeb (_dccg );_dgag :=[]float64 {};for _ ,_egeg :=range _dcbb {for _ ,_beea :=range _egeg {if _beea .Type ==ResultTypeNumber &&!_beea .IsBoolean {_dgag =append (_dgag ,_beea .ValueNumber );}else {return nil ,MakeErrorResult (_gdbf +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_aegb :=len (_dgag );if len (_dgag )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _cbfg .Type !=ResultTypeList &&_cbfg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gdbf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bcde :=_bgeb (_cbfg );_bg :=[]float64 {};_abf :=0.0;for _ ,_cde :=range _bcde {for _ ,_ag :=range _cde {if _ag .Type ==ResultTypeNumber &&!_ag .IsBoolean {_ffac :=float64 (int (_ag .ValueNumber ));if _ffac < _abf {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_bg =append (_bg ,_ffac );_abf =_ffac ;}else {return nil ,MakeErrorResult (_gdbf +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_bg )!=_aegb {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_dgag ,_bg },MakeEmptyResult ();};

// Eval evaluates and returns the result of a function call.
func (_dagfa FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gbcdg :=LookupFunction (_dagfa ._cgbc );if _gbcdg !=nil {_gedc :=make ([]Result ,len (_dagfa ._cad ));for _cgfb ,_fccb :=range _dagfa ._cad {_gedc [_cgfb ]=_fccb .Eval (ctx ,ev );_gedc [_cgfb ].Ref =_fccb .Reference (ctx ,ev );};return _gbcdg (_gedc );};_gcbb :=LookupFunctionComplex (_dagfa ._cgbc );if _gcbb !=nil {_efe :=make ([]Result ,len (_dagfa ._cad ));for _adde ,_ccgb :=range _dagfa ._cad {_efe [_adde ]=_ccgb .Eval (ctx ,ev );_efe [_adde ].Ref =_ccgb .Reference (ctx ,ev );};return _gcbb (ctx ,ev ,_efe );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_dagfa ._cgbc );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dfca :=len (args );if _dfca < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfca > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eaa :=args [0];_cbea :=args [1];if _cbea .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_egdb :=args [2].AsNumber ();if _egdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cffb :=false ;if _dfca ==4&&args [3].Type !=ResultTypeEmpty {_dfea :=args [3].AsNumber ();if _dfea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dfea .ValueNumber ==0{_cffb =true ;};};_ega :=int (_egdb .ValueNumber )-1;_egeef :=-1;_gbef :=false ;_cedfd :for _bfbc ,_dee :=range _cbea .ValueArray {if len (_dee )==0{continue ;};_deec :=_dee [0];switch _abfg (_deec ,_eaa ,false ,_cffb ){case _bdec :_egeef =_bfbc ;case _ccdffd :_egeef =_bfbc ;_gbef =true ;break _cedfd ;};};if _egeef ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dcfa :=_cbea .ValueArray [_egeef ];if _ega < 0||_ega >=len (_dcfa ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gbef ||!_cffb {return _dcfa [_ega ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Update returns the same object as updating sheet references does not affect String.
func (_fcfcf String )Update (q *_ccdc .UpdateQuery )Expression {return _fcfcf };func (_cedg *yyParserImpl )Lookahead ()int {return _cedg ._ggfg };const _ceeff =57373;func (_eee *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// LastRow returns 0 for the invalid reference context.
func (_bace *ivr )LastRow (colFrom string )int {return 0};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {data }};

// String returns a string representation of PrefixExpr.
func (_efc PrefixExpr )String ()string {return _ddaf .Sprintf ("\u0025\u0073\u0021%\u0073",_efc ._bdc .String (),_efc ._baaa .String ());};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_fcgf *ivr )GetLabelPrefix (cellRef string )string {return ""};

// String returns a string representation of FunctionCall expression.
func (_ead FunctionCall )String ()string {_dced :=_cdcba .Buffer {};_dced .WriteString (_ead ._cgbc );_dced .WriteString ("\u0028");_babf :=len (_ead ._cad )-1;for _dabcg ,_fcacf :=range _ead ._cad {_dced .WriteString (_fcacf .String ());if _dabcg !=_babf {_dced .WriteString ("\u002c");};};_dced .WriteString ("\u0029");return _dced .String ();};var _afa =map[string ]*_bbfef .Regexp {};const _ebeec =57347;

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_dbdb ConstArrayExpr )Update (q *_ccdc .UpdateQuery )Expression {return _dbdb };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_acfc Result )AsNumber ()Result {if _acfc .Type ==ResultTypeString {_ebaf ,_gafca :=_eggd .ParseFloat (_acfc .ValueString ,64);if _gafca ==nil {return MakeNumberResult (_ebaf );};};if _acfc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _acfc ;};func _cadca (_dgcf string )bool {for _ ,_edcbb :=range _ddd {_bfg :=_edcbb .FindStringSubmatch (_dgcf );if len (_bfg )> 1{return true ;};};return false ;};type cmpResult int8 ;func _dgd (_dfbg Result ,_gdae ,_dedfb string )(float64 ,Result ){var _gdcb float64 ;switch _dfbg .Type {case ResultTypeNumber :_gdcb =float64 (int (_dfbg .ValueNumber ));case ResultTypeString :_gabcc :=DateValue ([]Result {_dfbg });if _gabcc .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gdae +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_dedfb );};_gdcb =_gabcc .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_dedfb );};if _gdcb < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gdae +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _gdcb ,_adega ;};var _fcaeb string =string ([]byte {92});

// GetFilename returns an empty string for the invalid reference context.
func (_cgbe *ivr )GetFilename ()string {return ""};func _fafd (_cgfab ,_fccc ,_gdad ,_ffgbe ,_gfdc ,_eadec float64 )float64 {var _aggg ,_dg float64 ;_gfdaa :=0.0;_cedbc :=_degc .Ceil (_gfdc );_df :=_cgfab -_fccc ;_bbff :=false ;_gbbfb :=0.0;for _gbad :=1.0;_gbad <=_cedbc ;_gbad ++{if !_bbff {_aggg =_fabe (_cgfab ,_fccc ,_gdad ,_gbad ,_eadec );_gbbfb =_df /(_gdad -_gbad +1);if _gbbfb > _aggg {_dg =_gbbfb ;_bbff =true ;}else {_dg =_aggg ;_df -=_aggg ;};}else {_dg =_gbbfb ;};if _gbad ==_cedbc {_dg *=_gfdc +1-_cedbc ;};_gfdaa +=_dg ;};return _gfdaa ;};const _acab =57372;const _agda =57375;

// Reference returns an invalid reference for Error.
func (_gef Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _fbgab (_fbbaa ,_bagab _cbaa .Time ,_eeba int )_cbaa .Time {_ebga :=_cbaa .Date (_fbbaa .Year (),_bagab .Month (),_bagab .Day (),0,0,0,0,_cbaa .UTC );if _ebga .After (_fbbaa ){_ebga =_ebga .AddDate (-1,0,0);};for !_ebga .After (_fbbaa ){_ebga =_ebga .AddDate (0,12/_eeba ,0);};return _ebga ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fgbaf :=args [0];if _fgbaf .Type ==ResultTypeList {_gbcb :=[][]Result {};for _ ,_adag :=range _fgbaf .ValueList {_gbcb =append (_gbcb ,[]Result {_adag });};return MakeArrayResult (_gbcb );};_bef :=make ([][]Result ,len (_fgbaf .ValueArray [0]));for _ ,_cabb :=range _fgbaf .ValueArray {for _egec ,_gba :=range _cabb {_bef [_egec ]=append (_bef [_egec ],_gba );};};return MakeArrayResult (_bef );};func _ddf (_fffcd []Result ,_cfbb countMode )float64 {_adeab :=0.0;for _ ,_cceff :=range _fffcd {switch _cceff .Type {case ResultTypeNumber :if _cfbb ==_gcgfb ||(_cfbb ==_ecgb &&!_cceff .IsBoolean ){_adeab ++;};case ResultTypeList ,ResultTypeArray :_adeab +=_ddf (_cceff .ListValues (),_cfbb );case ResultTypeString :if _cfbb ==_gcgfb {_adeab ++;};case ResultTypeEmpty :if _cfbb ==_fbaa {_adeab ++;};};};return _adeab ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_baef :=args [0].AsString ();if _baef .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcg :=_cdcba .Buffer {};_gbbf :=false ;for _ ,_fcdgd :=range _baef .ValueString {if !_gbbf &&_ccab .IsLetter (_fcdgd ){_bcg .WriteRune (_ccab .ToUpper (_fcdgd ));}else {_bcg .WriteRune (_ccab .ToLower (_fcdgd ));};_gbbf =_ccab .IsLetter (_fcdgd );};return MakeStringResult (_bcg .String ());};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const _ddcbf =1;

// Reference returns a string reference value to a vertical range.
func (_fgcae VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_fgcae .verticalRangeReference ()};};func _bad (_fafaf Context ,_cggg Evaluator ,_edba ,_dbd string )Result {_dbbd ,_dfe :=_dfbf .ParseCellReference (_edba );if _dfe !=nil {return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_edba ,_dfe .Error ()));};_eccb ,_da :=_dbbd .ColumnIdx ,_dbbd .RowIdx ;_abdd ,_defd :=_dfbf .ParseCellReference (_dbd );if _defd !=nil {return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_dbd ,_defd .Error ()));};_abdaa ,_aggf :=_abdd .ColumnIdx ,_abdd .RowIdx ;_ab :=[][]Result {};for _acfe :=_da ;_acfe <=_aggf ;_acfe ++{_dbbc :=[]Result {};for _ecdd :=_eccb ;_ecdd <=_abdaa ;_ecdd ++{_gacd :=_fafaf .Cell (_ddaf .Sprintf ("\u0025\u0073\u0025\u0064",_dfbf .IndexToColumn (_ecdd ),_acfe ),_cggg );_dbbc =append (_dbbc ,_gacd );};_ab =append (_ab ,_dbbc );};if len (_ab )==1{if len (_ab [0])==1{return _ab [0][0];};return MakeListResult (_ab [0]);};return MakeArrayResult (_ab );};func (_afdfb Result )AsString ()Result {switch _afdfb .Type {case ResultTypeNumber :return MakeStringResult (_afdfb .Value ());default:return _afdfb ;};};

// String returns a string representation of ConstArrayExpr.
func (_cedf ConstArrayExpr )String ()string {return ""};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_fag :=_abcg .Split (v ,"\u003a");if len (_fag )!=2{return nil ;};_daeab ,_ :=_eggd .Atoi (_fag [0]);_deba ,_ :=_eggd .Atoi (_fag [1]);return PrefixHorizontalRange {pfx ,_daeab ,_deba };};const _gcabf =86400000000000;const _ceac ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";type amorArgs struct{_dcef float64 ;_aaaag float64 ;_ebf float64 ;_gffaa float64 ;_edgf int ;_fge float64 ;_gdfc int ;};

// Eval evaluates the binary expression using the context given.
func (_ccad BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_acccc :=_ccad ._fcec .Eval (ctx ,ev );if _acccc .Type ==ResultTypeError {return _acccc ;};_afdc :=_ccad ._gcaba .Eval (ctx ,ev );if _afdc .Type ==ResultTypeError {return _afdc ;};if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeArray {if !_fcbdc (_acccc .ValueArray ,_afdc .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gag (_ccad ._eece ,_acccc .ValueArray ,_afdc .ValueArray );}else if _acccc .Type ==ResultTypeList {if len (_acccc .ValueList )!=len (_afdc .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gbacg (_ccad ._eece ,_acccc .ValueList ,_afdc .ValueList );};}else if _acccc .Type ==ResultTypeArray &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return _acd (_ccad ._eece ,_acccc .ValueArray ,_afdc );}else if _acccc .Type ==ResultTypeList &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return _edgb (_ccad ._eece ,_acccc .ValueList ,_afdc );};switch _ccad ._eece {case BinOpTypePlus :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeNumberResult (_acccc .ValueNumber +_afdc .ValueNumber );};};case BinOpTypeMinus :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeNumberResult (_acccc .ValueNumber -_afdc .ValueNumber );};};case BinOpTypeMult :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeNumberResult (_acccc .ValueNumber *_afdc .ValueNumber );};};case BinOpTypeDiv :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {if _afdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_acccc .ValueNumber /_afdc .ValueNumber );};};case BinOpTypeExp :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeNumberResult (_degc .Pow (_acccc .ValueNumber ,_afdc .ValueNumber ));};};case BinOpTypeLT :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber < _afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString < _afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString {return MakeBoolResult (true );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber > _afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString > _afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString {return MakeBoolResult (false );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber ==_afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString ==_afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber )||(_acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (_aacg (_afdc ));}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (_aacg (_acccc ));};case BinOpTypeNE :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber !=_afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString !=_afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber )||(_acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (!_aacg (_afdc ));}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (!_aacg (_acccc ));};case BinOpTypeLEQ :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber <=_afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString <=_afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString {return MakeBoolResult (true );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (_aacg (_afdc ));}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (_aacg (_acccc ));};case BinOpTypeGEQ :if _acccc .Type ==_afdc .Type {if _acccc .Type ==ResultTypeNumber {return MakeBoolResult (_acccc .ValueNumber >=_afdc .ValueNumber );};if _acccc .Type ==ResultTypeString {return MakeBoolResult (_acccc .ValueString >=_afdc .ValueString );};if _acccc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _acccc .Type ==ResultTypeString &&_afdc .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _acccc .Type ==ResultTypeNumber &&_afdc .Type ==ResultTypeString {return MakeBoolResult (false );}else if _acccc .Type ==ResultTypeEmpty &&(_afdc .Type ==ResultTypeNumber ||_afdc .Type ==ResultTypeString ){return MakeBoolResult (_aacg (_afdc ));}else if (_acccc .Type ==ResultTypeNumber ||_acccc .Type ==ResultTypeString )&&_afdc .Type ==ResultTypeEmpty {return MakeBoolResult (_aacg (_acccc ));};case BinOpTypeConcat :return MakeStringResult (_acccc .Value ()+_afdc .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};var _cbd =[...]string {};var _baceg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_aadc ,_feaf string };

// GetEpoch returns a null time object for the invalid reference context.
func (_dbfed *ivr )GetEpoch ()_cbaa .Time {return _cbaa .Time {}};const _ecdef ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgaab :=args [0].AsNumber ();if _dgaab .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dgaab .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_edef (_dgaab .ValueNumber ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};type criteriaRegex struct{_afee byte ;_ea string ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aggef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgdc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebec :=args [2].ValueNumber ;if _ebec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_aggef -_cgdc )/_ebec );};const _edge =57366;

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_bcgc :=len (args );if _bcgc !=4&&_bcgc !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbdfd ,_fgfb ,_cdca :=_geda (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _cdca .Type ==ResultTypeError {return _cdca ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgeff :=args [2].ValueNumber ;if _fgeff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gafe :=args [3].ValueNumber ;if _gafe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fga :=0;if _bcgc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fga =int (args [4].ValueNumber );if !_dgea (_fga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_efcba ,_cdca :=_gebb (_bbdfd ,_fgfb ,_fga );if _cdca .Type ==ResultTypeError {return _cdca ;};return MakeNumberResult (_gafe *(1-_fgeff *_efcba ));};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_febd :=args [1].ValueNumber ;_gdge :=args [0];var _dabb float64 ;switch _gdge .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_dabb =_gdge .ValueNumber ;case ResultTypeString :_fcg :=DateValue ([]Result {args [0]});if _fcg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dabb =_fcg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_efged :=_eefcf (_dabb );_bfab :=_efged .AddDate (0,int (_febd ),0);_daf ,_eeae ,_bccdf :=_bfab .Date ();_ebeag :=_edcg (_daf ,int (_eeae ),_bccdf );if _ebeag < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_ebeag );};

// String returns an empty string for Error.
func (_ceecd Error )String ()string {return ""};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _eeeb (args ,_fbcbe )};func (_bgfe BinOpType )String ()string {if _bgfe >=BinOpType (len (_dec )-1){return _ddaf .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_bgfe );};return _eede [_dec [_bgfe ]:_dec [_bgfe +1]];};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ceeag :=args [0];if _ceeag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdccd :=int (_ceeag .ValueNumber );if len (args )<=_gdccd {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gdccd ];};

// Function is a standard function whose result only depends on its arguments.
type Function func (_febbb []Result )Result ;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_daad :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_agca :=args [2].ValueNumber +1;if _agca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eegdd :=_bgeb (args [0]);_bcf :=float64 (len (_eegdd ));_eeg ,_ccg :=0.0,0.0;_agcfe ,_cgbed :=1.0,1.0;_dgef ,_adbbg :=false ,false ;for _ ,_aebf :=range _eegdd {for _ ,_eged :=range _aebf {if _eged .Type ==ResultTypeNumber &&!_eged .IsBoolean {_bdg :=_eged .ValueNumber ;if _bdg ==0{continue ;}else {if _bdg > 0{_dgef =true ;_ccg +=_eged .ValueNumber *_cgbed ;}else {_adbbg =true ;_eeg +=_eged .ValueNumber *_agcfe ;};_agcfe /=_daad ;_cgbed /=_agca ;};};};};if !_dgef ||!_adbbg {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cbb :=-_ccg /_eeg ;_cbb *=_degc .Pow (_agca ,_bcf -1);_cbb =_degc .Pow (_cbb ,1/(_bcf -1));return MakeNumberResult (_cbb -1);};

// Eval evaluates and returns a number.
func (_ebdc Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_ebdc ._cfgb )};func (_abgde *evCache )SetCache (key string ,value Result ){_abgde ._bgbd .Lock ();_abgde ._aade [key ]=value ;_abgde ._bgbd .Unlock ();};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dab :=args [0].AsNumber ();if _dab .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfcc ,_bdbbe :=_degc .Modf (_dab .ValueNumber );if _bdbbe < 0{_gfcc --;};return MakeNumberResult (_gfcc );};

// Eval evaluates and returns the result of a formula.
func (_gefb *defEval )Eval (ctx Context ,formula string )Result {_bbf :=ParseString (formula );if _bbf !=nil {_gefb .checkLastEvalIsRef (ctx ,_bbf );_eeecd :=_bbf .Eval (ctx ,_gefb );return _eeecd ;};return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgfbd :=int (args [0].ValueNumber );if _fgfbd < 0||_fgfbd >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fgfbd <=1899{_fgfbd +=1900;};_ccdf :=_cbaa .Month (args [1].ValueNumber );_bgecb :=int (args [2].ValueNumber );_abg :=_efaf (_fgfbd ,_ccdf ,_bgecb );_addg :=_dfa (_acdad ,_abg )+1;if _addg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_addg );};var _ddd =[]*_bbfef .Regexp {};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fdad :=MakeNumberResult (0);for _ ,_bdggg :=range args {_bdggg =_bdggg .AsNumber ();switch _bdggg .Type {case ResultTypeNumber :_fdad .ValueNumber +=_bdggg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ffd :=Sum (_bdggg .ListValues ());if _ffd .Type !=ResultTypeNumber {return _ffd ;};_fdad .ValueNumber +=_ffd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bdggg ;case ResultTypeEmpty :default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdggg .Type ));};};return _fdad ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// LastColumn returns empty string for the invalid reference context.
func (_gfag *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_beb :=args [0].AsNumber ();if _beb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cagg :=args [1].AsNumber ();if _cagg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_degc .Pow (_beb .ValueNumber ,_cagg .ValueNumber ));};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _bdgad (args ,true )};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cafdc :=len (args );if _cafdc < 3||_cafdc > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affda :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aecb :=args [2].ValueNumber ;_gafc :=0.0;if _cafdc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gafc =args [3].ValueNumber ;};_aaac :=0.0;if _cafdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aaac =args [4].ValueNumber ;if _aaac !=0{_aaac =1;};};_gefd :=_affda *(1+_ecb *_aaac )-_gafc *_ecb ;_accdc :=(_aecb *_ecb +_affda *(1+_ecb *_aaac ));return MakeNumberResult (_degc .Log (_gefd /_accdc )/_degc .Log (1+_ecb ));};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {e }};func _fccfb (){_fec =_bbfef .MustCompile ("\u005e\u0030\u002b\u0024");_gbba =_bbfef .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_afgc =_bbfef .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_ceegg =_bbfef .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_adg =_bbfef .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_dbf =_bbfef .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fgdc =_bbfef .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_bgdgc =_bbfef .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ebgd =_bbfef .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gfee =_bbfef .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_ccde =_bbfef .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_cccb =_bbfef .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fcaeb +_fcaeb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fcaeb +_fcaeb +"\u0029\u002b\u0059+\u0024");_aabfb =_bbfef .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fcaeb +_fcaeb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fcaeb +_fcaeb +"\u0029\u002b\u0059+\u0024");_adacg =_bbfef .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_cafac =_bbfef .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};var _ddbg =[...]int {1};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eada :=_cbaa .Now ();_ ,_gbeb :=_eada .Zone ();_dae :=_dfa (_acdad ,_eada .Unix ()+int64 (_gbeb ))+1;return MakeNumberResult (_dae );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {return PrefixRangeExpr {pfx ,from ,to }};func _cbdee (_defb Result ,_dbfe ,_fgeb string )(string ,Result ){switch _defb .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _defb .Value (),_adega ;default:return "",MakeErrorResult (_dbfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fgeb +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_geee :=_abcg .Split (v ,"\u003a");if len (_geee )!=2{return nil ;};return VerticalRange {_geee [0],_geee [1]};};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_bcfb :=1.0;for _ ,_gace :=range args {_gace =_gace .AsNumber ();switch _gace .Type {case ResultTypeNumber :_bcfb *=_gace .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bddcb :=Product (_gace .ListValues ());if _bddcb .Type !=ResultTypeNumber {return _bddcb ;};_bcfb *=_bddcb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gace ;case ResultTypeEmpty :default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gace .Type ));};};return MakeNumberResult (_bcfb );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fecg :=args [0];switch _fecg .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_dcgg :=_eefcf (_fecg .ValueNumber );return MakeNumberResult (float64 (_dcgg .Minute ()));case ResultTypeString :_gfcg :=_abcg .ToLower (_fecg .ValueString );if !_baba (_gfcg ){_ ,_ ,_ ,_ccba ,_dbg :=_dcb (_gfcg );if _dbg .Type ==ResultTypeError {_dbg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _dbg ;};if _ccba {return MakeNumberResult (0);};};_ ,_dabgg ,_ ,_ ,_ ,_ggagd :=_baegd (_gfcg );if _ggagd .Type ==ResultTypeError {return _ggagd ;};return MakeNumberResult (float64 (_dabgg ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _egdc (_effbd Result )*criteriaParsed {_bgcga :=_effbd .Type ==ResultTypeNumber ;_dag :=_effbd .ValueNumber ;_ddfba :=_abcg .ToLower (_effbd .ValueString );_ebcg :=_bfaa (_ddfba );return &criteriaParsed {_bgcga ,_dag ,_ddfba ,_ebcg };};const _abe =57365;func _becd (_eabb int )bool {return _eabb ==0||_eabb ==4};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_ffcb :=len (args );if _ffcb !=4&&_ffcb !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gdaab ,_cfead ,_aacd :=_geda (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _aacd .Type ==ResultTypeError {return _aacd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcfag :=args [2].ValueNumber ;if _bcfag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_adffed :=args [3].ValueNumber ;if _adffed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgeg :=0;if _ffcb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgeg =int (args [4].ValueNumber );if !_dgea (_bgeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_aae ,_aacd :=_gebb (_gdaab ,_cfead ,_bgeg );if _aacd .Type ==ResultTypeError {return _aacd ;};return MakeNumberResult (_bcfag /(1-_adffed *_aae ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_degc .Pi );};

// IsDBCS returns false for the invalid reference context.
func (_fae *ivr )IsDBCS ()bool {return false };

// Reference returns an invalid reference for Number.
func (_fdaa Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_cfbcf ,_abdgga :=_eggd .ParseFloat (v ,64);if _abdgga !=nil {_cbfb .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_abdgga );};return Number {_cfbcf };};

// Reference returns an invalid reference for Bool.
func (_accd Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _eede ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fffc :=args [0].AsNumber ();_cffga :=args [1].AsNumber ();if _fffc .Type ==ResultTypeNumber &&_cffga .Type ==ResultTypeNumber {_deecb :=_degc .Atan2 (_cffga .ValueNumber ,_fffc .ValueNumber );if _deecb !=_deecb {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_deecb );};for _ ,_agggbc :=range []ResultType {_fffc .Type ,_cffga .Type }{switch _agggbc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _fffc ;default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agggbc ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// String returns a string representation of a vertical range with prefix.
func (_eab PrefixVerticalRange )String ()string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eab ._bbga .String (),_eab ._dfabd ,_eab ._aaaab );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_fdef ,_cae ,_ddfd Expression };

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bff .Lock ();defer _bff .Unlock ();if _dbdac ,_addd :=_bdd [name ];_addd {return _dbdac ;};return nil ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. gooxml will return 0.5 in this case.
func Average (args []Result )Result {_bbae ,_geb :=_gfef (args ,false );if _geb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_bbae /_geb );};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgbbc :=args [0].AsNumber ();if _cgbbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_d :=float64 (1);if _cgbbc .ValueNumber < 0{_d =-1;};if len (args )> 1{_accde :=args [1].AsNumber ();if _accde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_d =_accde .ValueNumber ;};_afdf :=float64 (1);if len (args )> 2{_cgef :=args [2].AsNumber ();if _cgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_afdf =_cgef .ValueNumber ;};if len (args )==1{return MakeNumberResult (_degc .Ceil (_cgbbc .ValueNumber ));};_gdaaa :=_cgbbc .ValueNumber ;_gdaaa ,_dfcde :=_degc .Modf (_gdaaa /_d );if _dfcde !=0{if _cgbbc .ValueNumber > 0{_gdaaa ++;}else if _afdf < 0{_gdaaa --;};};return MakeNumberResult (_gdaaa *_d );};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_eabd ,_cagcc :=_cabbd (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _cagcc .Type ==ResultTypeError {return _cagcc ;};_ggbc :=_eabd ._cgdga ;_ebgg :=_eabd ._fff ;_cdede :=_eabd ._dgadc ;_baea :=_eabd ._cdfb ;_ffdc :=_eabd ._ddeg ;_cafd :=_eabd ._bgac ;_gaec :=_eccg (_ggbc ,_ebgg ,_cdede ,_baea ,_ffdc ,_cafd );if _gaec .Type ==ResultTypeError {return _gaec ;};_aadd :=_gaec .ValueNumber /(1.0+_baea /_ffdc );return MakeNumberResult (_aadd );};type couponArgs struct{_bdba float64 ;_dcf float64 ;_ebda int ;_eadg int ;};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgdd :=args [0];if _cgdd .Type ==ResultTypeError ||_cgdd .Type ==ResultTypeString {return _cgdd ;};return _adega ;};func (_gf tokenType )String ()string {return _gfbe (int (_gf ))};func _gfff (){_afa ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_bbfef .MustCompile ("\u005e"+_bbec +_decb );_afa ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_bbfef .MustCompile ("\u005e"+_aee +_decb );_afa ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_bbfef .MustCompile ("\u005e"+_ecdef +_decb );_afa ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_bbfef .MustCompile ("\u005e"+_acgc +_decb );_aefg ["\u0068\u0068"]=_bbfef .MustCompile (_fgfg +_edbfg +"\u0024");_aefg ["\u0068\u0068\u003am\u006d"]=_bbfef .MustCompile (_fgfg +_ceac +"\u0024");_aefg ["\u006d\u006d\u003as\u0073"]=_bbfef .MustCompile (_fgfg +_facbg +"\u0024");_aefg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_bbfef .MustCompile (_fgfg +_deaga +"\u0024");_ddd =[]*_bbfef .Regexp {_bbfef .MustCompile ("\u005e"+_bbec +"\u0024"),_bbfef .MustCompile ("\u005e"+_aee +"\u0024"),_bbfef .MustCompile ("\u005e"+_ecdef +"\u0024"),_bbfef .MustCompile ("\u005e"+_acgc +"\u0024")};_efcc =[]*_bbfef .Regexp {_bbfef .MustCompile ("\u005e"+_edbfg +"\u0024"),_bbfef .MustCompile ("\u005e"+_ceac +"\u0024"),_bbfef .MustCompile ("\u005e"+_facbg +"\u0024"),_bbfef .MustCompile ("\u005e"+_deaga +"\u0024")};};const _aee =_deag +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_dgaf *ivr )SetOffset (col ,row uint32 ){};func _dfac ()evCache {_dcab :=evCache {};_dcab ._aade =make (map[string ]Result );_dcab ._bgbd =&_efdg .Mutex {};return _dcab ;};

// Eval evaluates and returns the result of a Negate expression.
func (_ddbfg Negate )Eval (ctx Context ,ev Evaluator )Result {_gefbe :=_ddbfg ._ecag .Eval (ctx ,ev );if _gefbe .Type ==ResultTypeNumber {return MakeNumberResult (-_gefbe .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};type Expression interface{Eval (_facb Context ,_faefb Evaluator )Result ;Reference (_babe Context ,_egcge Evaluator )Reference ;String ()string ;Update (_dceg *_ccdc .UpdateQuery )Expression ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bf :=args [0].AsNumber ();if _bf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afdad :=float64 (1);if _bf .ValueNumber < 0{_afdad =-1;};if len (args )> 1{_eaeag :=args [1].AsNumber ();if _eaeag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afdad =_degc .Abs (_eaeag .ValueNumber );};if len (args )==1{return MakeNumberResult (_degc .Ceil (_bf .ValueNumber ));};_bgc :=_bf .ValueNumber ;_bgc ,_eafdd :=_degc .Modf (_bgc /_afdad );if _eafdd !=0{if _bf .ValueNumber > 0{_bgc ++;};};return MakeNumberResult (_bgc *_afdad );};func _cggd (_ddbc string ,_dabd func (_agfedg float64 )float64 )Function {return func (_gbdba []Result )Result {if len (_gbdba )!=1{return MakeErrorResult (_ddbc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aedbf :=_gbdba [0].AsNumber ();switch _aedbf .Type {case ResultTypeNumber :_bbcb :=_dabd (_aedbf .ValueNumber );if _degc .IsNaN (_bbcb ){return MakeErrorResult (_ddbc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _degc .IsInf (_bbcb ,0){return MakeErrorResult (_ddbc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _bbcb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_ddbc +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_bbcb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ddbc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _aedbf ;default:return MakeErrorResult (_ddaf .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddbc ,_aedbf .Type ));};};};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dacb ,_dfgae ,_eca :=_geda (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _eca .Type ==ResultTypeError {return _eca ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbb :=_dfgae -_dacb ;if _bbb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_caff :=args [2].ValueNumber ;if _caff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_caff *_bbb /360));};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aeda :=args [0].AsNumber ();_def :=args [1].AsNumber ();if _aeda .Type !=ResultTypeNumber ||_def .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _def .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_degc .Trunc (_aeda .ValueNumber /_def .ValueNumber ));};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cacg :=_fggfc (args );_afgb .Float64s (_cacg );var _cddef float64 ;if len (_cacg )%2==0{_cddef =(_cacg [len (_cacg )/2-1]+_cacg [len (_cacg )/2])/2;}else {_cddef =_cacg [len (_cacg )/2];};return MakeNumberResult (_cddef );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_aacc ,_fdd :=_bdaa (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _fdd .Type ==ResultTypeError {return _fdd ;};_cecae :=_eefcf (_aacc ._bdba );_cba :=_eefcf (_aacc ._dcf );_gega :=_aacc ._ebda ;_gcbd :=_aacc ._eadg ;_edg :=_bbfedg (_cecae ,_cba ,_gega ,_gcbd );_cdgdc ,_edgdd ,_baf :=_edg .Date ();return MakeNumberResult (_edcg (_cdgdc ,int (_edgdd ),_baf ));};const _efd int =30;func _feab (_bcfa ,_ecd []string )[]string {for _ ,_gcca :=range _ecd {_bcfa =append (_bcfa ,_gcca );};return _bcfa ;};

// Eval evaluates and returns a boolean.
func (_ccgf Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ccgf ._aggea )};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aagf :=args [0].AsString ();if _aagf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_aagf .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_aagf .ValueString [0]));};type tokenType int ;func _eeeb (_eeec []Result ,_bcgcd rmode )Result {if len (_eeec )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fgab :=_eeec [0].AsNumber ();if _fgab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_beaab :=_eeec [1].AsNumber ();if _beaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efb :=_beaab .ValueNumber ;_eef :=_fgab .ValueNumber ;_fcdg :=1.0;if _efb > 0{_fcdg =_degc .Pow (1/10.0,_efb );}else {_fcdg =_degc .Pow (10.0,-_efb );};_eef ,_cfce :=_degc .Modf (_eef /_fcdg );switch _bcgcd {case _fbcbe :const _dedg =0.499999999;if _cfce >=_dedg {_eef ++;}else if _cfce <=-_dedg {_eef --;};case _agdba :case _bcad :if _cfce > 0{_eef ++;}else if _cfce < 0{_eef --;};};return MakeNumberResult (_eef *_fcdg );};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_edcce ,_cgffc :=_fgee (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cgffc .Type ==ResultTypeError {return _cgffc ;};_gcgg :=_edcce ._dcef ;_cgdae :=_edcce ._aaaag ;_gdaad :=_edcce ._ebf ;_gedf :=_edcce ._gffaa ;_fcfb :=_edcce ._edgf ;_bece :=_edcce ._fge ;if _bece >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fbfb :=_edcce ._gdfc ;_bgbc :=1.0/_bece ;_cegaf :=2.5;if _bgbc < 3{_cegaf =1;}else if _bgbc < 5{_cegaf =1.5;}else if _bgbc <=6{_cegaf =2;};_bece *=_cegaf ;_dfdde ,_ce :=_gebb (_cgdae ,_gdaad ,_fbfb );if _ce .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_cea :=_fbge (_dfdde *_bece *_gcgg );_gcgg -=_cea ;_bdeb :=_gcgg -_gedf ;for _afbc :=0;_afbc < _fcfb ;_afbc ++{_cea =_fbge (_bece *_gcgg );_bdeb -=_cea ;if _bdeb < 0{switch _fcfb -_afbc {case 0:case 1:return MakeNumberResult (_fbge (_gcgg *0.5));default:return MakeNumberResult (0);};};_gcgg -=_cea ;};return MakeNumberResult (_cea );};func _gabdc (_caebe Result ,_fagg ,_gfe string )(float64 ,Result ){switch _caebe .Type {case ResultTypeEmpty :return 0,_adega ;case ResultTypeNumber :return _caebe .ValueNumber ,_adega ;case ResultTypeString :_eeca ,_fddc :=_eggd .ParseFloat (_caebe .ValueString ,64);if _fddc !=nil {return 0,MakeErrorResult (_gfe +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_fagg );};return _eeca ,_adega ;default:return 0,MakeErrorResult (_fagg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfe +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_fdb ,_bbaed :=_bcc (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _bbaed .Type ==ResultTypeError {return _bbaed ;};_dacf :=_fdb ._ffeaa ;_bfaed :=_fdb ._egagd ;_ccgbe :=_fdb ._gddf ;_gbag :=_fdb ._fbdd ;_ecfb :=_fdb ._fgeba ;_efee :=_fdb ._eefbb ;_adgcg :=_egba (_dacf ,_bfaed ,_ccgbe ,0,_efee );_cdcf :=0.0;if _gbag ==1{if _efee ==0{_cdcf =_adgcg +_ccgbe *_dacf ;}else {_cdcf =_adgcg ;};_gbag ++;};for _bdfa :=_gbag ;_bdfa <=_ecfb ;_bdfa ++{if _efee ==1{_cdcf +=_adgcg -(_aegf (_dacf ,_bdfa -2,_adgcg ,_ccgbe ,1)-_adgcg )*_dacf ;}else {_cdcf +=_adgcg -_aegf (_dacf ,_bdfa -1,_adgcg ,_ccgbe ,0)*_dacf ;};};return MakeNumberResult (_cdcf );};const _cbf int =0;

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_addf :=_cdcba .Buffer {};for _ ,_dfegg :=range args {switch _dfegg .Type {case ResultTypeString :_addf .WriteString (_dfegg .ValueString );case ResultTypeNumber :var _dafb string ;if _dfegg .IsBoolean {if _dfegg .ValueNumber ==0{_dafb ="\u0046\u0041\u004cS\u0045";}else {_dafb ="\u0054\u0052\u0055\u0045";};}else {_dafb =_dfegg .AsString ().ValueString ;};_addf .WriteString (_dafb );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_addf .String ());};func _acdcc (_gcgc Result ,_debg *criteriaParsed )bool {_adcge :=_abcg .ToLower (_gcgc .ValueString );_bgad :=_debg ._eefe ._afee ;_acbb :=_debg ._eefe ._ea ;if _bgad ==_fbbbe {return _adcge ==_acbb ||_fggb .Match (_acbb ,_adcge );};if _gcgc .Type !=ResultTypeEmpty {if _adcge ==_debg ._bd ||_fggb .Match (_debg ._bd ,_adcge ){return true ;};if _ ,_fccd :=_eggd .ParseFloat (_acbb ,64);_fccd ==nil {return false ;};switch _bgad {case _dca :return _adcge <=_acbb ;case _fdgf :return _adcge >=_acbb ;case _dgac :return _adcge < _acbb ;case _bgdc :return _adcge > _acbb ;};};return false ;};const _bbec ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _gfbe (_edc int )string {if _edc >=1&&_edc -1< len (_fef ){if _fef [_edc -1]!=""{return _fef [_edc -1];};};return _ddaf .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_edc );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_acgba :=args [0];if _acgba .Type !=ResultTypeNumber &&_acgba .Type !=ResultTypeString &&_acgba .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_fgba :=args [1].ValueString ;switch _acgba .Type {case ResultTypeNumber :return MakeStringResult (_eggdg .Number (_acgba .ValueNumber ,_fgba ));case ResultTypeString :return MakeStringResult (_eggdg .String (_acgba .ValueString ,_fgba ));case ResultTypeEmpty :return MakeStringResult (_eggdg .Number (0,_fgba ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};const _cdae =57350;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_bcfc PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_bed :=_bcfc ._fdef .Reference (ctx ,ev );_fdc :=_bcfc ._cae .Reference (ctx ,ev );_facgb :=_bcfc ._ddfd .Reference (ctx ,ev );switch _bed .Type {case ReferenceTypeSheet :_gcbda :=_aagd (_bed ,_fdc ,_facgb );if _fdc .Type ==ReferenceTypeCell &&_facgb .Type ==ReferenceTypeCell {if _afae ,_gcgd :=ev .GetFromCache (_gcbda );_gcgd {return _afae ;}else {_ebebc :=_bad (ctx .Sheet (_bed .Value ),ev ,_fdc .Value ,_facgb .Value );ev .SetCache (_gcbda ,_ebebc );return _ebebc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gcbda );default:return MakeErrorResult (_ddaf .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bed .Type ));};};func (_dbgd ReferenceType )String ()string {if _dbgd >=ReferenceType (len (_aagfe )-1){return _ddaf .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_dbgd );};return _eggaf [_aagfe [_dbgd ]:_aagfe [_dbgd +1]];};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_bab PrefixHorizontalRange )Update (q *_ccdc .UpdateQuery )Expression {return _bab };

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};var _bfagf =[...]uint8 {0,17,33,49,63,78,93,108};

// Error is an error expression.
type Error struct{_gadff string };func _eefcf (_ef float64 )_cbaa .Time {_dccb :=int64 ((_ef -_gfgde )*_gcabf );return _cbaa .Unix (0,_dccb );};func _fgee (_gdf []Result ,_dfgc string )(*amorArgs ,Result ){_beec :=len (_gdf );if _beec !=6&&_beec !=7{return nil ,MakeErrorResult (_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bfff :=_gdf [0].ValueNumber ;if _bfff < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gdccc ,_aefc :=_dgd (_gdf [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_dfgc );if _aefc .Type ==ResultTypeError {return nil ,_aefc ;};_ccec ,_aefc :=_dgd (_gdf [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_dfgc );if _aefc .Type ==ResultTypeError {return nil ,_aefc ;};if _ccec < _gdccc {return nil ,MakeErrorResultType (ErrorTypeNum ,_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gdf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcdb :=_gdf [3].ValueNumber ;if _dcdb < 0||_dcdb > _bfff {return nil ,MakeErrorResultType (ErrorTypeNum ,_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gdf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fffd :=int (_gdf [4].ValueNumber );if _fffd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfgc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gdf [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gfgec :=_gdf [5].ValueNumber ;if _gfgec < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfgc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_aecg :=0;if _beec ==7&&_gdf [6].Type !=ResultTypeEmpty {if _gdf [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfgc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aecg =int (_gdf [6].ValueNumber );if !_dgea (_aecg )||_aecg ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dfgc );};};return &amorArgs {_bfff ,_gdccc ,_ccec ,_dcdb ,_fffd ,_gfgec ,_aecg },_adega ;};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbf :=args [0].ValueNumber ;if _cdbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdba :=args [1].ValueNumber ;if _gdba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbf :=args [2].ValueNumber ;if _ddbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_degc .Pow (_ddbf /_gdba ,1/_cdbf )-1);};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bddb :=_abcg .Split (v ,"\u003a");if len (_bddb )!=2{return nil ;};_gfad ,_ :=_eggd .Atoi (_bddb [0]);_ecfag ,_ :=_eggd .Atoi (_bddb [1]);return HorizontalRange {_gfad ,_ecfag };};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};const _eggaf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";func (_cdedf *noCache )SetCache (key string ,value Result ){};const _bfge =57355;

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aac :=args [0].AsNumber ();if _aac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_degc .Pi /180.0*_aac .ValueNumber );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _fde :=0;_fde < len (args )-1;_fde +=2{if args [_fde ].ValueNumber ==1{return args [_fde +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};var _fec ,_ceegg ,_gbba ,_afgc ,_adg ,_dbf ,_fgdc ,_cafac ,_bgdgc ,_ebgd ,_gfee ,_ccde ,_cccb ,_aabfb ,_adacg *_bbfef .Regexp ;

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_degc .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _afaeb =2;

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_fbda ,_adf :=_bdaa (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _adf .Type ==ResultTypeError {return _adf ;};_ffgfd :=_eefcf (_fbda ._bdba );_cabcd :=_eefcf (_fbda ._dcf );_egbd :=_fbda ._ebda ;_adbb :=_fbgab (_ffgfd ,_cabcd ,_egbd );_gbfa ,_dd ,_cfbgc :=_adbb .Date ();return MakeNumberResult (_edcg (_gbfa ,int (_dd ),_cfbgc ));};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ebaad [][]Expression };const _bbg =57353;func _bgeb (_aaacb Result )[][]Result {switch _aaacb .Type {case ResultTypeArray :return _aaacb .ValueArray ;case ResultTypeList :return [][]Result {_aaacb .ValueList };default:return [][]Result {};};};

// Reference returns an invalid reference for Negate.
func (_bcadc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gcda []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_dbec :=len (args );if _dbec !=4&&_dbec !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdcd :=args [0].ValueNumber ;if _bdcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfd :=args [1].ValueNumber ;if _bdfd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abgd :=args [2].ValueNumber ;if _abgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbdab :=args [3].ValueNumber ;if _fbdab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _fbdab > _abgd {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_dbbcg :=2.0;if _dbec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbbcg =args [4].ValueNumber ;if _dbbcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_fabe (_bdcd ,_bdfd ,_abgd ,_fbdab ,_dbbcg ));};const _facbg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _edfb (_aaaagg [][]Result ,_eeeae int )[][]Result {_fg :=[][]Result {};for _efagd :=range _aaaagg {if _efagd ==0{continue ;};_bedc :=[]Result {};for _cdd :=range _aaaagg {if _cdd ==_eeeae {continue ;};_bedc =append (_bedc ,_aaaagg [_efagd ][_cdd ]);};_fg =append (_fg ,_bedc );};return _fg ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_cgbc string ;_cad []Expression ;};

// String returns a string representation for Negate.
func (_agge Negate )String ()string {return "\u002d"+_agge ._ecag .String ()};

// String returns a string representation of a horizontal range with prefix.
func (_cdcgb PrefixHorizontalRange )String ()string {return _ddaf .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_cdcgb ._gadb .String (),_cdcgb ._ebcag ,_cdcgb ._gbgdg );};func _fgfc (_bbba []Result )Result {_acgb :=_bbba [0].ValueArray ;if len (_bbba )==1{_gecd :=[][]Result {};for _ ,_ebgf :=range _acgb {_gecd =append (_gecd ,_gde ([]Result {MakeListResult (_ebgf )}).ValueList );};return MakeArrayResult (_gecd );}else if len (_bbba )==2{_eagf :=len (_acgb );_cfbgg :=len (_acgb [0]);_ccfag :=_gbgce (_bbba [1],_eagf ,_cfbgg );_fcagf :=len (_ccfag );_aeb :=[][]Result {};var _dc []Result ;for _acedc ,_ddef :=range _acgb {if _acedc < _fcagf {_dc =_ccfag [_acedc ];}else {_dc =_cfda (MakeErrorResultType (ErrorTypeNA ,""),_cfbgg );};_aeb =append (_aeb ,_gde ([]Result {MakeListResult (_ddef ),MakeListResult (_dc )}).ValueList );};return MakeArrayResult (_aeb );}else if len (_bbba )==3{_cg :=len (_acgb );_afdac :=len (_acgb [0]);_caag :=_gbgce (_bbba [1],_cg ,_afdac );_beca :=_gbgce (_bbba [2],_cg ,_afdac );_bcbe :=len (_caag );_ec :=len (_beca );_cfgfa :=[][]Result {};var _agea ,_db []Result ;for _agac ,_debf :=range _acgb {if _agac < _bcbe {_agea =_caag [_agac ];}else {_agea =_cfda (MakeErrorResultType (ErrorTypeNA ,""),_afdac );};if _agac < _ec {_db =_beca [_agac ];}else {_db =_cfda (MakeErrorResultType (ErrorTypeNA ,""),_afdac );};_cfgfa =append (_cfgfa ,_gde ([]Result {MakeListResult (_debf ),MakeListResult (_agea ),MakeListResult (_db )}).ValueList );};return MakeArrayResult (_cfgfa );};return MakeErrorResultType (ErrorTypeValue ,"");};const _bfgf =57349;func _caaf (_gcaa ,_gacdc Reference )string {return _ddaf .Sprintf ("\u0025\u0073\u003a%\u0073",_gcaa .Value ,_gacdc .Value );};

// Bool is a boolean expression.
type Bool struct{_aggea bool };func _geda (_ebac ,_fbbag Result ,_eba string )(float64 ,float64 ,Result ){_agcdc ,_ecagd :=_dgd (_ebac ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_eba );if _ecagd .Type ==ResultTypeError {return 0,0,_ecagd ;};_edae ,_ecagd :=_dgd (_fbbag ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_eba );if _ecagd .Type ==ResultTypeError {return 0,0,_ecagd ;};if _agcdc >=_edae {return 0,0,MakeErrorResultType (ErrorTypeNum ,_eba +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _agcdc ,_edae ,_adega ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _gffg (_gaeb string ,_cfac _cbaa .Time )(_cbaa .Time ,error ){_gdb ,_ ,_gccb :=_dabfg .ParseFloat (_gaeb ,10,128,_dabfg .ToNearestEven );if _gccb !=nil {return _cbaa .Time {},_gccb ;};_cbbefd :=new (_dabfg .Float );_cbbefd .SetUint64 (uint64 (24*_cbaa .Hour ));_gdb .Mul (_gdb ,_cbbefd );_cfgg ,_ :=_gdb .Uint64 ();_bgdf :=_cfac .Add (_cbaa .Duration (_cfgg ));return _cgfg (_bgdf ),nil ;};type ri struct{_ggfa float64 ;_eafb string ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_affdb :=len (args );if _affdb !=4&&_affdb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_adaae ,_afab ,_fcbd :=_geda (args [0],args [1],"\u0044\u0049\u0053\u0043");if _fcbd .Type ==ResultTypeError {return _fcbd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_agfc :=args [2].ValueNumber ;if _agfc <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gd :=args [3].ValueNumber ;if _gd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfbcc :=0;if _affdb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfbcc =int (args [4].ValueNumber );if !_dgea (_bfbcc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_gedd ,_fcbd :=_gebb (_adaae ,_afab ,_bfbcc );if _fcbd .Type ==ResultTypeError {return _fcbd ;};return MakeNumberResult ((_gd -_agfc )/_gd /_gedd );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afeb :=int (args [0].ValueNumber );return MakeBoolResult (_afeb !=_afeb /2*2);};const (_ecgb countMode =iota ;_gcgfb ;_fbaa ;);

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ddf (args ,_ecgb ))};

// Value returns a string version of the result.
func (_fgc Result )Value ()string {switch _fgc .Type {case ResultTypeNumber :_eaceb :=_eggd .FormatFloat (_fgc .ValueNumber ,'f',-1,64);if len (_eaceb )> 12{_ccce :=12;for _egdfd :=_ccce ;_egdfd > 0&&_eaceb [_egdfd ]=='0';_egdfd --{_ccce --;};_eaceb =_eaceb [0:_ccce +1];};return _eaceb ;case ResultTypeError :return _fgc .ValueString ;case ResultTypeString :return _fgc .ValueString ;case ResultTypeList :if len (_fgc .ValueList )==0{return "";};return _fgc .ValueList [0].Value ();case ResultTypeArray :if len (_fgc .ValueArray )==0||len (_fgc .ValueArray [0])==0{return "";};return _fgc .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bagee VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dccf :=_bagee .verticalRangeReference ();if _dcecb ,_cgeff :=ev .GetFromCache (_dccf );_cgeff {return _dcecb ;};_cdg ,_adbf :=_aedg (ctx ,_bagee ._aadc ,_bagee ._feaf );_eage :=_bad (ctx ,ev ,_cdg ,_adbf );ev .SetCache (_dccf ,_eage );return _eage ;};

// Reference returns a string reference value to a horizontal range with prefix.
func (_dacc PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_fddf :=_dacc ._gadb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dacc .horizontalRangeReference (_fddf .Value )};};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edeg :=args [0].AsString ();if _edeg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_cdbb :=args [1].Ref ;if _cdbb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_ge :=_cdbb .Value ;switch _edeg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_baced ,_ecaa :=_dfbf .ParseCellReference (_ge );if _ecaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ge );};_fgefg :="\u0024"+_baced .Column +"\u0024"+_eggd .Itoa (int (_baced .RowIdx ));if _baced .SheetName !=""{_fgefg =_baced .SheetName +"\u0021"+_fgefg ;};return MakeStringResult (_fgefg );case "\u0063\u006f\u006c":_gcge ,_fcc :=_dfbf .ParseCellReference (_ge );if _fcc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ge );};return MakeNumberResult (float64 (_gcge .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_acgbb :=_abcg .Contains (ctx .GetFormat (_ge ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_acgbb );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bdgc :="\u0047";_eegf :=ctx .GetFormat (_ge );if _eegf =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fec .MatchString (_eegf ){_bdgc ="\u0046\u0030";}else if _eegf =="\u0030\u0025"{_bdgc ="\u0050\u0030";}else if _eegf =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bdgc ="\u0044\u0032";}else if _eegf =="\u004d\u004d\u002fY\u0059"{_bdgc ="\u0044\u0033";}else if _eegf =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_eegf =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bdgc ="\u0044\u0034";}else if _eegf =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bdgc ="\u0044\u0035";}else if _eegf =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bdgc ="\u0044\u0036";}else if _eegf =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bdgc ="\u0044\u0037";}else if _eegf =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bdgc ="\u0044\u0038";}else if _eegf =="\u0048\u0048\u003aM\u004d"{_bdgc ="\u0044\u0039";}else if _gbba .MatchString (_eegf ){_bdgc ="\u002e\u0030";}else if _afgc .MatchString (_eegf ){_bdgc ="\u002e\u0030\u0028\u0029";}else if _ebgd .MatchString (_eegf ){_bdgc ="\u0043\u0030";}else if _cccb .MatchString (_eegf )||_aabfb .MatchString (_eegf ){_bdgc ="\u0044\u0031";}else if _cgdbg :=_ceegg .FindStringSubmatch (_eegf );len (_cgdbg )> 1{_bdgc ="\u0046"+_eggd .Itoa (len (_cgdbg [1]));}else if _abacg :=_dbf .FindStringSubmatch (_eegf );len (_abacg )> 1{_bdgc ="\u002e"+_eggd .Itoa (len (_abacg [2]));}else if _fcea :=_bgdgc .FindStringSubmatch (_eegf );len (_fcea )> 1{_bdgc ="\u0050"+_eggd .Itoa (len (_fcea [2]));}else if _gcde :=_gfee .FindStringSubmatch (_eegf );len (_gcde )> 1{_bdgc ="\u0043"+_abcf (_gcde ,1);}else if _ceaf :=_ccde .FindStringSubmatch (_eegf );len (_ceaf )> 1{_bdgc ="\u0043"+_abcf (_ceaf ,1);}else if _begf :=_fgdc .FindStringSubmatch (_eegf );len (_begf )> 1{_bdgc ="\u002e"+_abcf (_begf ,1)+"\u0028\u0029";}else if _beeeg :=_adg .FindStringSubmatch (_eegf );len (_beeeg )> 1{_bdgc ="\u002e"+_abcf (_beeeg ,1);}else if _bfcdf :=_adacg .FindStringSubmatch (_eegf );len (_bfcdf )> 1{_bdgc ="\u0053"+_abcf (_bfcdf ,3);};if _bdgc !="\u0047"&&_abcg .Contains (_eegf ,"\u005b\u0052\u0045D\u005d"){_bdgc +="\u002d";};return MakeStringResult (_bdgc );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_geeed :=ctx .GetFormat (_ge );if _cafac .MatchString (_geeed ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_ge ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_ffef :=0.0;if ctx .GetLocked (_ge ){_ffef =1.0;};return MakeNumberResult (_ffef );case "\u0072\u006f\u0077":_afgfd ,_ddbge :=_dfbf .ParseCellReference (_ge );if _ddbge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ge );};return MakeNumberResult (float64 (_afgfd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_befd ,_fbcea :=_dfbf .ParseCellReference (_ge );if _fbcea !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ge );};if _befd .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_befd .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_befd .SheetName ).GetWidth (int (_befd .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_edeg .ValueString );};

// String returns a string representation of CellRef.
func (_fcge CellRef )String ()string {return _fcge ._ddb };

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_fgffd :=len (args );if _fgffd < 3||_fgffd > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffdce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdgbg :=args [1].ValueNumber ;if _fdgbg ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_geeg :=args [2].ValueNumber ;_cfgba :=0.0;if _fgffd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgba =args [3].ValueNumber ;};_bdac :=0.0;if _fgffd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdac =args [4].ValueNumber ;if _bdac !=0{_bdac =1;};};var _fdcae float64 ;if _ffdce ==0{_fdcae =(_geeg +_cfgba )/_fdgbg ;}else {_eefg :=_degc .Pow (1+_ffdce ,_fdgbg );if _bdac ==1{_fdcae =(_cfgba *_ffdce /(_eefg -1)+_geeg *_ffdce /(1-1/_eefg ))/(1+_ffdce );}else {_fdcae =_cfgba *_ffdce /(_eefg -1)+_geeg *_ffdce /(1-1/_eefg );};};return MakeNumberResult (-_fdcae );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _dgffb (_bdfba string )string {_bdfba =_abcg .Replace (_bdfba ,"\u000a","\u005c\u006e",-1);_bdfba =_abcg .Replace (_bdfba ,"\u000d","\u005c\u0072",-1);_bdfba =_abcg .Replace (_bdfba ,"\u0009","\u005c\u0074",-1);return _bdfba ;};var _aagfe =[...]uint8 {0,20,37,60,78,96};func _acdf (_cebga []Result ,_dfdf bool )Result {var _bbgb string ;if _dfdf {_bbgb ="\u004c\u0041\u0052G\u0045";}else {_bbgb ="\u0053\u004d\u0041L\u004c";};if len (_cebga )!=2{return MakeErrorResult (_bbgb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcaf :=_cebga [0];var _eace [][]Result ;switch _gcaf .Type {case ResultTypeArray :_eace =_gcaf .ValueArray ;case ResultTypeList :_eace =[][]Result {_gcaf .ValueList };default:return MakeErrorResult (_bbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_eace )==0{return MakeErrorResult (_bbgb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _cebga [1].Type !=ResultTypeNumber {return MakeErrorResult (_bbgb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_cgdca :=_cebga [1].ValueNumber ;if _cgdca < 1{return MakeErrorResultType (ErrorTypeNum ,_bbgb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_beef :=int (_cgdca );if float64 (_beef )!=_cgdca {return MakeErrorResultType (ErrorTypeNum ,_bbgb +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_afgf :=[]float64 {};for _ ,_ceag :=range _eace {for _ ,_gdfb :=range _ceag {if _gdfb .Type ==ResultTypeNumber {_afgf =append (_afgf ,_gdfb .ValueNumber );};};};if _beef > len (_afgf ){return MakeErrorResultType (ErrorTypeNum ,_bbgb +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdce :=_baga .MergeSort (_afgf );if _dfdf {return MakeNumberResult (_gdce [len (_gdce )-_beef ]);}else {return MakeNumberResult (_gdce [_beef -1]);};};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_fa :=_fbe (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _fa .Type !=ResultTypeEmpty {return _fa ;};_dabf :=_beg (args [1:]);_fdca :=0.0;_dbba :=_bgeb (args [0]);for _ ,_acegg :=range _dabf {_fdca +=_dbba [_acegg ._gadeg ][_acegg ._dddb ].ValueNumber ;};return MakeNumberResult (float64 (_fdca ));};func _aacg (_bgcd Result )bool {if _bgcd .Type ==ResultTypeString {return _bgcd .ValueString =="";};return _bgcd .ValueNumber ==0;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_agec string ,_gaceb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_aebb string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_cbaa .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_agee int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_ebafg string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_cgdg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_afgcb string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cadb string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_dcbe string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cddea ,_gade int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_efdd string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_bacd string ,_eaeec bool );

// NamedRange returns a named range.
NamedRange (_ecf string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_bgccc ,_addb uint32 );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dagb :=args [0].ValueNumber ;if _dagb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_becg ,_gfcb :=_ffcd (args [1],args [2],"\u0058\u004e\u0050\u0056");if _gfcb .Type ==ResultTypeError {return _gfcb ;};_agggf :=_becg ._beeb ;_ebdb :=_becg ._fbb ;_bggc :=0.0;_agc :=_ebdb [0];for _acba ,_dfead :=range _agggf {_bggc +=_dfead /_degc .Pow (1+_dagb ,(_ebdb [_acba ]-_agc )/365);};return MakeNumberResult (_bggc );};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_egaef :=args [0].AsNumber ();if _egaef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbdb :=_degc .Signbit (_egaef .ValueNumber );_cgba ,_bfaea :=_degc .Modf (_egaef .ValueNumber /2);_dccgg :=_cgba *2;if _bfaea !=0{if !_bbdb {_dccgg +=2;}else {_dccgg -=2;};};return MakeNumberResult (_dccgg );};func _bdgad (_dedf []Result ,_edca bool )Result {_cede :="\u004d\u0041\u0058";if _edca {_cede ="\u004d\u0041\u0058\u0041";};if len (_dedf )==0{return MakeErrorResult (_cede +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbbe :=-_degc .MaxFloat64 ;for _ ,_aead :=range _dedf {switch _aead .Type {case ResultTypeNumber :if (_edca ||!_aead .IsBoolean )&&_aead .ValueNumber > _cbbe {_cbbe =_aead .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bffca :=_bdgad (_aead .ListValues (),_edca );if _bffca .ValueNumber > _cbbe {_cbbe =_bffca .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ecgcc :=0.0;if _edca {_ecgcc =_aead .AsNumber ().ValueNumber ;};if _ecgcc > _cbbe {_cbbe =_ecgcc ;};default:_cbfb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cede +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aead .Type );};};if _cbbe ==-_degc .MaxFloat64 {_cbbe =0;};return MakeNumberResult (_cbbe );};func _gag (_dcbc BinOpType ,_fd ,_fece [][]Result )Result {_dbbcb :=[][]Result {};for _bbfg :=range _fd {_gefc :=_gbacg (_dcbc ,_fd [_bbfg ],_fece [_bbfg ]);if _gefc .Type ==ResultTypeError {return _gefc ;};_dbbcb =append (_dbbcb ,_gefc .ValueList );};return MakeArrayResult (_dbbcb );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_ffcba :=args [0];if _ffcba .Type !=ResultTypeArray &&_ffcba .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bbeca :=_ffcba .ValueArray ;if len (_bbeca )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_bbeca )));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _eeeb (args ,_agdba )};

// Reference returns an invalid reference for BinaryExpr.
func (_febdf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ceba (_dcff int )int {if _dcff < 1900{if _dcff < 30{_dcff +=2000;}else {_dcff +=1900;};};return _dcff ;};

// SetLocked does nothing for the invalid reference context.
func (_agcd *ivr )SetLocked (cellRef string ,locked bool ){};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_daef ,_agba ,_cega :=_fdaf (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cega .Type ==ResultTypeError {return _cega ;};if _agba < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _daef ==0{return MakeNumberResult (0);};_ecba :=_daef < 0;if _ecba {_daef =-_daef ;};_gdfe :=args [0].Value ();_bcab :=_abcg .Split (_gdfe ,"\u002e");_afda :=float64 (int (_daef ));_faba :=_bcab [1];_dcfc :=len (_faba );_bafd :=int (_degc .Log10 (_agba ))+1;_ebg :=float64 (_bafd -_dcfc );_cdfc ,_fdec :=_eggd .ParseFloat (_faba ,64);if _fdec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_cdfc *=_degc .Pow (10,_ebg );_cffg :=_afda +_cdfc /_agba ;if _ecba {_cffg =-_cffg ;};return MakeNumberResult (_cffg );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_eegdc ,_deg :=_bdaa (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _deg .Type ==ResultTypeError {return _deg ;};return MakeNumberResult (_cgdggc (_eegdc ._bdba ,_eegdc ._dcf ,_eegdc ._ebda ,_eegdc ._eadg ));};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbe :=args [0];_efabd :=args [1];if _efabd .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ddfc :=args [2].AsNumber ();if _ddfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_feeee :=false ;if len (args )==4{_dfgcg :=args [3].AsNumber ();if _dfgcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dfgcg .ValueNumber ==0{_feeee =true ;};};_ggce :=-1;_ecef :=false ;if len (_efabd .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_eacb :=_efabd .ValueArray [0];_afc :for _dbgdd ,_ddg :=range _eacb {switch _abfg (_ddg ,_dbe ,false ,_feeee ){case _bdec :_ggce =_dbgdd ;case _ccdffd :_ggce =_dbgdd ;_ecef =true ;break _afc ;};};if _ggce ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_caaa :=int (_ddfc .ValueNumber )-1;if _caaa < 0||_caaa > len (_efabd .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_eacb =_efabd .ValueArray [_caaa ];if _ggce < 0||_ggce >=len (_eacb ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ecef ||!_feeee {return _eacb [_ggce ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_gdfac :=len (args );if _gdfac !=2&&_gdfac !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fbdda ,_gab :=_ffcd (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gab .Type ==ResultTypeError {return _gab ;};_ddbd :=_fbdda ._beeb ;_ggcb :=_fbdda ._fbb ;_cfde :=0.1;if _gdfac ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfde =args [2].ValueNumber ;if _cfde <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _agbb (_ddbd ,_ggcb ,_cfde );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_eeb SheetPrefixExpr )Update (q *_ccdc .UpdateQuery )Expression {return _eeb };var _gcee =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_baag :=_abcg .Split (v ,"\u003a");if len (_baag )!=2{return nil ;};return PrefixVerticalRange {pfx ,_baag [0],_baag [1]};};

// Eval evaluates the binary expression using the context given.
func (_gdag BinaryExpr )String ()string {_ffaab :="";switch _gdag ._eece {case BinOpTypePlus :_ffaab ="\u002b";case BinOpTypeMinus :_ffaab ="\u002d";case BinOpTypeMult :_ffaab ="\u002a";case BinOpTypeDiv :_ffaab ="\u002f";case BinOpTypeExp :_ffaab ="\u005e";case BinOpTypeLT :_ffaab ="\u003c";case BinOpTypeGT :_ffaab ="\u003e";case BinOpTypeEQ :_ffaab ="\u003d";case BinOpTypeLEQ :_ffaab ="\u003c\u003d";case BinOpTypeGEQ :_ffaab ="\u003e\u003d";case BinOpTypeNE :_ffaab ="\u003c\u003e";case BinOpTypeConcat :_ffaab ="\u0026";};return _gdag ._fcec .String ()+_ffaab +_gdag ._gcaba .String ();};func _ad (_bcb float64 ,_badc *criteriaRegex )bool {_fcegc ,_beegd :=_eggd .ParseFloat (_badc ._ea ,64);if _beegd !=nil {return false ;};switch _badc ._afee {case _fbbbe :return _bcb ==_fcegc ;case _dca :return _bcb <=_fcegc ;case _fdgf :return _bcb >=_fcegc ;case _dgac :return _bcb < _fcegc ;case _bgdc :return _bcb > _fcegc ;};return false ;};

// String returns a string of a range.
func (_bfc Range )String ()string {return _ddaf .Sprintf ("\u0025\u0073\u003a%\u0073",_bfc ._fbfg .String (),_bfc ._daed .String ());};func _bbcd (_gcfe ,_cfag float64 ,_dfgd ,_gdea int )(float64 ,Result ){_ggca ,_edce :=_eefcf (_gcfe ),_eefcf (_cfag );if _edce .After (_ggca ){_ecee :=_bbfedg (_ggca ,_edce ,_dfgd ,_gdea );_ggbd :=(_edce .Year ()-_ecee .Year ())*12+int (_edce .Month ())-int (_ecee .Month ());return float64 (_ggbd *_dfgd )/12.0,_adega ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_fddab :=len (args );if _fddab < 5||_fddab > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbeda :=args [0].ValueNumber ;if _bbeda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebf :=args [1].ValueNumber ;if _cebf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adfe :=args [2].ValueNumber ;if _adfe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _adfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dacca :=args [3].ValueNumber ;if _dacca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbgc :=args [4].ValueNumber ;if _dacca > _bbgc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _bbgc > _adfe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_ffdbd :=2.0;if _fddab > 5{if args [5].Type ==ResultTypeEmpty {_ffdbd =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdbd =args [5].ValueNumber ;if _ffdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_cggc :=false ;if _fddab > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cggc =args [6].ValueNumber !=0;};_cfgab :=0.0;_ddcb :=_degc .Floor (_dacca );_ggdg :=_degc .Ceil (_bbgc );if _cggc {for _dbeb :=_ddcb +1;_dbeb <=_ggdg ;_dbeb ++{_eacd :=_fabe (_bbeda ,_cebf ,_adfe ,_dbeb ,_ffdbd );if _dbeb ==_ddcb +1{_eacd *=_degc .Min (_bbgc ,_ddcb +1)-_dacca ;}else if _dbeb ==_ggdg {_eacd *=_bbgc +1-_ggdg ;};_cfgab +=_eacd ;};}else {_gcfa :=_adfe ;var _ggec float64 ;if !_bfbfb (_dacca ,_degc .Floor (_dacca )){if _ffdbd ==1{_bfce :=_adfe /2;if _dacca > _bfce ||_bfbfb (_dacca ,_bfce ){_ggec =_dacca -_bfce ;_dacca =_bfce ;_bbgc -=_ggec ;_gcfa ++;};};};if _ffdbd !=0{_bbeda -=_fafd (_bbeda ,_cebf ,_adfe ,_gcfa ,_dacca ,_ffdbd );};_cfgab =_fafd (_bbeda ,_cebf ,_adfe ,_adfe -_dacca ,_bbgc -_dacca ,_ffdbd );};return MakeNumberResult (_cfgab );};var _aagfg =map[string ]FunctionComplex {};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_faae ,_ddfaa ,_ffga :=_geda (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _ffga .Type ==ResultTypeError {return _ffga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gce :=_ddfaa -_faae ;if _gce > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_ecgd :=args [2].ValueNumber ;if _ecgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_ecgd )/(360-_ecgd *_gce ));};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _cbbc (args ,false )};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _eeeb (args ,_bcad )};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_gaace :=[]string {};for _ffce :=range _bdd {_gaace =append (_gaace ,_ffce );};for _bdbe :=range _aagfg {_gaace =append (_gaace ,_bdbe );};_afgb .Strings (_gaace );return _gaace ;};type parsedSearchObject struct{_ae string ;_dgab string ;_bgaaae int ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dgfc :=args [0].AsNumber ();if _dgfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eadb :=_degc .Signbit (_dgfc .ValueNumber );_fcef ,_dabc :=_degc .Modf ((_dgfc .ValueNumber -1)/2);_adbd :=_fcef *2+1;if _dabc !=0{if !_eadb {_adbd +=2;}else {_adbd -=2;};};return MakeNumberResult (_adbd );};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_cbbefc :=args [0];if _cbbefc .Type ==ResultTypeError {return _cbbefc ;};if _cbbefc .Type !=ResultTypeString &&_cbbefc .Type !=ResultTypeNumber &&_cbbefc .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ecdg :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_decfa :=int (args [1].ValueNumber );if _decfa < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_begcg :=int (args [2].ValueNumber );if _begcg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_eggf :=len (_ecdg );if _decfa > _eggf {return MakeStringResult ("");};_decfa --;_ecdgd :=_decfa +_begcg ;if _ecdgd > _eggf +1{return MakeStringResult (_ecdg [_decfa :]);}else {return MakeStringResult (_ecdg [_decfa :_ecdgd ]);};};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bfbff string };

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_caegg :=len (args );if _caegg < 2||_caegg > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eebfc :=args [0];if _eebfc .Type !=ResultTypeArray &&_eebfc .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cafe :=args [1].AsNumber ();if _cafe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ecad :=int (_cafe .ValueNumber )-1;_bagdg :=-1;if _caegg ==3&&args [2].Type !=ResultTypeEmpty {_cfbga :=args [2].AsNumber ();if _cfbga .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bagdg =int (_cfbga .ValueNumber )-1;};if _ecad ==-1&&_bagdg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _abec []Result ;if _eebfc .Type ==ResultTypeArray {_bfad :=_eebfc .ValueArray ;if _ecad < -1||_ecad >=len (_bfad ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ecad ==-1{if _bagdg >=len (_bfad [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_fgca :=[][]Result {};for _ ,_ebaa :=range _bfad {_fdf :=_ebaa [_bagdg ];if _fdf .Type ==ResultTypeEmpty {_fdf =MakeNumberResult (0);};_fgca =append (_fgca ,[]Result {_fdf });};return MakeArrayResult (_fgca );};_abec =_bfad [_ecad ];}else {_adae :=_eebfc .ValueList ;if _ecad < -1||_ecad >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ecad ==-1{if _bagdg >=len (_adae ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bcge :=_adae [_bagdg ];if _bcge .Type ==ResultTypeEmpty {_bcge =MakeNumberResult (0);};return _bcge ;};_abec =_adae ;};if _bagdg < -1||_bagdg > len (_abec ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bagdg ==-1{_gadee :=[]Result {};for _ ,_caac :=range _abec {if _caac .Type ==ResultTypeEmpty {_gadee =append (_gadee ,MakeNumberResult (0));}else {_gadee =append (_gadee ,_caac );};};return MakeArrayResult ([][]Result {_gadee });};_cdff :=_abec [_bagdg ];if _cdff .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _cdff ;};func (_fcfed *yyParserImpl )Parse (yylex yyLexer )int {var _daga int ;var _ebcb yySymType ;var _accf []yySymType ;_ =_accf ;_ffgfg :=_fcfed ._gcgff [:];Nerrs :=0;Errflag :=0;_gceg :=0;_fcfed ._ggfg =-1;_agdb :=-1;defer func (){_gceg =-1;_fcfed ._ggfg =-1;_agdb =-1}();_gbcd :=-1;goto _fbdf ;_fbfgg :return 0;_fgbb :return 1;_fbdf :if _fed >=4{_ddaf .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_gfbe (_agdb ),_efgc (_gceg ));};_gbcd ++;if _gbcd >=len (_ffgfg ){_cgag :=make ([]yySymType ,len (_ffgfg )*2);copy (_cgag ,_ffgfg );_ffgfg =_cgag ;};_ffgfg [_gbcd ]=_ebcb ;_ffgfg [_gbcd ]._bgbccd =_gceg ;_g :_daga =_gebd [_gceg ];if _daga <=_ggced {goto _aacb ;};if _fcfed ._ggfg < 0{_fcfed ._ggfg ,_agdb =_ecgfd (yylex ,&_fcfed ._gacb );};_daga +=_agdb ;if _daga < 0||_daga >=_abge {goto _aacb ;};_daga =_fbbg [_daga ];if _fbac [_daga ]==_agdb {_fcfed ._ggfg =-1;_agdb =-1;_ebcb =_fcfed ._gacb ;_gceg =_daga ;if Errflag > 0{Errflag --;};goto _fbdf ;};_aacb :_daga =_aggb [_gceg ];if _daga ==-2{if _fcfed ._ggfg < 0{_fcfed ._ggfg ,_agdb =_ecgfd (yylex ,&_fcfed ._gacb );};_bceba :=0;for {if _gge [_bceba +0]==-1&&_gge [_bceba +1]==_gceg {break ;};_bceba +=2;};for _bceba +=2;;_bceba +=2{_daga =_gge [_bceba +0];if _daga < 0||_daga ==_agdb {break ;};};_daga =_gge [_bceba +1];if _daga < 0{goto _fbfgg ;};};if _daga ==0{switch Errflag {case 0:yylex .Error (_dade (_gceg ,_agdb ));Nerrs ++;if _fed >=1{_ddaf .Printf ("\u0025\u0073",_efgc (_gceg ));_ddaf .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_gfbe (_agdb ));};fallthrough;case 1,2:Errflag =3;for _gbcd >=0{_daga =_gebd [_ffgfg [_gbcd ]._bgbccd ]+_afaeb ;if _daga >=0&&_daga < _abge {_gceg =_fbbg [_daga ];if _fbac [_gceg ]==_afaeb {goto _fbdf ;};};if _fed >=2{_ddaf .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ffgfg [_gbcd ]._bgbccd );};_gbcd --;};goto _fgbb ;case 3:if _fed >=2{_ddaf .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_gfbe (_agdb ));};if _agdb ==_ddcbf {goto _fgbb ;};_fcfed ._ggfg =-1;_agdb =-1;goto _g ;};};if _fed >=2{_ddaf .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_daga ,_efgc (_gceg ));};_agd :=_daga ;_ccee :=_gbcd ;_ =_ccee ;_gbcd -=_fdda [_daga ];if _gbcd +1>=len (_ffgfg ){_fgaeb :=make ([]yySymType ,len (_ffgfg )*2);copy (_fgaeb ,_ffgfg );_ffgfg =_fgaeb ;};_ebcb =_ffgfg [_gbcd +1];_daga =_gcee [_daga ];_adac :=_fafg [_daga ];_cdcb :=_adac +_ffgfg [_gbcd ]._bgbccd +1;if _cdcb >=_abge {_gceg =_fbbg [_adac ];}else {_gceg =_fbbg [_cdcb ];if _fbac [_gceg ]!=-_daga {_gceg =_fbbg [_adac ];};};switch _agd {case 1:_accf =_ffgfg [_ccee -1:_ccee +1];{yylex .(*plex )._cfdb =_ebcb ._decce ;};case 3:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =_accf [2]._decce ;};case 4:_accf =_ffgfg [_ccee -4:_ccee +1];{};case 5:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewBool (_accf [1]._acbf ._fgb );};case 6:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewNumber (_accf [1]._acbf ._fgb );};case 7:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewString (_accf [1]._acbf ._fgb );};case 8:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewError (_accf [1]._acbf ._fgb );};case 9:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =_accf [2]._decce ;};case 10:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =NewNegate (_accf [2]._decce );};case 15:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =_accf [2]._decce ;};case 17:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewConstArrayExpr (_accf [2]._fbga );};case 18:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._fbga =append (_ebcb ._fbga ,_accf [1]._ffdf );};case 19:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._fbga =append (_accf [1]._fbga ,_accf [3]._ffdf );};case 20:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._ffdf =append (_ebcb ._ffdf ,_accf [1]._decce );};case 21:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._ffdf =append (_accf [1]._ffdf ,_accf [3]._decce );};case 23:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =NewPrefixExpr (_accf [1]._decce ,_accf [2]._decce );};case 25:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewSheetPrefixExpr (_accf [1]._acbf ._fgb );};case 26:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewCellRef (_accf [1]._acbf ._fgb );};case 27:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewRange (_accf [1]._decce ,_accf [3]._decce );};case 28:_accf =_ffgfg [_ccee -4:_ccee +1];{_ebcb ._decce =NewPrefixRangeExpr (_accf [1]._decce ,_accf [2]._decce ,_accf [4]._decce );};case 29:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewNamedRangeRef (_accf [1]._acbf ._fgb );};case 30:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewHorizontalRange (_accf [1]._acbf ._fgb );};case 31:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._decce =NewVerticalRange (_accf [1]._acbf ._fgb );};case 32:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =NewPrefixHorizontalRange (_accf [1]._decce ,_accf [2]._acbf ._fgb );};case 33:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =NewPrefixVerticalRange (_accf [1]._decce ,_accf [2]._acbf ._fgb );};case 34:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypePlus ,_accf [3]._decce );};case 35:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeMinus ,_accf [3]._decce );};case 36:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeMult ,_accf [3]._decce );};case 37:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeDiv ,_accf [3]._decce );};case 38:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeExp ,_accf [3]._decce );};case 39:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeLT ,_accf [3]._decce );};case 40:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeGT ,_accf [3]._decce );};case 41:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeLEQ ,_accf [3]._decce );};case 42:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeGEQ ,_accf [3]._decce );};case 43:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeEQ ,_accf [3]._decce );};case 44:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeNE ,_accf [3]._decce );};case 45:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewBinaryExpr (_accf [1]._decce ,BinOpTypeConcat ,_accf [3]._decce );};case 47:_accf =_ffgfg [_ccee -2:_ccee +1];{_ebcb ._decce =NewFunction (_accf [1]._acbf ._fgb ,nil );};case 48:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._decce =NewFunction (_accf [1]._acbf ._fgb ,_accf [2]._ffdf );};case 49:_accf =_ffgfg [_ccee -1:_ccee +1];{_ebcb ._ffdf =append (_ebcb ._ffdf ,_accf [1]._decce );};case 50:_accf =_ffgfg [_ccee -3:_ccee +1];{_ebcb ._ffdf =append (_accf [1]._ffdf ,_accf [3]._decce );};case 53:_accf =_ffgfg [_ccee -0:_ccee +1];{_ebcb ._decce =NewEmptyExpr ();};};goto _fbdf ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {pfx ,exp }};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_adbc :=_abcg .ToLower (args [0].ValueString );if !_cadca (_adbc ){_ ,_ ,_ ,_ ,_eceg ,_efdb :=_baegd (_adbc );if _efdb .Type ==ResultTypeError {_efdb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _efdb ;};if _eceg {return MakeNumberResult (0);};};_eceba ,_bbgcc ,_gacf ,_ ,_cbacc :=_dcb (_adbc );if _cbacc .Type ==ResultTypeError {return _cbacc ;};return MakeNumberResult (_edcg (_eceba ,_bbgcc ,_gacf ));};func _cgdggc (_efgf ,_fgdg float64 ,_fcacc ,_dgdd int )float64 {_ffa :=_eefcf (_efgf );_bfaba :=_eefcf (_fgdg );_daeg :=_bbfedg (_ffa ,_bfaba ,_fcacc ,_dgdd );return _aeea (_daeg ,_ffa ,_dgdd );};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caacg :=true ;for _ ,_aabb :=range args {_aabb =_aabb .AsNumber ();switch _aabb .Type {case ResultTypeList ,ResultTypeArray :_fedf :=And (_aabb .ListValues ());if _fedf .Type ==ResultTypeError {return _fedf ;};if _fedf .ValueNumber ==0{_caacg =false ;};case ResultTypeNumber :if _aabb .ValueNumber ==0{_caacg =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _aabb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_caacg );};func (_fbg node )String ()string {return _ddaf .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_fbg ._bga ,_dgffb (string (_fbg ._fgb )));};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_egcgd :=_cbaa .Now ();_ ,_ggfgd :=_egcgd .Zone ();_cebe :=_gfgde +float64 (_egcgd .Unix ()+int64 (_ggfgd ))/86400;return MakeNumberResult (_cebe );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};const _fegg =57370;const _acgc ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_deag +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdac :=args [0].AsNumber ();_cbce :=args [1].AsNumber ();_gfd :=args [2].AsNumber ();_deef :=args [3].ListValues ();if _fdac .Type !=ResultTypeNumber ||_cbce .Type !=ResultTypeNumber ||_gfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cbcab :=float64 (0);for _fage ,_fee :=range _deef {_cbcab +=_fee .ValueNumber *_degc .Pow (_fdac .ValueNumber ,_cbce .ValueNumber +float64 (_fage )*_gfd .ValueNumber );};return MakeNumberResult (_cbcab );};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_cadd ,_aag ,_ccd :=_fdaf (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _ccd .Type ==ResultTypeError {return _ccd ;};if _cadd ==0{return MakeNumberResult (0);};_cdf :=_cadd < 0;if _cdf {_cadd =-_cadd ;};_ddad :=float64 (int (_cadd ));_ccf :=args [0].Value ();_ddffg :=_abcg .Split (_ccf ,"\u002e");_eddg :=_ddffg [1];_fagd ,_dda :=_eggd .ParseFloat (_eddg ,64);if _dda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_cff :=float64 (len (_eddg ));_fagd /=_degc .Pow (10,_cff );_acb :=_fagd *_aag /_degc .Pow (10,float64 (int (_degc .Log10 (_aag )))+1)+_ddad ;if _cdf {_acb =-_acb ;};return MakeNumberResult (_acb );};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_efac :=args [0].Ref ;if _efac .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_ffbe ,_egdfg :=_dfbf .ParseCellReference (_efac .Value );if _egdfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_efac .Value );};return MakeNumberResult (float64 (_ffbe .RowIdx ));};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caddg :=args [0].AsNumber ();if _caddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _caddg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_aea :=float64 (1);_gaggg :=_degc .Trunc (_caddg .ValueNumber );for _fbfba :=_gaggg ;_fbfba > 1;_fbfba -=2{_aea *=_fbfba ;};return MakeNumberResult (_aea );};